{"instance_id": "47ee1dae200b", "generation_result": [{"code": "public static void PreloadDll(string dllName)\tstring dllPath = null;\n\tif (System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform(System.Runtime.InteropServices.OSPlatform.Windows)) {\n\t\tdllPath = System.IO.Path.Combine(System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location), dllName);\n\t\tif (!System.IO.File.Exists(dllPath)) {\n\t\t\tdllPath = System.IO.Path.Combine(System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetEntryAssembly().Location), dllName);\n\t\t}\n\t}\n\telse {\n\t\tdllPath = System.IO.Path.Combine(System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetEntryAssembly().Location), dllName);\n\t\tif (!System.IO.File.Exists(dllPath)) {\n\t\t\tdllPath = System.IO.Path.Combine(System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location), dllName);\n\t\t}\n\t}\n\tSystem.Runtime.InteropServices.NativeLibrary.Load(dllPath);\n}\n", "CodeBleu_score": 41.03769521424193}, {"code": "public static void PreloadDll(string dllName)\tif (dllName == null) {\n\t\tthrow new ArgumentNullException(\"dllName\");\n\t}\n\tif (dllName.Length == 0) {\n\t\tthrow new ArgumentException(\"dllName\");\n\t}\n\n\tif (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n\t\tWin32.LoadLibrary(dllName);\n\t} else {\n\t\tPosix.dlopen(dllName, Posix.RTLD_NOW);\n\t}\n}\n", "CodeBleu_score": 36.07370943203253}, {"code": "public static void PreloadDll(string dllName)\tif (dllName == null) throw new ArgumentNullException(\"dllName\");\n\tif (dllName == \"\") throw new ArgumentException(\"dllName cannot be empty.\", \"dllName\");\n\tstring dllDirectory = GetDllDirectory();\n\tif (dllDirectory == null) throw new InvalidOperationException(\"Unable to determine the DLL directory.\");\n\tif (dllDirectory.Length == 0) throw new InvalidOperationException(\"Unable to determine the DLL directory.\");\n\tstring dllPath = dllDirectory + Path.DirectorySeparatorChar + dllName;\n\tif (Environment.OSVersion.Platform == PlatformID.Win32NT) {\n\t\tWin32.LoadLibrary(dllPath);\n\t} else {\n\t\tPosix.dlopen(dllPath, Posix.RTLD_NOW);\n\t}\n}\n", "CodeBleu_score": 37.23936459914035}]}
{"instance_id": "2073a8291d05", "generation_result": [{"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null)\tif (assets.Contains(reader)) {\n\t\treturn;\n\t}\n\n\t// Create a SerializedFile instance\n\tSerializedFile file = new SerializedFile(reader, originalPath, unityVersion);\n\n\t// Add the SerializedFile instance to the list\n\tassets.Add(file);\n\n\t// Set the SerializedFile version if needed\n\tif (file.version < 0) {\n\t\tfile.SetVersion(reader);\n\t}\n\n\t// Check for errors\n\tif (file.version < 0) {\n\t\tLog.Error(\"Failed to load assets from memory: \" + file.path);\n\t\treturn;\n\t}\n\n\t// Load assets from the SerializedFile\n\tif (file.version >= 13) {\n\t\tLoadAssetsFromMemory_Format13(file);\n\t} else if (file.version >= 12) {\n\t\tLoadAssetsFromMemory_Format12(file);\n\t} else if (file.version >= 11) {\n\t\tLoadAssetsFromMemory_Format11(file);\n\t} else if (file.version >= 10) {\n\t\tLoadAssetsFromMemory_Format10(file);\n\t} else if (file.version >= 8) {\n\t\tLoadAssetsFromMemory_Format8(file);\n\t} else if (file.version >= 6) {\n\t\tLoadAssetsFromMemory_Format6(file);\n\t} else if (file.version >= 5) {\n\t\tLoadAssetsFromMemory_Format5(file);\n\t} else if (file.version >= 4) {\n\t\tLoadAssetsFromMemory_Format4(file);\n\t} else if (file.version >= 3) {\n\t\tLoadAssetsFromMemory_Format3(file);\n\t} else if (file.version >= 2) {\n\t\tLoadAssetsFromMemory_Format2(file);\n\t} else {\n\t\tLog.Error(\"Unsupported assets file format: \" + file.path);\n\t}\n}\n", "CodeBleu_score": 29.33158534271594}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null)\tif (!string.IsNullOrEmpty(originalPath)) {\n\t\toriginalPath = originalPath.Replace(\"\\\\\", \"/\");\n\t\tif (!originalPath.StartsWith(\"assets/\")) {\n\t\t\toriginalPath = \"assets/\" + originalPath;\n\t\t}\n\t}\n\tstring path = originalPath;\n\tif (string.IsNullOrEmpty(path)) {\n\t\tpath = reader.name;\n\t}\n\tif (string.IsNullOrEmpty(path)) {\n\t\tpath = \"memory\";\n\t}\n\tif (string.IsNullOrEmpty(path)) {\n\t\tpath = \"memory\";\n\t}\n\tif (string.IsNullOrEmpty(path)) {\n\t\tpath = \"memory\";\n\t}\n\tif (string.IsNullOrEmpty(path)) {\n\t\tpath = \"memory\";\n\t}\n\tif (string.IsNullOrEmpty(path)) {\n\t\tpath = \"memory\";\n\t}\n\tif (string.IsNullOrEmpty(path)) {\n\t\tpath = \"memory\";\n\t}\n\tif (string.IsNullOrEmpty(path)) {\n\t\tpath = \"memory\";\n\t}\n\tif (string.IsNullOrEmpty(path)) {\n\t\tpath = \"memory\";\n\t}\n\tif (string.IsNullOrEmpty(path)) {\n\t\tpath = \"memory\";\n\t}\n\tif (string.IsNullOrEmpty(path)) {\n\t\tpath = \"memory\";\n\t}\n\tif (string.IsNullOrEmpty(path)) {\n\t\tpath = \"memory\";\n\t}\n\tif (string.IsNullOrEmpty(path)) {\n\t\tpath = \"memory\";\n\t}\n\tif (string.IsNullOrEmpty(path)) {\n\t\tpath = \"memory\";\n\t}\n\tif (string.IsNullOrEmpty(path)) {\n\t\tpath = \"memory\";\n\t}\n\tif (string.IsNullOrEmpty(path)) {\n\t\tpath = \"memory\";\n\t}\n\tif (string.IsNullOrEmpty(path)) {\n\t\tpath = \"memory\";\n\t}\n\tif (string.IsNullOrEmpty(path)) {\n\t\tpath = \"memory\";\n\t}\n\tif (string.IsNullOrEmpty(path)) {\n\t\tpath = \"memory\";\n\t}\n\tif (string.IsNullOrEmpty(path)) {\n\t\tpath = \"memory\";\n\t}\n\tif (string.IsNullOrEmpty(path)) {\n\t\tpath = \"memory\";\n\t}\n\tif (string.IsNullOrEmpty", "CodeBleu_score": 25.582327767195036}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null)\tif (reader == null) {\n\t\treturn;\n\t}\n\n\tstring path = originalPath;\n\tif (path.StartsWith(\"res://\")) {\n\t\tpath = path.Substring(6);\n\t}\n\n\tif (path.StartsWith(\"Assets/\")) {\n\t\tpath = path.Substring(7);\n\t}\n\n\tif (path.StartsWith(\"assetbundle\")) {\n\t\tpath = path.Substring(11);\n\t}\n\n\tif (path.StartsWith(\"AssetBundles\")) {\n\t\tpath = path.Substring(12);\n\t}\n\n\tif (path.StartsWith(\"assets\")) {\n\t\tpath = path.Substring(6);\n\t}\n\n\tif (path.StartsWith(\"Assets\")) {\n\t\tpath = path.Substring(7);\n\t}\n\n\tif (path.StartsWith(\"assetbundles\")) {\n\t\tpath = path.Substring(11);\n\t}\n\n\tif (path.StartsWith(\"AssetBundles\")) {\n\t\tpath = path.Substring(12);\n\t}\n\n\tif (path.StartsWith(\"assets/\")) {\n\t\tpath = path.Substring(7);\n\t}\n\n\tif (path.StartsWith(\"Assets/\")) {\n\t\tpath = path.Substring(7);\n\t}\n\n\tif (path.StartsWith(\"assetbundle/\")) {\n\t\tpath = path.Substring(11);\n\t}\n\n\tif (path.StartsWith(\"AssetBundles/\")) {\n\t\tpath = path.Substring(12);\n\t}\n\n\tif (path.StartsWith(\"assets/\")) {\n\t\tpath = path.Substring(7);\n\t}\n\n\tif (path.StartsWith(\"Assets/\")) {\n\t\tpath = path.Substring(7);\n\t}\n\n\tif (path.StartsWith(\"assetbundle/\")) {\n\t\tpath = path.Substring(11);\n\t}\n\n\tif (path.StartsWith(\"AssetBundles/\")) {\n\t\tpath = path.Substring(12);\n\t}\n\n\tif (path.StartsWith(\"assets/\")) {\n\t\tpath = path.Substring(7);\n\t}\n\n\tif (path.StartsWith(\"Assets/\")) {\n\t\tpath = path.Substring(7);\n\t}\n\n\tif (path.StartsWith(\"assetbundle/\")) {\n\t\tpath = path.Substring(11);\n", "CodeBleu_score": 23.141695467778085}]}
{"instance_id": "5dacc6a26301", "generation_result": [{"code": "public ImportedFrame FindFrameByPath(string path)\tif (string.IsNullOrEmpty(path))\n\t\treturn null;\n\tstring name = path.Split('/').Last();\n\treturn FindFrameByName(name);\n}\n", "CodeBleu_score": 16.275000903494576}, {"code": "public ImportedFrame FindFrameByPath(string path)\tImportedFrame frame = null;\n\tstring name = path.Substring(path.LastIndexOf('/') + 1);\n\tfor (int i = 0; i < transform.childCount; i++) {\n\t\tImportedFrame childFrame = transform.GetChild(i).GetComponent<ImportedFrame>();\n\t\tif (childFrame!= null && childFrame.name == name) {\n\t\t\tframe = childFrame;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn frame;\n}\n", "CodeBleu_score": 53.002045906170856}, {"code": "public ImportedFrame FindFrameByPath(string path)\tif (path == null) {\n\t\treturn null;\n\t}\n\tstring[] pathElements = path.Split(new char[] { '/' });\n\tstring frameName = pathElements[pathElements.Length - 1];\n\tImportedFrame frame = null;\n\tif (frameName == \"\") {\n\t\treturn null;\n\t}\n\tfor (int i = 0; i < frames.Length; i++) {\n\t\tif (frames[i].name == frameName) {\n\t\t\tframe = frames[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (frame == null) {\n\t\treturn null;\n\t}\n\tif (pathElements.Length == 1) {\n\t\treturn frame;\n\t}\n\tstring parentPath = \"\";\n\tfor (int i = 0; i < pathElements.Length - 1; i++) {\n\t\tparentPath += pathElements[i];\n\t\tif (i!= pathElements.Length - 2) {\n\t\t\tparentPath += \"/\";\n\t\t}\n\t}\n\tImportedFrame parentFrame = FindFrameByPath(parentPath);\n\tif (parentFrame == null) {\n\t\treturn null;\n\t}\n\tfor (int i = 0; i < parentFrame.childFrames.Length; i++) {\n\t\tif (parentFrame.childFrames[i] == frame) {\n\t\t\treturn frame;\n\t\t}\n\t}\n\treturn null;\n}\n", "CodeBleu_score": 46.93435747742474}]}
{"instance_id": "c20b04c4ad37", "generation_result": [{"code": "public static FileReader DecompressGZip(FileReader reader)\tMemoryStream memoryStream = new MemoryStream();\n\tGZipStream gzipStream = new GZipStream(reader.BaseStream, CompressionMode.Decompress);\n\tgzipStream.CopyTo(memoryStream);\n\tmemoryStream.Position = 0;\n\treturn new FileReader(memoryStream);\n}\n", "CodeBleu_score": 53.46774966842474}, {"code": "public static FileReader DecompressGZip(FileReader reader)\tMemoryStream ms = new MemoryStream();\n\tGZipStream gs = new GZipStream(reader.BaseStream, CompressionMode.Decompress);\n\tgs.CopyTo(ms);\n\tgs.Close();\n\tms.Seek(0, SeekOrigin.Begin);\n\treturn new FileReader(ms);\n}\n", "CodeBleu_score": 39.11419117772641}, {"code": "public static FileReader DecompressGZip(FileReader reader)\tMemoryStream ms = new MemoryStream();\n\tusing (GZipStream gzip = new GZipStream(reader.BaseStream, CompressionMode.Decompress)) {\n\t\tgzip.CopyTo(ms);\n\t}\n\treturn new FileReader(ms);\n}\n", "CodeBleu_score": 37.85010474519649}]}
{"instance_id": "11ce5c7b009d", "generation_result": [{"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings)\tList<string> nonSwitchStrings = new List<string>();\n\tforeach (string commandString in commandStrings) {\n\t\tif (ParseString(switchForms, commandString, nonSwitchStrings)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tnonSwitchStrings.Sort();\n\tnonSwitchStrings.TrimExcess();\n\tnonSwitchStrings.ForEach(delegate(string nonSwitchString) {\n\t\tConsole.WriteLine(nonSwitchString);\n\t});\n}\n", "CodeBleu_score": 35.89978144166175}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings)\tstring[] switchTokens = new string[switchForms.Length];\n\tfor (int i = 0; i < switchForms.Length; i++) {\n\t\tswitchTokens[i] = switchForms[i].SwitchToken;\n\t}\n\tParseStrings(switchTokens, commandStrings);\n}\n", "CodeBleu_score": 43.134951336614144}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings)\t// Initialize the non-switch strings collection.\n\tnonSwitchStrings = new List<string>();\n\n\t// Initialize the switch collection.\n\tswitches = new List<Switch>();\n\n\t// Initialize the switch index.\n\tswitchIndex = 0;\n\n\t// Iterate through the command strings.\n\tforeach (string commandString in commandStrings) {\n\t\t// If the command string is a stop token, stop parsing switches.\n\t\tif (commandString == stopToken) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// If the command string is a switch, add it to the switch collection.\n\t\tif (commandString.StartsWith(switchPrefix)) {\n\t\t\tswitches.Add(new Switch(commandString));\n\t\t}\n\t\t// Otherwise, add it to the non-switch strings collection.\n\t\telse {\n\t\t\tnonSwitchStrings.Add(commandString);\n\t\t}\n\t}\n\n\t// Iterate through the switch forms.\n\tforeach (SwitchForm switchForm in switchForms) {\n\t\t// If the switch form has a switch name, iterate through the switches.\n\t\tif (switchForm.switchName!= null) {\n\t\t\tforeach (Switch switch_ in switches) {\n\t\t\t\t// If the switch name matches the switch form switch name,\n\t\t\t\t// add the switch form switch value to the switch.\n\t\t\t\tif (switch_.name == switchForm.switchName) {\n\t\t\t\t\tswitch_.values.Add(switchForm.switchValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n", "CodeBleu_score": 33.486226995515125}]}
{"instance_id": "b8da2d0a3f76", "generation_result": [{"code": "public Texture2DConverter(Texture2D m_Texture2D)\tm_Width = m_Texture2D.width;\n\tm_Height = m_Texture2D.height;\n\tm_TextureFormat = m_Texture2D.format;\n\tm_Version = m_Texture2D.version;\n\tm_Platform = m_Texture2D.platform;\n\tm_OutputSize = m_Texture2D.outputSize;\n\tm_ImageData = m_Texture2D.GetRawTextureData();\n}\n", "CodeBleu_score": 42.31124766612675}, {"code": "public Texture2DConverter(Texture2D m_Texture2D)\tthis.m_Texture2D = m_Texture2D;\n\tthis.m_Width = m_Texture2D.width;\n\tthis.m_Height = m_Texture2D.height;\n\tthis.m_TextureFormat = m_Texture2D.format;\n\tthis.m_Version = m_Texture2D.version;\n\tthis.m_Platform = EditorUserBuildSettings.activeBuildTarget.ToString();\n\tthis.m_OutputSize = m_Texture2D.GetRawTextureData().Length;\n}\n", "CodeBleu_score": 31.706106005274687}, {"code": "public Texture2DConverter(Texture2D m_Texture2D)\tthis.m_Texture2D = m_Texture2D;\n\tthis.m_Width = m_Texture2D.width;\n\tthis.m_Height = m_Texture2D.height;\n\tthis.m_TextureFormat = m_Texture2D.format;\n\tthis.m_Version = m_Texture2D.version;\n\tthis.m_Platform = m_Texture2D.imageFormat;\n\tthis.m_OutputSize = m_Texture2D.GetRawTextureData().Length;\n}\n", "CodeBleu_score": 33.79484793061949}]}
{"instance_id": "4d1412b550a3", "generation_result": [{"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result)\tresult.Clear();\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tSerializedProperty element = sp.GetArrayElementAtIndex(i);\n\t\tif (element.boolValue) {\n\t\t\tresult.Add(element.FindPropertyRelative(\"name\").stringValue);\n\t\t}\n\t}\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\";\n\t} else {\n\t\treturn string.Join(\", \", result.ToArray());\n\t}\n}\n", "CodeBleu_score": 33.93385717455391}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result)\tresult.Clear();\n\tif (sp == null) return \"Nothing\";\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tSerializedProperty element = sp.GetArrayElementAtIndex(i);\n\t\tif (element.objectReferenceValue!= null) {\n\t\t\tstring name = element.objectReferenceValue.name;\n\t\t\tif (!string.IsNullOrEmpty(name)) result.Add(name);\n\t\t}\n\t}\n\tif (result.Count == 0) return \"Nothing\";\n\tstring names = string.Join(\", \", result.ToArray());\n\treturn names;\n}\n", "CodeBleu_score": 34.15737540958247}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result)\tresult.Clear();\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tSerializedProperty element = sp.GetArrayElementAtIndex(i);\n\t\tstring name = element.FindPropertyRelative(\"m_Name\").stringValue;\n\t\tif (!string.IsNullOrEmpty(name)) {\n\t\t\tresult.Add(name);\n\t\t}\n\t}\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\";\n\t}\n\treturn string.Join(\", \", result.ToArray());\n}\n", "CodeBleu_score": 34.540561277809466}]}
{"instance_id": "5014bde74f8b", "generation_result": [{"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add)\tif (prop.name == null) {\n\t\treturn;\n\t}\n\tif (add) {\n\t\tif (sp.arraySize > 0 && sp.GetArrayElementAtIndex(sp.arraySize - 1).FindPropertyRelative(\"name\").stringValue == prop.name) {\n\t\t\treturn;\n\t\t}\n\t} else {\n\t\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\t\tif (sp.GetArrayElementAtIndex(i).FindPropertyRelative(\"name\").stringValue == prop.name) {\n\t\t\t\tmenu.AddItem(new GUIContent(prop.name), false, () => {\n\t\t\t\t\tif (add) {\n\t\t\t\t\t\tsp.arraySize++;\n\t\t\t\t\t\tsp.GetArrayElementAtIndex(sp.arraySize - 1).FindPropertyRelative(\"name\").stringValue = prop.name;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsp.DeleteArrayElementAtIndex(i);\n\t\t\t\t\t}\n\t\t\t\t\tsp.serializedObject.ApplyModifiedProperties();\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\tmenu.AddItem(new GUIContent(prop.name), false, () => {\n\t\tif (add) {\n\t\t\tsp.arraySize++;\n\t\t\tsp.GetArrayElementAtIndex(sp.arraySize - 1).FindPropertyRelative(\"name\").stringValue = prop.name;\n\t\t} else {\n\t\t\tsp.DeleteArrayElementAtIndex(sp.arraySize - 1);\n\t\t}\n\t\tsp.serializedObject.ApplyModifiedProperties();\n\t});\n}\n", "CodeBleu_score": 40.36844615484432}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add)\tif (sp == null) return;\n\tif (prop.name == null) return;\n\tif (add && prop.name == sp.name) return;\n\tif (!add && prop.name!= sp.name) return;\n\n\tmenu.AddItem(new GUIContent(prop.name), add, AddProperty, new AddPropertyArgs(sp, prop));\n}\n", "CodeBleu_score": 22.4239170446278}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add)\tif (add &&!sp.FindPropertyRelative(prop.name).hasMultipleDifferentValues) {\n\t\tmenu.AddItem(new GUIContent(\"Remove \" + prop.name), false, () => {\n\t\t\tsp.DeleteArrayElementAtIndex(sp.FindPropertyRelative(prop.name).arrayIndex);\n\t\t});\n\t} else if (!add && sp.FindPropertyRelative(prop.name).hasMultipleDifferentValues) {\n\t\tmenu.AddItem(new GUIContent(\"Add \" + prop.name), false, () => {\n\t\t\tsp.DeleteArrayElementAtIndex(sp.FindPropertyRelative(prop.name).arrayIndex);\n\t\t});\n\t} else {\n\t\tmenu.AddItem(new GUIContent(\"Add \" + prop.name), false, () => {\n\t\t\tsp.arraySize++;\n\t\t\tsp.MoveArrayElement(sp.arraySize - 1, sp.arraySize - 2);\n\t\t\tsp.FindPropertyRelative(prop.name).stringValue = prop.name;\n\t\t\tsp.FindPropertyRelative(prop.name + \".type\").intValue = (int)prop.type;\n\t\t});\n\t}\n}\n", "CodeBleu_score": 36.36036453180349}]}
{"instance_id": "20e390481814", "generation_result": [{"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz)\tbool isVector3 = true;\n\tfloat x = sp.vector3Value.x;\n\tfloat y = sp.vector3Value.y;\n\tfloat z = sp.vector3Value.z;\n\tbool showVector3 = showXyz;\n\tif (!showXyz) {\n\t\tif (Mathf.Approximately(x, y) && Mathf.Approximately(x, z)) {\n\t\t\tshowVector3 = false;\n\t\t\tisVector3 = false;\n\t\t\tsp.floatValue = x;\n\t\t}\n\t}\n\tEditorGUI.BeginChangeCheck();\n\tif (showVector3) {\n\t\tEditorGUILayout.PropertyField(sp);\n\t} else {\n\t\tEditorGUILayout.PropertyField(sp, new GUIContent(\" \"));\n\t}\n\tif (EditorGUI.EndChangeCheck()) {\n\t\tif (isVector3) {\n\t\t\tsp.vector3Value = new Vector3(sp.vector3Value.x, sp.vector3Value.x, sp.vector3Value.x);\n\t\t} else {\n\t\t\tsp.vector3Value = new Vector3(sp.floatValue, sp.floatValue, sp.floatValue);\n\t\t}\n\t}\n\tif (showVector3!= showXyz) {\n\t\tshowXyz =!showXyz;\n\t}\n\treturn showXyz;\n}\n", "CodeBleu_score": 36.52246122872278}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz)\tbool isVector3 = false;\n\tfloat x = sp.vector3Value.x;\n\tfloat y = sp.vector3Value.y;\n\tfloat z = sp.vector3Value.z;\n\tif (Mathf.Approximately(x, y) && Mathf.Approximately(x, z)) {\n\t\tEditorGUILayout.BeginHorizontal();\n\t\tEditorGUILayout.PropertyField(sp, new GUIContent(\"Value\"), true);\n\t\tif (showXyz) {\n\t\t\tisVector3 = GUILayout.Toggle(isVector3, \"V\", \"Button\", GUILayout.Width(20));\n\t\t}\n\t\tEditorGUILayout.EndHorizontal();\n\t} else {\n\t\tEditorGUILayout.BeginHorizontal();\n\t\tEditorGUILayout.LabelField(new GUIContent(\"X\"), GUILayout.Width(30));\n\t\tEditorGUILayout.PropertyField(sp.FindPropertyRelative(\"x\"), new GUIContent(\"\"), true);\n\t\tif (showXyz) {\n\t\t\tisVector3 = GUILayout.Toggle(isVector3, \"V\", \"Button\", GUILayout.Width(20));\n\t\t}\n\t\tEditorGUILayout.EndHorizontal();\n\t\tEditorGUILayout.BeginHorizontal();\n\t\tEditorGUILayout.LabelField(new GUIContent(\"Y\"), GUILayout.Width(30));\n\t\tEditorGUILayout.PropertyField(sp.FindPropertyRelative(\"y\"), new GUIContent(\"\"), true);\n\t\tif (showXyz) {\n\t\t\tisVector3 = GUILayout.Toggle(isVector3, \"V\", \"Button\", GUILayout.Width(20));\n\t\t}\n\t\tEditorGUILayout.EndHorizontal();\n\t\tEditorGUILayout.BeginHorizontal();\n\t\tEditorGUILayout.LabelField(new GUIContent(\"Z\"), GUILayout.Width(30));\n\t\tEditorGUILayout.PropertyField(sp.FindPropertyRelative(\"z\"), new GUIContent(\"\"), true);\n\t\tif (showXyz) {\n\t\t\tisVector3 = GUILayout.Toggle(isVector3, \"V\", \"Button\", GUILayout.Width(20));\n\t\t}\n\t\tEditorGUILayout.EndHorizontal();\n\t}\n\tif (isVector3) {\n\t\tsp.vector3Value = new Vector3(x, y, z);\n\t} else {\n\t\tsp.vector3Value = new Vector3(x, x, x);\n\t}\n\treturn isVector3;\n}\n", "CodeBleu_score": 38.63499532694839}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz)\tif (sp == null) {\n\t\treturn false;\n\t}\n\tRect rect = sp.rect;\n\tbool isVector3 = false;\n\tfloat[] values = new float[3];\n\tfor (int i = 0; i < values.Length; i++) {\n\t\tvalues[i] = sp.vector3Value[i];\n\t}\n\tif (Mathf.Approximately(values[0], values[1]) && Mathf.Approximately(values[1], values[2])) {\n\t\tisVector3 = false;\n\t\trect.width *= 0.5f;\n\t} else {\n\t\tisVector3 = true;\n\t\trect.width *= 0.3333333f;\n\t}\n\tif (showXyz) {\n\t\tisVector3 = EditorGUI.Toggle(rect, isVector3);\n\t}\n\tif (isVector3) {\n\t\tEditorGUI.BeginChangeCheck();\n\t\tVector3 v = EditorGUI.Vector3Field(rect, GUIContent.none, sp.vector3Value);\n\t\tif (EditorGUI.EndChangeCheck()) {\n\t\t\tsp.vector3Value = v;\n\t\t\treturn true;\n\t\t}\n\t} else {\n\t\tEditorGUI.BeginChangeCheck();\n\t\tfloat v = EditorGUI.FloatField(rect, GUIContent.none, sp.vector3Value.x);\n\t\tif (EditorGUI.EndChangeCheck()) {\n\t\t\tsp.vector3Value = new Vector3(v, v, v);\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n", "CodeBleu_score": 32.19394188435879}]}
{"instance_id": "c3587cbcda7e", "generation_result": [{"code": "public static Material Add(Material baseMat, Texture texture, int id, int props)\tMaterial mat = null;\n\tMaterial[] mats = FindAll(baseMat, texture, id, props);\n\tif(mats.Length > 0) {\n\t\tmat = mats[0];\n\t\tmat.name = baseMat.name + \" \" + texture.name + \" \" + id + \" \" + props;\n\t\tmat.mainTexture = texture;\n\t\tmat.SetInt(\"_ID\", id);\n\t\tmat.SetInt(\"_Props\", props);\n\t} else {\n\t\tmat = new Material(baseMat);\n\t\tmat.name = baseMat.name + \" \" + texture.name + \" \" + id + \" \" + props;\n\t\tmat.mainTexture = texture;\n\t\tmat.SetInt(\"_ID\", id);\n\t\tmat.SetInt(\"_Props\", props);\n\t\tmats = new Material[customMats.Count + 1];\n\t\tcustomMats.CopyTo(mats);\n\t\tmats[customMats.Count] = mat;\n\t\tcustomMats = new List<Material>(mats);\n\t}\n\treturn mat;\n}\n", "CodeBleu_score": 29.543229574448056}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props)\treturn Material.Add(baseMat, texture, id, props);\n}\n", "CodeBleu_score": 11.42141532496963}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props)\tMaterial mat = null;\n\tint index = -1;\n\tif (baseMat!= null) {\n\t\tfor (int i = 0; i < baseMat.Length; i++) {\n\t\t\tif (baseMat[i].texture == texture && baseMat[i].id == id && baseMat[i].props == props) {\n\t\t\t\tmat = baseMat[i];\n\t\t\t\tindex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif (mat == null) {\n\t\tmat = new Material();\n\t\tmat.texture = texture;\n\t\tmat.id = id;\n\t\tmat.props = props;\n\t\tif (baseMat!= null) {\n\t\t\tbaseMat.Add(mat);\n\t\t}\n\t}\n\tmat.count++;\n\treturn mat;\n}\n", "CodeBleu_score": 30.614226629215075}]}
{"instance_id": "a35149bc8b8b", "generation_result": [{"code": "public static void Remove(Material customMat)\tif (customMat == null) {\n\t\tDebug.LogWarning(\"Custom material is null.\");\n\t\treturn;\n\t}\n\n\tif (customMat.name == \"Custom/Diffuse\") {\n\t\tDebug.LogWarning(\"Cannot remove the default diffuse material.\");\n\t\treturn;\n\t}\n\n\tif (customMat.name == \"Custom/Bumped Diffuse\") {\n\t\tDebug.LogWarning(\"Cannot remove the default bumped diffuse material.\");\n\t\treturn;\n\t}\n\n\tif (customMat.name == \"Custom/Specular\") {\n\t\tDebug.LogWarning(\"Cannot remove the default specular material.\");\n\t\treturn;\n\t}\n\n\tif (customMat.name == \"Custom/Bumped Specular\") {\n\t\tDebug.LogWarning(\"Cannot remove the default bumped specular material.\");\n\t\treturn;\n\t}\n\n\tif (customMat.name == \"Custom/Emissive\") {\n\t\tDebug.LogWarning(\"Cannot remove the default emissive material.\");\n\t\treturn;\n\t}\n\n\tif (customMat.name == \"Custom/Bumped Emissive\") {\n\t\tDebug.LogWarning(\"Cannot remove the default bumped emissive material.\");\n\t\treturn;\n\t}\n\n\tif (customMat.name == \"Custom/Transparent\") {\n\t\tDebug.LogWarning(\"Cannot remove the default transparent material.\");\n\t\treturn;\n\t}\n\n\tif (customMat.name == \"Custom/Bumped Transparent\") {\n\t\tDebug.LogWarning(\"Cannot remove the default bumped transparent material.\");\n\t\treturn;\n\t}\n\n\tif (customMat.name == \"Custom/Cutout\") {\n\t\tDebug.LogWarning(\"Cannot remove the default cutout material.\");\n\t\treturn;\n\t}\n\n\tif (customMat.name == \"Custom/Bumped Cutout\") {\n\t\tDebug.LogWarning(\"Cannot remove the default bumped cutout material.\");\n\t\treturn;\n\t}\n\n\tif (customMat.name == \"Custom/Cutout Transparent\") {\n\t\tDebug.LogWarning(\"Cannot remove the default cutout transparent material.\");\n\t\treturn;\n\t}\n\n\tif (customMat.name == \"Custom/Bumped Cutout Transparent\") {\n\t\tDebug.LogWarning(\"Cannot remove the default bumped cutout transparent material.\");\n\t\treturn;\n\t}\n\n\tif", "CodeBleu_score": 21.260981109350457}, {"code": "public static void Remove(Material customMat)\tif (customMat == null)\n\t\treturn;\n\n\tint index = -1;\n\tfor (int i = 0; i < _customMats.Count; i++) {\n\t\tif (_customMats[i].customMat == customMat) {\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (index == -1)\n\t\treturn;\n\n\t_customMats[index].count--;\n\tif (_customMats[index].count == 0) {\n\t\tDestroy(customMat);\n\t\t_customMats[index].customMat = null;\n\t\t_customMats[index].data = null;\n\t\t_customMats.RemoveAt(index);\n\t}\n}\n", "CodeBleu_score": 33.134813065633494}, {"code": "public static void Remove(Material customMat)\tif (customMat == null) {\n\t\treturn;\n\t}\n\tif (customMat.name.Length < 1) {\n\t\treturn;\n\t}\n\tif (customMat.name[0]!= '!') {\n\t\treturn;\n\t}\n\tif (customMat.name.Length < 2) {\n\t\treturn;\n\t}\n\tif (customMat.name[1]!= '!') {\n\t\treturn;\n\t}\n\tif (customMat.name.Length < 3) {\n\t\treturn;\n\t}\n\tif (customMat.name[2]!= '!') {\n\t\treturn;\n\t}\n\tif (customMat.name.Length < 4) {\n\t\treturn;\n\t}\n\tif (customMat.name[3]!= '!') {\n\t\treturn;\n\t}\n\tif (customMat.name.Length < 5) {\n\t\treturn;\n\t}\n\tif (customMat.name[4]!= '!') {\n\t\treturn;\n\t}\n\tif (customMat.name.Length < 6) {\n\t\treturn;\n\t}\n\tif (customMat.name[5]!= '!') {\n\t\treturn;\n\t}\n\tif (customMat.name.Length < 7) {\n\t\treturn;\n\t}\n\tif (customMat.name[6]!= '!') {\n\t\treturn;\n\t}\n\tif (customMat.name.Length < 8) {\n\t\treturn;\n\t}\n\tif (customMat.name[7]!= '!') {\n\t\treturn;\n\t}\n\tif (customMat.name.Length < 9) {\n\t\treturn;\n\t}\n\tif (customMat.name[8]!= '!') {\n\t\treturn;\n\t}\n\tif (customMat.name.Length < 10) {\n\t\treturn;\n\t}\n\tif (customMat.name[9]!= '!') {\n\t\treturn;\n\t}\n\tif (customMat.name.Length < 11) {\n\t\treturn;\n\t}\n\tif (customMat.name[10]!= '!') {\n\t\treturn;\n\t}\n\tif (customMat.name.", "CodeBleu_score": 21.786080927700073}]}
{"instance_id": "892bbee52ab9", "generation_result": [{"code": "private void RefreshParticles(GameObject root)\t// Collect all child particle systems\n\tList<ParticleSystem> particleSystems = new List<ParticleSystem>();\n\tforeach (Transform child in root.transform) {\n\t\tParticleSystem particleSystem = child.GetComponent<ParticleSystem>();\n\t\tif (particleSystem!= null) {\n\t\t\tparticleSystems.Add(particleSystem);\n\t\t}\n\t}\n\n\t// Remove any particle systems that aren't associated with this UIParticle instance\n\tfor (int i = particleSystems.Count - 1; i >= 0; i--) {\n\t\tif (particleSystems[i].uiParticle!= this) {\n\t\t\tDestroy(particleSystems[i].gameObject);\n\t\t\tparticleSystems.RemoveAt(i);\n\t\t}\n\t}\n\n\t// Update the texture sheet animation settings for each particle system\n\tfor (int i = 0; i < particleSystems.Count; i++) {\n\t\tif (particleSystems[i].textureSheetAnimation.mode == ParticleSystemAnimationMode.Sprites) {\n\t\t\tparticleSystems[i].textureSheetAnimation.numTilesX = (int)Mathf.Max(1, (float)particleSystems[i].textureSheetAnimation.numTilesX * (float)particleSystems[i].textureSheetAnimation.frameOverTime.constant);\n\t\t\tparticleSystems[i].textureSheetAnimation.numTilesY = (int)Mathf.Max(1, (float)particleSystems[i].textureSheetAnimation.numTilesY * (float)particleSystems[i].textureSheetAnimation.frameOverTimeMultiplier);\n\t\t}\n\t}\n\n\t// Refresh the particle systems\n\tfor (int i = 0; i < particleSystems.Count; i++) {\n\t\tparticleSystems[i].Play();\n\t}\n}\n", "CodeBleu_score": 37.626957002575104}, {"code": "private void RefreshParticles(GameObject root)\tif (root == null)\n\t\treturn;\n\t\n\t// Collect all particle systems in the hierarchy\n\tList<ParticleSystem> particles = new List<ParticleSystem>();\n\tCollectParticles(root, particles);\n\t\n\t// Remove those that are not associated with this UIParticle instance\n\tfor (int i = 0; i < particles.Count; i++) {\n\t\tif (particles[i].GetComponent<UIParticle>()!= this)\n\t\t\tparticles.RemoveAt(i--);\n\t}\n\t\n\t// Adjust texture sheet animation settings\n\tfor (int i = 0; i < particles.Count; i++) {\n\t\tParticleSystem.TextureSheetAnimationModule animation = particles[i].textureSheetAnimation;\n\t\tif (animation.enabled && animation.mode == ParticleSystemAnimationMode.Sprites && animation.spriteCount!= m_Sprites.Count) {\n\t\t\tanimation.spriteCount = m_Sprites.Count;\n\t\t\tanimation.frameOverTime = new ParticleSystem.MinMaxCurve(0, 0);\n\t\t\tanimation.frameOverTimeMultiplier = 0;\n\t\t}\n\t}\n\t\n\t// Refresh the list of particle systems\n\tm_Particles = particles.ToArray();\n}\n", "CodeBleu_score": 37.6151984234943}, {"code": "private void RefreshParticles(GameObject root)\tif (root == null)\n\t\treturn;\n\tList<UIParticle> list = new List<UIParticle>();\n\tfor (int i = 0; i < root.transform.childCount; i++) {\n\t\tTransform t = root.transform.GetChild(i);\n\t\tif (t.gameObject.activeInHierarchy && t.gameObject.GetComponent<UIParticle>()!= null) {\n\t\t\tlist.Add(t.gameObject.GetComponent<UIParticle>());\n\t\t}\n\t}\n\tfor (int i = 0; i < list.Count; i++) {\n\t\tUIParticle p = list[i];\n\t\tif (!m_Particles.Contains(p)) {\n\t\t\tm_Particles.Add(p);\n\t\t\tp.RefreshParticles();\n\t\t}\n\t}\n\tfor (int i = 0; i < m_Particles.Count; i++) {\n\t\tUIParticle p = m_Particles[i];\n\t\tif (!list.Contains(p)) {\n\t\t\tm_Particles.Remove(p);\n\t\t}\n\t}\n}\n", "CodeBleu_score": 37.46063571889155}]}
{"instance_id": "d6b082e37770", "generation_result": [{"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder)\tvar swapManagerTypes = typeof(IColorSwapManager).Assembly.GetTypes().Where(x => typeof(IColorSwapManager).IsAssignableFrom(x) &&!x.IsInterface);\n\tforeach (var swapManagerType in swapManagerTypes) {\n\t\tcontainerBuilder.RegisterType(swapManagerType).SingleInstance();\n\t}\n}\n", "CodeBleu_score": 32.70388715492621}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder)\tvar types = from t in Assembly.GetExecutingAssembly().GetTypes() where typeof(IColorSwapManager).IsAssignableFrom(t) && t.IsClass select t;\n\tforeach (var type in types) {\n\t\tcontainerBuilder.RegisterType(type).SingleInstance();\n\t}\n}\n", "CodeBleu_score": 33.494921268862576}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder)\tcontainerBuilder.RegisterTypes(this.GetTypesImplementing<IColorSwapManager>(),\n\t\tServiceLifetime.SingleInstance).AsImplementedInterfaces();\n}\n", "CodeBleu_score": 21.82793385873334}]}
{"instance_id": "2359d72977a4", "generation_result": [{"code": " public async Task ConnectAsync(string ipAddress, int port) if (ipAddress == null) {\n throw new ArgumentNullException(\"ipAddress\");\n }\n if (port < 0) {\n throw new ArgumentOutOfRangeException(\"port\");\n }\n if (this.IsConnected) {\n throw new InvalidOperationException(\"Already connected.\");\n }\n this.ipAddress = ipAddress;\n this.port = port;\n this.serializer = new Serializer();\n await this.serializer.InitializeAsync();\n this.IsConnected = true;\n }\n", "CodeBleu_score": 22.825961552133673}, {"code": " public async Task ConnectAsync(string ipAddress, int port)\tif (ipAddress == null) throw new ArgumentNullException(nameof(ipAddress));\n\tif (port < 0) throw new ArgumentOutOfRangeException(nameof(port));\n\tif (port > 65535) throw new ArgumentOutOfRangeException(nameof(port));\n\tif (IsConnected) throw new InvalidOperationException();\n\t_ipAddress = ipAddress;\n\t_port = port;\n\tawait _serializer.InitializeAsync();\n\tawait _serializer.SendAsync(new ReservationRequest() {\n\t\tClientName = _clientName,\n\t\tClientVersion = _clientVersion,\n\t\tClientType = _clientType,\n\t\tClientCapabilities = _clientCapabilities,\n\t\tClientHostname = _clientHostname,\n\t\tClientOs = _clientOs,\n\t\tClientOsVersion = _clientOsVersion\n\t});\n\t_isConnecting = true;\n\tawait _serializer.ReceiveAsync();\n\t_isConnecting = false;\n\t_isConnected = true;\n\t_isNegotiating = true;\n\tawait _serializer.SendAsync(new ReservationResponse() {\n\t\tReservationId = _reservationId,\n\t\tReservationExpiry = _reservationExpiry,\n\t\tServerCapabilities = _serverCapabilities\n\t});\n\t_isNegotiating = false;\n }\n", "CodeBleu_score": 33.90206854502033}, {"code": " public async Task ConnectAsync(string ipAddress, int port) if (ipAddress == null)\n throw new ArgumentNullException(nameof(ipAddress));\n if (port <= 0 || port > 65535)\n throw new ArgumentOutOfRangeException(nameof(port));\n if (this.serializerTask!= null)\n throw new InvalidOperationException(\"Already connected.\");\n this.ipAddress = ipAddress;\n this.port = port;\n this.serializerTask = this.serializer.InitializeAsync();\n await this.serializerTask;\n await this.SendAsync(new ReservationRequestMessage(this.state));\n }\n /// <summary>", "CodeBleu_score": 31.24648356929216}]}
{"instance_id": "151a27d718b1", "generation_result": [{"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState)\tif (sessionConnectionState == null) {\n\t\tthrow new System.ArgumentNullException(\"sessionConnectionState\");\n\t}\n\tif (sessionConnectionState == this.connectionState) {\n\t\treturn;\n\t}\n\tif (this.connectionState!= null) {\n\t\tthis.connectionState.ExitSession();\n\t}\n\tthis.connectionState = sessionConnectionState;\n\tif (this.connectionState!= null) {\n\t\tthis.connectionState.EnterSession();\n\t}\n\tif (this.connectionStateChanged!= null) {\n\t\tthis.connectionStateChanged(this, new MultiplayerSessionConnectionStateChangedArgs(this.connectionState));\n\t}\n}\n", "CodeBleu_score": 28.906560453269414}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState)\tif (sessionConnectionState == null) {\n\t\tthrow new System.Exception(\"sessionConnectionState is null\");\n\t}\n\n\tif (sessionConnectionState == m_sessionConnectionState) {\n\t\treturn;\n\t}\n\n\tif (m_sessionConnectionState!= null) {\n\t\tDebug.Log(\"MultiplayerManager: \" + m_sessionConnectionState.ToString() + \" -> \" + sessionConnectionState.ToString());\n\t}\n\n\tm_sessionConnectionState = sessionConnectionState;\n\n\tif (m_sessionConnectionState == MultiplayerSessionConnectionState.SESSION_RESERVED) {\n\t\tm_log.UpdatePlayerName(m_sessionConnectionState.GetPlayerName());\n\t}\n\n\tif (m_connectionStateChanged!= null) {\n\t\tm_connectionStateChanged(m_sessionConnectionState);\n\t}\n}\n", "CodeBleu_score": 39.45166138151972}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState)\tif (sessionConnectionState == null) {\n\t\tthrow new System.Exception(\"sessionConnectionState is null\");\n\t}\n\n\tif (sessionConnectionState.ConnectionState == null) {\n\t\tthrow new System.Exception(\"sessionConnectionState.ConnectionState is null\");\n\t}\n\n\tif (sessionConnectionState.ConnectionState.Equals(MultiplayerSessionConnectionState.Connecting)) {\n\t\tif (!m_sessionConnectionState.ConnectionState.Equals(MultiplayerSessionConnectionState.Connecting)) {\n\t\t\tLog.Info(\"Multiplayer session connecting\");\n\t\t\tm_connectionStateChanged = true;\n\t\t}\n\t} else if (sessionConnectionState.ConnectionState.Equals(MultiplayerSessionConnectionState.Connected)) {\n\t\tif (!m_sessionConnectionState.ConnectionState.Equals(MultiplayerSessionConnectionState.Connected)) {\n\t\t\tLog.Info(\"Multiplayer session connected\");\n\t\t\tm_connectionStateChanged = true;\n\t\t}\n\t} else if (sessionConnectionState.ConnectionState.Equals(MultiplayerSessionConnectionState.Disconnected)) {\n\t\tif (!m_sessionConnectionState.ConnectionState.Equals(MultiplayerSessionConnectionState.Disconnected)) {\n\t\t\tLog.Info(\"Multiplayer session disconnected\");\n\t\t\tm_connectionStateChanged = true;\n\t\t}\n\t} else if (sessionConnectionState.ConnectionState.Equals(MultiplayerSessionConnectionState.Joining)) {\n\t\tif (!m_sessionConnectionState.ConnectionState.Equals(MultiplayerSessionConnectionState.Joining)) {\n\t\t\tLog.Info(\"Multiplayer session joining\");\n\t\t\tm_connectionStateChanged = true;\n\t\t}\n\t} else if (sessionConnectionState.ConnectionState.Equals(MultiplayerSessionConnectionState.Joined)) {\n\t\tif (!m_sessionConnectionState.ConnectionState.Equals(MultiplayerSessionConnectionState.Joined)) {\n\t\t\tLog.Info(\"Multiplayer session joined\");\n\t\t\tm_connectionStateChanged = true;\n\t\t}\n\t} else if (sessionConnectionState.ConnectionState.Equals(MultiplayerSessionConnectionState.Leaving)) {\n\t\tif (!m_sessionConnectionState.ConnectionState.Equals(MultiplayerSessionConnectionState.Leaving)) {\n\t\t\tLog.Info(\"Multiplayer session leaving\");\n\t\t\tm_connectionStateChanged = true;\n\t\t}\n\t} else if (sessionConnectionState.ConnectionState.Equals(MultiplayerSessionConnectionState.Left))", "CodeBleu_score": 25.62874399101707}]}
{"instance_id": "7f7717307d6a", "generation_result": [{"code": "public async Task StartAsync(string ipAddress, int serverPort)\tif (IsRunning) {\n\t\treturn;\n\t}\n\tIsRunning = true;\n\tawait Task.Run(() => {\n\t\t_client = new LiteNetLibClient();\n\t\t_client.Start(ipAddress, serverPort);\n\t\t_client.PeerConnectedEvent += OnPeerConnected;\n\t\t_client.PeerDisconnectedEvent += OnPeerDisconnected;\n\t\t_client.NetworkReceiveEvent += OnNetworkReceive;\n\t\t_client.NetworkLatencyUpdateEvent += OnNetworkLatencyUpdate;\n\t\t_client.NetworkErrorEvent += OnNetworkError;\n\t\t_client.NetworkReceiveUnconnectedEvent += OnNetworkReceiveUnconnected;\n\t\t_client.NetworkLatencyUpdateUnconnectedEvent += OnNetworkLatencyUpdateUnconnected;\n\t\t_client.NetworkDropPacketEvent += OnNetworkDropPacket;\n\t\t_client.NatIntroductionRequestEvent += OnNatIntroductionRequest;\n\t\t_client.ConnectionRequestEvent += OnConnectionRequest;\n\t\t_client.ConnectionRequestAcceptedEvent += OnConnectionRequestAccepted;\n\t\t_client.MessageReceivedEvent += OnMessageReceived;\n\t\t_client.RawMessageReceivedEvent += OnRawMessageReceived;\n\t\t_client.BroadcastReceiveEvent += OnBroadcastReceived;\n\t\t_client.ConnectionLatencyUpdatedEvent += OnConnectionLatencyUpdated;\n\t\t_client.Update();\n\t});\n\tawait Task.Delay(2000);\n\tif (ConnectionRequestEvent!= null) {\n\t\tConnectionRequestEvent(this, new ConnectionRequestEventArgs(new ConnectionRequest(IPAddress.Parse(ipAddress), serverPort)));\n\t}\n}\n", "CodeBleu_score": 38.07236818767012}, {"code": "public async Task StartAsync(string ipAddress, int serverPort)\tawait Task.Delay(1000);\n\tif (!IsRunning) {\n\t\ttry {\n\t\t\tawait ConnectAsync(ipAddress, serverPort);\n\t\t} catch (Exception ex) {\n\t\t\tDebug.LogException(ex);\n\t\t}\n\t}\n}\n", "CodeBleu_score": 29.69290457742423}, {"code": "public async Task StartAsync(string ipAddress, int serverPort)\tawait Task.Run(() => {\n\t\tif (IsRunning)\n\t\t\treturn;\n\n\t\tIsRunning = true;\n\t\t_client.Start();\n\t\t_client.Connect(ipAddress, serverPort);\n\t\tif (WaitConnectionEstablished(2000))\n\t\t\tResetConnectionEstablishedEvent();\n\t});\n}\n", "CodeBleu_score": 45.597564221294355}]}
{"instance_id": "eeb95434f1eb", "generation_result": [{"code": "public void StartFireSuppression(NitroxId id)\tCyclops cyclops = CyclopsManager.Instance.GetCyclops(id);\n\tif (cyclops!= null) {\n\t\tif (cyclops.GetComponent<FireSuppression>()!= null) {\n\t\t\tcyclops.GetComponent<FireSuppression>().StartFireSuppression();\n\t\t}\n\t}\n}\n", "CodeBleu_score": 42.54085573418797}, {"code": "public void StartFireSuppression(NitroxId id)\tCyclops cyc = Cyclops.GetCyclops(id);\n\tif (cyc == null) return;\n\tFireSuppressionButton fsb = cyc.GetComponentInChildren<FireSuppressionButton>();\n\tif (fsb == null) return;\n\tfsb.StartFireSuppression();\n}\n", "CodeBleu_score": 21.824012051041734}, {"code": "public void StartFireSuppression(NitroxId id)\tCyclops cyclops = Cyclops.Find(id);\n\tif (cyclops!= null) {\n\t\tCyclopsFireSuppression cyclopsFireSuppression = cyclops.GetComponent<CyclopsFireSuppression>();\n\t\tif (cyclopsFireSuppression!= null) {\n\t\t\tcyclopsFireSuppression.StartFireSuppression();\n\t\t}\n\t}\n}\n", "CodeBleu_score": 25.441112557956835}]}
{"instance_id": "a23a043559c6", "generation_result": [{"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount)\tif (subRoot.ID == subRootID) {\n\t\t// If the damage point is the head, send a packet to the server to indicate the head was repaired\n\t\tif (damagePoint == CyclopsDamagePoint.Head) {\n\t\t\tPacketSender.SendPacket(PacketType.SubRootHeadRepaired, new SubRootHeadRepairedPacket(subRootID, repairAmount));\n\t\t}\n\t\t// If the damage point is the torso, send a packet to the server to indicate the torso was repaired\n\t\tif (damagePoint == CyclopsDamagePoint.Torso) {\n\t\t\tPacketSender.SendPacket(PacketType.SubRootTorsoRepaired, new SubRootTorsoRepairedPacket(subRootID, repairAmount));\n\t\t}\n\t\t// If the damage point is the arms, send a packet to the server to indicate the arms were repaired\n\t\tif (damagePoint == CyclopsDamagePoint.Arms) {\n\t\t\tPacketSender.SendPacket(PacketType.SubRootArmsRepaired, new SubRootArmsRepairedPacket(subRootID, repairAmount));\n\t\t}\n\t\t// If the damage point is the legs, send a packet to the server to indicate the legs were repaired\n\t\tif (damagePoint == CyclopsDamagePoint.Legs) {\n\t\t\tPacketSender.SendPacket(PacketType.SubRootLegsRepaired, new SubRootLegsRepairedPacket(subRootID, repairAmount));\n\t\t}\n\t}\n}\n", "CodeBleu_score": 35.65401594722749}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount)\t// Make sure the SubRoot ID is valid\n\tif (subRoot.ID < 0 || subRoot.ID >= SubRoot.MaxSubRoots) {\n\t\treturn;\n\t}\n\n\t// Make sure the damage point ID is valid\n\tif (damagePoint.ID < 0 || damagePoint.ID >= CyclopsDamagePoint.MaxDamagePoints) {\n\t\treturn;\n\t}\n\n\t// Create a new repair packet\n\tRepairPacket repairPacket = RepairPacket.Create();\n\n\t// Set the SubRoot ID\n\trepairPacket.SubRootID = subRoot.ID;\n\n\t// Set the damage point ID\n\trepairPacket.DamagePointID = damagePoint.ID;\n\n\t// Set the repair amount\n\trepairPacket.RepairAmount = repairAmount;\n\n\t// Send the repair packet\n\tSendPacket(repairPacket);\n}\n", "CodeBleu_score": 39.90901249457585}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount)\tif (subRoot == null) {\n\t\treturn;\n\t}\n\n\t// Verify the SubRoot ID.\n\tif (subRoot.ID!= (int)SubRootID.SubRoot_1) {\n\t\treturn;\n\t}\n\n\t// Identify the specific damage point.\n\tif (damagePoint == null) {\n\t\treturn;\n\t}\n\n\t// Create a repair packet.\n\tRepairPacket repairPacket = new RepairPacket();\n\trepairPacket.damagePointID = damagePoint.ID;\n\trepairPacket.repairAmount = repairAmount;\n\n\t// Send the packet.\n\tPacketSender.SendPacket(repairPacket);\n}\n", "CodeBleu_score": 34.91371715557785}]}
{"instance_id": "dfb3586de856", "generation_result": [{"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info)\tif (subRoot == null || subRoot.netId == 0 || subRoot.health <= 0) return;\n\n\tif (info.HasValue) {\n\t\tDamageInfo damageInfo = info.GetValueOrDefault();\n\t\tif (damageInfo.damage == 0) return;\n\n\t\tCyclopsDamageInfoData damageInfoData = new CyclopsDamageInfoData(damageInfo.damage, damageInfo.force, damageInfo.position, damageInfo.attacker, damageInfo.crit, damageInfo.damageType, damageInfo.forceDirection);\n\t\tCyclopsDamage cyclopsDamage = new CyclopsDamage(subRoot.netId, damageInfoData);\n\t\tcyclopsDamage.Send(base.connection);\n\t}\n\n\tDamagePoint[] damagePoints = subRoot.GetDamagePoints();\n\tif (damagePoints == null) return;\n\n\tCyclopsFireData[] cyclopsFireData = new CyclopsFireData[damagePoints.Length];\n\tfor (int i = 0; i < damagePoints.Length; i++) {\n\t\tDamagePoint damagePoint = damagePoints[i];\n\t\tcyclopsFireData[i] = new CyclopsFireData(damagePoint.damage, damagePoint.force, damagePoint.position, damagePoint.attacker, damagePoint.crit, damagePoint.damageType, damagePoint.forceDirection);\n\t}\n\n\tCyclopsDamage cyclopsDamage = new CyclopsDamage(subRoot.netId, cyclopsFireData);\n\tcyclopsDamage.Send(base.connection);\n}\n", "CodeBleu_score": 43.43514297535814}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info)\tif (subRoot.isDestroyed || subRoot.health <= 0) {\n\t\treturn;\n\t}\n\n\tif (info.HasValue) {\n\t\tCyclopsDamageInfoData damageInfo = new CyclopsDamageInfoData();\n\t\tdamageInfo.Health = subRoot.health;\n\t\tdamageInfo.MaxHealth = subRoot.maxHealth;\n\t\tdamageInfo.Damage = info.Value.Damage;\n\t\tdamageInfo.Force = info.Value.Force;\n\t\tdamageInfo.DamageType = (int)info.Value.Type;\n\t\tdamageInfo.ForceType = (int)info.Value.ForceType;\n\t\tdamageInfo.Position = subRoot.transform.position;\n\t\tdamageInfo.Rotation = subRoot.transform.rotation;\n\n\t\tCyclopsDamage damage = new CyclopsDamage();\n\t\tdamage.DamageInfo = damageInfo;\n\t\tdamage.FireData = GetFireData(subRoot);\n\t\tdamage.FireData.Position = subRoot.transform.position;\n\t\tdamage.FireData.Rotation = subRoot.transform.rotation;\n\n\t\tSendPacket(damage);\n\t}\n\telse {\n\t\tCyclopsDamage damage = new CyclopsDamage();\n\t\tdamage.DamageInfo = GetDamageInfo(subRoot);\n\t\tdamage.FireData = GetFireData(subRoot);\n\t\tSendPacket(damage);\n\t}\n}\n", "CodeBleu_score": 39.55860709717266}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info)\tif (subRoot.netId == 0 || subRoot.health <= 0) return;\n\tif (info.HasValue) {\n\t\tCyclopsDamageInfoData damageInfoData = new CyclopsDamageInfoData();\n\t\tdamageInfoData.damage = info.Value.Damage;\n\t\tdamageInfoData.force = info.Value.Force;\n\t\tdamageInfoData.position = info.Value.Position;\n\t\tdamageInfoData.rotation = info.Value.Rotation;\n\t\tdamageInfoData.damageType = (byte)info.Value.DamageType;\n\t\tdamageInfoData.forceType = (byte)info.Value.ForceType;\n\t\tdamageInfoData.attackerID = info.Value.AttackerID;\n\t\tdamageInfoData.victimID = info.Value.VictimID;\n\t\tdamageInfoData.weaponID = info.Value.WeaponID;\n\t\tdamageInfoData.damageSourceID = info.Value.SourceID;\n\t\tdamageInfoData.damageType = (byte)info.Value.DamageType;\n\t\tdamageInfoData.forceType = (byte)info.Value.ForceType;\n\t\tdamageInfoData.attackerID = info.Value.AttackerID;\n\t\tdamageInfoData.victimID = info.Value.VictimID;\n\t\tdamageInfoData.weaponID = info.Value.WeaponID;\n\t\tdamageInfoData.damageSourceID = info.Value.SourceID;\n\t\tdamageInfoData.damageType = (byte)info.Value.DamageType;\n\t\tdamageInfoData.forceType = (byte)info.Value.ForceType;\n\t\tdamageInfoData.attackerID = info.Value.AttackerID;\n\t\tdamageInfoData.victimID = info.Value.VictimID;\n\t\tdamageInfoData.weaponID = info.Value.WeaponID;\n\t\tdamageInfoData.damageSourceID = info.Value.SourceID;\n\t\tdamageInfoData.damageType = (byte)info.Value.DamageType;\n\t\tdamageInfoData.forceType = (byte)info.Value.ForceType;\n\t\tdamageInfoData.attackerID = info.Value.AttackerID;\n\t\tdamageInfoData.victimID = info.Value.VictimID;\n\t\tdamageInfoData.weaponID = info", "CodeBleu_score": 28.63331240394138}]}
{"instance_id": "03223c10109f", "generation_result": [{"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities)\tif (dirtyEntities.Count == 0) {\n\t\treturn;\n\t}\n\n\tfor (int i = dirtyEntities.Count - 1; i >= 0; i--) {\n\t\tEntity entity = dirtyEntities[i];\n\n\t\tGameObject gameObject = entity.GetComponent<GameObject>();\n\t\tif (gameObject == null) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Remove the entity hierarchy\n\t\tentity.RemoveComponent<Entity>();\n\n\t\t// Destroy the GameObject\n\t\tGameObject.Destroy(gameObject);\n\t}\n}\n", "CodeBleu_score": 38.82220357120957}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities)\tfor (int i = 0; i < dirtyEntities.Count; i++) {\n\t\tif (dirtyEntities[i]!= null) {\n\t\t\tif (dirtyEntities[i].gameObject!= null) {\n\t\t\t\tGameObject.Destroy(dirtyEntities[i].gameObject);\n\t\t\t}\n\t\t}\n\t}\n}\n", "CodeBleu_score": 25.55241134449753}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities)\tforeach (Entity entity in dirtyEntities) {\n\t\tif (entity.gameObject!= null) {\n\t\t\tDestroy(entity.gameObject);\n\t\t}\n\t}\n}\n", "CodeBleu_score": 45.26608097039403}]}
{"instance_id": "990abe8e473e", "generation_result": [{"code": "private void AddPendingParentEntity(Entity entity)\tif (entity.ParentId == 0) {\n\t\treturn;\n\t}\n\n\tif (m_pendingParentEntities.ContainsKey(entity.ParentId)) {\n\t\tm_pendingParentEntities[entity.ParentId].Add(entity);\n\t}\n\telse {\n\t\tm_pendingParentEntities.Add(entity.ParentId, new List<Entity>() { entity });\n\t}\n}\n", "CodeBleu_score": 29.541209511055655}, {"code": "private void AddPendingParentEntity(Entity entity)\tif (!pendingParentEntities.ContainsKey(entity.ParentEntityId)) {\n\t\tpendingParentEntities[entity.ParentEntityId] = new List<Entity>();\n\t}\n\tpendingParentEntities[entity.ParentEntityId].Add(entity);\n}\n", "CodeBleu_score": 37.05788985534193}, {"code": "private void AddPendingParentEntity(Entity entity)\tif (!pendingParentEntities.ContainsKey(entity.ParentEntityId)) {\n\t\tpendingParentEntities[entity.ParentEntityId] = new List<Entity>();\n\t}\n\tpendingParentEntities[entity.ParentEntityId].Add(entity);\n}\n", "CodeBleu_score": 37.05788985534193}]}
{"instance_id": "a885fbb1f085", "generation_result": [{"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown)\tif (cooldown == clawArm.pickupTime) {\n\t\tclawArm.action = ExosuitArmAction.START_USE_TOOL;\n\t} else if (cooldown == clawArm.punchTime) {\n\t\tclawArm.action = ExosuitArmAction.ALT_HIT;\n\t} else {\n\t\tDebug.LogError(\"Invalid claw use cooldown: \" + cooldown);\n\t}\n\tBroadcastArmAction(clawArm);\n}\n", "CodeBleu_score": 36.070007786962066}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown)\tif (cooldown <= clawArm.pickupTime) {\n\t\tclawArm.BroadcastArmAction(ArmAction.START_USE_TOOL);\n\t} else if (cooldown <= clawArm.punchTime) {\n\t\tclawArm.BroadcastArmAction(ArmAction.ALT_HIT);\n\t} else {\n\t\tDebug.LogError(\"ExosuitClawArm: BroadcastClawUse - Cooldown time \" + cooldown + \" does not match pickup or punch time.\");\n\t}\n}\n", "CodeBleu_score": 28.696130177024248}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown)\tif (cooldown < clawArm.pickupTime) {\n\t\tclawArm.BroadcastArmAction(ArmAction.START_USE_TOOL);\n\t} else if (cooldown < clawArm.punchTime) {\n\t\tclawArm.BroadcastArmAction(ArmAction.ALT_HIT);\n\t} else {\n\t\tDebug.LogError(\"Invalid claw action cooldown time: \" + cooldown);\n\t}\n}\n", "CodeBleu_score": 25.65188291525009}]}
{"instance_id": "e390441c8dc2", "generation_result": [{"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType)\t// Get the entity ID of the parent\n\tuint parentID = parent.GetComponent<NetworkIdentity>().netId;\n\t// Get the entity ID of the game object\n\tuint entityID = gameObject.GetComponent<NetworkIdentity>().netId;\n\t// Get the prefab name of the game object\n\tstring prefabName = gameObject.GetComponent<PrefabIdentifier>().ClassId.ToString();\n\t// Get the name of the game object\n\tstring name = gameObject.GetComponent<NetworkIdentity>().name;\n\t// Get the position of the game object\n\tVector3 position = gameObject.transform.position;\n\t// Get the rotation of the game object\n\tQuaternion rotation = gameObject.transform.rotation;\n\t// Get the scale of the game object\n\tVector3 scale = gameObject.transform.localScale;\n\t// Get the battery's tech type\n\tTechType tech = techType;\n\t// Create a new InstalledBatteryEntity\n\tInstalledBatteryEntity entity = new InstalledBatteryEntity(prefabName, name, position, rotation, scale, tech);\n\t// Send a EntitySpawnedByClient packet\n\tSendEntitySpawnedByClient(entityID, parentID, entity);\n}\n", "CodeBleu_score": 41.95188802593589}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType)\tif (gameObject == null || parent == null) {\n\t\treturn;\n\t}\n\n\tif (techType == TechType.None) {\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<InstalledBatteryEntity>()!= null) {\n\t\treturn;\n\t}\n\n\tint parentID = parent.GetInstanceID();\n\tint entityID = gameObject.GetInstanceID();\n\n\tif (parentID == entityID) {\n\t\treturn;\n\t}\n\n\tif (entityID == 0 || parentID == 0) {\n\t\treturn;\n\t}\n\n\tif (parent.GetComponent<EntityContainer>()!= null) {\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<EntityContainer>()!= null) {\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<Pickupable>()!= null) {\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<Pickupable>()!= null) {\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<Pickupable>()!= null) {\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<Pickupable>()!= null) {\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<Pickupable>()!= null) {\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<Pickupable>()!= null) {\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<Pickupable>()!= null) {\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<Pickupable>()!= null) {\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<Pickupable>()!= null) {\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<Pickupable>()!= null) {\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<Pickupable>()!= null) {\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<Pickupable>()!= null) {\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<Pickupable>()!= null) {\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<Pickupable>()!= null) {\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<Pickupable>()!= null) {\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<Pickupable>()!=", "CodeBleu_score": 39.249808830670055}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType)\tif (gameObject == null) return;\n\tif (parent == null) return;\n\tif (techType == TechType.None) return;\n\n\tint parentID = parent.GetComponent<NetworkIdentity>().netId;\n\tint entityID = gameObject.GetComponent<NetworkIdentity>().netId;\n\n\tif (parentID == 0 || entityID == 0) return;\n\n\tInstalledBatteryEntity entity = new InstalledBatteryEntity() {\n\t\tentityId = entityID,\n\t\tparentEntityId = parentID,\n\t\tbatteryID = techType\n\t};\n\n\tEntitySpawnedByClient spawnedEntity = new EntitySpawnedByClient() {\n\t\tentity = entity\n\t};\n\n\tNetworkServer.SendToAll(spawnedEntity);\n}\n", "CodeBleu_score": 37.64997363358758}]}
{"instance_id": "a87b772a8e5a", "generation_result": [{"code": "public void PickedUp(GameObject gameObject, TechType techType)\tif (gameObject == null) {\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<Pickupable>()!= null) {\n\t\tgameObject.GetComponent<Pickupable>().Pickup();\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<EntityContainer>()!= null) {\n\t\tgameObject.GetComponent<EntityContainer>().Pickup();\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<EntitySplitter>()!= null) {\n\t\tgameObject.GetComponent<EntitySplitter>().Pickup();\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<EntitySplitter>()!= null) {\n\t\tgameObject.GetComponent<EntitySplitter>().Pickup();\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<EntitySplitter>()!= null) {\n\t\tgameObject.GetComponent<EntitySplitter>().Pickup();\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<EntitySplitter>()!= null) {\n\t\tgameObject.GetComponent<EntitySplitter>().Pickup();\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<EntitySplitter>()!= null) {\n\t\tgameObject.GetComponent<EntitySplitter>().Pickup();\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<EntitySplitter>()!= null) {\n\t\tgameObject.GetComponent<EntitySplitter>().Pickup();\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<EntitySplitter>()!= null) {\n\t\tgameObject.GetComponent<EntitySplitter>().Pickup();\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<EntitySplitter>()!= null) {\n\t\tgameObject.GetComponent<EntitySplitter>().Pickup();\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<EntitySplitter>()!= null) {\n\t\tgameObject.GetComponent<EntitySplitter>().Pickup();\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<EntitySplitter>()!= null) {\n\t\tgameObject.GetComponent<EntitySplitter>().Pickup();\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<EntitySplitter>()!= null) {\n\t\tgameObject.GetComponent<EntitySplitter>().Pickup();\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<EntitySplitter>()!= null) {\n\t\tgameObject.GetComponent<EntitySplitter>().Pickup();\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<EntitySplitter>()!= null) {\n\t\tgameObject.GetComponent<EntitySplitter>().Pickup();\n\t\treturn;\n\t}\n\n\t", "CodeBleu_score": 20.951078990798035}, {"code": "public void PickedUp(GameObject gameObject, TechType techType)\tif (gameObject == null) {\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<Pickupable>()!= null) {\n\t\tgameObject.GetComponent<Pickupable>().PickedUp();\n\t}\n\n\tif (gameObject.GetComponent<TechTag>()!= null) {\n\t\tgameObject.GetComponent<TechTag>().Remove();\n\t}\n\n\tif (gameObject.GetComponent<RemoteControl>()!= null) {\n\t\tgameObject.GetComponent<RemoteControl>().Remove();\n\t}\n\n\tif (gameObject.GetComponent<Nitrox>()!= null) {\n\t\tgameObject.GetComponent<Nitrox>().Remove();\n\t}\n\n\tif (gameObject.GetComponent<Player>()!= null) {\n\t\tgameObject.GetComponent<Player>().Remove();\n\t}\n\n\tif (gameObject.GetComponent<Pickupable>()!= null) {\n\t\tgameObject.GetComponent<Pickupable>().Spawn();\n\t}\n\n\tif (gameObject.GetComponent<TechTag>()!= null) {\n\t\tgameObject.GetComponent<TechTag>().Spawn();\n\t}\n\n\tif (gameObject.GetComponent<RemoteControl>()!= null) {\n\t\tgameObject.GetComponent<RemoteControl>().Spawn();\n\t}\n\n\tif (gameObject.GetComponent<Nitrox>()!= null) {\n\t\tgameObject.GetComponent<Nitrox>().Spawn();\n\t}\n\n\tif (gameObject.GetComponent<Player>()!= null) {\n\t\tgameObject.GetComponent<Player>().Spawn();\n\t}\n\n\tif (gameObject.GetComponent<Pickupable>()!= null) {\n\t\tgameObject.GetComponent<Pickupable>().Spawn();\n\t}\n\n\tif (gameObject.GetComponent<TechTag>()!= null) {\n\t\tgameObject.GetComponent<TechTag>().Spawn();\n\t}\n\n\tif (gameObject.GetComponent<RemoteControl>()!= null) {\n\t\tgameObject.GetComponent<RemoteControl>().Spawn();\n\t}\n\n\tif (gameObject.GetComponent<Nitrox>()!= null) {\n\t\tgameObject.GetComponent<Nitrox>().Spawn();\n\t}\n\n\tif (gameObject.GetComponent<Player>()!= null) {\n\t\tgameObject.GetComponent<Player>().Spawn();\n\t}\n\n\tif (gameObject.GetComponent<Pickupable>()!= null) {\n\t\tgameObject.GetComponent<Pickupable>().Spawn();\n\t}\n\n\tif (gameObject.GetComponent<TechTag>()!= null) {\n\t\tgameObject.GetComponent<TechTag>().Spawn();\n\t}\n\n\t", "CodeBleu_score": 24.69170743582868}, {"code": "public void PickedUp(GameObject gameObject, TechType techType)\tif (gameObject == null) {\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<RemoteController>()!= null) {\n\t\tgameObject.GetComponent<RemoteController>().Remove();\n\t}\n\n\tif (gameObject.GetComponent<Nitrox>()!= null) {\n\t\tgameObject.GetComponent<Nitrox>().Remove();\n\t}\n\n\tif (gameObject.GetComponent<Pickupable>()!= null) {\n\t\tgameObject.GetComponent<Pickupable>().Remove();\n\t}\n\n\tif (gameObject.GetComponent<Nitrox>()!= null) {\n\t\tgameObject.GetComponent<Nitrox>().Remove();\n\t}\n\n\tif (gameObject.GetComponent<Nitrox>()!= null) {\n\t\tgameObject.GetComponent<Nitrox>().Remove();\n\t}\n\n\tif (gameObject.GetComponent<Nitrox>()!= null) {\n\t\tgameObject.GetComponent<Nitrox>().Remove();\n\t}\n\n\tif (gameObject.GetComponent<Nitrox>()!= null) {\n\t\tgameObject.GetComponent<Nitrox>().Remove();\n\t}\n\n\tif (gameObject.GetComponent<Nitrox>()!= null) {\n\t\tgameObject.GetComponent<Nitrox>().Remove();\n\t}\n\n\tif (gameObject.GetComponent<Nitrox>()!= null) {\n\t\tgameObject.GetComponent<Nitrox>().Remove();\n\t}\n\n\tif (gameObject.GetComponent<Nitrox>()!= null) {\n\t\tgameObject.GetComponent<Nitrox>().Remove();\n\t}\n\n\tif (gameObject.GetComponent<Nitrox>()!= null) {\n\t\tgameObject.GetComponent<Nitrox>().Remove();\n\t}\n\n\tif (gameObject.GetComponent<Nitrox>()!= null) {\n\t\tgameObject.GetComponent<Nitrox>().Remove();\n\t}\n\n\tif (gameObject.GetComponent<Nitrox>()!= null) {\n\t\tgameObject.GetComponent<Nitrox>().Remove();\n\t}\n\n\tif (gameObject.GetComponent<Nitrox>()!= null) {\n\t\tgameObject.GetComponent<Nitrox>().Remove();\n\t}\n\n\tif (gameObject.GetComponent<Nitrox>()!= null) {\n\t\tgameObject.GetComponent<Nitrox>().Remove();\n\t}\n\n\tif (gameObject.GetComponent<Nitrox>()!= null) {\n\t\tgameObject.GetComponent<Nitrox>().Remove();\n\t}\n\n\tif (gameObject", "CodeBleu_score": 21.066552529040113}]}
{"instance_id": "b6d1e68114e1", "generation_result": [{"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager)\tif (gameObject == null) {\n\t\treturn null;\n\t}\n\tif (gameObject.GetComponent<NitroxEntity>() == null) {\n\t\treturn null;\n\t}\n\tif (gameObject.GetComponent<NitroxEntity>().NitroxId == 0) {\n\t\tgameObject.GetComponent<NitroxEntity>().NitroxId = NitroxIdGenerator.GetNextId();\n\t}\n\tint classId = gameObject.GetComponent<NitroxEntity>().ClassId;\n\tTechType techType = gameObject.GetComponent<NitroxEntity>().TechType;\n\tInventoryItemEntity entity = new InventoryItemEntity(gameObject.GetComponent<NitroxEntity>().NitroxId, classId, techType, entityMetadataManager);\n\tentity.PlayerId = Player.m_localPlayer.GetPlayerID();\n\tentity.ChildEntities = gameObject.GetComponentsInChildren<InventoryItemEntity>();\n\tentity.BatteryData = gameObject.GetComponent<Battery>();\n\treturn entity;\n}\n", "CodeBleu_score": 48.40562937273641}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager)\tif (gameObject == null) {\n\t\treturn null;\n\t}\n\n\tvar inventoryItemEntity = new InventoryItemEntity();\n\n\tif (gameObject.GetComponent<NitroxEntity>()) {\n\t\tinventoryItemEntity.NitroxId = gameObject.GetComponent<NitroxEntity>().NitroxId;\n\t} else {\n\t\tinventoryItemEntity.NitroxId = Guid.NewGuid();\n\t}\n\n\tinventoryItemEntity.ClassId = gameObject.GetComponent<TechType>().ClassID;\n\tinventoryItemEntity.TechType = gameObject.GetComponent<TechType>();\n\n\tinventoryItemEntity.Metadata = entityMetadataManager.GetMetadata(gameObject);\n\n\tinventoryItemEntity.ChildEntities = new List<InventoryItemEntity>();\n\tforeach (var child in gameObject.GetComponentsInChildren<InventoryItemEntity>()) {\n\t\tif (child.gameObject!= gameObject) {\n\t\t\tinventoryItemEntity.ChildEntities.Add(child);\n\t\t}\n\t}\n\n\tinventoryItemEntity.PlayerId = GetPlayerId(gameObject);\n\n\tvar battery = gameObject.GetComponent<Battery>();\n\tif (battery!= null) {\n\t\tinventoryItemEntity.Battery = new BatteryEntity();\n\t\tinventoryItemEntity.Battery.BatteryID = battery.batteryID;\n\t\tinventoryItemEntity.Battery.MaxCharge = battery.maxCharge;\n\t\tinventoryItemEntity.Battery.CurrentCharge = battery.currentCharge;\n\t\tinventoryItemEntity.Battery.IsCharging = battery.isCharging;\n\t}\n\n\treturn inventoryItemEntity;\n}\n", "CodeBleu_score": 44.17745840848247}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager)\tif (gameObject == null) {\n\t\treturn null;\n\t}\n\n\tInventoryItemEntity entity = null;\n\n\tif (gameObject.GetComponent<InventoryItemEntity>()!= null) {\n\t\tentity = gameObject.GetComponent<InventoryItemEntity>();\n\t} else {\n\t\tentity = gameObject.AddComponent<InventoryItemEntity>();\n\t}\n\n\tentity.NitroxId = gameObject.GetComponent<NitroxEntity>()?.NitroxId?? Guid.NewGuid();\n\tentity.ClassId = entityMetadataManager.GetClassId(gameObject);\n\tentity.TechType = entityMetadataManager.GetTechType(gameObject);\n\n\tentity.Metadata = entityMetadataManager.GetMetadata(gameObject);\n\tentity.ChildEntities = entityMetadataManager.GetChildEntities(gameObject);\n\n\tentity.PlayerId = entityMetadataManager.GetPlayerId(gameObject);\n\n\tif (gameObject.GetComponent<Battery>()!= null) {\n\t\tentity.Battery = gameObject.GetComponent<Battery>();\n\t}\n\n\treturn entity;\n}\n", "CodeBleu_score": 47.34503514467803}]}
{"instance_id": "e416d51a7af7", "generation_result": [{"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender)\tthis.multiplayerSession = multiplayerSession;\n\tthis.packetSender = packetSender;\n\tthis.throttledPacketSender = throttledPacketSender;\n\tthis.body = null;\n\tthis.model = null;\n\tthis.bodyProto = null;\n\tthis.permissions = new HashSet<string> { \"local\" };\n\tthis.isLocalPlayer = true;\n}\n", "CodeBleu_score": 35.37177409605817}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender)\t_multiplayerSession = multiplayerSession;\n\t_packetSender = packetSender;\n\t_throttledPacketSender = throttledPacketSender;\n\t_body = new Lazy<PlayerBody>(() => new PlayerBody(Player.Instance));\n\t_model = new Lazy<PlayerModel>(() => new PlayerModel(Player.Instance));\n\t_bodyPrototype = new Lazy<PlayerBodyPrototype>(() => new PlayerBodyPrototype(Player.Instance));\n\t_permissions = new PlayerPermissions();\n\t_permissions.SetPermissions(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,", "CodeBleu_score": 20.332025693601448}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender)\tthis.multiplayerSession = multiplayerSession;\n\tthis.packetSender = packetSender;\n\tthis.throttledPacketSender = throttledPacketSender;\n\tthis.body = new Body(this, multiplayerSession);\n\tthis.playerModel = new PlayerModel(this, multiplayerSession);\n\tthis.body.bodyPrototype = multiplayerSession.GetBodyPrototypes()[0];\n\tthis.permissions = new PlayerPermissions(this);\n}\n", "CodeBleu_score": 45.49987124552231}]}
{"instance_id": "def56af985df", "generation_result": [{"code": "private GameObject CreateBodyPrototype\tget {\n\t\tif (this.head.activeSelf == false) {\n\t\t\tthis.head.SetActive(true);\n\t\t}\n\t\tGameObject clone = GameObject.Instantiate(this.body, this.body.transform.position, this.body.transform.rotation);\n\t\tclone.name = \"RemotePlayerPrototype\";\n\t\tclone.SetActive(false);\n\t\tforeach (Transform child in clone.transform) {\n\t\t\tif (child.name == \"Head\") {\n\t\t\t\tchild.GetComponent<MeshRenderer>().shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.On;\n\t\t\t}\n\t\t\tif (child.name == \"Hand\") {\n\t\t\t\tforeach (Transform child2 in child) {\n\t\t\t\t\tif (child2.name == \"Item\") {\n\t\t\t\t\t\tchild2.parent = null;\n\t\t\t\t\t\tUnityEngine.Object.Destroy(child2.gameObject);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn clone;\n\t}\n}\n", "CodeBleu_score": 36.01342320287131}, {"code": "private GameObject CreateBodyPrototype\tget {\n\t\tif (this.head!= null) {\n\t\t\tthis.head.GetComponent<Renderer> ().shadowCastingMode = ShadowCastingMode.On;\n\t\t}\n\t\tGameObject body = GameObject.Instantiate (this.bodyPrototype);\n\t\tbody.name = \"RemotePlayerPrototype\";\n\t\tbody.transform.position = this.transform.position;\n\t\tbody.transform.rotation = this.transform.rotation;\n\t\tbody.SetActive (false);\n\t\treturn body;\n\t}\n}\n", "CodeBleu_score": 29.67646823933371}, {"code": "private GameObject CreateBodyPrototype\tget {\n\t\tif (isLocalPlayer) {\n\t\t\treturn null;\n\t\t}\n\t\tif (head!= null) {\n\t\t\thead.shadowCastingMode = ShadowCastingMode.On;\n\t\t}\n\t\tGameObject body = Instantiate(bodyPrefab);\n\t\tbody.name = \"RemotePlayerPrototype\";\n\t\tbody.SetActive(false);\n\t\treturn body;\n\t}\n}\n", "CodeBleu_score": 16.430403506600527}]}
{"instance_id": "e9bd7f669aed", "generation_result": [{"code": "void ICacheable.Save(BinaryWriter bw)\tbw.Write(CacheableType);\n\tbw.Write(CacheableKey);\n\tbw.Write(CacheableLocation);\n\tbw.Write(CacheableMetadata);\n\tbw.Write(CacheableProcess);\n\tbw.Write(CacheableDependency);\n\tbw.Write(CacheableIncompatibility);\n\tbw.Write(CacheableTargetVersion);\n\tbw.Write(CacheableExpiration);\n}\n", "CodeBleu_score": 18.657150343665457}, {"code": "void ICacheable.Save(BinaryWriter bw)\tbw.Write(GetType().FullName);\n\tbw.Write(Location);\n\tbw.Write(Metadata);\n\tbw.Write(Processes);\n\tbw.Write(Dependencies.Count);\n\tforeach (ICacheable dependency in Dependencies) {\n\t\tdependency.Save(bw);\n\t}\n\tbw.Write(Incompatibilities.Count);\n\tforeach (ICacheable incompatibility in Incompatibilities) {\n\t\tincompatibility.Save(bw);\n\t}\n\tbw.Write(TargetVersion);\n}\n", "CodeBleu_score": 35.05675266771709}, {"code": "void ICacheable.Save(BinaryWriter bw)\tbw.Write(GetType().FullName);\n\tbw.Write(location);\n\tbw.Write(metadata);\n\tbw.Write(processes);\n\tbw.Write(dependencies);\n\tbw.Write(incompatibilities);\n\tbw.Write(targetVersion);\n}\n", "CodeBleu_score": 16.18276385504407}]}
{"instance_id": "a7e51620987d", "generation_result": [{"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly)\tType pluginType = pluginAssembly.GetTypes().Single(t => t.Name == pluginInfo.TypeName);\n\tBasePlugin pluginInstance = (BasePlugin)Activator.CreateInstance(pluginType);\n\tpluginInstance.PluginInfo = pluginInfo;\n\tpluginInstance.Assembly = pluginAssembly;\n\tpluginInstance.Load();\n\treturn pluginInstance;\n}\n", "CodeBleu_score": 53.24609111889331}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly)\tType pluginType = pluginAssembly.GetType(pluginInfo.Type);\n\tBasePlugin pluginInstance = (BasePlugin) Activator.CreateInstance(pluginType);\n\tpluginInstance.PluginInfo = pluginInfo;\n\tpluginInstance.Assembly = pluginAssembly;\n\tpluginInstance.Load();\n\treturn pluginInstance;\n}\n", "CodeBleu_score": 58.08275022509548}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly)\tType pluginType = pluginAssembly.GetType(pluginInfo.TypeName);\n\tBasePlugin plugin = (BasePlugin)Activator.CreateInstance(pluginType);\n\tplugin.PluginLoad(pluginInfo);\n\tplugin.Load();\n\treturn plugin;\n}\n", "CodeBleu_score": 53.20009555898901}]}
{"instance_id": "0925dc086c01", "generation_result": [{"code": "public MethodBase GenerateTrampoline(MethodBase signature = null)\tif (TrampolineMethod!= null)\n\t\treturn TrampolineMethod;\n\tPrepare();\n\tif (signature == null)\n\t\treturn GenerateTrampoline();\n\treturn GenerateTrampoline(signature.GetParameters(), signature.ReturnType);\n}\n", "CodeBleu_score": 29.39987343067372}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null)\tif (TrampolineMethod!= null) return TrampolineMethod;\n\tPrepare();\n\tif (signature == null) {\n\t\tTrampolineMethod = new DynamicMethod(\n\t\t\t\"Trampoline_\" + Guid.NewGuid().ToString(\"N\"),\n\t\t\tMethodAttributes.Public | MethodAttributes.Static,\n\t\t\tCallingConventions.Standard,\n\t\t\ttypeof(IntPtr),\n\t\t\tnew Type[] { typeof(IntPtr) },\n\t\t\tModule,\n\t\t\ttrue);\n\t} else {\n\t\tTrampolineMethod = new DynamicMethod(\n\t\t\t\"Trampoline_\" + Guid.NewGuid().ToString(\"N\"),\n\t\t\tMethodAttributes.Public | MethodAttributes.Static,\n\t\t\tCallingConventions.Standard,\n\t\t\ttypeof(IntPtr),\n\t\t\tnew Type[] { typeof(IntPtr), signature.DeclaringType },\n\t\t\tModule,\n\t\t\ttrue);\n\t}\n\tILGenerator il = TrampolineMethod.GetILGenerator();\n\til.Emit(OpCodes.Ldarg_0);\n\tif (signature!= null) {\n\t\til.Emit(OpCodes.Ldarg_1);\n\t\til.Emit(OpCodes.Call, signature);\n\t}\n\til.Emit(OpCodes.Ret);\n\treturn TrampolineMethod;\n}\n", "CodeBleu_score": 38.720725559519686}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null)\tif (TrampolineMethod!= null) return TrampolineMethod;\n\tPrepare();\n\tif (signature == null) {\n\t\tTrampolineMethod = new TrampolineMethod(TrampolinePtr);\n\t} else {\n\t\tTrampolineMethod = new TrampolineMethod(TrampolinePtr, signature);\n\t}\n\treturn TrampolineMethod;\n}\n", "CodeBleu_score": 50.25688976478989}]}
{"instance_id": "cfab5c23610e", "generation_result": [{"code": "private static Dictionary<string, string> LoadLanguageInternal(string code)\tAssembly assembly = Assembly.GetExecutingAssembly();\n\tusing (Stream stream = assembly.GetManifestResourceStream(\"Language.\" + code + \".json\")) {\n\t\tif (stream == null) {\n\t\t\tthrow new NullReferenceException(\"Language file not found!\");\n\t\t}\n\t\tusing (StreamReader reader = new StreamReader(stream)) {\n\t\t\tstring json = reader.ReadToEnd();\n\t\t\ttry {\n\t\t\t\treturn Json.Deserialize<Dictionary<string, string>>(json);\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new JsonException(\"Failed to deserialize language file!\", e);\n\t\t\t}\n\t\t}\n\t}\n}\n", "CodeBleu_score": 43.84258707512211}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code)\tstring resourcePath = string.Format(\"Languages/{0}.json\", code);\n\tAssembly assembly = Assembly.GetExecutingAssembly();\n\tStream stream = assembly.GetManifestResourceStream(resourcePath);\n\tif (stream == null) throw new NullReferenceException(string.Format(\"Language file \\\"{0}\\\" not found.\", resourcePath));\n\tstring json = new StreamReader(stream).ReadToEnd();\n\ttry {\n\t\treturn JsonConvert.DeserializeObject<Dictionary<string, string>>(json);\n\t} catch (JsonException e) {\n\t\tthrow new JsonException(string.Format(\"Error deserializing language file \\\"{0}\\\".\", resourcePath), e);\n\t}\n}\n", "CodeBleu_score": 42.24403296959311}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code)\tStream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(String.Format(\"{0}.Resources.Languages.{1}.json\", Assembly.GetExecutingAssembly().GetName().Name, code));\n\tif (stream == null) {\n\t\tthrow new NullReferenceException(\"Language file not found.\");\n\t}\n\tusing (StreamReader reader = new StreamReader(stream)) {\n\t\tstring json = reader.ReadToEnd();\n\t\ttry {\n\t\t\treturn JsonSerializer.Deserialize<Dictionary<string, string>>(json);\n\t\t} catch (JsonException e) {\n\t\t\tthrow new JsonException(\"Failed to deserialize language file.\", e);\n\t\t}\n\t}\n}\n", "CodeBleu_score": 43.27123514321764}]}
{"instance_id": "9978bd31d199", "generation_result": [{"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes)\tint expressionCount = 0;\n\tforeach (var node in nodes) {\n\t\tif (node is ParserRuleContext) {\n\t\t\tVisit(node);\n\t\t\texpressionCount++;\n\t\t}\n\t}\n\n\treturn expressionCount;\n}\n", "CodeBleu_score": 40.88950854059241}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes)\tint expressionCount = 0;\n\tforeach (IParseTree node in nodes) {\n\t\tif (node is ParserRuleContext) {\n\t\t\tVisit(node);\n\t\t\texpressionCount++;\n\t\t}\n\t}\n\treturn expressionCount;\n}\n", "CodeBleu_score": 39.34627868871087}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes)\tint expressionCount = 0;\n\tforeach (var node in nodes) {\n\t\tif (node is ParserRuleContext context) {\n\t\t\tVisit(context);\n\t\t\texpressionCount++;\n\t\t}\n\t}\n\treturn expressionCount;\n}\n", "CodeBleu_score": 37.521130405574645}]}
{"instance_id": "8f9bf9ee575a", "generation_result": [{"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context)\tvar text = context.text().GetText();\n\tvar expressions = new List<Yarn.Instruction>();\n\n\tif (text.Length > 0) {\n\t\texpressions = this.VisitFormatted_text(context.text());\n\t}\n\n\t// Get the line ID from the text\n\tvar lineID = YarnSpinnerParserVisitor.ExtractLineID(text);\n\n\tif (lineID == null) {\n\t\tthrow new InvalidOperationException($\"Line statement is missing a line ID tag: {text}\");\n\t}\n\n\t// Emit a RunLine command\n\tvar lineCommand = new Yarn.Command(Yarn.CommandType.RunLine) {\n\t\ttext = text,\n\t\tlineID = lineID,\n\t\tparameters = expressions,\n\t};\n\n\tthis.AddCommand(lineCommand);\n\n\treturn 0;\n}\n", "CodeBleu_score": 41.92211883434175}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context)\tvar text = context.text();\n\tvar expressions = new List<YarnExpression>();\n\tvar expressionCount = 0;\n\n\tif (text!= null) {\n\t\t// Visit the text to get the expressions\n\t\tVisit(text);\n\n\t\t// Get the expressions\n\t\texpressions = _expressions;\n\n\t\t// Clear the expressions\n\t\t_expressions = new List<YarnExpression>();\n\n\t\t// Get the expression count\n\t\texpressionCount = expressions.Count;\n\t}\n\n\t// Get the line ID\n\tvar lineID = context.line_id().text;\n\n\t// Emit the RunLine opcode\n\tvar lineIDNumber = _stringTable.AddString(lineID);\n\t_output.Add(new Yarn.ByteCode.Commands.RunLine(_stringTable, lineIDNumber, expressionCount));\n\n\treturn 0;\n}\n", "CodeBleu_score": 35.02255949125796}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context)\tvar lineID = context.header().header_value().STRING().GetText();\n\tvar formatText = context.formatted_text();\n\tvar formatArgs = new List<Yarn.Value>();\n\tif (formatText!= null) {\n\t\tVisitFormatted_text(formatText, formatArgs);\n\t}\n\n\tvar expressionCount = formatArgs.Count;\n\n\t// If there's no line ID, throw an exception\n\tif (string.IsNullOrEmpty(lineID)) {\n\t\tthrow new InvalidOperationException($\"Line statement has no line ID tag\");\n\t}\n\n\t// If we have a line ID, but no expressions, throw an exception\n\tif (expressionCount == 0) {\n\t\tthrow new InvalidOperationException($\"Line statement with ID \\\"{lineID}\\\" has no expressions\");\n\t}\n\n\t// Emit a RunLine opcode\n\tvar lineIDBytes = Encoding.UTF8.GetBytes(lineID);\n\tvar lineIDLength = lineIDBytes.Length;\n\tvar bytes = new List<byte>();\n\tbytes.Add(Yarn.OpCode.RunLine);\n\tbytes.AddRange(Yarn.Utils.NumberConverter.Int32ToByteArray(lineIDLength));\n\tbytes.AddRange(lineIDBytes);\n\tbytes.AddRange(Yarn.Utils.NumberConverter.Int32ToByteArray(expressionCount));\n\n\t// Add the expression values to the bytecode\n\tfor (int i = 0; i < expressionCount; i++) {\n\t\tbytes.AddRange(Yarn.Utils.NumberConverter.ValueToByteArray(formatArgs[i]));\n\t}\n\n\tvar instruction = new Yarn.Instruction(bytes.ToArray());\n\toutput.Add(instruction);\n\n\treturn 0;\n}\n", "CodeBleu_score": 45.025287129936984}]}
{"instance_id": "b70d033fed9c", "generation_result": [{"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile)\tvar diagnostics = new List<Diagnostic>();\n\tvar knownCommands = yarnFile.AllCommands();\n\tforeach (var command in yarnFile.Commands) {\n\t\tif (!knownCommands.Contains(command.Name)) {\n\t\t\tvar diagnostic = new Diagnostic {\n\t\t\t\tseverity = DiagnosticSeverity.Warning,\n\t\t\t\tmessage = $\"Unknown command: '{command.Name}'\",\n\t\t\t\tcode = \"YRN001\",\n\t\t\t\tadditionalData = new Dictionary<string, object> {\n\t\t\t\t\t{ \"commandName\", command.Name },\n\t\t\t\t}\n\t\t\t};\n\t\t\tdiagnostics.Add(diagnostic);\n\t\t}\n\t}\n\treturn diagnostics;\n}\n", "CodeBleu_score": 19.561743954556448}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile)\tvar commands = yarnFile.GetCommands();\n\n\t// Get all the command names that are used in this file\n\tvar usedCommandNames = commands.Select(c => c.Name);\n\n\t// Get all the command names that are defined in this project\n\tvar knownCommandNames = _commands.Select(c => c.Name);\n\n\t// Get all the command names that are used but not defined in this project\n\tvar unknownCommandNames = usedCommandNames.Except(knownCommandNames);\n\n\t// For each unknown command, generate a diagnostic\n\tforeach (var commandName in unknownCommandNames) {\n\t\tvar diagnostic = Diagnostic.Create(\n\t\t\tUnknownCommandWarning,\n\t\t\tyarnFile.Node.GetLocation(),\n\t\t\tcommandName\n\t\t);\n\n\t\tyield return diagnostic;\n\t}\n}\n", "CodeBleu_score": 15.871014730154338}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile)\tvar diagnostics = new List<Diagnostic>();\n\tforeach (var command in yarnFile.Commands) {\n\t\tif (!command.IsImplicit) {\n\t\t\tif (command.Name.text!= \"cutscene\") {\n\t\t\t\tif (!YarnProject.Instance.HasCommand(command.Name.text)) {\n\t\t\t\t\tvar diagnostic = new Diagnostic {\n\t\t\t\t\t\tmessage = $\"Command '{command.Name.text}' is not defined in the project.\",\n\t\t\t\t\t\tseverity = DiagnosticSeverity.Warning,\n\t\t\t\t\t\tcode = \"YARNC001\",\n\t\t\t\t\t\tadditionalData = command.Name.text\n\t\t\t\t\t};\n\t\t\t\t\tdiagnostics.Add(diagnostic);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn diagnostics;\n}\n", "CodeBleu_score": 19.741194072903166}]}
{"instance_id": "9a072876f358", "generation_result": [{"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities)\tvar options = new CodeActionRegistrationOptions {\n\t\tDocumentSelector = DocumentSelectorFactory.Create(),\n\t\tCodeActionKinds = new[] { CodeActionKind.QuickFix }\n\t};\n\n\toptions.ResolveProvider = false;\n\n\treturn options;\n}\n", "CodeBleu_score": 35.91505309689551}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities)\tvar options = new CodeActionRegistrationOptions {\n\t\tDocumentSelector = DocumentSelectorFactory.Create()\n\t};\n\toptions.CodeActionKinds.Add(CodeActionKind.QuickFix);\n\toptions.ResolveProvider = false;\n\treturn options;\n}\n", "CodeBleu_score": 37.287178559881596}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities)\tvar options = new CodeActionRegistrationOptions() {\n\t\tDocumentSelector = new DocumentSelector(new DocumentFilter() {\n\t\t\tLanguage = \"yarn\",\n\t\t\tScheme = \"file\"\n\t\t}),\n\t\tCodeActionKinds = new Container<CodeActionKind>(CodeActionKind.QuickFix)\n\t};\n\toptions.ResolveProvider = false;\n\treturn options;\n}\n", "CodeBleu_score": 37.11676390099755}]}
{"instance_id": "7b61df32aee3", "generation_result": [{"code": "public bool TryGetValue<T>(string variableName, out T result)\tif (!HasVariable(variableName)) {\n\t\tresult = default(T);\n\t\treturn false;\n\t}\n\tresult = (T)variables[variableName];\n\treturn true;\n}\n", "CodeBleu_score": 22.022278170580638}, {"code": "public bool TryGetValue<T>(string variableName, out T result)\tif (variableName == null) throw new ArgumentNullException(\"variableName\");\n\tif (variableName == \"\") throw new ArgumentException(\"variableName cannot be empty\", \"variableName\");\n\tobject value = Get(variableName);\n\tif (value == null) {\n\t\tresult = default(T);\n\t\treturn false;\n\t}\n\tif (value is T) {\n\t\tresult = (T)value;\n\t\treturn true;\n\t}\n\tthrow new ArgumentException(\"The variable \" + variableName + \" is not of type \" + typeof(T).FullName);\n}\n", "CodeBleu_score": 40.23764100003092}, {"code": "public bool TryGetValue<T>(string variableName, out T result)\tif (variableName == null) throw new ArgumentNullException(\"variableName\");\n\tif (variableName.Length == 0) throw new ArgumentException(\"variableName cannot be empty\");\n\tif (variableName[0] == '$') throw new ArgumentException(\"variableName cannot start with a $\");\n\tif (variableName[0] == '_') throw new ArgumentException(\"variableName cannot start with an _\");\n\tif (variableName.Contains(\" \")) throw new ArgumentException(\"variableName cannot contain spaces\");\n\tif (variableName.Contains(\"\\n\")) throw new ArgumentException(\"variableName cannot contain newlines\");\n\tif (variableName.Contains(\"\\r\")) throw new ArgumentException(\"variableName cannot contain carriage returns\");\n\tif (variableName.Contains(\"\\t\")) throw new ArgumentException(\"variableName cannot contain tabs\");\n\tif (variableName.Contains(\"\\0\")) throw new ArgumentException(\"variableName cannot contain null characters\");\n\tif (variableName.Contains(\":\")) throw new ArgumentException(\"variableName cannot contain colons\");\n\tif (variableName.Contains(\"=\")) throw new ArgumentException(\"variableName cannot contain equals signs\");\n\tif (variableName.Contains(\";\")) throw new ArgumentException(\"variableName cannot contain semicolons\");\n\tif (variableName.Contains(\",\")) throw new ArgumentException(\"variableName cannot contain commas\");\n\tif (variableName.Contains(\".\")) throw new ArgumentException(\"variableName cannot contain periods\");\n\tif (variableName.Contains(\"!\")) throw new ArgumentException(\"variableName cannot contain exclamation points\");\n\tif (variableName.Contains(\"?\")) throw new ArgumentException(\"variableName cannot contain question marks\");\n\tif (variableName.Contains(\"[\")) throw new ArgumentException(\"variableName cannot contain square brackets\");\n\tif (variableName.Contains(\"]\")) throw new ArgumentException(\"variableName cannot contain square brackets\");\n\tif (variableName.Contains(\"(\")) throw new ArgumentException(\"variableName cannot contain parentheses\");\n\tif (variableName.Contains(\")\")) throw new ArgumentException(\"variableName cannot contain parentheses\");\n\tif (variableName.Contains(\"{\")) throw new ArgumentException(\"variableName cannot contain curly braces\");\n\tif (variableName.Contains(\"}\")) throw new ArgumentException(\"variableName cannot contain curly braces\");\n\tif (variableName.Contains(\"\\\"\")) throw new ArgumentException(\"variableName cannot contain double quotes\");\n\tif (variableName.Contains(\"\\'\")) throw new", "CodeBleu_score": 22.848352366980517}]}
{"instance_id": "7201488347ef", "generation_result": [{"code": "public Dialogue(Yarn.IVariableStorage variableStorage)\tthis.variableStorage = variableStorage;\n\tthis.library = new Yarn.Library();\n\tthis.variableStorage.SetValue(\"$null\", Value.NULL);\n\tthis.variableStorage.SetValue(\"$true\", Value.TRUE);\n\tthis.variableStorage.SetValue(\"$false\", Value.FALSE);\n\tthis.variableStorage.SetValue(\"$undefined\", Value.UNDEFINED);\n\tthis.variableStorage.SetValue(\"$line\", Value.NULL);\n\tthis.variableStorage.SetValue(\"$dialogue\", Value.NULL);\n\tthis.variableStorage.SetValue(\"$options\", Value.NULL);\n\tthis.variableStorage.SetValue(\"$current_options\", Value.NULL);\n\tthis.variableStorage.SetValue(\"$caller\", Value.NULL);\n\tthis.variableStorage.SetValue(\"$id\", Value.NULL);\n\tthis.variableStorage.SetValue(\"$temp\", Value.NULL);\n\tthis.variableStorage.SetValue(\"$return_value\", Value.NULL);\n\tthis.variableStorage.SetValue(\"$yarn_version\", new Value(Yarn.YarnSpinner.YARN_VERSION));\n\tthis.variableStorage.SetValue(\"$yarn_build_date\", new Value(Yarn.YarnSpinner.YARN_BUILD_DATE));\n\tthis.variableStorage.SetValue(\"$yarn_build_time\", new Value(Yarn.YarnSpinner.YARN_BUILD_TIME));\n\tthis.variableStorage.SetValue(\"$yarn_compiler\", new Value(Yarn.YarnSpinner.YARN_COMPILER));\n\tthis.variableStorage.SetValue(\"$nodes_visited\", Value.NULL);\n\tthis.variableStorage.SetValue(\"$divert_target_name\", Value.NULL);\n\tthis.variableStorage.SetValue(\"$divert_target_line\", Value.NULL);\n\tthis.variableStorage.SetValue(\"$current_node\", Value.NULL);\n\tthis.variableStorage.SetValue(\"$visited_count\", Value.ZERO);\n\tthis.variableStorage.SetValue(\"$version\", Value.ZERO);\n\tthis.variableStorage.SetValue(\"$log\", Value.NULL);\n\tthis.variableStorage.SetValue(\"$has_fired\", Value.FALSE);\n\tthis.variableStorage.SetValue(\"$visited\", Value.FALSE);\n\tthis.variableStorage.SetValue(\"$temp_time\", Value.ZERO);\n\tthis.variableStorage.SetValue(\"$temp_date\", Value.", "CodeBleu_score": 18.805782723937295}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage)\tthis.variableStorage = variableStorage;\n\tthis.library = new Yarn.Library();\n\tthis.virtualMachine = new Yarn.VirtualMachine(library);\n\tthis.importLibrary(new StandardLibrary());\n\tthis.nodeVisitedHandler = new System.Action<string>(OnNodeVisited);\n\tthis.nodeStartHandler = new System.Action<string>(OnNodeStart);\n\tthis.nodeCompleteHandler = new System.Action<string>(OnNodeComplete);\n\tthis.lineParser = new Yarn.LineParser();\n\tthis.lineParser.AddMarkerProcessor(\"select\", new Yarn.Unity.DialogueUI.SelectMarkerProcessor());\n\tthis.lineParser.AddMarkerProcessor(\"plural\", new Yarn.Unity.DialogueUI.PluralMarkerProcessor());\n\tthis.lineParser.AddMarkerProcessor(\"ordinal\", new Yarn.Unity.DialogueUI.OrdinalMarkerProcessor());\n}\n", "CodeBleu_score": 33.66314880947897}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage)\tthis.variableStorage = variableStorage;\n\tthis.library = new Yarn.Library();\n\tthis.vm = new Yarn.VirtualMachine(library);\n\n\t// Register functions for node visit tracking\n\tvm.onLineStart += delegate {\n\t\tcurrentNode = vm.currentLine.ID;\n\t};\n\tvm.onLineFinish += delegate {\n\t\tcurrentNode = \"\";\n\t};\n\n\t// Import the standard library\n\tvar standardLibraryFilename = Application.streamingAssetsPath + \"/yarn-standard-library.yarnc\";\n\tvar bytes = File.ReadAllBytes(standardLibraryFilename);\n\tvar text = System.Text.Encoding.UTF8.GetString(bytes);\n\tvar compiledScript = library.Compile(text);\n\tlibrary.SetFunction(\"print\", Print);\n\tlibrary.SetFunction(\"assert\", Assert);\n\tlibrary.SetFunction(\"add\", Add);\n\tlibrary.SetFunction(\"sub\", Subtract);\n\tlibrary.SetFunction(\"mult\", Multiply);\n\tlibrary.SetFunction(\"div\", Divide);\n\tlibrary.SetFunction(\"mod\", Modulo);\n\tlibrary.SetFunction(\"pow\", Power);\n\tlibrary.SetFunction(\"eq\", EqualTo);\n\tlibrary.SetFunction(\"ne\", NotEqualTo);\n\tlibrary.SetFunction(\"lt\", LessThan);\n\tlibrary.SetFunction(\"gt\", GreaterThan);\n\tlibrary.SetFunction(\"lte\", LessThanOrEqualTo);\n\tlibrary.SetFunction(\"gte\", GreaterThanOrEqualTo);\n\tlibrary.SetFunction(\"and\", And);\n\tlibrary.SetFunction(\"or\", Or);\n\tlibrary.SetFunction(\"not\", Not);\n\tlibrary.SetFunction(\"string\", ConvertToString);\n\tlibrary.SetFunction(\"concat\", ConcatenateStrings);\n\tlibrary.SetFunction(\"join\", JoinStrings);\n\tlibrary.SetFunction(\"count\", Count);\n\tlibrary.SetFunction(\"contains\", Contains);\n\tlibrary.SetFunction(\"startsWith\", StartsWith);\n\tlibrary.SetFunction(\"endsWith\", EndsWith);\n\tlibrary.SetFunction(\"if\", IfFunction);\n\tlibrary.SetFunction(\"set\", SetValue);\n\tlibrary.SetFunction(\"jump\", JumpToNode);\n\tlibrary.SetFunction(\"stop\", Stop);\n\tlibrary.SetFunction(\"list\", List);\n\tlibrary.SetFunction(\"pop\", PopList);", "CodeBleu_score": 24.322426895120596}]}
{"instance_id": "59b7b5a9c34a", "generation_result": [{"code": "public int FindUniqueID(string UniqueID)\tif (string.IsNullOrEmpty(UniqueID)) return -1;\n\tint count = LoopListBankData.Count;\n\tfor (int i = 0; i < count; i++) {\n\t\tif (LoopListBankData[i].UniqueID == UniqueID) return i;\n\t}\n\treturn -1;\n}\n", "CodeBleu_score": 61.04754478618363}, {"code": "public int FindUniqueID(string UniqueID)\tif (UniqueID == null || UniqueID.Length == 0)\n\t\treturn -1;\n\tfor (int i = 0; i < this.Count; i++) {\n\t\tif (this[i].UniqueID == UniqueID)\n\t\t\treturn i;\n\t}\n\treturn -1;\n}\n", "CodeBleu_score": 44.8059883204197}, {"code": "public int FindUniqueID(string UniqueID)\tif (UniqueID == null || UniqueID.Length == 0) return -1;\n\tfor (int i = 0; i < this.LoopListBankData.Count; i++) {\n\t\tif (this.LoopListBankData[i].UniqueID == UniqueID) return i;\n\t}\n\treturn -1;\n}\n", "CodeBleu_score": 48.117405379556125}]}
{"instance_id": "2b85606238aa", "generation_result": [{"code": "public void AddContent(object newContent)\tLoopListBankData newBankData = new LoopListBankData();\n\tnewBankData.m_Content = newContent;\n\tnewBankData.m_ID = m_UniqueID;\n\tm_UniqueID++;\n\tm_LoopListBankDataList.Add(newBankData);\n}\n", "CodeBleu_score": 34.97476509245363}, {"code": "public void AddContent(object newContent)\tLoopListBankData newLoopListBankData = new LoopListBankData();\n\tnewLoopListBankData.m_Content = newContent;\n\tnewLoopListBankData.m_UniqueID = m_UniqueIDCounter;\n\tm_UniqueIDCounter++;\n\tm_LoopListBankDataList.Add(newLoopListBankData);\n}\n", "CodeBleu_score": 35.00634203366643}, {"code": "public void AddContent(object newContent)\tLoopListBankData newLoopListBankData = new LoopListBankData();\n\tnewLoopListBankData.m_Content = newContent;\n\tnewLoopListBankData.m_UniqueID = Guid.NewGuid();\n\tm_LoopListBankDataList.Add(newLoopListBankData);\n}\n", "CodeBleu_score": 41.81233927413486}]}
{"instance_id": "34e593106991", "generation_result": [{"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null)\tm_IndexID = idx;\n\tm_Content = content;\n\tif (m_IsUpdateGameObjectName) {\n\t\tstring prefabName = m_Content.ToString();\n\t\tif (prefabName.Contains(\" (\")) {\n\t\t\tprefabName = prefabName.Substring(0, prefabName.IndexOf(\" (\"));\n\t\t}\n\t\tgameObject.name = prefabName + \" (\" + m_IndexID.ToString() + \")\";\n\t}\n\tif (m_IsUpdateCellSize) {\n\t\tif (m_Content!= null) {\n\t\t\tm_CellSize = m_Content.GetComponent<RectTransform>().rect.size;\n\t\t}\n\t}\n\tif (m_IsUpdateCellSize) {\n\t\tif (m_Content!= null) {\n\t\t\tm_CellSize = m_Content.GetComponent<RectTransform>().rect.size;\n\t\t}\n\t}\n\tif (m_IsUpdateCellSize) {\n\t\tif (m_Content!= null) {\n\t\t\tm_CellSize = m_Content.GetComponent<RectTransform>().rect.size;\n\t\t}\n\t}\n\tif (m_IsUpdateCellSize) {\n\t\tif (m_Content!= null) {\n\t\t\tm_CellSize = m_Content.GetComponent<RectTransform>().rect.size;\n\t\t}\n\t}\n\tif (m_IsUpdateCellSize) {\n\t\tif (m_Content!= null) {\n\t\t\tm_CellSize = m_Content.GetComponent<RectTransform>().rect.size;\n\t\t}\n\t}\n\tif (m_IsUpdateCellSize) {\n\t\tif (m_Content!= null) {\n\t\t\tm_CellSize = m_Content.GetComponent<RectTransform>().rect.size;\n\t\t}\n\t}\n\tif (m_IsUpdateCellSize) {\n\t\tif (m_Content!= null) {\n\t\t\tm_CellSize = m_Content.GetComponent<RectTransform>().rect.size;\n\t\t}\n\t}\n\tif (m_IsUpdateCellSize) {\n\t\tif (m_Content!= null) {\n\t\t\tm_CellSize = m_Content.GetComponent<RectTransform>().rect.size;\n\t\t}\n\t}\n\tif (m_IsUpdateCellSize) {\n\t\tif (", "CodeBleu_score": 50.810640539679056}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null)\tif (m_ScrollCellPrefab == null) {\n\t\treturn;\n\t}\n\n\tm_IndexID = idx;\n\tm_Content = content;\n\n\tif (m_IsUpdateGameObjectName) {\n\t\tstring prefabName = m_ScrollCellPrefab.name;\n\t\tstring indexStr = \"\";\n\n\t\tif (m_IndexID >= 0) {\n\t\t\tindexStr = \" \" + m_IndexID.ToString();\n\t\t}\n\n\t\tstring finalName = prefabName + indexStr;\n\n\t\tif (m_Content!= null) {\n\t\t\tfinalName += \" - \" + m_Content.ToString();\n\t\t}\n\n\t\tgameObject.name = finalName;\n\t}\n}\n", "CodeBleu_score": 52.261517403536594}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null)\tm_IndexID = idx;\n\tm_Content = content;\n\tif (m_IsUpdateGameObjectName) {\n\t\tif (ClickUniqueID.Length > 0) {\n\t\t\tm_Content = string.Format(\"{0} {1}\", ClickUniqueID, m_Content);\n\t\t}\n\t\tif (ClickObject!= null) {\n\t\t\tm_Content = string.Format(\"{0} {1}\", ClickObject.name, m_Content);\n\t\t}\n\t\tgameObject.name = string.Format(\"{0} {1}\", m_Content, m_IndexID);\n\t}\n}\n", "CodeBleu_score": 58.64225979455864}]}
{"instance_id": "6b6a6cc329cc", "generation_result": [{"code": "private void OnButtonAddDataClickk()\tint count = int.Parse(inputField.text);\n\tif (count < 1) {\n\t\tcount = 1;\n\t}\n\tfor (int i = 0; i < count; i++) {\n\t\tbank.Add(Random.Range(0, 10));\n\t}\n\ttotalCountText.text = \"Total Count: \" + bank.Count;\n\tRefreshCells();\n}\n", "CodeBleu_score": 28.675655371554328}, {"code": "private void OnButtonAddDataClickk()\tint count = 0;\n\tif (!string.IsNullOrEmpty(inputField.text)) {\n\t\tcount = int.Parse(inputField.text);\n\t}\n\tif (count == 0) {\n\t\tcount = 1;\n\t}\n\tfor (int i = 0; i < count; i++) {\n\t\tlistBank.Add(Random.Range(0, 10));\n\t}\n\tUpdateScrollRect();\n\tRefreshCells();\n}\n", "CodeBleu_score": 37.14380961706002}, {"code": "private void OnButtonAddDataClickk()\t// Determine the number of items to add.\n\tint numItemsToAdd = 0;\n\tif (int.TryParse(inputField.text, out numItemsToAdd)) {\n\t\t// Ensure at least one item is added.\n\t\tif (numItemsToAdd < 1) {\n\t\t\tnumItemsToAdd = 1;\n\t\t}\n\t} else {\n\t\t// If the input field text is not an integer, set the number of items to add to 1.\n\t\tnumItemsToAdd = 1;\n\t}\n\n\t// Add the random integers to the list bank.\n\tfor (int i = 0; i < numItemsToAdd; i++) {\n\t\tlistBank.Add(Random.Range(0, 10));\n\t}\n\n\t// Update the total count of the scroll rect.\n\tscrollRect.content.sizeDelta = new Vector2(0, (listBank.Count + 1) * itemHeight);\n\n\t// Refresh the displayed cells.\n\tRefreshCells();\n}\n", "CodeBleu_score": 37.05448264125019}]}
{"instance_id": "209961c9eb8e", "generation_result": [{"code": "protected override void ClearTempPool()\tif (m_TempPool == null) {\n\t\treturn;\n\t}\n\tif (m_TempPool.Count!= m_TempPoolSize) {\n\t\tDebug.LogError(\"Incorrect temp pool size \" + m_TempPool.Count + \"!= \" + m_TempPoolSize);\n\t}\n\tint count = m_TempPool.Count;\n\tfor (int i = 0; i < count; ++i) {\n\t\tTransform child = m_TempPool[i];\n\t\tif (child.parent!= null) {\n\t\t\tchild.parent = null;\n\t\t}\n\t\tif (child.gameObject.activeSelf) {\n\t\t\tchild.gameObject.SetActive(false);\n\t\t}\n\t\tif (m_TempPoolStart == i) {\n\t\t\tm_TempPoolStart = -1;\n\t\t}\n\t\tif (m_TempPoolEnd == i) {\n\t\t\tm_TempPoolEnd = -1;\n\t\t}\n\t}\n\tm_TempPool.Clear();\n}\n", "CodeBleu_score": 27.367298269460292}, {"code": "protected override void ClearTempPool()\tif (m_TempPool.Count > 0) {\n\t\tif (m_TempPool.Count!= m_NumElements) {\n\t\t\tDebug.LogError(\"ClearTempPool: m_TempPool.Count (\" + m_TempPool.Count + \")!= m_NumElements (\" + m_NumElements + \")\");\n\t\t\treturn;\n\t\t}\n\t\tif (m_StartElementIndex > 0) {\n\t\t\t// Return elements to the prefab source\n\t\t\tfor (int i = 0; i < m_StartElementIndex; ++i) {\n\t\t\t\tm_PrefabSource.ReturnToPool(m_TempPool[i]);\n\t\t\t}\n\t\t\t// Reset the start index\n\t\t\tm_StartElementIndex = 0;\n\t\t}\n\t\tif (m_EndElementIndex < m_NumElements) {\n\t\t\t// Return elements to the prefab source\n\t\t\tfor (int i = m_EndElementIndex; i < m_NumElements; ++i) {\n\t\t\t\tm_PrefabSource.ReturnToPool(m_TempPool[i]);\n\t\t\t}\n\t\t\t// Reset the end index\n\t\t\tm_EndElementIndex = m_NumElements;\n\t\t}\n\t\t// Reset the temp pool\n\t\tm_TempPool.Clear();\n\t}\n}\n", "CodeBleu_score": 37.990429605585696}, {"code": "protected override void ClearTempPool()\tif (m_TempPool.Count!= m_TempPoolStartSize) {\n\t\t// The temp pool is not empty.\n\t\t// If there are items marked for deletion at the start, return them to the prefab source and reset the start index.\n\t\tif (m_TempPoolStartIndex > 0) {\n\t\t\tfor (int i = 0; i < m_TempPoolStartIndex; i++) {\n\t\t\t\tm_TempPool[i].ReturnToSource();\n\t\t\t}\n\t\t\tm_TempPoolStartIndex = 0;\n\t\t}\n\t\t// If there are items marked for deletion at the end, return them to the prefab source and reset the end index.\n\t\tif (m_TempPoolEndIndex < m_TempPool.Count) {\n\t\t\tfor (int i = m_TempPoolEndIndex; i < m_TempPool.Count; i++) {\n\t\t\t\tm_TempPool[i].ReturnToSource();\n\t\t\t}\n\t\t\tm_TempPoolEndIndex = m_TempPool.Count;\n\t\t}\n\t\t// Check that the temp pool is now empty.\n\t\tif (m_TempPool.Count!= m_TempPoolStartSize) {\n\t\t\tDebug.LogError(\"The temp pool is not empty after clearing it.\");\n\t\t}\n\t}\n}\n", "CodeBleu_score": 31.99293859575565}]}
{"instance_id": "c6bb290de2b3", "generation_result": [{"code": "public void AnticipateScale(Vector3 newScale)\tif (NetworkServer.active) {\n\t\ttransform.localScale = newScale;\n\t\ttransform.hasChanged = true;\n\t\tif (NetworkClient.active && ClientScene.ready && ClientScene.localPlayers.Count > 0) {\n\t\t\tClientScene.ready = false;\n\t\t\tClientScene.localPlayers[0].CmdSetScale(transform.localScale);\n\t\t}\n\t\tif (NetworkServer.active) {\n\t\t\tNetworkServer.SetAllClientsNotReady();\n\t\t}\n\t\tif (NetworkServer.active && NetworkServer.localClientActive) {\n\t\t\ttransform.localScale = newScale;\n\t\t\ttransform.hasChanged = true;\n\t\t}\n\t\tif (NetworkServer.active && NetworkServer.localClientActive) {\n\t\t\ttransform.localScale = newScale;\n\t\t\ttransform.hasChanged = true;\n\t\t}\n\t\tif (NetworkServer.active && NetworkServer.localClientActive) {\n\t\t\ttransform.localScale = newScale;\n\t\t\ttransform.hasChanged = true;\n\t\t}\n\t\tif (NetworkServer.active && NetworkServer.localClientActive) {\n\t\t\ttransform.localScale = newScale;\n\t\t\ttransform.hasChanged = true;\n\t\t}\n\t\tif (NetworkServer.active && NetworkServer.localClientActive) {\n\t\t\ttransform.localScale = newScale;\n\t\t\ttransform.hasChanged = true;\n\t\t}\n\t\tif (NetworkServer.active && NetworkServer.localClientActive) {\n\t\t\ttransform.localScale = newScale;\n\t\t\ttransform.hasChanged = true;\n\t\t}\n\t\tif (NetworkServer.active && NetworkServer.localClientActive) {\n\t\t\ttransform.localScale = newScale;\n\t\t\ttransform.hasChanged = true;\n\t\t}\n\t\tif (NetworkServer.active && NetworkServer.localClientActive) {\n\t\t\ttransform.localScale = newScale;\n\t\t\ttransform.hasChanged = true;\n\t\t}\n\t\tif (NetworkServer.active && NetworkServer.localClientActive) {\n\t\t\ttransform.localScale = newScale;\n\t\t\ttransform.hasChanged = true;\n\t\t}\n\t\tif (NetworkServer.active && NetworkServer.localClientActive) {\n\t\t\ttransform.localScale = newScale;\n\t\t\ttransform.hasChanged = true;\n\t\t}\n\t\tif (NetworkServer.active && NetworkServer.local", "CodeBleu_score": 21.314440542054843}, {"code": "public void AnticipateScale(Vector3 newScale)\tif (NetworkManager.singleton.isNetworkActive && NetworkServer.active) {\n\t\ttransform.localScale = newScale;\n\t\tif (NetworkManager.singleton.matchMaker!= null) {\n\t\t\tNetworkManager.singleton.matchMaker.SetMatchSize(NetworkManager.singleton.maxConnections);\n\t\t}\n\t\tif (NetworkServer.active) {\n\t\t\tNetworkServer.SetAllClientsNotReady();\n\t\t\tNetworkServer.SpawnObjects();\n\t\t\tNetworkServer.SetAllClientsReady();\n\t\t}\n\t\tif (NetworkManager.singleton.client!= null) {\n\t\t\tNetworkManager.singleton.client.SendWriterToReadyPlayers(NetworkWriter.Create(new ScaleMessage(transform.localScale, NetworkTime.time)));\n\t\t}\n\t\tif (NetworkManager.singleton.server!= null) {\n\t\t\tNetworkManager.singleton.server.SendWriterToAllClients(NetworkWriter.Create(new ScaleMessage(transform.localScale, NetworkTime.time)));\n\t\t}\n\t\tanticipatedScale = newScale;\n\t\tanticipationCounter = anticipationCounter + 1;\n\t\tanticipationTime = anticipationTime + NetworkTime.time;\n\t\tsmoothTransitionDuration = 0;\n\t\tcurrentSmoothTime = 0;\n\t}\n}\n", "CodeBleu_score": 40.826733954343986}, {"code": "public void AnticipateScale(Vector3 newScale)\tif (NetworkManager.singleton.isNetworkActive && NetworkManager.singleton.client.connection.isReady) {\n\t\t// Set the local scale to the new value\n\t\ttransform.localScale = newScale;\n\n\t\t// Set the anticipated scale to the new value\n\t\tanticipatedScale = newScale;\n\n\t\t// Update the authoritative scale\n\t\tif (NetworkManager.singleton.client.connection.playerControllerId == playerControllerId) {\n\t\t\tNetworkManager.singleton.client.connection.playerController.transform.localScale = newScale;\n\t\t}\n\n\t\t// Record the anticipated transform\n\t\tanticipatedTransform = transform;\n\n\t\t// Update the anticipation counters and times\n\t\tanticipationCounter = 0;\n\t\tanticipationTime = Time.time;\n\t\tanticipatedTime = Time.time;\n\n\t\t// Reset the smooth transition duration and current smooth time\n\t\tsmoothTransitionDuration = 0;\n\t\tcurrentSmoothTime = 0;\n\t}\n}\n", "CodeBleu_score": 37.59000769336931}]}
{"instance_id": "d67d3c80dd00", "generation_result": [{"code": "private void FlushMessages()\tif (IsServer) {\n\t\tforeach (var message in _animationMessages) {\n\t\t\tif (message.Target == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tmessage.Target.RpcSyncAnimation(message.Parameter, message.Value);\n\t\t}\n\n\t\tforeach (var message in _parameterMessages) {\n\t\t\tif (message.Target == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tmessage.Target.RpcSyncParameter(message.Parameter, message.Value);\n\t\t}\n\n\t\tforeach (var message in _triggerMessages) {\n\t\t\tif (message.Target == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tmessage.Target.RpcSyncTrigger(message.Parameter, message.Value);\n\t\t}\n\t} else {\n\t\tforeach (var message in _animationMessages) {\n\t\t\tif (message.Target == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tmessage.Target.RpcSyncAnimation(message.Parameter, message.Value);\n\t\t}\n\n\t\tforeach (var message in _parameterMessages) {\n\t\t\tif (message.Target == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tmessage.Target.RpcSyncParameter(message.Parameter, message.Value);\n\t\t}\n\n\t\tforeach (var message in _triggerMessages) {\n\t\t\tif (message.Target == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tmessage.Target.RpcSyncTrigger(message.Parameter, message.Value);\n\t\t}\n\t}\n\n\t_animationMessages.Clear();\n\t_parameterMessages.Clear();\n\t_triggerMessages.Clear();\n}\n", "CodeBleu_score": 47.857684141364246}, {"code": "private void FlushMessages()\t// Send animation updates\n\tforeach (var client in Clients) {\n\t\tforeach (var animUpdate in client.AnimationUpdates) {\n\t\t\tclient.SendRPC(\"UpdateAnimation\", animUpdate);\n\t\t}\n\t\tclient.AnimationUpdates.Clear();\n\t}\n\tforeach (var server in Servers) {\n\t\tforeach (var animUpdate in server.AnimationUpdates) {\n\t\t\tserver.SendRPC(\"UpdateAnimation\", animUpdate);\n\t\t}\n\t\tserver.AnimationUpdates.Clear();\n\t}\n\n\t// Send parameter updates\n\tforeach (var client in Clients) {\n\t\tforeach (var paramUpdate in client.ParameterUpdates) {\n\t\t\tclient.SendRPC(\"UpdateParameter\", paramUpdate);\n\t\t}\n\t\tclient.ParameterUpdates.Clear();\n\t}\n\tforeach (var server in Servers) {\n\t\tforeach (var paramUpdate in server.ParameterUpdates) {\n\t\t\tserver.SendRPC(\"UpdateParameter\", paramUpdate);\n\t\t}\n\t\tserver.ParameterUpdates.Clear();\n\t}\n\n\t// Send trigger updates\n\tforeach (var client in Clients) {\n\t\tforeach (var triggerUpdate in client.TriggerUpdates) {\n\t\t\tclient.SendRPC(\"UpdateTrigger\", triggerUpdate);\n\t\t}\n\t\tclient.TriggerUpdates.Clear();\n\t}\n\tforeach (var server in Servers) {\n\t\tforeach (var triggerUpdate in server.TriggerUpdates) {\n\t\t\tserver.SendRPC(\"UpdateTrigger\", triggerUpdate);\n\t\t}\n\t\tserver.TriggerUpdates.Clear();\n\t}\n}\n", "CodeBleu_score": 42.96559257757006}, {"code": "private void FlushMessages()\t// Send animation updates\n\tif (m_animUpdateList.Count > 0) {\n\t\tif (IsServer) {\n\t\t\tforeach (var client in ConnectedClients) {\n\t\t\t\tRpcUnreliable(client, \"UpdateAnimation\", m_animUpdateList);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tRpcUnreliable(\"UpdateAnimation\", m_animUpdateList);\n\t\t}\n\t\tm_animUpdateList.Clear();\n\t}\n\n\t// Send parameter updates\n\tif (m_paramUpdateList.Count > 0) {\n\t\tif (IsServer) {\n\t\t\tforeach (var client in ConnectedClients) {\n\t\t\t\tRpcUnreliable(client, \"UpdateParameters\", m_paramUpdateList);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tRpcUnreliable(\"UpdateParameters\", m_paramUpdateList);\n\t\t}\n\t\tm_paramUpdateList.Clear();\n\t}\n\n\t// Send trigger updates\n\tif (m_triggerUpdateList.Count > 0) {\n\t\tif (IsServer) {\n\t\t\tforeach (var client in ConnectedClients) {\n\t\t\t\tRpcUnreliable(client, \"UpdateTriggers\", m_triggerUpdateList);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tRpcUnreliable(\"UpdateTriggers\", m_triggerUpdateList);\n\t\t}\n\t\tm_triggerUpdateList.Clear();\n\t}\n}\n", "CodeBleu_score": 42.7008463681981}]}
{"instance_id": "0632b2f27d22", "generation_result": [{"code": "public void NetworkUpdate(NetworkUpdateStage updateStage)\tif (isServer) {\n\t\t// If the client is the owner, flush pending messages\n\t\tif (hasAuthority) {\n\t\t\tFlushPendingMessages();\n\t\t}\n\n\t\t// Process parameter updates\n\t\tProcessParameterUpdates();\n\n\t\t// Check for animator changes\n\t\tCheckForAnimatorChanges();\n\t}\n}\n", "CodeBleu_score": 4.23954454098049}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage)\tif (updateStage == NetworkUpdateStage.PreUpdate) {\n\t\t// If this is the owner of the animator, or the server, flush the pending messages\n\t\tif (isServer || isOwner) {\n\t\t\tFlushPendingMessages();\n\t\t}\n\t} else if (updateStage == NetworkUpdateStage.Update) {\n\t\t// If the animator is the server, process parameter updates\n\t\tif (isServer) {\n\t\t\tProcessParameterUpdates();\n\t\t}\n\n\t\t// If the animator is the owner, check for animator changes\n\t\tif (isOwner) {\n\t\t\tCheckForAnimatorChanges();\n\t\t}\n\t}\n}\n", "CodeBleu_score": 13.917683431316764}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage)\t// flush pending messages if this is the owner or the server\n\tif (isServer || isOwner) {\n\t\tFlushPendingMessages();\n\t}\n\n\t// process parameter updates\n\tif (updateStage >= NetworkUpdateStage.UpdateParameters) {\n\t\tProcessAnimationParameters();\n\t}\n\n\t// check for animator changes\n\tif (updateStage >= NetworkUpdateStage.CheckAnimation) {\n\t\tCheckAnimator();\n\t}\n}\n", "CodeBleu_score": 20.773439667904466}]}
{"instance_id": "d78874b65b32", "generation_result": [{"code": "private void UpdateOwnershipAuthority()\t// If the object has an owner, it is owned by the server.\n\tif (ownershipAuthority.OwnerID!= 0) {\n\t\t// If the object is not kinematic, it is not owned by the server.\n\t\tif (!rigidbody.isKinematic) {\n\t\t\t// If the server is not the owner, set the Rigidbody's kinematic property to true.\n\t\t\tif (ownershipAuthority.OwnerID!= Networking.LocalPlayer.netId) {\n\t\t\t\trigidbody.isKinematic = true;\n\t\t\t}\n\t\t\t// If the server is the owner, set the Rigidbody's interpolation property to true.\n\t\t\telse {\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t\t}\n\t\t}\n\t}\n}\n", "CodeBleu_score": 25.474748024827566}, {"code": "private void UpdateOwnershipAuthority()\tif (ownershipAuthority == OwnershipAuthority.Server) {\n\t\tif (isServer) {\n\t\t\tif (!isOwnedByServer) {\n\t\t\t\tisOwnedByServer = true;\n\t\t\t\trigidbody.isKinematic = false;\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (isOwnedByServer) {\n\t\t\t\tisOwnedByServer = false;\n\t\t\t\trigidbody.isKinematic = true;\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.None;\n\t\t\t}\n\t\t}\n\t}\n\telse if (ownershipAuthority == OwnershipAuthority.Client) {\n\t\tif (isClient) {\n\t\t\tif (!isOwnedByClient) {\n\t\t\t\tisOwnedByClient = true;\n\t\t\t\trigidbody.isKinematic = false;\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (isOwnedByClient) {\n\t\t\t\tisOwnedByClient = false;\n\t\t\t\trigidbody.isKinematic = true;\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.None;\n\t\t\t}\n\t\t}\n\t}\n}\n", "CodeBleu_score": 19.449984249316017}, {"code": "private void UpdateOwnershipAuthority()\tif (isServer) {\n\t\tif (isOwnedByServer) {\n\t\t\trigidbody.isKinematic = true;\n\t\t\trigidbody.interpolation = RigidbodyInterpolation.None;\n\t\t\trigidbody.detectCollisions = false;\n\t\t} else {\n\t\t\trigidbody.isKinematic = false;\n\t\t\trigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t\trigidbody.detectCollisions = true;\n\t\t}\n\t}\n}\n", "CodeBleu_score": 24.493307738359693}]}
{"instance_id": "304fe1278db9", "generation_result": [{"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed)\tfloat sqrMag = 0f;\n\tfloat x, y, z, w;\n\tuint highestBit = compressed & 0b10000000000000000000000000000000;\n\tuint nextHighestBit = compressed & 0b01000000000000000000000000000000;\n\tuint nextNextHighestBit = compressed & 0b00100000000000000000000000000000;\n\tuint nextNextNextHighestBit = compressed & 0b00010000000000000000000000000000;\n\tuint nextNextNextNextHighestBit = compressed & 0b00001000000000000000000000000000;\n\tuint nextNextNextNextNextHighestBit = compressed & 0b00000100000000000000000000000000;\n\tuint nextNextNextNextNextNextHighestBit = compressed & 0b00000010000000000000000000000000;\n\tuint nextNextNextNextNextNextNextHighestBit = compressed & 0b00000001000000000000000000000000;\n\tuint nextNextNextNextNextNextNextNextHighestBit = compressed & 0b00000000100000000000000000000000;\n\tuint nextNextNextNextNextNextNextNextNextHighestBit = compressed & 0b00000000010000000000000000000000;\n\tuint nextNextNext", "CodeBleu_score": 11.002435560284948}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed)\tfloat x2 = (compressed & 0x000003FF) / 1023.0f;\n\tfloat y2 = (compressed & 0x000FFC00) / 1023.0f;\n\tfloat z2 = (compressed & 0x3FF00000) / 1023.0f;\n\tfloat w2 = (compressed & 0xC0000000) / 1023.0f;\n\tfloat largest = x2;\n\tuint largestIndex = 0;\n\tif (y2 > largest) {\n\t\tlargest = y2;\n\t\tlargestIndex = 1;\n\t}\n\tif (z2 > largest) {\n\t\tlargest = z2;\n\t\tlargestIndex = 2;\n\t}\n\tif (w2 > largest) {\n\t\tlargest = w2;\n\t\tlargestIndex = 3;\n\t}\n\tif (largestIndex == 0) {\n\t\tx2 = largest;\n\t\ty2 = (compressed & 0x0000FC00) / 1023.0f;\n\t\tz2 = (compressed & 0x03FF0000) / 1023.0f;\n\t\tw2 = (compressed & 0xFC000000) / 1023.0f;\n\t}\n\telse if (largestIndex == 1) {\n\t\ty2 = largest;\n\t\tx2 = (compressed & 0x0000FC00) / 1023.0f;\n\t\tz2 = (compressed & 0x03FF0000) / 1023.0f;\n\t\tw2 = (compressed & 0xFC000000) / 1023.0f;\n\t}\n\telse if (largestIndex == 2) {\n\t\tz2 = largest;\n\t\tx2 = (compressed & 0x0000FC00) / 1023.0f;\n\t\ty2 = (compressed & 0x03FF0000) / 1023.0f;", "CodeBleu_score": 15.644245494709475}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed)\t// First, decompress the first component\n\tfloat x = (float) (compressed & 0x3FF);\n\tx = x / 1023.0f;\n\tx = x * 2.0f - 1.0f;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x * x;\n\tx = x", "CodeBleu_score": 11.197629924951597}]}
{"instance_id": "452b860a7dde", "generation_result": [{"code": "static void GenerateCLRBindingByAnalysis()\ttry {\n\t\tvar clrBinding = new ILRuntime.Runtime.Enviorment.AppDomain();\n\t\tclrBinding.LoadAssembly(System.IO.Path.Combine(Application.dataPath, \"Assembly-CSharp.dll\"));\n\t\tILRuntime.Runtime.CLRBinding.BindingCodeGenerator.GenerateBindingCode(clrBinding, \"Assets/Script/Binding/Analysis\");\n\t\tAssetDatabase.Refresh();\n\t}\n\tcatch (Exception e) {\n\t\tDebug.LogError(\"Generate CLR Binding code fail, please check the error message from the console\");\n\t\tDebug.LogError(e);\n\t}\n}\n", "CodeBleu_score": 23.515773184961926}, {"code": "static void GenerateCLRBindingByAnalysis()\tstring assemblyPath = \"Assembly-CSharp.dll\";\n\tAssembly assembly = Assembly.LoadFile(assemblyPath);\n\tif (assembly == null)\n\t{\n\t\tDebug.LogError(\"GenerateCLRBindingByAnalysis: Can't load assembly from \" + assemblyPath);\n\t\treturn;\n\t}\n\tType[] types = assembly.GetTypes();\n\tList<Type> listTypes = new List<Type>();\n\tforeach (Type type in types)\n\t{\n\t\tif (type.IsClass && type.Namespace == \"ILRuntime.Runtime.Generated\")\n\t\t{\n\t\t\tlistTypes.Add(type);\n\t\t}\n\t}\n\tlistTypes.Sort((Type a, Type b) => {\n\t\tint namespaceCompare = a.Namespace.CompareTo(b.Namespace);\n\t\tif (namespaceCompare!= 0)\n\t\t{\n\t\t\treturn namespaceCompare;\n\t\t}\n\t\treturn a.Name.CompareTo(b.Name);\n\t});\n\tstring outputPath = \"Assets/Script/Binding/Analysis\";\n\tif (!Directory.Exists(outputPath))\n\t{\n\t\tDirectory.CreateDirectory(outputPath);\n\t}\n\tstring outputFile = outputPath + \"/AnalysisCLRBinding.cs\";\n\tusing (FileStream fs = new FileStream(outputFile, FileMode.Create, FileAccess.Write))\n\t{\n\t\tStreamWriter sw = new StreamWriter(fs);\n\t\tusing (sw)\n\t\t{\n\t\t\tsw.WriteLine(\"//this code is generated automatically, any changes will be lost after regeneration\");\n\t\t\tsw.WriteLine(\"using System;\");\n\t\t\tsw.WriteLine(\"using System.Collections.Generic;\");\n\t\t\tsw.WriteLine(\"using System.Reflection;\");\n\t\t\tsw.WriteLine(\"using ILRuntime.CLR.TypeSystem;\");\n\t\t\tsw.WriteLine(\"using ILRuntime.CLR.Method;\");\n\t\t\tsw.WriteLine(\"using ILRuntime.Runtime.Enviorment;\");\n\t\t\tsw.WriteLine(\"using ILRuntime.Runtime.Intepreter;\");\n\t\t\tsw.WriteLine(\"using ILRuntime.Runtime.Stack;\");\n\t\t\tsw.WriteLine(\"using ILRuntime.Reflection;\");\n\t\t\tsw.WriteLine(\"using ILRuntime.CLR.Utils;\");\n\t\t\tsw.WriteLine(\"using ILRuntime.CLR.Utils.Linq;\");\n\t\t\tsw.WriteLine(\"using ILRuntime.Reflection.Extensions;\");\n\t\t\tsw.WriteLine(\"using System.Linq;\");\n\t\t\tsw", "CodeBleu_score": 20.917881016751245}, {"code": "static void GenerateCLRBindingByAnalysis()\tif (EditorApplication.isPlaying) {\n\t\tDebug.LogWarning(\"GenerateCLRBindingByAnalysis should not be called when playing\");\n\t\treturn;\n\t}\n\n\tstring domainName = \"AnalysisDomain\";\n\tAppDomain domain = AppDomain.CreateDomain(domainName);\n\tusing (domain) {\n\t\tAssembly assembly = Assembly.LoadFile(AssemblyDefinitionFilePath);\n\t\tusing (assembly) {\n\t\t\tType type = domain.GetTypeFromAssembly(assembly, \"ILRuntime.Runtime.Enviorment.AppDomain\");\n\t\t\tusing (type) {\n\t\t\t\tDebug.Log(\"GenerateCLRBindingByAnalysis: \" + AssemblyDefinitionFilePath);\n\t\t\t\tMethodInfo method = type.GetMethod(\"Initialize\");\n\t\t\t\tusing (method) {\n\t\t\t\t\tmethod.Invoke(null, new object[0]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tAssetDatabase.Refresh();\n}\n", "CodeBleu_score": 21.287052797037123}]}
{"instance_id": "b8990031b636", "generation_result": [{"code": "public override void OnInspectorGUI()\tserializedObject.Update();\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"config\"));\n\tEditorGUILayout.Space();\n\tEditorGUILayout.LabelField(\"Cached Bytes Size:\");\n\tEditorGUILayout.LabelField(string.Format(\"{0:n0}\", (config.CachedBytesSize)));\n\tEditorGUILayout.Space();\n\tEditorGUILayout.LabelField(\"Config Count:\");\n\tEditorGUILayout.LabelField(string.Format(\"{0:n0}\", (config.Count)));\n\tEditorGUILayout.Space();\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"configName\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"configPath\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"configType\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"configData\"));\n\tEditorGUILayout.Space();\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"configDataString\"));\n\tEditorGUILayout.Space();\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"configDataBytes\"));\n\tEditorGUILayout.Space();\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"configDataBase64\"));\n\tEditorGUILayout.Space();\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"configDataUri\"));\n\tEditorGUILayout.Space();\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"configDataJson\"));\n\tEditorGUILayout.Space();\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"configDataXml\"));\n\tEditorGUILayout.Space();\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"configDataCsv\"));\n\tEditorGUILayout.Space();\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"configDataIni\"));\n\tEditorGUILayout.Space();\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"configDataYaml\"));\n\tEditorGUILayout.Space();\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"configDataBinary\"));\n\tEditorGUILayout.Space();\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"configDataEncrypted\"));\n\tEditorGUILayout.Space();\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"configDataDecrypted\"));\n\tEditorGUILayout.Space();\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"configDataCompressed\"));\n\tEditorGUILayout", "CodeBleu_score": 40.963918645630834}, {"code": "public override void OnInspectorGUI()\tserializedObject.Update();\n\n\tvar config = target as ConfigComponent;\n\tvar configCount = config.GetConfigCount();\n\tvar cachedBytesSize = config.GetCachedBytesSize();\n\n\tEditorGUILayout.LabelField(\"Config Count\", configCount.ToString());\n\tEditorGUILayout.LabelField(\"Cached Bytes Size\", cachedBytesSize.ToString());\n\n\tusing (new EditorGUI.DisabledGroupScope(Application.isPlaying && PrefabUtility.GetPrefabType(config.gameObject) == PrefabType.Prefab)) {\n\t\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"config\"));\n\t\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"defaultConfig\"));\n\t\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"configName\"));\n\t\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"configPath\"));\n\t}\n\n\tserializedObject.ApplyModifiedProperties();\n\tEditorApplication.RepaintProjectWindow();\n}\n", "CodeBleu_score": 46.9340998423674}, {"code": "public override void OnInspectorGUI()\tserializedObject.Update();\n\n\tvar config = target as ConfigComponent;\n\n\tvar configCount = config.configCount;\n\tvar cachedBytesSize = config.cachedBytesSize;\n\n\tEditorGUI.BeginDisabledGroup(Application.isPlaying && PrefabUtility.GetPrefabType(config) == PrefabType.Prefab);\n\t{\n\t\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"_configCount\"));\n\t\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"_cachedBytesSize\"));\n\t}\n\tEditorGUI.EndDisabledGroup();\n\n\tif (configCount!= config.configCount || cachedBytesSize!= config.cachedBytesSize) {\n\t\tEditorUtility.SetDirty(config);\n\t}\n\n\tserializedObject.ApplyModifiedProperties();\n\tEditorApplication.RepaintProjectWindow();\n}\n", "CodeBleu_score": 48.248941887717436}]}
{"instance_id": "6453adc2daa8", "generation_result": [{"code": "public static void DefaultScenes()\t// Create a HashSet of default scene names\n\tHashSet<string> defaultScenes = new HashSet<string> {\n\t\t\"Assets/Scenes/MainMenu.unity\",\n\t\t\"Assets/Scenes/Gameplay.unity\",\n\t\t\"Assets/Scenes/GameOver.unity\"\n\t};\n\n\t// Convert the HashSet to a list of EditorBuildSettingsScene objects\n\tList<EditorBuildSettingsScene> scenes = new List<EditorBuildSettingsScene>();\n\tforeach (string scene in defaultScenes) {\n\t\tscenes.Add(new EditorBuildSettingsScene(scene, true));\n\t}\n\n\t// Update the EditorBuildSettings with the new list\n\tEditorBuildSettings.scenes = scenes.ToArray();\n\n\t// Log the scenes that have been set to the default\n\tDebug.Log(\"Set the build settings scenes to the default.\");\n}\n", "CodeBleu_score": 56.48504173884356}, {"code": "public static void DefaultScenes()\tstring[] defaultScenes = new string[] {\"Assets/Scenes/Main.unity\"};\n\tList<EditorBuildSettingsScene> scenesList = new List<EditorBuildSettingsScene>();\n\tforeach (string scene in defaultScenes) {\n\t\tscenesList.Add(new EditorBuildSettingsScene(scene, true));\n\t}\n\tEditorBuildSettings.scenes = scenesList.ToArray();\n\tDebug.Log(\"Default scenes set.\");\n}\n", "CodeBleu_score": 46.64280510081198}, {"code": "public static void DefaultScenes()\t// Create a HashSet of default scene names\n\tHashSet<string> defaultSceneNames = new HashSet<string>() {\n\t\t\"Assets/Scenes/MainMenu.unity\",\n\t\t\"Assets/Scenes/Settings.unity\",\n\t\t\"Assets/Scenes/Credits.unity\",\n\t\t\"Assets/Scenes/Main.unity\",\n\t\t\"Assets/Scenes/Tutorial.unity\"\n\t};\n\n\t// Convert the HashSet to a list of EditorBuildSettingsScene objects\n\tList<EditorBuildSettingsScene> defaultScenes = new List<EditorBuildSettingsScene>();\n\tforeach (string sceneName in defaultSceneNames) {\n\t\tdefaultScenes.Add(new EditorBuildSettingsScene(sceneName, true));\n\t}\n\n\t// Update the EditorBuildSettings with the new list of scenes\n\tEditorBuildSettings.scenes = defaultScenes.ToArray();\n\n\t// Log that the scenes have been set to the default\n\tDebug.Log(\"Scenes have been set to the default.\");\n}\n", "CodeBleu_score": 52.97757412748603}]}
{"instance_id": "e199f1a42526", "generation_result": [{"code": "public void Draw()\tif (m_helperType == null) {\n\t\tm_helperType = (HelperType)EditorGUILayout.EnumPopup(\"Helper Type\", m_helperType);\n\t} else {\n\t\tm_helperType = (HelperType)EditorGUILayout.Popup(\"Helper Type\", (int)m_helperType, m_helperTypeNames);\n\t}\n\n\tif (m_helperType == HelperType.Custom) {\n\t\tm_helper = (GameObject)EditorGUILayout.ObjectField(\"Custom Helper\", m_helper, typeof(GameObject), true);\n\t} else {\n\t\tm_helper = null;\n\t}\n\n\tif (m_helperType == HelperType.None) {\n\t\tEditorGUILayout.HelpBox(\"No helper type is selected.\", MessageType.Warning);\n\t} else if (m_helperType == HelperType.Custom && m_helper == null) {\n\t\tEditorGUILayout.HelpBox(\"A custom helper is not set.\", MessageType.Warning);\n\t}\n}\n", "CodeBleu_score": 34.16315475588383}, {"code": "public void Draw()\t// Draw the popup menu for selecting a helper type.\n\tEditorGUILayout.BeginHorizontal();\n\tEditorGUILayout.PrefixLabel(\"Helper Type\");\n\tint selectedIndex = EditorPrefs.GetInt(\"HelperTypeIndex\", 0);\n\tselectedIndex = GUILayout.Toolbar(selectedIndex, helperTypes);\n\tEditorPrefs.SetInt(\"HelperTypeIndex\", selectedIndex);\n\tEditorGUILayout.EndHorizontal();\n\n\t// Draw the custom helper field and error message if the custom helper is not set.\n\tif (selectedIndex == helperTypes.Length - 1) {\n\t\tEditorGUILayout.BeginHorizontal();\n\t\tEditorGUILayout.PrefixLabel(\"Custom Helper\");\n\t\thelper = (GameObject)EditorGUILayout.ObjectField(helper, typeof(GameObject), true);\n\t\tEditorGUILayout.EndHorizontal();\n\t\tif (helper == null) {\n\t\t\tEditorGUILayout.HelpBox(\"A custom helper must be set.\", MessageType.Error);\n\t\t}\n\t}\n}\n", "CodeBleu_score": 40.82267933003596}, {"code": "public void Draw()\t// Get the current helper type.\n\tint currentHelperTypeIndex = (int)helperType;\n\t\n\t// Display a popup menu for selecting a helper type.\n\tint selectedHelperTypeIndex = EditorGUI.Popup(new Rect(position.x, position.y, position.width, EditorGUIUtility.singleLineHeight), \"Helper Type\", currentHelperTypeIndex, helperTypeNames);\n\t\n\t// If the selected helper type is different than the current helper type, update the helper type.\n\tif (selectedHelperTypeIndex!= currentHelperTypeIndex) {\n\t\thelperType = (HelperType)selectedHelperTypeIndex;\n\t}\n\t\n\t// If a custom helper is selected, display a field for the custom helper and show an error message if the custom helper is not set.\n\tif (helperType == HelperType.Custom) {\n\t\t// Display a field for the custom helper.\n\t\thelper = EditorGUI.ObjectField(new Rect(position.x, position.y + EditorGUIUtility.singleLineHeight, position.width, EditorGUIUtility.singleLineHeight), \"Helper\", helper, typeof(GameObject), true);\n\t\t\n\t\t// If the custom helper is not set, show an error message.\n\t\tif (helper == null) {\n\t\t\tEditorGUI.LabelField(new Rect(position.x, position.y + EditorGUIUtility.singleLineHeight * 2, position.width, EditorGUIUtility.singleLineHeight), \"Error: No helper specified.\");\n\t\t}\n\t}\n}\n", "CodeBleu_score": 34.69085168044499}]}
{"instance_id": "957e0aaa6f72", "generation_result": [{"code": "public static void DisableAllLogs()\tstring[] defines = PlayerSettings.GetScriptingDefineSymbolsForGroup(BuildTargetGroup.Standalone).Split(';');\n\tList<string> newDefines = new List<string>();\n\tfor (int i = 0; i < defines.Length; i++) {\n\t\tif (defines[i] == \"UNITY_EDITOR\" || defines[i] == \"DEVELOPMENT_BUILD\" || defines[i] == \"DEBUG\" || defines[i] == \"LOGS_DISABLED\" || defines[i] == \"LOGS_ENABLED\") {\n\t\t\tcontinue;\n\t\t}\n\t\telse if (defines[i].StartsWith(\"LOGS_\")) {\n\t\t\tnewDefines.Add(defines[i]);\n\t\t}\n\t}\n\tstring newDefineString = string.Join(\";\", newDefines.ToArray());\n\tPlayerSettings.SetScriptingDefineSymbolsForGroup(BuildTargetGroup.Standalone, newDefineString);\n}\n", "CodeBleu_score": 25.13825824835797}, {"code": "public static void DisableAllLogs()\t#if ENABLE_LOGGING\n\t#if ENABLE_LOGGING_INFO\n\tDebug.Log(\"DisableAllLogs: Disabling all Info logs.\");\n\t#endif\n\t#if ENABLE_LOGGING_WARNING\n\tDebug.Log(\"DisableAllLogs: Disabling all Warning logs.\");\n\t#endif\n\t#if ENABLE_LOGGING_ERROR\n\tDebug.Log(\"DisableAllLogs: Disabling all Error logs.\");\n\t#endif\n\tDebug.Log(\"DisableAllLogs: Disabling general logging.\");\n\t#endif\n}\n", "CodeBleu_score": 22.588407627312307}, {"code": "public static void DisableAllLogs()\tstring[] allDefines = PlayerSettings.GetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup).Split(';');\n\tList<string> defines = new List<string>(allDefines);\n\tdefines.Remove(LOG_ALL_SYMBOL);\n\tfor (int i = 0; i < defines.Count; i++) {\n\t\tif (defines[i].StartsWith(LOG_SYMBOL_PREFIX)) {\n\t\t\tdefines.Remove(defines[i]);\n\t\t}\n\t}\n\tPlayerSettings.SetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup, string.Join(\";\", defines.ToArray()));\n}\n", "CodeBleu_score": 42.6052743759174}]}
{"instance_id": "8a544c3d9513", "generation_result": [{"code": "public static GameFrameworkComponent GetComponent(Type type)\treturn GetComponent(type, null);\n}\n", "CodeBleu_score": 6.736227835887035}, {"code": "public static GameFrameworkComponent GetComponent(Type type)\tif (components == null) return null;\n\tforeach (GameFrameworkComponent component in components) {\n\t\tif (component.GetType() == type) return component;\n\t}\n\treturn null;\n}\n", "CodeBleu_score": 28.11698675335006}, {"code": "public static GameFrameworkComponent GetComponent(Type type)\treturn GetComponent(type, null);\n}\n", "CodeBleu_score": 6.736227835887035}]}
{"instance_id": "ec304512c0e4", "generation_result": [{"code": "public static void Shutdown(ShutdownType shutdownType)\tif (shutdownType == ShutdownType.Restart) {\n\t\tDebug.Log(\"Restarting game scene...\");\n\t\tSceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);\n\t} else if (shutdownType == ShutdownType.Quit) {\n\t\tDebug.Log(\"Quitting application...\");\n\t\tApplication.Quit();\n\t}\n}\n", "CodeBleu_score": 18.321514593316206}, {"code": "public static void Shutdown(ShutdownType shutdownType)\tif (shutdownType == ShutdownType.Restart) {\n\t\tDebug.Log(\"Restarting the game...\");\n\t\tSceneManager.LoadScene(SceneManager.GetActiveScene().name);\n\t} else if (shutdownType == ShutdownType.Quit) {\n\t\tDebug.Log(\"Quitting the application...\");\n\t\tApplication.Quit();\n\t}\n}\n", "CodeBleu_score": 18.231598718612073}, {"code": "public static void Shutdown(ShutdownType shutdownType)\tif (shutdownType == ShutdownType.RestartScene) {\n\t\tSceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);\n\t} else if (shutdownType == ShutdownType.QuitApplication) {\n\t\tApplication.Quit();\n\t}\n}\n", "CodeBleu_score": 12.996963624133823}]}
{"instance_id": "5c78a1d4f59d", "generation_result": [{"code": "protected override void Awake()\tbase.Awake();\n\tif (configManager == null) {\n\t\tDebug.LogError(\"No config manager found. Please add a config manager to your scene.\");\n\t}\n}\n", "CodeBleu_score": 12.29688090954567}, {"code": "protected override void Awake()\tbase.Awake();\n\n\t// Check if the config manager is valid.\n\tif (configManager == null) {\n\t\tDebug.LogError(\"The config manager is null! Please add a config manager to the scene.\");\n\t\treturn;\n\t}\n\n\t// Subscribe to events.\n\tconfigManager.onReadDataSuccess += OnReadDataSuccess;\n\tconfigManager.onReadDataFailure += OnReadDataFailure;\n\tif (updateConfigOnDependencyAssetChange) {\n\t\tconfigManager.onUpdateData += OnUpdateData;\n\t}\n\tif (updateConfigOnDependencyAssetRemove) {\n\t\tconfigManager.onRemoveData += OnRemoveData;\n\t}\n}\n", "CodeBleu_score": 36.21569301217906}, {"code": "protected override void Awake()\tbase.Awake();\n\tif (ConfigurationManager.Instance == null) {\n\t\tDebug.LogError(\"ConfigurationManager instance is null. Make sure that the ConfigurationManager prefab is in the scene.\");\n\t} else if (ConfigurationManager.Instance.ConfigurationData == null) {\n\t\tDebug.LogError(\"ConfigurationManager instance does not have a ConfigurationData asset assigned.\");\n\t} else {\n\t\tconfigurationData = ConfigurationManager.Instance.ConfigurationData;\n\t}\n}\n", "CodeBleu_score": 23.078128158155984}]}
{"instance_id": "fbb36ff9d552", "generation_result": [{"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData)\tif (configAsset == null) {\n\t\tDebug.LogWarning(configAssetName + \" is null.\");\n\t\treturn false;\n\t}\n\tif (!(configAsset is TextAsset)) {\n\t\tDebug.LogWarning(configAssetName + \" is not a TextAsset.\");\n\t\treturn false;\n\t}\n\tTextAsset textAsset = (TextAsset)configAsset;\n\tstring extension = Path.GetExtension(textAsset.name);\n\tif (extension == \".bytes\") {\n\t\treturn ReadDataFromBytes(configManager, configAssetName, textAsset.bytes, userData);\n\t} else {\n\t\treturn ReadDataFromText(configManager, configAssetName, textAsset.text, userData);\n\t}\n}\n", "CodeBleu_score": 53.29387052331921}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData)\tif (configAsset == null) {\n\t\tDebug.LogWarning(\"Config asset is null! \" + configAssetName);\n\t\treturn false;\n\t}\n\tif (!(configAsset is TextAsset)) {\n\t\tDebug.LogWarning(\"Config asset is not a TextAsset! \" + configAssetName);\n\t\treturn false;\n\t}\n\n\tTextAsset textAsset = (TextAsset)configAsset;\n\tstring assetPath = AssetDatabase.GetAssetPath(textAsset);\n\tstring extension = Path.GetExtension(assetPath);\n\n\tif (extension == \".bytes\") {\n\t\treturn ReadDataBytes(configManager, configAssetName, textAsset, userData);\n\t} else {\n\t\treturn ReadDataText(configManager, configAssetName, textAsset, userData);\n\t}\n}\n", "CodeBleu_score": 51.76405011494967}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData)\tif (configAsset == null) {\n\t\tDebug.LogWarning(configAssetName + \" is null!\");\n\t\treturn false;\n\t}\n\tif (!(configAsset is TextAsset)) {\n\t\tDebug.LogWarning(configAssetName + \" is not a TextAsset!\");\n\t\treturn false;\n\t}\n\tTextAsset textAsset = (TextAsset)configAsset;\n\tstring extension = Path.GetExtension(textAsset.name);\n\tstring data = textAsset.text;\n\tif (extension == \".bytes\") {\n\t\tdata = System.Text.Encoding.UTF8.GetString(textAsset.bytes);\n\t}\n\treturn configManager.ParseConfig(data, userData);\n}\n", "CodeBleu_score": 46.656681298296405}]}
{"instance_id": "84d744c480ca", "generation_result": [{"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData)\tif (configBytes == null || configBytes.Length == 0) {\n\t\tDebug.LogWarning(\"Config bytes are null or empty.\");\n\t\treturn false;\n\t}\n\n\tif (configManager == null) {\n\t\tDebug.LogWarning(\"Config manager is null.\");\n\t\treturn false;\n\t}\n\n\ttry {\n\t\tusing (MemoryStream memoryStream = new MemoryStream(configBytes)) {\n\t\t\tusing (BinaryReader binaryReader = new BinaryReader(memoryStream)) {\n\t\t\t\tint index = startIndex;\n\t\t\t\twhile (index < startIndex + length) {\n\t\t\t\t\tstring configName = binaryReader.ReadString();\n\t\t\t\t\tstring configValue = binaryReader.ReadString();\n\t\t\t\t\tif (!configManager.AddConfig(configName, configValue)) {\n\t\t\t\t\t\tDebug.LogWarning(\"Config entry '\" + configName + \"' is invalid or duplicate.\");\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tindex += (configName.Length + configValue.Length + 2) * 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tcatch (Exception e) {\n\t\tDebug.LogError(\"Exception occurred while parsing config bytes: \" + e.Message);\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n", "CodeBleu_score": 57.918843659843674}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData)\ttry {\n\t\tusing (MemoryStream memoryStream = new MemoryStream(configBytes)) {\n\t\t\tusing (BinaryReader binaryReader = new BinaryReader(memoryStream)) {\n\t\t\t\tint num = startIndex;\n\t\t\t\twhile (num < length) {\n\t\t\t\t\tstring configName = binaryReader.ReadString();\n\t\t\t\t\tnum += configName.Length + 1;\n\t\t\t\t\tstring configValue = binaryReader.ReadString();\n\t\t\t\t\tnum += configValue.Length + 1;\n\t\t\t\t\tif (!configManager.AddConfig(configName, configValue)) {\n\t\t\t\t\t\tDebug.LogWarning(\"ConfigManager: Unable to add config \\\"\" + configName + \"\\\" with value \\\"\" + configValue + \"\\\"\");\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception ex) {\n\t\tDebug.LogError(\"ConfigManager: Unable to parse config data. \" + ex.ToString());\n\t\treturn false;\n\t}\n\treturn true;\n}\n", "CodeBleu_score": 51.851504976960136}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData)\ttry {\n\t\tusing (MemoryStream stream = new MemoryStream(configBytes, startIndex, length)) {\n\t\t\tusing (BinaryReader reader = new BinaryReader(stream)) {\n\t\t\t\twhile (stream.Position < stream.Length) {\n\t\t\t\t\tstring configName = reader.ReadString();\n\t\t\t\t\tstring configValue = reader.ReadString();\n\t\t\t\t\tif (!configManager.AddConfig(configName, configValue)) {\n\t\t\t\t\t\tif (!configManager.AddConfig(configName, configValue)) {\n\t\t\t\t\t\t\tLogger.LogWarning(\"ConfigManager\", \"Duplicate config entry: \" + configName);\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tcatch (Exception e) {\n\t\tLogger.LogError(\"ConfigManager\", \"Exception occurred while parsing config data: \" + e);\n\t\treturn false;\n\t}\n}\n", "CodeBleu_score": 53.69572071986397}]}
{"instance_id": "298bb6fa19a4", "generation_result": [{"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset)\tvar resourceComponent = configManager.GetResourceComponent(configAsset);\n\tresourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 42.27660480984808}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset)\tif (configAsset == null) {\n\t\treturn;\n\t}\n\tif (configManager == null) {\n\t\treturn;\n\t}\n\tvar resourceComponent = configManager.GetComponent<ResourceComponent>();\n\tif (resourceComponent == null) {\n\t\treturn;\n\t}\n\tresourceComponent.UnloadAsset(configAsset);\n}\n", "CodeBleu_score": 37.894998454177404}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset)\tif (configAsset == null) {\n\t\treturn;\n\t}\n\tvar resourceComponent = configManager.GetComponent<IResourceComponent>();\n\tresourceComponent.UnloadAsset(configAsset);\n}\n", "CodeBleu_score": 40.426380161158995}]}
{"instance_id": "fa2003d95e36", "generation_result": [{"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene)\treturn new ActiveSceneChangedEventArgs(lastActiveScene, activeScene);\n}\n", "CodeBleu_score": 12.3717054217619}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene) ActiveSceneChangedEventArgs args = new ActiveSceneChangedEventArgs();\n args.lastActiveScene = lastActiveScene;\n args.activeScene = activeScene;\n return args;\n }\n}\n", "CodeBleu_score": 34.76302181895785}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene)\tActiveSceneChangedEventArgs args = new ActiveSceneChangedEventArgs();\n\targs.lastActiveScene = lastActiveScene;\n\targs.activeScene = activeScene;\n\treturn args;\n }\n}\n", "CodeBleu_score": 34.45285498189089}]}
{"instance_id": "aba13f34251c", "generation_result": [{"code": "public void LoadScene(string sceneAssetName, int priority, object userData)\tif (sceneAssetName.Length == 0 || sceneAssetName.Substring(0, 7)!= \"Assets/\") {\n\t\tDebug.LogError(\"Invalid scene asset name \\\"\" + sceneAssetName + \"\\\". The scene asset name must start with \\\"Assets/\\\".\");\n\t\treturn;\n\t}\n\tif (sceneAssetName.Substring(sceneAssetName.Length - 6, 6)!= \".unity\") {\n\t\tDebug.LogError(\"Invalid scene asset name \\\"\" + sceneAssetName + \"\\\". The scene asset name must end with \\\".unity\\\".\");\n\t\treturn;\n\t}\n\tSceneManager.LoadScene(sceneAssetName, priority, userData);\n}\n", "CodeBleu_score": 49.5515493590066}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData)\tif (string.IsNullOrEmpty(sceneAssetName)) {\n\t\tDebug.LogError(\"SceneManager.LoadScene: sceneAssetName is null or empty\");\n\t\treturn;\n\t}\n\tif (!sceneAssetName.StartsWith(\"Assets/\")) {\n\t\tDebug.LogError(\"SceneManager.LoadScene: sceneAssetName must start with \\\"Assets/\\\".  sceneAssetName = \" + sceneAssetName);\n\t\treturn;\n\t}\n\tif (!sceneAssetName.EndsWith(\".unity\")) {\n\t\tDebug.LogError(\"SceneManager.LoadScene: sceneAssetName must end with \\\".unity\\\".  sceneAssetName = \" + sceneAssetName);\n\t\treturn;\n\t}\n\tSceneManager.LoadScene(sceneAssetName, LoadSceneMode.Single, priority, userData);\n}\n", "CodeBleu_score": 51.59786603717639}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData)\tif (sceneAssetName == null) {\n\t\tDebug.LogError(\"Scene asset name is null. Please provide a valid scene asset name.\");\n\t\treturn;\n\t}\n\tif (!sceneAssetName.StartsWith(\"Assets/\")) {\n\t\tDebug.LogError(\"Scene asset name must start with \\\"Assets/\\\". Please provide a valid scene asset name.\");\n\t\treturn;\n\t}\n\tif (!sceneAssetName.EndsWith(\".unity\")) {\n\t\tDebug.LogError(\"Scene asset name must end with \\\".unity\\\". Please provide a valid scene asset name.\");\n\t\treturn;\n\t}\n\tSceneManager.LoadScene(sceneAssetName, LoadSceneMode.Additive, priority, userData);\n}\n", "CodeBleu_score": 47.78557831791229}]}
{"instance_id": "3fe99fba3ce8", "generation_result": [{"code": "void FBinariesPatchFeatureModule::StartupModule()\t// Register all feature modules.\n\tIBinaryPatcherEditorModule& BinaryPatcherEditorModule = FModuleManager::LoadModuleChecked<IBinaryPatcherEditorModule>(\"BinaryPatcherEditor\");\n\tBinaryPatcherEditorModule.RegisterBinaryPatcherEditor();\n}\n", "CodeBleu_score": 18.34354860009216}, {"code": "void FBinariesPatchFeatureModule::StartupModule()\t// Register our settings, ini, and config files\n\tISettingsModule* SettingsModule = FModuleManager::GetModulePtr<ISettingsModule>(\"Settings\");\n\tif (SettingsModule!= nullptr) {\n\t\tSettingsModule->RegisterSettings(\"Project\", \"Plugins\", \"BinariesPatch\",\n\t\t                                LOCTEXT(\"RuntimeSettingsName\", \"Binaries Patch\"),\n\t\t                                LOCTEXT(\"RuntimeSettingsDescription\", \"Configure the Binaries Patch plugin\"),\n\t\t                                GetMutableDefault<UBinariesPatchSettings>());\n\t}\n\n\t// Register our custom UMG widget\n\tFBinariesPatchFeatureModule& BinariesPatchFeatureModule = FModuleManager::LoadModuleChecked<FBinariesPatchFeatureModule>(\"BinariesPatchFeature\");\n\tBinariesPatchFeatureModule.RegisterBinariesPatchFeature();\n\tBinariesPatchFeatureModule.OnBinariesPatchFeatureRegistered().AddLambda([](UBinariesPatchFeature* BinariesPatchFeature) {\n\t\tFBinariesPatchFeatureModule::Get().OnBinariesPatchFeatureRegisteredImpl(BinariesPatchFeature);\n\t});\n\tBinariesPatchFeatureModule.OnBinariesPatchFeatureUnregistered().AddLambda([](UBinariesPatchFeature* BinariesPatchFeature) {\n\t\tFBinariesPatchFeatureModule::Get().OnBinariesPatchFeatureUnregisteredImpl(BinariesPatchFeature);\n\t});\n}\n", "CodeBleu_score": 39.41802956510744}, {"code": "void FBinariesPatchFeatureModule::StartupModule()\t// Register the feature module's delegates with the feature manager\n\tFBinariesPatchFeatureModule::Get().OnModularFeatureRegistered().AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n\tFBinariesPatchFeatureModule::Get().OnModularFeatureUnregistered().AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n\n\t// Retrieve the list of registered feature implementations\n\tTArray<FName> FeatureImplementationNames;\n\tIBinariesPatchFeatureModule::Get().GetBinariesPatchFeatureImplementationNames(FeatureImplementationNames);\n\n\t// Iterate over the feature implementations\n\tfor (const FName& FeatureImplementationName : FeatureImplementationNames) {\n\t\t// Retrieve the feature implementation\n\t\tIBinariesPatchFeature* FeatureImplementation = IBinariesPatchFeatureModule::Get().GetBinariesPatchFeatureImplementation(FeatureImplementationName);\n\n\t\t// Append the feature implementation's name to the feature enumerations\n\t\tFBinariesPatchFeatureModule::Get().AppendBinariesPatchFeatureName(FeatureImplementationName);\n\n\t\t// Retrieve the feature implementation's settings\n\t\tIBinariesPatchFeatureSettings* FeatureImplementationSettings = IBinariesPatchFeatureModule::Get().GetBinariesPatchFeatureSettings(FeatureImplementationName);\n\n\t\t// Initialize the feature implementation\n\t\tFeatureImplementation->Initialize(FeatureImplementationSettings);\n\t}\n}\n", "CodeBleu_score": 45.80601588840267}]}
{"instance_id": "c702cc0f74b5", "generation_result": [{"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token)\tTArray<FString> TokenValues;\n\tTMap<FString, FString> ParsedCommandLine;\n\tTArray<FString> Tokens;\n\tTArray<FString> SplittedLine;\n\tFString TokenName;\n\tFString TokenValue;\n\tFString UnquotedTokenValue;\n\tFString QuotedTokenValue;\n\tFString CurrentToken;\n\tFString CurrentValue;\n\tbool bIsTokenQuoted = false;\n\tbool bIsTokenValueQuoted = false;\n\tbool bIsTokenFound = false;\n\tbool bIsTokenValueFound = false;\n\tbool bIsTokenValueEmpty = false;\n\tbool bIsTokenValueEmptyAndQuoted = false;\n\tbool bIsTokenValueEmptyAndNotQuoted = false;\n\tbool bIsTokenValueFoundAndQuoted = false;\n\tbool bIsTokenValueFoundAndNotQuoted = false;\n\tbool bIsTokenValueFoundAndNotQuotedAndEmpty = false;\n\tbool bIsTokenValueFoundAndQuotedAndEmpty = false;\n\tbool bIsTokenValueFoundAndNotQuotedAndEmptyAndQuoted = false;\n\tbool bIsTokenValueFoundAndQuotedAndEmptyAndNotQuoted = false;\n\tbool bIsTokenValueFoundAndQuotedAndEmptyAndQuoted = false;\n\tbool bIsTokenValueFoundAndNotQuotedAndEmptyAndNotQuoted = false;\n\tbool bIsTokenValueFoundAndQuotedAndEmptyAndNotQuotedAndQuoted = false;\n\tbool bIsTokenValueFoundAndQuotedAndEmptyAndQuotedAndNotQuoted = false;\n\tbool bIsTokenValueFoundAndQuotedAndEmptyAndQuotedAndQuoted = false;\n\tbool bIsTokenValueFoundAndQuotedAndEmptyAndNotQuotedAndNotQuoted = false;\n\tbool bIsTokenValueFoundAndNotQuotedAndEmptyAndQuotedAndQuoted = false;\n\tbool bIsTokenValueFoundAndNotQuotedAndEmptyAndQuotedAndNotQuoted = false;\n\tbool bIsTokenValueFoundAndNotQuotedAndEmptyAndNotQuotedAndQuoted = false;\n\tbool bIsTokenValueFoundAndNotQuotedAndEmptyAndNotQuotedAndNotQuoted = false;\n\tbool bIsTokenValueFoundAndNotQuotedAndEmptyAndQuotedAndQuotedAndNotQuoted = false;\n\tbool bIsTokenValueFoundAndNotQuotedAndEmptyAndQuotedAndNotQuotedAndQuoted = false;\n", "CodeBleu_score": 13.148112246029594}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token)\tTArray<FString> Result;\n\tFString TokenString = FString::Printf(TEXT(\"%s=\"), *Token);\n\tint32 TokenStringLength = TokenString.Len();\n\tFString TokenValue;\n\tint32 StartIndex = Commandline.Find(TokenString);\n\tif (StartIndex!= -1) {\n\t\tStartIndex += TokenStringLength;\n\t\tint32 EndIndex = Commandline.Find(TEXT(\",\"), StartIndex);\n\t\tif (EndIndex == -1) {\n\t\t\tEndIndex = Commandline.Len();\n\t\t}\n\t\tTokenValue = Commandline.Mid(StartIndex, EndIndex - StartIndex);\n\t\tResult.Add(TokenValue);\n\t}\n\treturn Result;\n}\n", "CodeBleu_score": 47.010969944468215}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token)\tTArray<FString> Out;\n\tif (Commandline.Contains(Token)) {\n\t\tFString TokenValue = Commandline.RightChop(Commandline.Len() - Commandline.Find(Token));\n\t\tTokenValue.RemoveFromStart(TEXT(\"-\"));\n\t\tTokenValue.RemoveFromEnd(TEXT(\" \"));\n\t\tTArray<FString> TokenValues;\n\t\tTokenValue.ParseIntoArray(TokenValues, TEXT(\",\"), true);\n\t\tfor (auto Value : TokenValues) {\n\t\t\tOut.Add(Value);\n\t\t}\n\t}\n\treturn Out;\n}\n", "CodeBleu_score": 51.51982094288567}]}
{"instance_id": "6a6382275b1d", "generation_result": [{"code": "bool CommandletHelper::IsCookCommandlet()\tFString commandletName = FCommandLine::Get();\n\tif (commandletName.IsEmpty()) {\n\t\treturn false;\n\t}\n\treturn commandletName.StartsWith(TEXT(\"cook\"), ESearchCase::IgnoreCase);\n}\n", "CodeBleu_score": 21.272518040232843}, {"code": "bool CommandletHelper::IsCookCommandlet()\t// Get the name of the current commandlet\n\tFString commandletName = FCommandLine::Get();\n\n\t// Check if the commandlet name is empty\n\tif (commandletName.IsEmpty()) {\n\t\treturn false;\n\t}\n\n\t// Check if the commandlet name matches \"cook\" (case-insensitive)\n\treturn commandletName.Equals(TEXT(\"cook\"), ESearchCase::IgnoreCase);\n}\n", "CodeBleu_score": 24.465329333294804}, {"code": "bool CommandletHelper::IsCookCommandlet()\t// Get the name of the current commandlet\n\tFString CommandletName = FApp::GetCommandletName();\n\tif (CommandletName.IsEmpty()) {\n\t\treturn false;\n\t}\n\n\t// Check if the commandlet name matches \"cook\"\n\treturn CommandletName.Equals(TEXT(\"Cook\"), ESearchCase::IgnoreCase);\n}\n", "CodeBleu_score": 25.154108940893295}]}
{"instance_id": "6888ed47b6be", "generation_result": [{"code": "void UHotPatcherCommandletBase::Update(const FString& Params)\tFString CommandletName = FApp::GetApp()->GetCommandletName();\n\tif (CommandletName.IsEmpty())\n\t{\n\t\tCommandletName = TEXT(\"Commandlet\");\n\t}\n\tFString SettingsName = CommandletName + TEXT(\"Settings\");\n\tFString SettingsSection = TEXT(\"CommandletSettings\");\n\tFString SettingsPath = TEXT(\"Config/\") + SettingsName + TEXT(\".ini\");\n\tFString Section = TEXT(\"CommandletSettings\");\n\tFString Key = TEXT(\"EnableServerless\");\n\tbool bEnableServerless = false;\n\tif (GConfig->GetBool(SettingsSection, Key, bEnableServerless, SettingsPath))\n\t{\n\t\tif (bEnableServerless)\n\t\t{\n\t\t\tFString ProjectName = FApp::GetProjectName();\n\t\t\tif (ProjectName.IsEmpty())\n\t\t\t{\n\t\t\t\tProjectName = TEXT(\"Project\");\n\t\t\t}\n\t\t\tFString CommandletName = FApp::GetApp()->GetCommandletName();\n\t\t\tif (!CommandletName.IsEmpty())\n\t\t\t{\n\t\t\t\tProjectName = ProjectName + TEXT(\"_\") + CommandletName;\n\t\t\t}\n\t\t\tFString ServerRequestName = TEXT(\"ServerRequest\");\n\t\t\tFString ServerRequestSection = TEXT(\"ServerRequest\");\n\t\t\tFString ServerRequestPath = TEXT(\"Config/\") + ServerRequestName + TEXT(\".ini\");\n\t\t\tFString ServerRequestKey = TEXT(\"ServerRequest\");\n\t\t\tFString ProjectNameKey = TEXT(\"ProjectName\");\n\t\t\tFString ProjectNameValue = ProjectName;\n\t\t\tif (GConfig->SetString(ServerRequestSection, ServerRequestKey, ServerRequestName, ServerRequestPath))\n\t\t\t{\n\t\t\t\tGConfig->SetString(ServerRequestSection, ProjectNameKey, ProjectNameValue, ServerRequestPath);\n\t\t\t\tGConfig->FlushConfig();\n\t\t\t}\n\t\t\tFString ServerCounterName = TEXT(\"ServerCounter\");\n\t\t\tFString ServerCounterSection = TEXT(\"ServerCounter\");\n\t\t\tFString ServerCounterPath = TEXT(\"Config/\") + ServerCounterName + TEXT(\".ini\");\n\t\t\tFString ServerCounterKey = TEXT(\"ServerCounter\");\n\t\t\tFString ProjectNameKey = TEXT(\"ProjectName\");\n\t\t\tFString ProjectNameValue = ProjectName;\n\t\t\tif (GConfig->SetString(ServerCounterSection, ServerCounterKey, ServerCounterName, ServerCounterPath))\n\t\t\t{\n\t\t\t\tGConfig->SetString(", "CodeBleu_score": 38.22542360515513}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params)\t// Get the commandlet name\n\tFString CommandletName = FApp::GetProjectName();\n\tif (CommandletName.IsEmpty())\n\t{\n\t\tUE_LOG(LogHotPatcher, Error, TEXT(\"Failed to get project name\"));\n\t\treturn;\n\t}\n\n\t// Get the commandlet name\n\tFString CommandletName = FApp::GetProjectName();\n\tif (CommandletName.IsEmpty())\n\t{\n\t\tUE_LOG(LogHotPatcher, Error, TEXT(\"Failed to get project name\"));\n\t\treturn;\n\t}\n\n\t// Check if serverless counting is enabled\n\tif (!GConfig->GetBool(TEXT(\"PatchSettings\"), TEXT(\"bEnableServerless\"), bEnableServerless, GEngineIni))\n\t{\n\t\tUE_LOG(LogHotPatcher, Error, TEXT(\"Failed to get serverless counting enable state\"));\n\t\treturn;\n\t}\n\n\t// Check if serverless counting is enabled\n\tif (!bEnableServerless)\n\t{\n\t\tUE_LOG(LogHotPatcher, Log, TEXT(\"Serverless counting is not enabled\"));\n\t\treturn;\n\t}\n\n\t// Initialize the serverless counter\n\tFString ServerlessCounter = TEXT(\"UE4/Editor/Commandlets/\");\n\tServerlessCounter.Append(CommandletName);\n\tServerlessCounter.Append(TEXT(\"/\"));\n\tServerlessCounter.Append(TEXT(\"Serverless\"));\n\tFHotPatcherServerlessHelper::InitializeServerlessCounter(ServerlessCounter);\n\n\t// Update the serverless counter\n\tFHotPatcherServerlessHelper::UpdateServerlessCounter();\n}\n", "CodeBleu_score": 45.85904067467854}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params)\tUE_LOG(LogHotPatcher, Log, TEXT(\"UHotPatcherCommandletBase::Update\"));\n\tFString CommandletName = FApp::GetProjectName();\n\t// if (CommandletName.IsEmpty())\n\t// {\n\t// \tUE_LOG(LogHotPatcher, Log, TEXT(\"UHotPatcherCommandletBase::Update CommandletName is empty\"));\n\t// }\n\t// else\n\t// {\n\t// \tUE_LOG(LogHotPatcher, Log, TEXT(\"UHotPatcherCommandletBase::Update CommandletName:%s\"), *CommandletName);\n\t// }\n\tif (FParse::Param(Params, TEXT(\"EnableServerless\")))\n\t{\n\t\tUE_LOG(LogHotPatcher, Log, TEXT(\"UHotPatcherCommandletBase::Update EnableServerless\"));\n\t\tFString ServerRequest = TEXT(\"UE4Editor-Cmd-\");\n\t\tServerRequest.Append(FApp::GetProjectName());\n\t\tServerRequest.Append(TEXT(\"-\"));\n\t\tServerRequest.Append(FApp::GetAppShortTitle());\n\t\tServerRequest.Append(TEXT(\"-\"));\n\t\tServerRequest.Append(FApp::GetBuildVersion().ToString());\n\t\tServerRequest.Append(TEXT(\"-\"));\n\t\tServerRequest.Append(FApp::GetChangelistString());\n\t\tServerRequest.Append(TEXT(\"-\"));\n\t\tServerRequest.Append(FApp::GetBranchName());\n\t\tServerRequest.Append(TEXT(\"-\"));\n\t\tServerRequest.Append(FApp::GetUserName());\n\t\tServerRequest.Append(TEXT(\"-\"));\n\t\tServerRequest.Append(FApp::GetComputerName());\n\t\tServerRequest.Append(TEXT(\"-\"));\n\t\tServerRequest.Append(FApp::GetEngineVersion().ToString());\n\t\tServerRequest.Append(TEXT(\"-\"));\n\t\tServerRequest.Append(FApp::GetUBTPlatform());\n\t\tUE_LOG(LogHotPatcher, Log, TEXT(\"UHotPatcherCommandletBase::Update ServerRequest:%s\"), *ServerRequest);\n\t\tFString ServerResponse;\n\t\tif (FParse::Param(Params, TEXT(\"ServerResponse\")))\n\t\t{\n\t\t\tUE_LOG(LogHotPatcher, Log, TEXT(\"UHotPatcherCommandletBase::Update ServerResponse\"));\n\t\t\tServerResponse = FParse::Value(Params", "CodeBleu_score": 39.50650453141538}]}
{"instance_id": "c467af995f29", "generation_result": [{"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform)\tFString PlatformName = TargetPlatform->PlatformName();\n\treturn PlatformName.StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase);\n}\n", "CodeBleu_score": 36.59583245868052}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform)\tFString PlatformName = TargetPlatform->PlatformName();\n\treturn PlatformName.StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase);\n}\n", "CodeBleu_score": 36.59583245868052}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform)\tFString PlatformName = TargetPlatform->PlatformName().ToUpper();\n\treturn PlatformName.StartsWith(TEXT(\"IOS\")) || PlatformName.StartsWith(TEXT(\"MAC\")) || PlatformName.StartsWith(TEXT(\"TVOS\"));\n}\n", "CodeBleu_score": 30.118871164980092}]}
{"instance_id": "3df342b1c6f8", "generation_result": [{"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index)\tif (Object->GetOutermost() && Object->GetOutermost()->IsA(UPackage::StaticClass())) {\n\t\tUPackage* Package = CastChecked<UPackage>(Object);\n\t\tif (!Package->HasAnyPackageFlags(PKG_AlwaysLoaded | PKG_CreatedDuringLoad | PKG_BeingCreated | PKG_ContainsScript)) {\n\t\t\tif (Package->HasAnyPackageFlags(PKG_ContainsMap)) {\n\t\t\t\tPackageObjectsMap.Add(Package, Index);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (Package->HasAnyPackageFlags(PKG_RequiresLoadForEditorGame)) {\n\t\t\t\t\tPackageObjectsMap.Add(Package, Index);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (Package->HasAnyPackageFlags(PKG_ContainsScript)) {\n\t\t\t\t\t\tif (Package->HasAnyPackageFlags(PKG_RequiresPostLoad)) {\n\t\t\t\t\t\t\tPackageObjectsMap.Add(Package, Index);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tif (Package->HasAnyPackageFlags(PKG_IsMapPackage)) {\n\t\t\t\t\t\t\t\tPackageObjectsMap.Add(Package, Index);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tif (Package->HasAnyPackageFlags(PKG_CompiledIn)) {\n\t\t\t\t\t\t\t\t\tPackageObjectsMap.Add(Package, Index);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tif (Package->HasAnyPackageFlags(PKG_NewlyCreated)) {\n\t\t\t\t\t\t\t\t\t\tPackageObjectsMap.Add(Package, Index);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t\tif (Package->HasAnyPackageFlags(PKG_Compiling)) {\n\t\t\t\t\t\t\t\t\t\t\tPackageObjectsMap.Add(Package, Index);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t\t\tif (Package->HasAnyPackageFlags(PKG_NewlyCompiled)) {\n\t\t\t\t\t\t\t\t\t\t\t\tPackageObjectsMap.Add(Package, Index);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t\t\t\tif (Package->HasAnyPackageFlags(PKG_BeingCompiled)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tPackageObjectsMap.Add(Package, Index);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (Package->HasAnyPackageFlags(PKG_NeedLoad)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tPackageObjectsMap.Add(Package, Index);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (Package->HasAnyPackageFlags(PKG_NeedPostLoad)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tPackageObjectsMap.Add(Package, Index);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (Package->HasAnyPackageFlags(PKG", "CodeBleu_score": 38.186344931764694}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index)\tcheck(Object);\n\tconst UObject* ObjectPtr = const_cast<UObject*>(Object);\n\tif (ObjectPtr->GetOutermost()->HasAnyPackageFlags(PKG_PlayInEditor)) {\n\t\treturn;\n\t}\n\tconst UPackage* Package = ObjectPtr->GetOutermost();\n\tif (!Package) {\n\t\treturn;\n\t}\n\tFName PackageName = Package->GetFName();\n\tbool bIsNewPackage = false;\n\tbool bIsAlwaysLoaded = false;\n\tif (!AllAssetsSet.Contains(PackageName)) {\n\t\tAllAssetsSet.Add(PackageName);\n\t\tbIsNewPackage = true;\n\t\tbIsAlwaysLoaded = Package->HasAnyPackageFlags(PKG_AlwaysLoaded);\n\t}\n\tif (CookerAssetsSet.Contains(PackageName)) {\n\t\treturn;\n\t}\n\tif (!bIsAlwaysLoaded) {\n\t\tif (bIsNewPackage) {\n\t\t\tPackageObjectsMap.Add(PackageName, TArray<const UObjectBase*>());\n\t\t}\n\t\tPackageObjectsMap[PackageName].Add(Object);\n\t\tObjectPtr->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n\t}\n}\n", "CodeBleu_score": 47.055173653763184}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index)\tif (!Object ||!Object->IsRooted()) {\n\t\treturn;\n\t}\n\tconst UObject* ObjectPtr = Object->GetObject();\n\tif (!ObjectPtr) {\n\t\treturn;\n\t}\n\tif (ObjectPtr->HasAnyFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects)) {\n\t\treturn;\n\t}\n\tconst UPackage* Package = ObjectPtr->GetOutermost();\n\tif (!Package) {\n\t\treturn;\n\t}\n\tconst FName PackageName = Package->GetFName();\n\tif (PackageName == NAME_None) {\n\t\treturn;\n\t}\n\tif (!CookerAssetsSet.Contains(PackageName) && AllAssetsSet.Contains(PackageName)) {\n\t\tif (!PackageObjectsMap.Contains(PackageName)) {\n\t\t\tPackageObjectsMap.Add(PackageName, TSet<UObject*>());\n\t\t}\n\t\tPackageObjectsMap.FindOrAdd(PackageName).Add(ObjectPtr);\n\t\tObjectPtr->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n\t}\n}\n", "CodeBleu_score": 44.7768092911652}]}
{"instance_id": "fac8b2878c3c", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{\tconst FHotPatcherContext& ContextConfig = GetContext();\n\tconst FExportInfo& ExportInfo = ContextConfig.GetExportInfo();\n\tconst FExportBundleInfo& BundleInfo = ContextConfig.GetExportBundleInfo();\n\tconst FExportReleaseSettings& ExportReleaseSettings = ContextConfig.GetExportReleaseSettings();\n\tconst FPatcherSettings& PatcherSetting = ContextConfig.GetPatcherSetting();\n\tconst FExternFilesMap& ExternFilesMap = ContextConfig.GetExternFilesMap();\n\tconst FExternDirectoryMap& ExternDirectoryMap = ContextConfig.GetExternDirectoryMap();\n\tconst FExternDirectoryLayout& ExternDirectoryLayout = ContextConfig.GetExternDirectoryLayout();\n\tconst FExternDirectoryInfo& ExternDirectoryInfo = ContextConfig.GetExternDirectoryInfo();\n\tconst FExternDirectoryGroup& ExternDirectoryGroup = ContextConfig.GetExternDirectoryGroup();\n\tconst FExternDirectoryGroupRules& ExternDirectoryGroupRules = ContextConfig.GetExternDirectoryGroupRules();\n\tconst FExternFilesLayout& ExternFilesLayout = ContextConfig.GetExternFilesLayout();\n\tconst FExternFilesInfo& ExternFilesInfo = ContextConfig.GetExternFilesInfo();\n\tconst FExternFilesGroup& ExternFilesGroup = ContextConfig.GetExternFilesGroup();\n\tconst FExternFilesGroupRules& ExternFilesGroupRules = ContextConfig.GetExternFilesGroupRules();\n\tconst FPlatformExternFiles& PlatformExternFiles = ContextConfig.GetPlatformExternFiles();\n\tconst FPlatformExternFiles& PlatformExternFilesWithVariant = ContextConfig.GetPlatformExternFilesWithVariant();\n\tconst FPlatformExternFiles& PlatformExternFilesWithoutVariant = ContextConfig.GetPlatformExternFilesWithoutVariant();\n\tconst FPlatformExternFiles& PlatformExternFilesWithVariantAndRHI = ContextConfig.GetPlatformExternFilesWithVariantAndRHI();\n\tconst FPlatformExternFiles& PlatformExternFilesWithoutVariantAndRHI = ContextConfig.GetPlatformExternFilesWithoutVariantAndRHI();\n\tconst FPlatformExternFiles& PlatformExternFilesWithVariantAndRHIAndShaderFormat = ContextConfig.GetPlatformExternFilesWithVariantAndRHIAndShaderFormat();\n\tconst F", "CodeBleu_score": 14.613689891716408}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{\tFScopeLock ScopeLock(&Context.BulkDataLock);\n\tfor (auto& BulkData : Record.BulkData)\n\t{\n\t\tswitch (BulkData.Type)\n\t\t{\n\t\tcase EBulkDataType::Append:\n\t\t{\n\t\t\tContext.AppendBuffer.Append(BulkData.Data);\n\t\t\tbreak;\n\t\t}\n\t\tcase EBulkDataType::File:\n\t\t{\n\t\t\tFExportFileEntry* ExportFileEntry = Context.OutputFiles.FindByPredicate([&](const FExportFileEntry& Entry) { return Entry.Name == BulkData.Name; });\n\t\t\tif (ExportFileEntry)\n\t\t\t{\n\t\t\t\tif (ExportFileEntry->SidecarStatus == EBulkDataSidecarStatus::NotExported)\n\t\t\t\t{\n\t\t\t\t\tExportFileEntry->SidecarStatus = EBulkDataSidecarStatus::Exported;\n\t\t\t\t\tContext.OutputFiles.RemoveSingle(ExportFileEntry);\n\t\t\t\t\tContext.OutputFiles.Add(ExportFileEntry);\n\t\t\t\t}\n\t\t\t\tExportFileEntry->Buffer.Append(BulkData.Data);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tContext.OutputFiles.Add(FExportFileEntry(BulkData.Name, BulkData.Data, EBulkDataSidecarStatus::Exported, EBulkDataFlags::None));\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase EBulkDataType::Directory:\n\t\t{\n\t\t\tFExportDirectoryEntry* ExportDirectoryEntry = Context.OutputDirectories.FindByPredicate([&](const FExportDirectoryEntry& Entry) { return Entry.Name == BulkData.Name; });\n\t\t\tif (ExportDirectoryEntry)\n\t\t\t{\n\t\t\t\tif (ExportDirectoryEntry->SidecarStatus == EBulkDataSidecarStatus::NotExported)\n\t\t\t\t{\n\t\t\t\t\tExportDirectoryEntry->SidecarStatus = EBulkDataSidecarStatus::Exported;\n\t\t\t\t\tContext.OutputDirectories.RemoveSingle(ExportDirectoryEntry);\n\t\t\t\t\tContext.OutputDirectories.Add(ExportDirectoryEntry);\n\t\t\t\t}\n\t\t\t\tExportDirectoryEntry->Buffer.Append(BulkData.Data);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tContext.OutputDirectories.Add(FExportDirectoryEntry(BulkData.Name, BulkData.Data, EBulkDataSidecarStatus::Exported, EBulkDataFlags::None));\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase EBulkDataType::FileMetaData:\n\t\t{", "CodeBleu_score": 41.38913808387469}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{\tFString BulkDataName = Record.Name;\n\tif (BulkDataName.StartsWith(TEXT(\"Export\")))\n\t{\n\t\t// Export data\n\t\tint32 ExportIndex = FCString::Atoi(*BulkDataName.RightChop(6));\n\t\tFExportInfo& ExportInfo = Context.Exports[ExportIndex];\n\t\tif (ExportInfo.BulkDataFlags.bHasBulkData)\n\t\t{\n\t\t\t// Export has bulk data\n\t\t\tif (ExportInfo.BulkDataFlags.bIsForcedExport)\n\t\t\t{\n\t\t\t\t// Export is a forced export\n\t\t\t\t// Add export data to the export buffer list\n\t\t\t\tContext.ExportBuffers[ExportIndex].BulkData.Add(Record.Data);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Export is not a forced export\n\t\t\t\t// Add export data to the export buffer\n\t\t\t\tContext.ExportBuffers[ExportIndex].BulkData.Add(Record.Data);\n\t\t\t}\n\t\t}\n\t}\n\telse if (BulkDataName.StartsWith(TEXT(\"Import\")))\n\t{\n\t\t// Import data\n\t\tint32 ImportIndex = FCString::Atoi(*BulkDataName.RightChop(6));\n\t\tFImportInfo& ImportInfo = Context.Imports[ImportIndex];\n\t\tif (ImportInfo.BulkDataFlags.bHasBulkData)\n\t\t{\n\t\t\t// Import has bulk data\n\t\t\tif (ImportInfo.BulkDataFlags.bIsForcedImport)\n\t\t\t{\n\t\t\t\t// Import is a forced import\n\t\t\t\t// Add import data to the import buffer list\n\t\t\t\tContext.ImportBuffers[ImportIndex].BulkData.Add(Record.Data);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Import is not a forced import\n\t\t\t\t// Add import data to the import buffer\n\t\t\t\tContext.ImportBuffers[ImportIndex].BulkData.Add(Record.Data);\n\t\t\t}\n\t\t}\n\t}\n\telse if (BulkDataName.StartsWith(TEXT(\"Patch\")))\n\t{\n\t\t// Patch data\n\t\tint32 PatchIndex = FCString::Atoi(*BulkDataName.RightChop(5));\n\t\tFPatchInfo& PatchInfo = Context.Patches[PatchIndex];\n\t\tif (PatchInfo.BulkDataFlags.bHasBulkData)\n\t\t{\n\t\t\t// Patch has bulk data\n\t\t\tif (PatchInfo.BulkData", "CodeBleu_score": 39.46552202083311}]}
{"instance_id": "bf46051105c9", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context)\tif (!Context.bIsDiff) {\n\t\treturn;\n\t}\n\n\tFSHAHash Hash;\n\tHash.Update(Context.DiffData.GetData(), Context.DiffData.Num());\n\tFSHA1::HashBuffer(Context.DiffData.GetData(), Context.DiffData.Num(), Hash.Hash);\n\n\tFSHAHash DiffHash = Hash;\n\tFSHA1::HashBuffer(Context.DiffData.GetData(), Context.DiffData.Num(), DiffHash.Hash);\n\n\tFSHAHash MetaHash = Hash;\n\tFSHA1::HashBuffer(Context.MetaDiffData.GetData(), Context.MetaDiffData.Num(), MetaHash.Hash);\n\n\tFSHAHash FinalHash = Hash;\n\tFSHA1::HashBuffer(Context.FinalDiffData.GetData(), Context.FinalDiffData.Num(), FinalHash.Hash);\n\n\tif (Context.bIsCooked) {\n\t\tFSHAHash CookedHash = Hash;\n\t\tFSHA1::HashBuffer(Context.CookedData.GetData(), Context.CookedData.Num(), CookedHash.Hash);\n\t\tContext.FinalDiffData.Append(CookedHash.Hash);\n\t}\n\n\tContext.FinalDiffData.Append(FinalHash.Hash);\n\tContext.FinalDiffData.Append(MetaHash.Hash);\n\tContext.FinalDiffData.Append(DiffHash.Hash);\n\n\t// add the footer buffer\n\tFExportBundleHeader FooterHeader;\n\tFooterHeader.HeaderSize = sizeof(FExportBundleHeader);\n\tFooterHeader.Version = EXPORT_PACKAGE_VERSION;\n\tFooterHeader.HeaderFlags = EXPORT_PACKAGE_HAS_FOOTER;\n\tFooterHeader.FileVersionUE4 = GPackageFileUE4Version;\n\tFooterHeader.FileVersionLicenseeUE4 = GPackageFileLicenseeUE4Version;\n\tFooterHeader.FileVersionLicense = GPackageFileLicenseVersion;\n\tFooterHeader.TotalHeaderSize = sizeof(FExportBundleHeader) + Context.FinalDiffData.Num();\n\tFooterHeader.DirectoryIndex = 0;\n\tFooterHeader.bEncrypted = 0;\n\tFooterHeader.TotalSize = Context.FinalDiffData.Num();\n\tFooterHeader.ChunkIDs[0] = FSHAHash();\n\tFooterHeader.ChunkIDs[1] =", "CodeBleu_score": 40.70042083581142}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context)\t//UE_LOG(LogHotPatcher, Log, TEXT(\"FHotPatcherPackageWriter::CollectForSaveExportsFooter\"));\n\tif (Context.bDiffComplete)\n\t{\n\t\treturn;\n\t}\n\tFString PackageName = Record.PackageName.ToString();\n\t//UE_LOG(LogHotPatcher, Log, TEXT(\"FHotPatcherPackageWriter::CollectForSaveExportsFooter %s\"), *PackageName);\n\tFExportBundleData* BundleData = Context.GetExportBundleData(PackageName);\n\tif (!BundleData)\n\t{\n\t\treturn;\n\t}\n\tFExportBundleData* BundleDataForDiff = Context.GetExportBundleDataForDiff(PackageName);\n\tif (!BundleDataForDiff)\n\t{\n\t\treturn;\n\t}\n\t//UE_LOG(LogHotPatcher, Log, TEXT(\"FHotPatcherPackageWriter::CollectForSaveExportsFooter %s\"), *PackageName);\n\tFString PackageFileTag = FApp::GetBuildVersion().ToString();\n\tFSHAHash Hash;\n\tHash.Update((const uint8*)TCHAR_TO_UTF8(*PackageFileTag), PackageFileTag.Len());\n\tHash.Update((const uint8*)TCHAR_TO_UTF8(*BundleData->AssetRegistryData.AssetRegistryDataVersion.ToString()), BundleData->AssetRegistryData.AssetRegistryDataVersion.ToString().Len());\n\tHash.Update((const uint8*)TCHAR_TO_UTF8(*BundleData->AssetRegistryData.AssetRegistryData.ToString()), BundleData->AssetRegistryData.AssetRegistryData.ToString().Len());\n\tHash.Update((const uint8*)TCHAR_TO_UTF8(*BundleDataForDiff->AssetRegistryData.AssetRegistryDataVersion.ToString()), BundleDataForDiff->AssetRegistryData.AssetRegistryDataVersion.ToString().Len());\n\tHash.Update((const uint8*)TCHAR_TO_UTF8(*BundleDataForDiff->AssetRegistryData.AssetRegistryData.ToString()), BundleDataForDiff->AssetRegistryData.AssetRegistryData.ToString().Len());\n\tfor (const auto& Export : BundleDataForDiff->AssetRegistryData.AssetRegistryData.ExportBundles)\n\t{\n\t\tHash.Update((const uint8*)TCHAR_TO_UTF8(*Export.Name.ToString()), Export.Name.", "CodeBleu_score": 37.72465049010478}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context)\tFExportBundleInfo* BundleInfo = Context.GetExportBundleInfo();\n\tif (BundleInfo->bIsComplete)\n\t{\n\t\treturn;\n\t}\n\tTArray<FExportBundleEntry>& ExportBundles = BundleInfo->ExportBundles;\n\tfor (int32 Index = 0; Index < ExportBundles.Num(); ++Index)\n\t{\n\t\tFExportBundleEntry& BundleEntry = ExportBundles[Index];\n\t\tif (BundleEntry.bIsComplete)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tTArray<FExportBundleEntry>& BundleEntryExports = BundleEntry.ExportEntries;\n\t\tfor (int32 ExportIndex = 0; ExportIndex < BundleEntryExports.Num(); ++ExportIndex)\n\t\t{\n\t\t\tFExportBundleEntry& BundleEntryExport = BundleEntryExports[ExportIndex];\n\t\t\tif (BundleEntryExport.bIsComplete)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tFExportBundleEntry::FExportInfo& ExportInfo = BundleEntryExport.ExportInfo;\n\t\t\tFExportBundleEntry::FExportInfo::FExportFileEntry& FileEntry = ExportInfo.FileEntry;\n\t\t\tFString FileName = FileEntry.Filename;\n\t\t\tFString PackageName = FileEntry.PackageName;\n\t\t\tFString FileExtension = FPaths::GetExtension(FileName);\n\t\t\tFString FileBaseName = FPaths::GetBaseFilename(FileName);\n\t\t\tFString FileGroupName = FileBaseName;\n\t\t\tFString FileGroupExtension = FileExtension;\n\t\t\tFString FileGroupPrefix = FPaths::GetBaseFilename(FileName);\n\t\t\tFString FileGroupSuffix = \"\";\n\t\t\tif (FileGroupPrefix.EndsWith(TEXT(\"_C\")))\n\t\t\t{\n\t\t\t\tFileGroupPrefix = FileGroupPrefix.LeftChop(2);\n\t\t\t}\n\t\t\telse if (FileGroupPrefix.EndsWith(TEXT(\"_CPP\")))\n\t\t\t{\n\t\t\t\tFileGroupPrefix = FileGroupPrefix.LeftChop(4);\n\t\t\t}\n\t\t\telse if (FileGroupPrefix.EndsWith(TEXT(\"_H\")))\n\t\t\t{\n\t\t\t\tFileGroupPrefix = FileGroupPrefix.LeftChop(2);\n\t\t\t}\n\t\t\telse if (FileGroupPrefix.EndsWith(TEXT(\"_LIB\")))\n\t\t\t{\n\t\t\t\tFileGroupPrefix = FileGroupPrefix.LeftChop(4);\n\t\t\t}\n\t\t\telse if (File", "CodeBleu_score": 38.69316247475575}]}
{"instance_id": "c0966eddf1ee", "generation_result": [{"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData)\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\n\tUGDCharacterMovementComponent * GDCharMove = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\tif (GDCharMove) {\n\t\tGDCharMove->bIsSprinting = bIsSprinting;\n\t\tGDCharMove->bIsAimingDownSights = bIsAimingDownSights;\n\t}\n}\n", "CodeBleu_score": 64.5015983459154}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData)\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\tUGDCharacterMovementComponent* CharacterMovement = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\tif (CharacterMovement) {\n\t\tbIsSprinting = CharacterMovement->bIsSprinting;\n\t\tbIsADS = CharacterMovement->bIsADS;\n\t}\n}\n", "CodeBleu_score": 80.94155448965307}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData)\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\tauto CharacterMovement = CastChecked<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\tbIsSprinting = CharacterMovement->bIsSprinting;\n\tbIsADS = CharacterMovement->bIsADS;\n}\n", "CodeBleu_score": 61.27264293561376}]}
{"instance_id": "f73106356e9d", "generation_result": [{"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute)\tif (IsValid(AbilitySystemComponent) && AbilitySystemComponent->HasAttribute(Attribute)) {\n\t\tUAsyncTaskAttributeChanged* AttributeChangedAsyncTask = NewObject<UAsyncTaskAttributeChanged>();\n\t\tAttributeChangedAsyncTask->AttributeChangedDelegate.BindUObject(AttributeChangedAsyncTask, &UAsyncTaskAttributeChanged::OnAttributeChanged);\n\t\tAttributeChangedAsyncTask->Attribute = Attribute;\n\t\tAttributeChangedAsyncTask->AbilitySystemComponent = AbilitySystemComponent;\n\t\tAttributeChangedAsyncTask->AttributeHandle = AbilitySystemComponent->RegisterGameplayAttributeDataChangedEvent(AttributeChangedAsyncTask->AttributeChangedDelegate);\n\t\tAttributeChangedAsyncTask->AttributeHandle->AddUObject(AttributeChangedAsyncTask);\n\t\tAttributeChangedAsyncTask->AddToRoot();\n\t\treturn AttributeChangedAsyncTask;\n\t}\n\treturn nullptr;\n}\n", "CodeBleu_score": 56.345127634295736}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute)\tif (!AbilitySystemComponent ||!AbilitySystemComponent->IsValidLowLevel() ||!Attribute.IsValid()) {\n\t\treturn nullptr;\n\t}\n\tUAsyncTaskAttributeChanged* Task = NewObject<UAsyncTaskAttributeChanged>();\n\tTask->AbilitySystemComponent = AbilitySystemComponent;\n\tTask->Attribute = Attribute;\n\tTask->OnAttributeChangedDelegate.AddDynamic(Task, &UAsyncTaskAttributeChanged::OnAttributeChanged);\n\tTask->OnAttributeChangeDelegate.AddDynamic(Task, &UAsyncTaskAttributeChanged::OnAttributeChange);\n\tTask->OnAttributeChangeCancelledDelegate.AddDynamic(Task, &UAsyncTaskAttributeChanged::OnAttributeChangeCancelled);\n\tTask->OnAttributeChangeAbortedDelegate.AddDynamic(Task, &UAsyncTaskAttributeChanged::OnAttributeChangeAborted);\n\tTask->OnAttributeChangeRejectedDelegate.AddDynamic(Task, &UAsyncTaskAttributeChanged::OnAttributeChangeRejected);\n\tTask->OnAttributeChangeRejectedDelegate.AddDynamic(Task, &UAsyncTaskAttributeChanged::OnAttributeChangeRejected);\n\tTask->OnAttributeChangeRejectedDelegate.AddDynamic(Task, &UAsyncTaskAttributeChanged::OnAttributeChangeRejected);\n\tTask->OnAttributeChangeRejectedDelegate.AddDynamic(Task, &UAsyncTaskAttributeChanged::OnAttributeChangeRejected);\n\tTask->OnAttributeChangeRejectedDelegate.AddDynamic(Task, &UAsyncTaskAttributeChanged::OnAttributeChangeRejected);\n\tTask->OnAttributeChangeRejectedDelegate.AddDynamic(Task, &UAsyncTaskAttributeChanged::OnAttributeChangeRejected);\n\tTask->OnAttributeChangeRejectedDelegate.AddDynamic(Task, &UAsyncTaskAttributeChanged::OnAttributeChangeRejected);\n\tTask->OnAttributeChangeRejectedDelegate.AddDynamic(Task, &UAsyncTaskAttributeChanged::OnAttributeChangeRejected);\n\tTask->OnAttributeChangeRejectedDelegate.AddDynamic(Task, &UAsyncTaskAttributeChanged::OnAttributeChangeRejected);\n\tTask->OnAttributeChangeRejectedDelegate.AddDynamic(Task, &UAsyncTaskAttributeChanged::OnAttributeChangeRejected);\n\tTask->OnAttributeChangeRejectedDelegate.AddDynamic(Task, &UAsyncTaskAttributeChanged::OnAttributeChangeRejected);\n\tTask->OnAttributeChangeRejectedDelegate.AddDynamic(Task, &UAsyncTaskAttributeChanged::OnAttributeChangeRejected);\n\tTask->OnAttributeChangeRejectedDelegate.AddDynamic(Task, &UAsyncTaskAttributeChanged::OnAttributeChangeRejected);\n\tTask->", "CodeBleu_score": 48.15616303535795}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute)\tif (!AbilitySystemComponent ||!Attribute) {\n\t\treturn nullptr;\n\t}\n\t// Create a new task and initialize it with the specified parameters\n\tUAsyncTaskAttributeChanged* Task = NewObject<UAsyncTaskAttributeChanged>();\n\tTask->AbilitySystemComponent = AbilitySystemComponent;\n\tTask->Attribute = Attribute;\n\t// Add a delegate to the task to handle attribute changes\n\tTask->OnAttributeChangeDelegate.AddDynamic(Task, &UAsyncTaskAttributeChanged::OnAttributeChange);\n\t// Add the task to the root set of tasks\n\tTask->AddToRoot();\n\t// Return the task\n\treturn Task;\n}\n", "CodeBleu_score": 52.71188577338079}]}
{"instance_id": "a581424c2b31", "generation_result": [{"code": "void UAsyncTaskCooldownChanged::EndTask()\tif (ASC) {\n\t\tASC->OnGameplayEffectAddedDelegateHandle.RemoveDynamic(this);\n\t\tASC->OnGameplayEffectRemovedDelegateHandle.RemoveDynamic(this);\n\t\tASC->OnGameplayEffectCooldownChangeDelegateHandle.RemoveDynamic(this);\n\t}\n\tMarkAsReadyToDestroy();\n\tMarkAsGarbage();\n}\n", "CodeBleu_score": 29.459509015448976}, {"code": "void UAsyncTaskCooldownChanged::EndTask()\tif (ASC) {\n\t\t//Remove all delegates related to gameplay effect additions and cooldown tag events\n\t\tASC->OnGameplayEffectAddedDelegate.RemoveAll(this);\n\t\tASC->OnGameplayEffectRemovedDelegate.RemoveAll(this);\n\t\tASC->OnActiveGameplayEffectAddedDelegate.RemoveAll(this);\n\t\tASC->OnActiveGameplayEffectRemovedDelegate.RemoveAll(this);\n\t\tASC->OnGameplayEffectCooldownChangeDelegate.RemoveAll(this);\n\t\tASC->OnGameplayEffectDurationChangeDelegate.RemoveAll(this);\n\t\tASC->OnGameplayEffectExecutionChangeDelegate.RemoveAll(this);\n\t\tASC->OnGameplayEffectTagChangeDelegate.RemoveAll(this);\n\t}\n\t//Mark the task as ready to be destroyed and designate it as garbage\n\tReadyToDestroy = true;\n\tMarkAsGarbage();\n}\n", "CodeBleu_score": 29.83076453352706}, {"code": "void UAsyncTaskCooldownChanged::EndTask()\tif (ASC) {\n\t\t// Remove delegates for gameplay effect additions and cooldown tag events.\n\t\tASC->AbilitySystemComponent::OnActiveGameplayEffectAddedDelegate.RemoveDynamic(this, &UAsyncTaskCooldownChanged::OnActiveGameplayEffectAdded);\n\t\tASC->AbilitySystemComponent::OnGameplayEffectRemovedDelegate.RemoveDynamic(this, &UAsyncTaskCooldownChanged::OnGameplayEffectRemoved);\n\t\tASC->AbilitySystemComponent::OnGameplayEffectCooldownChangedDelegate.RemoveDynamic(this, &UAsyncTaskCooldownChanged::OnGameplayEffectCooldownChanged);\n\t}\n\n\t// Mark the task as ready to be destroyed and designate it as garbage.\n\tReadyToDestroy = true;\n\tMarkAsGarbage();\n}\n", "CodeBleu_score": 26.035963492340148}]}
{"instance_id": "5029df3a2033", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved)\tif (!EffectRemoved.GetEffectTemplate()) {\n\t\treturn;\n\t}\n\n\tconst FGameplayTagContainer & RemovedAssetTags = EffectRemoved.GetEffectTemplate()->AssetTags;\n\tconst FGameplayTagContainer & RemovedGrantedTags = EffectRemoved.GetEffectTemplate()->GrantedTags;\n\n\tif (RemovedAssetTags.HasTag(EffectGameplayTag)) {\n\t\tFActiveGameplayEffectHandle ActiveHandle = EffectRemoved.Handle;\n\t\tFActiveGameplayEffectHandleStackChange ActiveHandleStackChange(ActiveHandle, EGameplayEffectStackingType::Add, 0);\n\t\tActiveHandleStackChange.StackCount = -1;\n\t\tEffectStackChangeEvents.Broadcast(EffectGameplayTag, ActiveHandleStackChange);\n\t}\n\n\tif (RemovedGrantedTags.HasTag(EffectGameplayTag)) {\n\t\tFActiveGameplayEffectHandle ActiveHandle = EffectRemoved.Handle;\n\t\tFActiveGameplayEffectHandleStackChange ActiveHandleStackChange(ActiveHandle, EGameplayEffectStackingType::Add, 0);\n\t\tActiveHandleStackChange.StackCount = -1;\n\t\tEffectStackChangeEvents.Broadcast(EffectGameplayTag, ActiveHandleStackChange);\n\t}\n}\n", "CodeBleu_score": 41.7247053600269}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved)\t// If the effect being removed is the one we're currently tracking, clear the handle\n\tif (EffectRemoved.Handle == EffectHandle) {\n\t\tEffectHandle.Reset();\n\t}\n\n\t// Retrieve the tags from the effect\n\tconst FGameplayTagContainer AssetTags = EffectRemoved.SourceObject->GetClass()->GetTags();\n\tconst FGameplayTagContainer GrantedTags = EffectRemoved.Spec.Def->GetGrantedTags();\n\n\t// Broadcast an event if either the asset or granted tags contain the specified tag\n\tif (AssetTags.HasTag(Tag) || GrantedTags.HasTag(Tag)) {\n\t\tUAsyncTaskEffectStackChanged::EffectStackChangeDetails Details;\n\t\tDetails.Handle = EffectRemoved.Handle;\n\t\tDetails.StackCount = EffectRemoved.GetStackCount();\n\t\tDetails.StackChangeReason = EGameplayEffectStackingChange::Removed;\n\t\tDetails.StackMagnitude = EffectRemoved.GetMagnitude();\n\t\tDetails.EffectLevel = EffectRemoved.GetLevel();\n\t\tDetails.SourceObject = EffectRemoved.SourceObject;\n\t\tDetails.TargetObject = EffectRemoved.Target.Get();\n\n\t\t// Broadcast the event\n\t\tAsyncTaskEffectStackChanged.Broadcast(Tag, Details);\n\t}\n}\n", "CodeBleu_score": 42.723491848202535}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved)\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAssetTags(AssetTags);\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\tif (AssetTags.HasTag(EffectGameplayTag)) {\n\t\tFAsyncTaskEffectStackChangeData Data;\n\t\tData.EffectHandle = EffectRemoved.Handle;\n\t\tData.StackChangeDetails = EEffectStackChangeType::Removed;\n\t\tData.StackCount = 0;\n\t\tAsyncTask(ENamedThreads::GameThread, [Data]() {\n\t\t\tAsyncTaskEffectStackChanged.Broadcast(EffectGameplayTag, Data);\n\t\t});\n\t}\n\n\tif (GrantedTags.HasTag(EffectGameplayTag)) {\n\t\tFAsyncTaskEffectStackChangeData Data;\n\t\tData.EffectHandle = EffectRemoved.Handle;\n\t\tData.StackChangeDetails = EEffectStackChangeType::Removed;\n\t\tData.StackCount = 0;\n\t\tAsyncTask(ENamedThreads::GameThread, [Data]() {\n\t\t\tAsyncTaskEffectStackChanged.Broadcast(EffectGameplayTag, Data);\n\t\t});\n\t}\n}\n", "CodeBleu_score": 57.272555681713364}]}
{"instance_id": "cb1d2823d203", "generation_result": [{"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag)\tif (!AbilitySystemComponent ||!AbilitySystemComponent->IsValidLowLevel() ||!AbilitySystemComponent->OwnerActor ||!AbilitySystemComponent->OwnerActor->IsValidLowLevel()) {\n\t\tABILITY_LOG(Warning, TEXT(\"AbilitySystemComponent or AbilitySystemComponent->OwnerActor is not valid!\"));\n\t\treturn nullptr;\n\t}\n\n\tif (!InEffectGameplayTag.IsValid()) {\n\t\tABILITY_LOG(Warning, TEXT(\"EffectGameplayTag is not valid!\"));\n\t\treturn nullptr;\n\t}\n\n\tUAsyncTaskEffectStackChanged * MyAsyncTask = NewObject<UAsyncTaskEffectStackChanged>();\n\tMyAsyncTask->AbilitySystemComponent = AbilitySystemComponent;\n\tMyAsyncTask->EffectGameplayTag = InEffectGameplayTag;\n\tMyAsyncTask->OnGameplayEffectStackChangeDelegate.AddDynamic(MyAsyncTask, &UAsyncTaskEffectStackChanged::OnGameplayEffectStackChange);\n\tMyAsyncTask->OnGameplayEffectRemovedDelegate.AddDynamic(MyAsyncTask, &UAsyncTaskEffectStackChanged::OnGameplayEffectRemoved);\n\tMyAsyncTask->OnGameplayEffectAddedDelegate.AddDynamic(MyAsyncTask, &UAsyncTaskEffectStackChanged::OnGameplayEffectAdded);\n\tMyAsyncTask->OnGameplayEffectLevelChangedDelegate.AddDynamic(MyAsyncTask, &UAsyncTaskEffectStackChanged::OnGameplayEffectLevelChanged);\n\tMyAsyncTask->OnGameplayEffectDurationChangedDelegate.AddDynamic(MyAsyncTask, &UAsyncTaskEffectStackChanged::OnGameplayEffectDurationChanged);\n\tMyAsyncTask->OnGameplayEffectPeriodChangedDelegate.AddDynamic(MyAsyncTask, &UAsyncTaskEffectStackChanged::OnGameplayEffectPeriodChanged);\n\tMyAsyncTask->OnGameplayEffectMagnitudeChangedDelegate.AddDynamic(MyAsyncTask, &UAsyncTaskEffectStackChanged::OnGameplayEffectMagnitudeChanged);\n\tMyAsyncTask->OnGameplayEffectAttributeChangedDelegate.AddDynamic(MyAsyncTask, &UAsyncTaskEffectStackChanged::OnGameplayEffectAttributeChanged);\n\tMyAsyncTask->OnGameplayEffectStackCountChangedDelegate.AddDynamic(MyAsyncTask, &UAsyncTaskEffectStackChanged::OnGameplayEffectStackCountChanged);\n\tMyAsyncTask->OnGameplayEffectAppliedDelegate.AddDynamic(MyAsyncTask, &UAsyncTaskEffectStackChanged::OnGameplayEffectApplied);\n\tMyAsyncTask->OnGameplayEffectRemovedDelegate.AddDynamic(MyAsyncTask, &UAsyncTaskEffectStackChanged::On", "CodeBleu_score": 47.39296433589841}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag)\tif (AbilitySystemComponent == nullptr) {\n\t\tABILITY_LOG(Warning, TEXT(\"UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange called with invalid AbilitySystemComponent!\"));\n\t\treturn nullptr;\n\t}\n\tif (!AbilitySystemComponent->IsValidGameplayTag(InEffectGameplayTag)) {\n\t\tABILITY_LOG(Warning, TEXT(\"UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange called with invalid EffectGameplayTag!\"));\n\t\treturn nullptr;\n\t}\n\tUAsyncTaskEffectStackChanged * ListenForGameplayEffectStackChange = NewObject<UAsyncTaskEffectStackChanged>();\n\tListenForGameplayEffectStackChange->AbilitySystemComponent = AbilitySystemComponent;\n\tListenForGameplayEffectStackChange->EffectGameplayTag = InEffectGameplayTag;\n\tListenForGameplayEffectStackChange->OnGameplayEffectStackChangeDelegate.AddDynamic(ListenForGameplayEffectStackChange, &UAsyncTaskEffectStackChanged::OnGameplayEffectStackChange);\n\tListenForGameplayEffectStackChange->OnGameplayEffectRemovedDelegate.AddDynamic(ListenForGameplayEffectStackChange, &UAsyncTaskEffectStackChanged::OnGameplayEffectRemoved);\n\tListenForGameplayEffectStackChange->OnGameplayEffectAddedDelegate.AddDynamic(ListenForGameplayEffectStackChange, &UAsyncTaskEffectStackChanged::OnGameplayEffectAdded);\n\tListenForGameplayEffectStackChange->OnGameplayEffectAppliedDelegate.AddDynamic(ListenForGameplayEffectStackChange, &UAsyncTaskEffectStackChanged::OnGameplayEffectApplied);\n\tListenForGameplayEffectStackChange->OnGameplayEffectRemovedDelegate.AddDynamic(ListenForGameplayEffectStackChange, &UAsyncTaskEffectStackChanged::OnGameplayEffectRemoved);\n\tListenForGameplayEffectStackChange->OnGameplayEffectExpiredDelegate.AddDynamic(ListenForGameplayEffectStackChange, &UAsyncTaskEffectStackChanged::OnGameplayEffectExpired);\n\tListenForGameplayEffectStackChange->OnGameplayEffectRevokedDelegate.AddDynamic(ListenForGameplayEffectStackChange, &UAsyncTaskEffectStackChanged::OnGameplayEffectRevoked);\n\tListenForGameplayEffectStackChange->OnGameplayEffectCanceledDelegate.AddDynamic(ListenForGameplayEffectStackChange, &UAsyncTaskEffectStackChanged::OnGameplayEffectCanceled);\n\tListenForGameplayEffect", "CodeBleu_score": 56.576453129789385}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag)\tif (!AbilitySystemComponent) {\n\t\tABILITY_LOG(Warning, TEXT(\"UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange called with invalid AbilitySystemComponent!\"));\n\t\treturn nullptr;\n\t}\n\tif (!InEffectGameplayTag.IsValid()) {\n\t\tABILITY_LOG(Warning, TEXT(\"UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange called with invalid EffectGameplayTag!\"));\n\t\treturn nullptr;\n\t}\n\tUAsyncTaskEffectStackChanged * Listener = NewObject<UAsyncTaskEffectStackChanged>();\n\tListener->AbilitySystemComponent = AbilitySystemComponent;\n\tListener->EffectGameplayTag = InEffectGameplayTag;\n\tListener->OnEffectAdded.AddDynamic(Listener, &UAsyncTaskEffectStackChanged::OnEffectAddedCallback);\n\tListener->OnEffectRemoved.AddDynamic(Listener, &UAsyncTaskEffectStackChanged::OnEffectRemovedCallback);\n\tif (!Listener->RegisterCallbacks()) {\n\t\tABILITY_LOG(Warning, TEXT(\"UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange called with invalid AbilitySystemComponent or EffectGameplayTag!\"));\n\t\treturn nullptr;\n\t}\n\treturn Listener;\n}\n", "CodeBleu_score": 52.36739449869658}]}
{"instance_id": "6659c2592e93", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved)\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.GetModifier().GetAssetTags(AssetTags);\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.GetModifier().GetGrantedTags(GrantedTags);\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tFAsyncTaskEffectStackChangedEventDetails EventDetails;\n\t\tEventDetails.EffectHandle = EffectRemoved.Handle;\n\t\tEventDetails.StackChangeDetails = EffectRemoved.GetStackCount() - EffectRemoved.GetPreviousStackCount();\n\t\tEventDetails.StackChangeType = EStackChangeType::Removed;\n\t\tEventDetails.Tag = EffectGameplayTag;\n\t\tAsyncTask(ENamedThreads::GameThread, [=]() {\n\t\t\tAsyncTask(ENamedThreads::GameThread, [=]() {\n\t\t\t\tOnStackChange.Broadcast(EventDetails);\n\t\t\t});\n\t\t});\n\t}\n}\n", "CodeBleu_score": 58.056424593817965}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved)\t// Get the asset and granted tags from the removed effect\n\tUGameplayEffect * GameplayEffect = EffectRemoved.GetGameplayEffect();\n\tFGameplayTagContainer AssetTags;\n\tFGameplayTagContainer GrantedTags;\n\tGameplayEffect->GetOwnedGameplayTags(AssetTags);\n\tGameplayEffect->GetAllGrantedTags(GrantedTags);\n\n\t// Check if either tag container has the specified EffectGameplayTag\n\tif (AssetTags.HasTag(EffectGameplayTag) || GrantedTags.HasTag(EffectGameplayTag)) {\n\t\t// Broadcast a stack change event with the tag, effect handle, and stack change details\n\t\tFAsyncTaskEffectStackChangedEvent AsyncTaskEffectStackChangedEvent(EffectGameplayTag, EffectRemoved.Handle, EffectRemoved.GetStackCount());\n\t\tAsyncTaskEffectStackChangedEvent.Broadcast();\n\t}\n}\n", "CodeBleu_score": 54.76356269758769}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved)\tif (!EffectRemoved.Handle.IsValid()) {\n\t\treturn;\n\t}\n\n\tFGameplayTagContainer AssetTags;\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.GetTagAndGrantedTags(AssetTags, GrantedTags);\n\n\tif (AssetTags.HasTag(EffectGameplayTag)) {\n\t\tFActiveGameplayEffectHandle ActiveHandle = EffectRemoved.Handle;\n\t\tFActiveGameplayEffectHandleContainer ActiveHandles;\n\t\tActiveHandles.Add(ActiveHandle);\n\t\tFActiveGameplayEffectHandleContainer EmptyHandles;\n\t\tEffectStackChangeDetails StackChangeDetails(ActiveHandles, EmptyHandles, EffectRemoved.GetMagnitude(), EffectRemoved.GetMagnitude(), EffectRemoved.GetDuration(), EffectRemoved.GetPeriod());\n\t\tFGameplayEffectContextHandle EffectContext = EffectRemoved.GetEffectContext();\n\t\tFGameplayCueParameters CueParameters = EffectRemoved.GetCueParameters();\n\t\tBroadcastEffectStackChange(EffectGameplayTag, ActiveHandle, StackChangeDetails, EffectContext, CueParameters);\n\t}\n\n\tif (GrantedTags.HasTag(EffectGameplayTag)) {\n\t\tFActiveGameplayEffectHandle ActiveHandle = EffectRemoved.Handle;\n\t\tFActiveGameplayEffectHandleContainer ActiveHandles;\n\t\tActiveHandles.Add(ActiveHandle);\n\t\tFActiveGameplayEffectHandleContainer EmptyHandles;\n\t\tEffectStackChangeDetails StackChangeDetails(EmptyHandles, ActiveHandles, EffectRemoved.GetMagnitude(), EffectRemoved.GetMagnitude(), EffectRemoved.GetDuration(), EffectRemoved.GetPeriod());\n\t\tFGameplayEffectContextHandle EffectContext = EffectRemoved.GetEffectContext();\n\t\tFGameplayCueParameters CueParameters = EffectRemoved.GetCueParameters();\n\t\tBroadcastEffectStackChange(EffectGameplayTag, ActiveHandle, StackChangeDetails, EffectContext, CueParameters);\n\t}\n}\n", "CodeBleu_score": 45.97987956771847}]}
{"instance_id": "a8f7dcc3f1fa", "generation_result": [{"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec)\tSuper::OnAvatarSet(ActorInfo, Spec);\n\n\tif (AbilitySystemComponent == nullptr) {\n\t\treturn;\n\t}\n\n\tif (AbilitySystemComponent->IsAbilitySystemActive() && AbilitySystemComponent->GetCurrentSpecHandle() == Spec.Handle) {\n\t\tif (bActivateAbilityOnGranted) {\n\t\t\tActivateAbility();\n\t\t}\n\t}\n}\n", "CodeBleu_score": 52.4367200604495}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec)\tSuper::OnAvatarSet(ActorInfo, Spec);\n\tif (AbilitySystemComponent.IsValid() && AbilitySystemComponent->IsAbilitySystemActive() && AbilitySystemComponent->GetOwner() == ActorInfo->AvatarActor) {\n\t\tif (AbilitySystemComponent->CanActivateAbility(Spec.Handle, this)) {\n\t\t\tAbilitySystemComponent->ActivateAbility(Spec.Handle, this);\n\t\t}\n\t}\n}\n", "CodeBleu_score": 52.95447078318146}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec)\tSuper::OnAvatarSet(ActorInfo, Spec);\n\tif (AbilitySystemComponent.IsValid() && AbilitySystemComponent->IsOwnerActorAuthoritative() && bActivateAbilityOnGranted) {\n\t\tif (AbilitySystemComponent->CanActivateAbility(Spec.Handle, this)) {\n\t\t\tAbilitySystemComponent->TryActivateAbility(Spec.Handle, this);\n\t\t}\n\t}\n}\n", "CodeBleu_score": 51.12021575620893}]}
{"instance_id": "72a7ce4b848c", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted)\tSuper::OnMontageEnded(Montage, bInterrupted);\n\n\tif (!bInterrupted) {\n\t\tif (AbilitySystemComponent) {\n\t\t\tFGameplayTag EventTag = FGameplayTag::RequestGameplayTag(FName(\"Ability.Montage.Completed\"));\n\t\t\tFGameplayEventData Payload;\n\t\t\tAbilitySystemComponent->SendGameplayEvent(EventTag, Payload);\n\t\t}\n\t}\n\n\tif (AbilityTask) {\n\t\tAbilityTask->EndTask();\n\t}\n}\n", "CodeBleu_score": 49.51993057157789}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted)\tSuper::OnMontageEnded(Montage, bInterrupted);\n\n\tif (Montage == AnimMontage) {\n\t\tif (bInterrupted == false) {\n\t\t\tif (OnCompleted.IsBound()) {\n\t\t\t\tOnCompleted.Broadcast();\n\t\t\t}\n\t\t}\n\n\t\tEndTask();\n\t}\n}\n", "CodeBleu_score": 53.998911447278886}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted)\tSuper::OnMontageEnded(Montage, bInterrupted);\n\tif (Montage == nullptr) {\n\t\treturn;\n\t}\n\tif (bInterrupted) {\n\t\treturn;\n\t}\n\tif (AbilityTask.ShouldBroadcastAbilityTaskDelegates()) {\n\t\tAbilityTask.OnCompleted.Broadcast(FGameplayTagContainer(), FGameplayEventData());\n\t}\n\tAbilityTask.EndTask();\n}\n", "CodeBleu_score": 51.07862426725899}]}
{"instance_id": "cc1cdd579bd4", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded)\tSuper::OnDestroy(AbilityEnded);\n\n\tif (AbilityEnded) {\n\t\tif (Montage) {\n\t\t\tif (StopMontageWhenAbilityEnds) {\n\t\t\t\tMontage->Stop();\n\t\t\t}\n\t\t}\n\t}\n}\n", "CodeBleu_score": 35.53355498675522}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded)\tSuper::OnDestroy(AbilityEnded);\n\tif (AbilityEnded) {\n\t\tif (bStopOnAbilityEnd) {\n\t\t\tif (Montage) {\n\t\t\t\tMontage->Stop();\n\t\t\t}\n\t\t}\n\t}\n\tif (AbilitySystemComponent!= nullptr) {\n\t\tAbilitySystemComponent->RemoveLooseGameplayTagContainerDelegate(EventTagContainerDelegateHandle);\n\t}\n}\n", "CodeBleu_score": 51.38588271676189}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded)\tSuper::OnDestroy(AbilityEnded);\n\n\tif (AbilityEnded) {\n\t\tif (StopMontageOnAbilityEnd) {\n\t\t\tStopMontage();\n\t\t}\n\t}\n\n\tif (EventTagContainerDelegate.IsBound()) {\n\t\tAbilitySystemComponent->RemoveDynamicModifier(EventTagContainerDelegate);\n\t\tEventTagContainerDelegate.Unbind();\n\t}\n}\n", "CodeBleu_score": 47.16316269096726}]}
{"instance_id": "5932070df16f", "generation_result": [{"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage()\tif (AbilitySystemComponent == nullptr) {\n\t\treturn false;\n\t}\n\tif (AbilitySystemComponent->GetCurrentMontage() == nullptr) {\n\t\treturn false;\n\t}\n\tAbilitySystemComponent->GetCurrentMontage()->OnMontageEnded.RemoveDynamic(this, &UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded);\n\tAbilitySystemComponent->GetCurrentMontage()->OnBlendOut.RemoveDynamic(this, &UGDAT_PlayMontageAndWaitForEvent::OnBlendOut);\n\tAbilitySystemComponent->StopPlayingMontage(AbilitySystemComponent->GetCurrentMontage());\n\treturn true;\n}\n", "CodeBleu_score": 32.12058375915571}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage()\tif (AbilitySystemComponent!= nullptr) {\n\t\tUAnimInstance* AnimInstance = AbilitySystemComponent->GetCurrentActiveAbilityInstance()->GetCurrentMontageInstance()->GetAnimInstance();\n\t\tif (AnimInstance!= nullptr) {\n\t\t\tAnimInstance->OnMontageBlendingOut.RemoveAll(this);\n\t\t\tAnimInstance->OnMontageEnded.RemoveAll(this);\n\t\t\tAbilitySystemComponent->GetCurrentActiveAbilityInstance()->GetCurrentMontageInstance()->StopMontage(EMontagePlayReturnType::EMontagePlayReturnType::MontageStop);\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n", "CodeBleu_score": 35.5270726957971}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage()\tif (AbilitySystemComponent!= nullptr) {\n\t\tif (AbilitySystemComponent->GetCurrentMontage()!= nullptr) {\n\t\t\tAbilitySystemComponent->GetCurrentMontage()->RemoveOnMontageInterruptedDelegate(OnMontageInterrupted);\n\t\t\tAbilitySystemComponent->GetCurrentMontage()->RemoveOnMontageBlendingOutDelegate(OnMontageBlendingOut);\n\t\t\tAbilitySystemComponent->GetCurrentMontage()->RemoveOnCompletedDelegate(OnMontageCompleted);\n\t\t\tAbilitySystemComponent->StopActiveMontage(FGameplayTag::RequestGameplayTag(FGameplayTag::ACTOR_CATEGORY_DEFAULT, FGameplayTag::GameplayTagLiteral(\"Ability.MontageStop\")));\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n", "CodeBleu_score": 28.774732606084562}]}
{"instance_id": "7049be7f0c75", "generation_result": [{"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds)\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\tif (OwnerComp.GetBlackboardComponent() == nullptr) return;\n\tif (!OwnerComp.GetBlackboardComponent()->GetValueAsObject(BlackboardKey.Target, Target)) return;\n\tif (!OwnerComp.GetBlackboardComponent()->GetValueAsFloat(BlackboardKey.Distance, Distance)) return;\n\tif (!OwnerComp.GetBlackboardComponent()->GetValueAsBool(BlackboardKey.IsVisible, IsVisible)) return;\n\tif (Distance < 0.0f) return;\n\tif (Distance > MaxAttackRange) return;\n\tif (Target == nullptr) return;\n\tif (Target->IsPendingKill()) return;\n\tif (!Target->IsA<APawn>()) return;\n\tif (Target->IsA<AController>()) return;\n\tif (Target->IsA<AActor>()) {\n\t\tAActor* TargetActor = Cast<AActor>(Target);\n\t\tif (TargetActor->IsPendingKill()) return;\n\t\tif (TargetActor->IsA<APawn>()) {\n\t\t\tAPawn* TargetPawn = Cast<APawn>(Target);\n\t\t\tif (TargetPawn->IsPendingKill()) return;\n\t\t\tif (TargetPawn->IsA<AController>()) return;\n\t\t\tif (TargetPawn->IsA<AActor>()) {\n\t\t\t\tAActor* TargetPawnActor = Cast<AActor>(TargetPawn);\n\t\t\t\tif (TargetPawnActor->IsPendingKill()) return;\n\t\t\t\tif (TargetPawnActor->IsA<APawn>()) {\n\t\t\t\t\tAPawn* TargetPawnPawn = Cast<APawn>(TargetPawn);\n\t\t\t\t\tif (TargetPawnPawn->IsPendingKill()) return;\n\t\t\t\t\tif (TargetPawnPawn->IsA<AController>()) return;\n\t\t\t\t\tif (TargetPawnPawn->IsA<AActor>()) {\n\t\t\t\t\t\tAActor* TargetPawnPawnActor = Cast<AActor>(TargetPawnPawn);\n\t\t\t\t\t\tif (TargetPawnPawnActor->IsPendingKill()) return;\n\t\t\t\t\t\tif (TargetPawnPawnActor->IsA<APawn>()) {\n\t\t\t\t\t\t\tAPawn* TargetPawnPawnPawn = Cast<APawn>(TargetPawnPawn);\n\t\t\t\t\t\t\tif (TargetPawnPawnPawn->IsPendingKill()) return;\n\t\t\t\t\t\t\tif (TargetPawnPawnPawn->IsA<AController>()) return;\n\t\t\t\t\t\t\tif", "CodeBleu_score": 43.062864869373286}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds)\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\tif (OwnerComp.GetBlackboardComponent() == nullptr) {\n\t\treturn;\n\t}\n\n\tAActor* TargetActor = Cast<AActor>(OwnerComp.GetBlackboardComponent()->GetValueAsObject(TargetKey));\n\tif (TargetActor == nullptr) {\n\t\treturn;\n\t}\n\n\tAController* TargetController = TargetActor->GetController();\n\tif (TargetController == nullptr) {\n\t\treturn;\n\t}\n\n\tAPawn* AI = Cast<APawn>(OwnerComp.GetAIOwner());\n\tif (AI == nullptr) {\n\t\treturn;\n\t}\n\n\tFVector TargetLocation = TargetActor->GetActorLocation();\n\tFVector AILocation = AI->GetActorLocation();\n\tfloat DistanceToTarget = FVector::Dist(TargetLocation, AILocation);\n\tbool InRange = DistanceToTarget < MaxAttackRange;\n\n\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(InRangeKey, InRange);\n\tOwnerComp.GetBlackboardComponent()->SetValueAsObject(TargetKey, TargetActor);\n\n\tif (InRange) {\n\t\tbool Visible = TargetController->LineOfSightTo(AI);\n\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(VisibleKey, Visible);\n\t}\n}\n", "CodeBleu_score": 50.847998697582696}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds)\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\tif (OwnerComp.IsBlackboardKeyHooked(TEXT(\"TargetActor\"))) {\n\t\tAActor* TargetActor = Cast<AActor>(OwnerComp.GetBlackboardComponent().GetValueAsObject(OwnerComp.GetBlackboardComponent().GetKeyID(\"TargetActor\")));\n\t\tif (TargetActor) {\n\t\t\tFVector TargetLocation = TargetActor->GetActorLocation();\n\t\t\tFVector AILocation = OwnerComp.GetAIOwner()->GetActorLocation();\n\t\t\tfloat Distance = FVector::Dist(AILocation, TargetLocation);\n\t\t\tOwnerComp.GetBlackboardComponent().SetValueAsFloat(OwnerComp.GetBlackboardComponent().GetKeyID(\"DistanceToTarget\"), Distance);\n\t\t\tif (Distance <= MaxAttackRange) {\n\t\t\t\tFVector Direction = (TargetLocation - AILocation).GetSafeNormal();\n\t\t\t\tFHitResult Hit;\n\t\t\t\tif (GetWorld()->LineTraceSingleByChannel(Hit, AILocation, TargetLocation, ECC_Visibility, TraceParams)) {\n\t\t\t\t\tOwnerComp.GetBlackboardComponent().SetValueAsBool(OwnerComp.GetBlackboardComponent().GetKeyID(\"TargetInLOS\"), false);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tOwnerComp.GetBlackboardComponent().SetValueAsBool(OwnerComp.GetBlackboardComponent().GetKeyID(\"TargetInLOS\"), true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n", "CodeBleu_score": 44.409722566638635}]}
{"instance_id": "031bd0ec3e3c", "generation_result": [{"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory)\tSuper::ExecuteTask(OwnerComp, NodeMemory);\n\n\t// Retrieve the pawn that owns this AI controller\n\tAPawn* MyPawn = Cast<APawn>(OwnerComp.GetAIOwner()->GetPawn());\n\n\t// Retrieve the attribute component from the pawn\n\tUAttributeComponent* AttributeComponent = Cast<UAttributeComponent>(MyPawn->GetComponentByClass(UAttributeComponent::StaticClass()));\n\n\t// If the attribute component is valid\n\tif (AttributeComponent) {\n\t\t// Restore the pawn's health to maximum\n\t\tAttributeComponent->SetHealth(AttributeComponent->GetMaxHealth());\n\t}\n\n\t// Return success\n\treturn EBTNodeResult::Succeeded;\n}\n", "CodeBleu_score": 53.691122561767926}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory)\tSuper::ExecuteTask(OwnerComp, NodeMemory);\n\tAPawn* pawn = Cast<APawn>(OwnerComp.GetAIOwner()->GetPawn());\n\tif (pawn) {\n\t\tUHealthComponent* healthComponent = Cast<UHealthComponent>(pawn->GetComponentByClass(UHealthComponent::StaticClass()));\n\t\tif (healthComponent) {\n\t\t\thealthComponent->Heal(healthComponent->GetMaxHealth());\n\t\t\treturn EBTNodeResult::Succeeded;\n\t\t}\n\t}\n\treturn EBTNodeResult::Failed;\n}\n", "CodeBleu_score": 45.32113405543707}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory)\tSuper::ExecuteTask(OwnerComp, NodeMemory);\n\t// Get the pawn that owns this behavior tree.\n\tAPawn* pawn = Cast<APawn>(OwnerComp.GetAIOwner()->GetPawn());\n\tif (pawn == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\t// Get the pawn's attribute component.\n\tUAttributeComponent* attributeComponent = pawn->FindComponentByClass<UAttributeComponent>();\n\tif (attributeComponent == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\t// Restore the pawn's health to maximum.\n\tattributeComponent->SetHealth(attributeComponent->GetMaxHealth());\n\treturn EBTNodeResult::Succeeded;\n}\n", "CodeBleu_score": 47.023711091972196}]}
{"instance_id": "6cd6e778e91b", "generation_result": [{"code": "void USProjectileMovementComponent::BeginPlay()\tSuper::BeginPlay();\n\tif (GEngine) {\n\t\tGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Green, TEXT(\"BeginPlay\"));\n\t}\n\tif (GetWorld() && GetWorld()->GetGameInstance()) {\n\t\tif (GetWorld()->GetGameInstance()->GetSubsystem<USTickablesSubsystem>()) {\n\t\t\tGetWorld()->GetGameInstance()->GetSubsystem<USTickablesSubsystem>()->RegisterPrimaryTickableActor(this);\n\t\t}\n\t}\n}\n", "CodeBleu_score": 45.5457581140689}, {"code": "void USProjectileMovementComponent::BeginPlay()\tSuper::BeginPlay();\n\tif (GetWorld() && GetWorld()->GetGameInstance()) {\n\t\t// Register the component's primary tick function.\n\t\tGetWorld()->GetGameInstance()->GetSubsystem<USTickablesSubsystem>()->RegisterPrimaryTickFunction(this);\n\t}\n}\n", "CodeBleu_score": 49.29352325129906}, {"code": "void USProjectileMovementComponent::BeginPlay()\tSuper::BeginPlay();\n\tPrimaryComponentTick.RegisterComponent(this);\n}\n", "CodeBleu_score": 26.298664148881556}]}
{"instance_id": "e90ff27c7f16", "generation_result": [{"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason)\tSuper::EndPlay(EndPlayReason);\n\tif (GEngine) {\n\t\tUWorld* World = GetWorld();\n\t\tif (World) {\n\t\t\tif (UGameplayStatics::DoesGameplayStaticsObjectExist(World, TEXT(\"USTickablesSubsystem\"))) {\n\t\t\t\tUSTickablesSubsystem* TickablesSubsystem = Cast<USTickablesSubsystem>(UGameplayStatics::GetGameplayStaticsObject(World, TEXT(\"USTickablesSubsystem\")));\n\t\t\t\tif (TickablesSubsystem) {\n\t\t\t\t\tTickablesSubsystem->UnregisterTickableComponent(this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n", "CodeBleu_score": 48.141225901790506}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason)\tSuper::EndPlay(EndPlayReason);\n\tif (auto* TickablesSubsystem = GetWorld()->GetGameInstance()->GetSubsystem<USTickablesSubsystem>()) {\n\t\tTickablesSubsystem->UnregisterTickableComponent(this);\n\t}\n}\n", "CodeBleu_score": 58.56660376525782}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason)\tSuper::EndPlay(EndPlayReason);\n\tif (GetWorld()) {\n\t\tauto USTickablesSubsystem = GetWorld()->GetSubsystem<USTickablesSubsystem>();\n\t\tif (USTickablesSubsystem) {\n\t\t\tUSTickablesSubsystem->DeregisterTickableComponent(this);\n\t\t}\n\t}\n}\n", "CodeBleu_score": 58.622415175919414}]}
{"instance_id": "be3e542c07ea", "generation_result": [{"code": "void USSignificanceComponent::BeginPlay()\tSuper::BeginPlay();\n\tif (bManageSignificance && Owner && Owner->Implements<USSignificanceInterface>()) {\n\t\tif (bWaitOneFrame) {\n\t\t\tRegisterWithSignificanceManager();\n\t\t}\n\t\telse {\n\t\t\tGetWorld()->GetTimerManager().SetTimer(TimerHandle_RegisterWithSignificanceManager, this, &USSignificanceComponent::RegisterWithSignificanceManager, 0.000000, false);\n\t\t}\n\t}\n\tfor (auto ParticleSystemComponent : GetOwner()->GetComponentsByClass(UParticleSystemComponent::StaticClass())) {\n\t\tif (ParticleSystemComponent->bManageSignificance) {\n\t\t\tParticleSystemComponent->RegisterWithSignificanceManager();\n\t\t}\n\t}\n}\n", "CodeBleu_score": 55.433590329785034}, {"code": "void USSignificanceComponent::BeginPlay()\tSuper::BeginPlay();\n\tif (GEngine) {\n\t\tif (bManageSignificance &&!Owner->Implements<USSignificanceInterface>()) {\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(\"%s does not implement the significance interface!\"), *(Owner->GetName()));\n\t\t}\n\t\tif (bManageSignificance && bWaitOneFrame) {\n\t\t\tRegisterWithSignificanceManager();\n\t\t} else {\n\t\t\tFTimerHandle TimerHandle;\n\t\t\tGetWorld()->GetTimerManager().SetTimer(TimerHandle, this, &USSignificanceComponent::RegisterWithSignificanceManager, 0.001f, false);\n\t\t}\n\t}\n\tfor (UParticleSystemComponent* ParticleSystemComponent : ParticleSystemComponents) {\n\t\tif (ParticleSystemComponent) {\n\t\t\tParticleSystemComponent->OnSystemFinishedPlaying().AddDynamic(this, &USSignificanceComponent::OnParticleSystemFinishedPlaying);\n\t\t}\n\t}\n}\n", "CodeBleu_score": 51.119213670161045}, {"code": "void USSignificanceComponent::BeginPlay()\tSuper::BeginPlay();\n\n\tif (bManageSignificance) {\n\t\tif (!Owner->Implements<USSignificanceInterface>()) {\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(\"Owner of %s does not implement the significance interface!\"), *GetOwner()->GetName());\n\t\t}\n\t\telse {\n\t\t\tif (bWaitOneFrame) {\n\t\t\t\tRegisterWithSignificanceManager();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tFTimerHandle TimerHandle;\n\t\t\t\tGetWorld()->GetTimerManager().SetTimer(TimerHandle, this, &USSignificanceComponent::RegisterWithSignificanceManager, 0.0f, false);\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (auto Component : GetOwner()->GetComponentsByClass(UParticleSystemComponent::StaticClass())) {\n\t\tif (Component->IsRegistered()) {\n\t\t\tComponent->UnregisterComponent();\n\t\t}\n\t\tComponent->RegisterComponent();\n\t\tif (Component->IsRegistered()) {\n\t\t\tif (Component->IsVisible()) {\n\t\t\t\tComponent->ActivateSystem(true);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tComponent->ActivateSystem(false);\n\t\t\t}\n\t\t}\n\t}\n}\n", "CodeBleu_score": 53.20261872643049}]}
{"instance_id": "77824b6415d0", "generation_result": [{"code": "void USSignificanceComponent::RegisterWithManager()\tUWorld* World = GetWorld();\n\tif (World) {\n\t\tUSSignificanceManager* Manager = World->GetSubsystem<USSignificanceManager>();\n\t\tif (Manager) {\n\t\t\tManager->RegisterComponent(Owner, MakeShareable(new FOnCalculateSignificance(CalculateSignificance)), MakeShareable(new FOnSignificanceChanged(OnSignificanceChanged)));\n\t\t}\n\t}\n}\n", "CodeBleu_score": 16.433982463342637}, {"code": "void USSignificanceComponent::RegisterWithManager()\tif (auto* Manager = GetWorld()->GetGameInstance()->GetSubsystem<USSignificanceManager>()) {\n\t\tManager->RegisterComponent(Owner->GetClass()->GetName(), [this](const FVector& Location, const FVector& ViewPoint, float Range, float HalfHeight, float HalfWidth, float HalfDepth, float HalfFOV) {\n\t\t\treturn CalculateSignificance(Location, ViewPoint, Range, HalfHeight, HalfWidth, HalfDepth, HalfFOV);\n\t\t}, [this](const FVector& Location, const FVector& ViewPoint, float Range, float HalfHeight, float HalfWidth, float HalfDepth, float HalfFOV) {\n\t\t\tOnSignificanceChanged.Broadcast(Location, ViewPoint, Range, HalfHeight, HalfWidth, HalfDepth, HalfFOV);\n\t\t});\n\t}\n}\n", "CodeBleu_score": 40.018506934265574}, {"code": "void USSignificanceComponent::RegisterWithManager()\tif (!GetWorld()) {\n\t\treturn;\n\t}\n\n\t// Get the Significance Manager\n\tauto* SignificanceManager = GetWorld()->GetGameInstance()->GetSubsystem<USSignificanceManager>();\n\tif (!SignificanceManager) {\n\t\treturn;\n\t}\n\n\t// Define the lambda functions for calculating significance and handling post-significance updates\n\tauto CalculateSignificance = [this](const FVector& Location, const AActor* Actor) {\n\t\treturn CalculateSignificanceImpl(Location, Actor);\n\t};\n\n\tauto UpdatePostSignificance = [this](const FVector& Location, const AActor* Actor) {\n\t\treturn UpdatePostSignificanceImpl(Location, Actor);\n\t};\n\n\t// Register the component with the significance manager\n\tSignificanceManager->RegisterComponent(this, GetOwner()->GetClass()->GetName(), CalculateSignificance, UpdatePostSignificance);\n}\n", "CodeBleu_score": 35.47047987004791}]}
{"instance_id": "dca342410d64", "generation_result": [{"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor)\tif (Actor == nullptr) {\n\t\treturn false;\n\t}\n\n\tif (Actor->IsA(APooledActor)) {\n\t\treturn Cast<APooledActor>(Actor)->ReleaseToPool();\n\t}\n\n\treturn false;\n}\n", "CodeBleu_score": 33.880882786237855}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor)\tif (Actor == nullptr) {\n\t\treturn false;\n\t}\n\n\tif (!Actor->GetIsPoolingEnabled()) {\n\t\treturn false;\n\t}\n\n\tauto* PooledWorld = Actor->GetWorld();\n\tif (PooledWorld == nullptr) {\n\t\treturn false;\n\t}\n\n\tauto* PoolingSubsystem = PooledWorld->GetSubsystem<USActorPoolingSubsystem>();\n\tif (PoolingSubsystem == nullptr) {\n\t\treturn false;\n\t}\n\n\treturn PoolingSubsystem->InternalReleaseToPool(Actor);\n}\n", "CodeBleu_score": 55.64994504645276}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor)\tif (Actor->IsA(AActor::StaticClass())) {\n\t\tif (Actor->GetWorld() && Actor->GetWorld()->GetGameInstance()) {\n\t\t\tUActorPoolingSubsystem* Pooling = Cast<UActorPoolingSubsystem>(Actor->GetWorld()->GetGameInstance()->GetSubsystem(FName(\"ActorPooling\")));\n\t\t\tif (Pooling) {\n\t\t\t\treturn Pooling->ReleaseActorToPool(Actor);\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n", "CodeBleu_score": 54.26402766907048}]}
{"instance_id": "5c285130f782", "generation_result": [{"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount)\tSCOPE_CYCLE_COUNTER(STAT_PrimeActorPool);\n\tif (ActorClass == nullptr) {\n\t\treturn;\n\t}\n\tif (Amount < 0) {\n\t\treturn;\n\t}\n\tif (Amount == 0) {\n\t\tAmount = 1;\n\t}\n\tif (Amount > MaxPoolSize) {\n\t\tAmount = MaxPoolSize;\n\t}\n\tif (Amount == 0) {\n\t\treturn;\n\t}\n\tUE_LOG(LogActorPool, Log, TEXT(\"Starting to prime actor pool for %s\"), *ActorClass->GetFName().ToString());\n\tFActorSpawnParameters SpawnInfo;\n\tSpawnInfo.Owner = nullptr;\n\tSpawnInfo.Instigator = nullptr;\n\tSpawnInfo.ObjectFlags = RF_Transient | RF_Public;\n\tSpawnInfo.Name = FName(*ActorClass->GetFName().ToString() + TEXT(\"_ActorPool\"));\n\tSpawnInfo.SpawnCollisionHandlingOverride = ESpawnActorCollisionHandlingMethod::AlwaysSpawn;\n\tSpawnInfo.bNoFail = true;\n\tSpawnInfo.bDeferConstruction = true;\n\tSpawnInfo.bAllowDuringConstructionScript = false;\n\tSpawnInfo.bNoLoadingScreen = true;\n\tSpawnInfo.bWarnAboutBeingDedicated = false;\n\tSpawnInfo.bRunConstructionScriptOnDedicatedServer = false;\n\tSpawnInfo.bHidden = false;\n\tSpawnInfo.bShouldManagePhysics = false;\n\tSpawnInfo.bShouldCollideWhenPlacing = false;\n\tSpawnInfo.bActorMustBeInitializedWithChannel = false;\n\tSpawnInfo.bAllowRemoteActors = false;\n\tSpawnInfo.bAllowRemoteOwnedActors = false;\n\tSpawnInfo.Owner = nullptr;\n\tSpawnInfo.Instigator = nullptr;\n\tSpawnInfo.ObjectFlags = RF_Transient | RF_Public;\n\tSpawnInfo.bNoFail = true;\n\tSpawnInfo.bDeferConstruction = true;\n\tSpawnInfo.bAllowDuringConstructionScript = false;\n\tSpawnInfo.bNoLoadingScreen = true;\n\tSpawnInfo.bWarnAboutBeingDedicated = false;\n\tSpawnInfo.bRunConstructionScriptOnDedicatedServer = false;\n\tSpawnInfo.bHidden = false;\n\tSpawnInfo.bShouldManage", "CodeBleu_score": 39.728039422825454}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount)\tSCOPE_CYCLE_COUNTER(STAT_ActorPool_PrimeActorPool);\n\tUE_LOG(LogActorPool, Log, TEXT(\"Initializing actor pool for %s\"), *ActorClass->GetFName().ToString());\n\tFActorSpawnParameters SpawnInfo;\n\tSpawnInfo.Owner = this;\n\tSpawnInfo.Instigator = nullptr;\n\tSpawnInfo.ObjectFlags |= RF_Transient;\n\tSpawnInfo.bDeferConstruction = false;\n\tSpawnInfo.bNoFail = true;\n\tSpawnInfo.bAllowDuringConstruction = true;\n\tSpawnInfo.bNoCollisionFail = true;\n\tSpawnInfo.SpawnCollisionHandlingOverride = ESpawnActorCollisionHandlingMethod::AlwaysSpawn;\n\tSpawnInfo.ObjectFlags |= RF_Transient;\n\tSpawnInfo.bNoFail = true;\n\tSpawnInfo.bAllowDuringConstruction = true;\n\tSpawnInfo.bNoCollisionFail = true;\n\tSpawnInfo.SpawnCollisionHandlingOverride = ESpawnActorCollisionHandlingMethod::AlwaysSpawn;\n\tfor (int32 i = 0; i < Amount; i++) {\n\t\tUE_LOG(LogActorPool, Log, TEXT(\"Spawning actor %i\"), i);\n\t\tAActor* Actor = GetWorld()->SpawnActor<AActor>(ActorClass, SpawnInfo);\n\t\tReleaseActor(Actor);\n\t}\n}\n", "CodeBleu_score": 47.82514950844811}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount)\tSCOPE_CYCLE_COUNTER(STAT_ActorPooling_PrimeActorPool);\n\tUE_LOG(LogActorPooling, Log, TEXT(\"Priming actor pool of class %s with %d instances.\"), *ActorClass->GetName(), Amount);\n\tFActorSpawnParameters SpawnInfo;\n\tSpawnInfo.Owner = nullptr;\n\tSpawnInfo.Instigator = nullptr;\n\tSpawnInfo.ObjectFlags = RF_Transient;\n\tSpawnInfo.bNoFail = true;\n\tSpawnInfo.SpawnCollisionHandlingOverride = ESpawnActorCollisionHandlingMethod::AlwaysSpawn;\n\tSpawnInfo.Name = FName(*(ActorClass->GetName() + TEXT(\"_ActorPool\")));\n\tfor (int32 i = 0; i < Amount; ++i) {\n\t\tAActor* Actor = GetWorld()->SpawnActor<AActor>(ActorClass, SpawnInfo);\n\t\tif (Actor) {\n\t\t\tReleaseActorToPool(Actor);\n\t\t}\n\t}\n}\n", "CodeBleu_score": 58.01268088686693}]}
{"instance_id": "43c013653d6d", "generation_result": [{"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName)\tFLoadingScreenAttributes LoadingScreenAttributes;\n\tLoadingScreenAttributes.MovieURL = FSoftObjectPath(TEXT(\"/Game/LoadingScreens/Maps/\") + MapName + TEXT(\"/LoadingScreen.LoadingScreen_C\"));\n\tLoadingScreenAttributes.BackgroundColor = FColor(0, 0, 0, 0);\n\tLoadingScreenAttributes.MinimumLoadingScreenDisplayTime = 0.0f;\n\tLoadingScreenAttributes.bMoviesAreSkippable = false;\n\tLoadingScreenAttributes.bShowMouseCursor = false;\n\tLoadingScreenAttributes.bMoviesAreLoopable = false;\n\tLoadingScreenAttributes.BlendMode = ELoadingScreenBlendMode::LSBM_AlphaBlend;\n\tLoadingScreenAttributes.LoadingScreenWidgetClass = ULoadingScreen::StaticClass();\n\tLoadingScreenAttributes.BackgroundColor = FColor::Black;\n\tLoadingScreenAttributes.MinimumLoadingScreenDisplayTime = 0.0f;\n\tLoadingScreenAttributes.bMoviesAreSkippable = false;\n\tLoadingScreenAttributes.bShowMouseCursor = false;\n\tLoadingScreenAttributes.bMoviesAreLoopable = false;\n\tLoadingScreenAttributes.BlendMode = ELoadingScreenBlendMode::LSBM_AlphaBlend;\n\tLoadingScreenAttributes.LoadingScreenWidgetClass = ULoadingScreen::StaticClass();\n\tLoadingScreenAttributes.BackgroundColor = FColor::Black;\n\tLoadingScreenAttributes.MinimumLoadingScreenDisplayTime = 0.0f;\n\tLoadingScreenAttributes.bMoviesAreSkippable = false;\n\tLoadingScreenAttributes.bShowMouseCursor = false;\n\tLoadingScreenAttributes.bMoviesAreLoopable = false;\n\tLoadingScreenAttributes.BlendMode = ELoadingScreenBlendMode::LSBM_AlphaBlend;\n\tLoadingScreenAttributes.LoadingScreenWidgetClass = ULoadingScreen::StaticClass();\n\tLoadingScreenAttributes.BackgroundColor = FColor::Black;\n\tLoadingScreenAttributes.MinimumLoadingScreenDisplayTime = 0.0f;\n\tLoadingScreenAttributes.bMoviesAreSkippable = false;\n\tLoadingScreenAttributes.bShowMouseCursor = false;\n\tLoadingScreenAttributes.bMoviesAreLoopable = false;\n\tLoadingScreenAttributes.BlendMode = ELoadingScreenBlendMode::LSBM_AlphaBlend;\n\tLoadingScreenAttributes.LoadingScreenWidgetClass = ULoadingScreen::StaticClass();\n\tLoadingScreenAttributes.BackgroundColor =", "CodeBleu_score": 35.21868189098507}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName)\tFLoadingScreenAttributes LoadingScreenAttributes;\n\tLoadingScreenAttributes.MovieURL = FLoadingScreenAttributes::GetMovieURLForMap(MapName);\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes.LoadingScreenDesc = LOADING_SCREEN_DESC;\n\tLoadingScreenAttributes.BackgroundColor = FColor::Black;\n\tLoadingScreenAttributes.LoadingMovieWidth = 1280;\n\tLoadingScreenAttributes.LoadingMovieHeight = 720;\n\tLoadingScreenAttributes.MinimumLoadingMovieDisplayTime = 2.0f;\n\tLoadingScreenAttributes.bMoviesAreSkippable = false;\n\tLoadingScreenAttributes.bShowMouseCursor = false;\n\tLoadingScreenAttributes.bMoviesAreLoopable = true;\n\tLoadingScreenAttributes.MoviePlayerScale = FVector2D(1.0f, 1.0f);\n\tLoadingScreenAttributes.MinimumLoadingMovieDisplayTime = 2.0f;\n\tLoadingScreenAttributes.bShowMouseCursor = false;\n\tLoadingScreenAttributes.BackgroundColor = FColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FColor::Black;\n\t", "CodeBleu_score": 30.583849707310318}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName)\tFLoadingScreenAttributes LoadingScreenAttributes;\n\tLoadingScreenAttributes.MovieURL = FLoadingScreenAttributes::GetMovieURLForMap(MapName);\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes.LoadingText = NSLOCTEXT(\"LoadingMoviePlayer\", \"LoadingText\", \"Loading...\");\n\tLoadingScreenAttributes.MoviePlayer = MakeShared<FMoviePlayer>();\n\tLoadingScreenAttributes.MoviePlayer->OnMovieSceneFinished().BindRaw(this, &USLoadingScreenSubsystem::OnMovieFinished);\n\tLoadingScreenAttributes.MoviePlayer->OnMovieScenePlaybackStarted().BindRaw(this, &USLoadingScreenSubsystem::OnMovieStarted);\n\tLoadingScreenAttributes.MoviePlayer->OnMovieScenePlaybackStopped().BindRaw(this, &USLoadingScreenSubsystem::OnMovieStopped);\n\tLoadingScreenAttributes.MoviePlayer->OnMovieScenePlaybackPaused().BindRaw(this, &USLoadingScreenSubsystem::OnMoviePaused);\n\tLoadingScreenAttributes.MoviePlayer->OnMovieScenePlaybackResumed().BindRaw(this, &USLoadingScreenSubsystem::OnMovieResumed);\n\tLoadingScreenAttributes.MoviePlayer->OnMovieScenePlaybackTick().BindRaw(this, &USLoadingScreenSubsystem::OnMovieTick);\n\tLoadingScreenAttributes.MoviePlayer->OnMovieSceneSpawned().BindRaw(this, &USLoadingScreenSubsystem::OnMovieSpawned);\n\tLoadingScreenAttributes.MoviePlayer->OnMovieSceneClosed().BindRaw(this, &USLoadingScreenSubsystem::OnMovieClosed);\n\tLoadingScreenAttributes.MoviePlayer->OnMovieSceneClosed().BindRaw(this, &USLoadingScreenSubsystem::OnMovieFinished);\n\tLoadingScreenAttributes.MoviePlayer->OnMovieSceneFailedToPlay().BindRaw(this, &USLoadingScreenSubsystem::OnMovieFailedToPlay);\n\tLoadingScreenAttributes.MoviePlayer->OnMovieSceneFailedToSpawn().BindRaw(this, &USLoadingScreenSubsystem::OnMovieFailedToSpawn);\n\tLoadingScreenAttributes.MoviePlayer->OnMovieSceneObjectBindingID().BindRaw(this, &USLoadingScreenSubsystem::OnMovieObjectBindingID);\n\tLoadingScreenAttributes.MoviePlayer->OnMovieSceneBindingsUpdated().BindRaw(this, &USLoadingScreenSubsystem::OnMovieBindingsUpdated);\n\tLoadingScreenAttributes.MoviePlayer->OnMovieSceneBindingsUpdateFinished().BindRaw(this, &USLoadingScreen", "CodeBleu_score": 32.894698240574314}]}
{"instance_id": "a6979eb925a5", "generation_result": [{"code": "void USAction::StartAction_Implementation(AActor* Instigator)\tif (Role == EActionRole::Authority) {\n\t\tStartTime = UGameplayStatics::GetRealTimeSeconds(GetWorld());\n\t}\n\n\tif (Instigator!= nullptr) {\n\t\tUGameplayStatics::AddGameplayTag(GetWorld(), FGameplayTag::RequestGameplayTag(FName(TEXT(\"Action.Instigator\"))), Instigator);\n\t}\n\n\tif (OwnerRole == EActionRole::Authority) {\n\t\tUGameplayStatics::AddGameplayTag(GetWorld(), FGameplayTag::RequestGameplayTag(FName(TEXT(\"Action.Active\"))), OwnerActor);\n\t}\n\n\tUGameplayStatics::Broadcast_ActorBeginAction(GetWorld(), OwnerActor, this);\n}\n", "CodeBleu_score": 43.13085260638837}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator)\tif (OwnerRole == EGameplayRole::Authority) {\n\t\tLastStartTime = GetWorld()->GetTimeSeconds();\n\t}\n\tOwnerComponent->AddGameplayTags(GrantedTags);\n\tOwnerComponent->UpdateReplicatedData();\n\tOwnerComponent->OnActionStarted.Broadcast(Instigator);\n}\n", "CodeBleu_score": 31.571637296439224}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator)\tif (Instigator == nullptr) {\n\t\treturn;\n\t}\n\tif (Role == EActionRole::Instigator || Role == EActionRole::Both) {\n\t\tif (Instigator->GetClass()->ImplementsInterface(UGameplayTagAssetInterface::StaticClass())) {\n\t\t\tTArray<FGameplayTag> InstigatorTags;\n\t\t\tInstigator->GetGameplayTags(InstigatorTags);\n\t\t\tfor (const FGameplayTag& Tag : InstigatorTags) {\n\t\t\t\tGrantedTags.AddUnique(Tag);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tUE_LOG(LogAction, Warning, TEXT(\"No gameplay tag interface found on actor %s. Action %s will not be able to grant tags to the owning component.\"), *Instigator->GetName(), *GetFName().ToString());\n\t\t}\n\t}\n\tif (Role == EActionRole::Owner || Role == EActionRole::Both) {\n\t\tif (OwnerRole == EActionRole::Owner) {\n\t\t\tStartTime = GetWorld()->GetTimeSeconds();\n\t\t}\n\t}\n\tOnActionStarted.Broadcast(Instigator);\n}\n", "CodeBleu_score": 40.7967437799579}]}
{"instance_id": "bdec7bf3e2d7", "generation_result": [{"code": "float USActionEffect::GetTimeRemaining() const\tif (IsAvailable()) {\n\t\treturn (float)(GetDuration() - (GetWorldTime() - GetStartTime()));\n\t}\n\treturn (float)GetDuration();\n}\n", "CodeBleu_score": 23.196436865081647}, {"code": "float USActionEffect::GetTimeRemaining() const\tif (IsAvailable()) {\n\t\treturn FMath::Max(0.0f, Duration - (GetWorld()->TimeSeconds - StartTime));\n\t}\n\treturn Duration;\n}\n", "CodeBleu_score": 27.439278346876506}, {"code": "float USActionEffect::GetTimeRemaining() const\tif (IsGameplayActionEffect()) {\n\t\treturn GetGameplayActionEffect()->GetTimeRemaining();\n\t}\n\treturn GetDuration();\n}\n", "CodeBleu_score": 21.581787187853692}]}
{"instance_id": "db3a7508643b", "generation_result": [{"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus)\tif (!InFocus) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"USInteractionComponent::ServerInteract_Implementation: InFocus is null\"));\n\t}\n\telse {\n\t\tAPawn* MyPawn = Cast<APawn>(GetOwner());\n\t\tif (!MyPawn) {\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(\"USInteractionComponent::ServerInteract_Implementation: Failed to cast %s to APawn\"), *GetOwner()->GetName());\n\t\t}\n\t\telse {\n\t\t\tInFocus->Interact(MyPawn);\n\t\t}\n\t}\n}\n", "CodeBleu_score": 47.693522706760184}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus)\tif (InFocus == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"USInteractionComponent::ServerInteract_Implementation: InFocus is null\"));\n\t} else {\n\t\tAPawn* MyPawn = Cast<APawn>(GetOwner());\n\t\tif (MyPawn) {\n\t\t\tInFocus->Interact(MyPawn);\n\t\t} else {\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(\"USInteractionComponent::ServerInteract_Implementation: Could not find pawn!\"));\n\t\t}\n\t}\n}\n", "CodeBleu_score": 55.180754986395506}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus)\tif (InFocus == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"Null actor passed to Interact\"));\n\t\treturn;\n\t}\n\n\tAPawn* PawnOwner = Cast<APawn>(GetOwner());\n\tif (PawnOwner == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"PawnOwner is null\"));\n\t\treturn;\n\t}\n\n\tInFocus->Interact(PawnOwner);\n}\n", "CodeBleu_score": 57.65214690400129}]}
{"instance_id": "e6a5224079e6", "generation_result": [{"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount)\tif (DamageCauser == nullptr) {\n\t\treturn false;\n\t}\n\n\tif (TargetActor == nullptr) {\n\t\treturn false;\n\t}\n\n\tif (DamageAmount <= 0.0f) {\n\t\treturn false;\n\t}\n\n\tUAttributeComponent* AttributeComponent = TargetActor->FindComponentByClass<UAttributeComponent>();\n\tif (AttributeComponent == nullptr) {\n\t\treturn false;\n\t}\n\n\tAttributeComponent->ApplyDamage(DamageAmount);\n\treturn true;\n}\n", "CodeBleu_score": 50.207120115162205}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount)\tif (DamageCauser == nullptr) {\n\t\treturn false;\n\t}\n\n\tif (TargetActor == nullptr) {\n\t\treturn false;\n\t}\n\n\tif (DamageAmount <= 0.0f) {\n\t\treturn false;\n\t}\n\n\t// Retrieve the target actor's attribute component.\n\tauto AttributeComponent = TargetActor->FindComponentByClass<USHealthComponent>();\n\n\tif (AttributeComponent == nullptr) {\n\t\treturn false;\n\t}\n\n\t// Apply the damage.\n\tAttributeComponent->ApplyDamage(DamageAmount, DamageCauser);\n\n\treturn true;\n}\n", "CodeBleu_score": 48.415521594232835}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount)\tcheck(DamageCauser);\n\tcheck(TargetActor);\n\tif (!DamageCauser ||!TargetActor) { return false; }\n\tif (DamageAmount < 0.0f) { return false; }\n\tUAttributeComponent* AttributeComponent = TargetActor->FindComponentByClass<UAttributeComponent>();\n\tif (!AttributeComponent) { return false; }\n\tAttributeComponent->ApplyDamage(DamageCauser, DamageAmount);\n\treturn true;\n}\n", "CodeBleu_score": 51.60758094378094}]}
{"instance_id": "084a7501fc08", "generation_result": [{"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime)\tif (NewTime > PersonalBestTime) {\n\t\tPersonalBestTime = NewTime;\n\t\treturn true;\n\t}\n\treturn false;\n}\n", "CodeBleu_score": 39.08863191125209}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime)\tif (NewTime > PersonalRecord) {\n\t\tPersonalRecord = NewTime;\n\t\tif (PersonalRecord > 0.0) {\n\t\t\t// Broadcast the new personal record\n\t\t\tFString RecordString = \"Personal Record: \" + FString::SanitizeFloat(PersonalRecord);\n\t\t\tFText RecordText = FText::FromString(RecordString);\n\t\t\tFTextDisplayStringPtr RecordDisplay = MakeShareable(new FTextDisplayString(RecordText));\n\t\t\tif (Role < ROLE_Authority) {\n\t\t\t\tServerBroadcast(RecordDisplay);\n\t\t\t} else {\n\t\t\t\tClientBroadcast(RecordDisplay);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n", "CodeBleu_score": 50.1937729998488}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime)\tif (NewTime > this->PersonalRecord) {\n\t\tthis->PersonalRecord = NewTime;\n\t\treturn true;\n\t}\n\treturn false;\n}\n", "CodeBleu_score": 29.865674563411286}]}
{"instance_id": "8e0ccc856566", "generation_result": [{"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn)\tif (!InstigatorPawn) return;\n\tUAttributeComponent* HealthAttribute = Cast<UAttributeComponent>(InstigatorPawn->FindComponentByClass(UAttributeComponent::StaticClass()));\n\tif (!HealthAttribute) return;\n\tif (HealthAttribute->GetHealth() == HealthAttribute->GetMaxHealth()) return;\n\tif (GetWorld()->GetAuthGameMode()->GetPlayerState<ASPawnBaseState>(GetWorld()->GetAuthGameMode()->GetPlayerArray()[0])->GetCredits() < 10) return;\n\tHealthAttribute->SetHealth(HealthAttribute->GetHealth() + 10);\n\tGetWorld()->GetAuthGameMode()->GetPlayerState<ASPawnBaseState>(GetWorld()->GetAuthGameMode()->GetPlayerArray()[0])->RemoveCredits(10);\n\tGetWorld()->GetAuthGameMode()->GetPlayerState<ASPawnBaseState>(GetWorld()->GetAuthGameMode()->GetPlayerArray()[0])->SetCooldown(GetWorld()->GetAuthGameMode()->GetPlayerState<ASPawnBaseState>(GetWorld()->GetAuthGameMode()->GetPlayerArray()[0])->GetCooldown() + 1);\n}\n", "CodeBleu_score": 36.74603072302992}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn)\tif (InstigatorPawn == nullptr) {\n\t\treturn;\n\t}\n\n\t// Retrieve the attribute component.\n\tUAttributeComponent* AttributeComponent = InstigatorPawn->FindComponentByClass<UAttributeComponent>();\n\tif (AttributeComponent == nullptr) {\n\t\treturn;\n\t}\n\n\t// Check if the pawn is at full health.\n\tif (AttributeComponent->GetCurrentHealth() == AttributeComponent->GetMaxHealth()) {\n\t\treturn;\n\t}\n\n\t// Check if the player state can remove the required credits.\n\tAPlayerState* PlayerState = Cast<APlayerState>(GetWorld()->GetFirstPlayerController()->PlayerState);\n\tif (PlayerState == nullptr) {\n\t\treturn;\n\t}\n\n\tif (!PlayerState->RemoveCredits(Cost)) {\n\t\treturn;\n\t}\n\n\t// Apply a health change to the pawn.\n\tAttributeComponent->ApplyHealthChange(HealAmount);\n\n\t// Trigger the power-up cooldown.\n\tTriggerCooldown();\n}\n", "CodeBleu_score": 44.67311460075389}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn)\tif (InstigatorPawn == nullptr) return;\n\tif (InstigatorPawn->IsPlayerControlled()) return;\n\tUAttributeComponent* AttributeComponent = Cast<UAttributeComponent>(InstigatorPawn->FindComponentByClass(UAttributeComponent::StaticClass()));\n\tif (AttributeComponent == nullptr) return;\n\tif (AttributeComponent->GetCurrentHealth() == AttributeComponent->GetHealth()) return;\n\tif (GetWorld()->GetAuthGameMode()->GetGameInstance()->GetPlayerState()->GetCredits() < GetCost()) return;\n\tAttributeComponent->Heal(GetHealAmount());\n\tGetWorld()->GetAuthGameMode()->GetGameInstance()->GetPlayerState()->RemoveCredits(GetCost());\n\tGetWorld()->GetAuthGameMode()->GetGameInstance()->GetPlayerState()->AddCooldown(GetCooldown());\n}\n", "CodeBleu_score": 40.89059974742042}]}
{"instance_id": "39a680859a89", "generation_result": [{"code": "void ASProjectileBase::Explode_Implementation()\tif (bIsExploded) { return; }\n\n\t// Spawn the explosion effect\n\tUGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ProjectileImpactEffect, GetActorLocation(), FRotator::ZeroRotator, true);\n\n\t// Play the impact sound\n\tUGameplayStatics::PlaySoundAtLocation(GetWorld(), ProjectileImpactSound, GetActorLocation());\n\n\t// Trigger a camera shake\n\tUGameplayStatics::SpawnCameraShake(GetWorld(), ProjectileCameraShake);\n\n\t// Release the projectile\n\tGetWorld()->GetGameInstance()->GetProjectilePool().ReleaseProjectile(this);\n\n\tbIsExploded = true;\n}\n", "CodeBleu_score": 50.47324099483943}, {"code": "void ASProjectileBase::Explode_Implementation()\t// Spawn an impact visual effect at the projectile's location\n\tUGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ImpactEffect, GetActorLocation(), FRotator::ZeroRotator, FVector(1.0f), true);\n\n\t// Play an impact sound\n\tUGameplayStatics::PlaySoundAtLocation(GetWorld(), ImpactSound, GetActorLocation());\n\n\t// Trigger a camera shake\n\tUCameraShake::StaticPlayCameraShake(GetWorld(), CameraShake, GetActorLocation());\n\n\t// Release the projectile back to the actor pool\n\tUGameplayStatics::GetActorPoolManager(GetWorld()).ReleaseActor(this);\n}\n", "CodeBleu_score": 50.75796324860357}, {"code": "void ASProjectileBase::Explode_Implementation()\tif (GetActorHasAuthority()) {\n\t\t// Spawn the projectile's impact effect.\n\t\tif (ImpactEffectClass) {\n\t\t\tUGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ImpactEffectClass, GetActorLocation(), FRotator::ZeroRotator, FVector(1.0f), false, true, GetInstigator());\n\t\t}\n\n\t\t// Play the projectile's impact sound.\n\t\tif (ImpactSound) {\n\t\t\tUGameplayStatics::PlaySoundAtLocation(GetWorld(), ImpactSound, GetActorLocation());\n\t\t}\n\n\t\t// Trigger a camera shake.\n\t\tif (CameraShake) {\n\t\t\tUGameplayStatics::SpawnCameraShake(GetWorld(), CameraShake, GetActorLocation());\n\t\t}\n\n\t\t// Release the projectile back to the actor pool.\n\t\tUGameplayStatics::GetActorPoolManager(GetWorld()).ReleaseActor(this);\n\t}\n}\n", "CodeBleu_score": 47.48157164203285}]}
{"instance_id": "a95c41c6d7b5", "generation_result": [{"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState)\tif (PlayerState == nullptr) {\n\t\tUE_LOG(LogSaveGame, Warning, TEXT(\"PlayerState is null. Returning null\"));\n\t\treturn nullptr;\n\t}\n\tif (GIsEditor && GIsPlayInEditorWorld) {\n\t\tUE_LOG(LogSaveGame, Log, TEXT(\"PIE: Returning first player data entry\"));\n\t\treturn SaveGameInstance->PlayerDataEntries.Num() > 0? SaveGameInstance->PlayerDataEntries[0] : nullptr;\n\t}\n\tFString PlayerID = PlayerState->GetUniqueID().ToString();\n\tfor (FPlayerSaveData* PlayerData : SaveGameInstance->PlayerDataEntries) {\n\t\tif (PlayerData->PlayerID == PlayerID) {\n\t\t\treturn PlayerData;\n\t\t}\n\t}\n\tUE_LOG(LogSaveGame, Warning, TEXT(\"No player data found for PlayerState %s\"), *(PlayerState->GetUniqueID().ToString()));\n\treturn nullptr;\n}\n", "CodeBleu_score": 54.591214233359}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState)\tif (PlayerState == nullptr) {\n\t\treturn nullptr;\n\t}\n\n\tif (GIsEditor && GIsPlayInEditorWorld) {\n\t\tUE_LOG(LogSaveGame, Log, TEXT(\"USSaveGame::GetPlayerData: PIE mode, returning first player data entry\"));\n\t\treturn SaveData.PlayerData.Num() > 0? SaveData.PlayerData[0] : nullptr;\n\t}\n\n\tfor (FPlayerSaveData* PlayerData : SaveData.PlayerData) {\n\t\tif (PlayerData->PlayerID == PlayerState->PlayerID) {\n\t\t\treturn PlayerData;\n\t\t}\n\t}\n\n\treturn nullptr;\n}\n", "CodeBleu_score": 47.387425445810855}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState)\tif (PlayerState == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"PlayerState is null!\"));\n\t\treturn nullptr;\n\t}\n\tif (GIsPlayInEditorWorld) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"PIE mode detected!\"));\n\t\treturn GetFirstPlayerSaveData();\n\t}\n\treturn GetPlayerSaveData(PlayerState->GetUniqueID());\n}\n", "CodeBleu_score": 38.481189370740545}]}
{"instance_id": "58a03c087c47", "generation_result": [{"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer)\tif (NewPlayer == nullptr) {\n\t\treturn;\n\t}\n\n\tauto PlayerState = NewPlayer->GetPlayerState();\n\tif (PlayerState == nullptr) {\n\t\treturn;\n\t}\n\n\tauto PlayerName = NewPlayer->GetPlayerName();\n\tif (PlayerName.IsEmpty()) {\n\t\treturn;\n\t}\n\n\tauto PlayerID = NewPlayer->GetLocalPlayerId();\n\tif (PlayerID == -1) {\n\t\treturn;\n\t}\n\n\tauto PlayerSaveData = GetPlayerSaveData(PlayerID);\n\tif (PlayerSaveData == nullptr) {\n\t\treturn;\n\t}\n\n\t// Load the player's state from the save game.\n\tPlayerSaveData->LoadPlayerState(PlayerState);\n}\n", "CodeBleu_score": 42.89671751304776}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer)\tSuper::HandleStartingNewPlayer(NewPlayer);\n\tif (NewPlayer == nullptr) {\n\t\treturn;\n\t}\n\n\tif (!NewPlayer->PlayerState) {\n\t\treturn;\n\t}\n\n\t// Retrieve the player's state\n\tauto* PlayerState = Cast<ASSPlayerState>(NewPlayer->PlayerState);\n\tif (!PlayerState) {\n\t\treturn;\n\t}\n\n\t// If the player is a new player, we need to load their save game\n\tif (PlayerState->bIsNewPlayer) {\n\t\t// Retrieve the player's save game\n\t\tauto* SaveGame = GetSaveGame(NewPlayer);\n\t\tif (SaveGame) {\n\t\t\t// Load the player's save game\n\t\t\tLoadSaveGame(NewPlayer, SaveGame);\n\t\t}\n\t}\n}\n", "CodeBleu_score": 43.441254280676254}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer)\tif (!NewPlayer) {\n\t\treturn;\n\t}\n\n\t// Ensure the player is valid\n\tif (!NewPlayer->GetPawn()) {\n\t\treturn;\n\t}\n\n\t// Get the player's save game data\n\tUSSaveGame* SaveGame = GetSaveGameForPlayer(NewPlayer);\n\n\t// Ensure the save game is valid\n\tif (!SaveGame) {\n\t\treturn;\n\t}\n\n\t// Load the player's state\n\tSaveGame->LoadPlayerState();\n}\n", "CodeBleu_score": 45.356885381803544}]}
{"instance_id": "c5bd4c059b71", "generation_result": [{"code": "void USSaveGameSubsystem::WriteSaveGame()\t// Clear the current save game\n\tCurrentSaveGame.Reset();\n\n\t// Get the game state\n\tUWorld* World = GetWorld();\n\tif (World) {\n\t\tUGameInstance* GameInstance = World->GetGameInstance();\n\t\tif (GameInstance) {\n\t\t\tUGameStateBase* GameState = GameInstance->GetGameState();\n\t\t\tif (GameState) {\n\t\t\t\t// Save the game state\n\t\t\t\tCurrentSaveGame.GameState = GameState->SerializeGameState();\n\t\t\t}\n\t\t}\n\t}\n\n\t// Save the player data for each player in the game state\n\tfor (FPlayerSaveData& PlayerSaveData : CurrentSaveGame.PlayerData) {\n\t\tUGameInstance* GameInstance = GetGameInstance();\n\t\tif (GameInstance) {\n\t\t\tAPawn* PlayerPawn = GameInstance->GetPlayerPawn(PlayerSaveData.PlayerIndex);\n\t\t\tif (PlayerPawn) {\n\t\t\t\tPlayerSaveData.PlayerName = PlayerPawn->GetPlayerName();\n\t\t\t\tPlayerSaveData.PlayerTransform = PlayerPawn->GetActorTransform();\n\t\t\t}\n\t\t}\n\t}\n\n\t// Iterate through all actors in the world\n\tfor (AActor* Actor : TActorRange<AActor>(GetWorld())) {\n\t\t// Only save actors that implement the ISaveGameActor interface\n\t\tif (Actor->GetClass()->ImplementsInterface(USaveGameActor::StaticClass())) {\n\t\t\t// Get the save game actor interface\n\t\t\tISaveGameActor* SaveGameActor = Cast<ISaveGameActor>(Actor);\n\n\t\t\t// Save the actor data\n\t\t\tFSaveGameActorData ActorSaveData;\n\t\t\tActorSaveData.ActorName = Actor->GetActorLabel();\n\t\t\tActorSaveData.ActorTransform = Actor->GetActorTransform();\n\t\t\tActorSaveData.ActorData = SaveGameActor->SerializeSaveData();\n\n\t\t\t// Add the actor data to the current save game\n\t\t\tCurrentSaveGame.SaveGameActors.Add(ActorSaveData);\n\t\t}\n\t}\n\n\t// Write the save game to a slot\n\tif (SaveGameSlotName!= NAME_None) {\n\t\tFSaveGameSaveData SaveGameSaveData;\n\t\tSaveGameSaveData.SaveGameSlotName = SaveGameSlotName;\n\t\tSaveGameSaveData.CurrentSaveGame = CurrentSaveGame;\n\t\tSaveGameSaveData.SaveGameTime = FDateTime::Now();\n\n\t\t// Write the save game to a slot\n\t\t", "CodeBleu_score": 43.61499498716152}, {"code": "void USSaveGameSubsystem::WriteSaveGame()\t// Clear existing save game data\n\tCurrentSaveGame->Clear();\n\t// Get the current game state\n\tUWorld* World = GetWorld();\n\tif (World) {\n\t\t// Iterate through all players\n\t\tfor (TActorIterator<APlayerController> It(World); It; ++It) {\n\t\t\tAPlayerController* Player = *It;\n\t\t\tif (Player) {\n\t\t\t\t// Get the player's save data\n\t\t\t\tFPlayerSaveData* PlayerSaveData = GetPlayerSaveData(Player);\n\t\t\t\tif (PlayerSaveData) {\n\t\t\t\t\t// Save the player's data\n\t\t\t\t\tPlayerSaveData->Save(CurrentSaveGame);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Iterate through all actors in the world\n\t\tfor (TActorIterator<AActor> It(World); It; ++It) {\n\t\t\tAActor* Actor = *It;\n\t\t\tif (Actor) {\n\t\t\t\t// Get the actor's save data\n\t\t\t\tFActorSaveData* ActorSaveData = GetActorSaveData(Actor);\n\t\t\t\tif (ActorSaveData) {\n\t\t\t\t\t// Save the actor's data\n\t\t\t\t\tActorSaveData->Save(CurrentSaveGame);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Write the save game to a slot\n\t\tWriteSaveGameToSlot(CurrentSaveGame);\n\t\t// Broadcast an event to signal the save is complete\n\t\tOnSaveGameComplete.Broadcast();\n\t}\n}\n", "CodeBleu_score": 36.191098900224304}, {"code": "void USSaveGameSubsystem::WriteSaveGame()\t// Clear any existing saved player data\n\tCurrentSaveGame.SavedPlayers.Empty();\n\t// Iterate through all players in the game state\n\tfor (APlayerController* PlayerController : GetWorld()->GetPlayerControllerList()) {\n\t\t// Retrieve the player's data and add it to the save game\n\t\tFSSaveGamePlayerData PlayerData;\n\t\tPlayerData.PlayerName = PlayerController->GetPawn()->GetName();\n\t\tPlayerData.PlayerTransform = PlayerController->GetPawn()->GetActorTransform();\n\t\tCurrentSaveGame.SavedPlayers.Add(PlayerData);\n\t}\n\t// Iterate through all actors in the world\n\tfor (AActor* Actor : GetWorld()->GetActors()) {\n\t\t// Only save actors that implement the ISaveGame interface\n\t\tif (Actor->GetClass()->ImplementsInterface(USaveGame::StaticClass())) {\n\t\t\t// Retrieve the actor's data and add it to the save game\n\t\t\tFSSaveGameActorData ActorData;\n\t\t\tActorData.ActorName = Actor->GetName();\n\t\t\tActorData.ActorTransform = Actor->GetActorTransform();\n\t\t\t// Retrieve the actor's interface and serialize its data\n\t\t\tISaveGame* SaveGameInterface = Cast<ISaveGame>(Actor);\n\t\t\tSaveGameInterface->Serialize(ActorData.SerializedData);\n\t\t\t// Add the actor's data to the save game\n\t\t\tCurrentSaveGame.SavedActors.Add(ActorData);\n\t\t}\n\t}\n\t// Write the save game to a slot\n\tGetSaveGameManager().WriteSaveGame(CurrentSaveGame);\n\t// Broadcast an event to signal the save is complete\n\tFSSaveGameSavedEvent SavedEvent;\n\tSavedEvent.SaveGame = CurrentSaveGame;\n\tSavedEvent.SaveSlot = CurrentSaveSlot;\n\tSavedEvent.Broadcast();\n}\n", "CodeBleu_score": 44.32031014733071}]}
{"instance_id": "0d7043a0bff0", "generation_result": [{"code": "void FrameworkConfig::draw_themes()\tImGui::Begin(\"Themes\");\n\n\tImGui::Text(\"Theme\");\n\tImGui::SameLine();\n\tif (ImGui::Button(\"Default\")) {\n\t\tset_theme(default_theme);\n\t}\n\tImGui::SameLine();\n\tif (ImGui::Button(\"Dark\")) {\n\t\tset_theme(dark_theme);\n\t}\n\tImGui::SameLine();\n\tif (ImGui::Button(\"Classic\")) {\n\t\tset_theme(classic_theme);\n\t}\n\tImGui::SameLine();\n\tif (ImGui::Button(\"Classic Dark\")) {\n\t\tset_theme(classic_dark_theme);\n\t}\n\n\tImGui::Text(\"Font Size\");\n\tImGui::SameLine();\n\tif (ImGui::Button(\"Small\")) {\n\t\tset_font_size(10);\n\t}\n\tImGui::SameLine();\n\tif (ImGui::Button(\"Medium\")) {\n\t\tset_font_size(14);\n\t}\n\tImGui::SameLine();\n\tif (ImGui::Button(\"Large\")) {\n\t\tset_font_size(18);\n\t}\n\n\tImGui::End();\n}\n", "CodeBleu_score": 35.1969411413674}, {"code": "void FrameworkConfig::draw_themes()\tif (ImGui::BeginCombo(\"Theme\", theme_names[theme])) {\n\t\tfor (int n = 0; n < IM_ARRAYSIZE(theme_names); n++) {\n\t\t\tbool is_selected = (theme == n);\n\t\t\tif (ImGui::MenuItem(theme_names[n], NULL, is_selected)) {\n\t\t\t\ttheme = n;\n\t\t\t\tImGui::GetIO().Fonts->Clear();\n\t\t\t\tImGui::GetIO().Fonts->AddFontFromFileTTF(theme_files[n], font_size);\n\t\t\t\tImGui::GetIO().Fonts->Build();\n\t\t\t\tImGui::GetIO().FontGlobalScale = font_size / 13.0f;\n\t\t\t}\n\t\t\tif (is_selected)\n\t\t\t\tImGui::SetItemDefaultFocus();   // Set the initial focus when opening the combo (scrolling + for keyboard navigation support in the upcoming navigation branch)\n\t\t}\n\t\tImGui::EndCombo();\n\t}\n\tImGui::SliderFloat(\"Font Size\", &font_size, 1, 20);\n}\n", "CodeBleu_score": 33.31806775675002}, {"code": "void FrameworkConfig::draw_themes()\tif (ImGui::Button(\"Default\")) {\n\t\ttheme = THEME_DEFAULT;\n\t\tupdate_font_size();\n\t}\n\tImGui::SameLine();\n\tif (ImGui::Button(\"Dark\")) {\n\t\ttheme = THEME_DARK;\n\t\tupdate_font_size();\n\t}\n\tImGui::SameLine();\n\tif (ImGui::Button(\"Classic\")) {\n\t\ttheme = THEME_CLASSIC;\n\t\tupdate_font_size();\n\t}\n\tImGui::SameLine();\n\tif (ImGui::Button(\"Classic Dark\")) {\n\t\ttheme = THEME_CLASSIC_DARK;\n\t\tupdate_font_size();\n\t}\n\tImGui::SameLine();\n\tif (ImGui::Button(\"Classic Light\")) {\n\t\ttheme = THEME_CLASSIC_LIGHT;\n\t\tupdate_font_size();\n\t}\n\tImGui::SameLine();\n\tif (ImGui::Button(\"Classic Alt\")) {\n\t\ttheme = THEME_CLASSIC_ALT;\n\t\tupdate_font_size();\n\t}\n\tImGui::SameLine();\n\tif (ImGui::Button(\"Classic Alt 2\")) {\n\t\ttheme = THEME_CLASSIC_ALT_2;\n\t\tupdate_font_size();\n\t}\n\tImGui::SameLine();\n\tif (ImGui::Button(\"Classic Alt 3\")) {\n\t\ttheme = THEME_CLASSIC_ALT_3;\n\t\tupdate_font_size();\n\t}\n\tImGui::SameLine();\n\tif (ImGui::Button(\"Classic Alt 4\")) {\n\t\ttheme = THEME_CLASSIC_ALT_4;\n\t\tupdate_font_size();\n\t}\n\tImGui::SameLine();\n\tif (ImGui::Button(\"Classic Alt 5\")) {\n\t\ttheme = THEME_CLASSIC_ALT_5;\n\t\tupdate_font_size();\n\t}\n\tImGui::SameLine();\n\tif (ImGui::Button(\"Classic Alt 6\")) {\n\t\ttheme = THEME_CLASSIC_ALT_6;\n\t\tupdate_font_size();\n\t}\n\tImGui::SameLine();\n\tif (ImGui::Button(\"Classic Alt 7\")) {\n\t\ttheme = THEME_CLASSIC_ALT_7;\n\t\tupdate_font_size();\n\t}\n\tImGui", "CodeBleu_score": 34.30801554197639}]}
{"instance_id": "e7f81d1dee95", "generation_result": [{"code": "void FrameworkConfig::draw_main() \tImGui::Text(\"Menu Key\");\n\tImGui::SameLine();\n\tImGui::PushItemWidth(100);\n\tImGui::Combo(\"##menu_key\", &menu_key, \"None\\0L1\\0R1\\0L2\\0R2\\0L3\\0R3\\0\");\n\tImGui::PopItemWidth();\n\tImGui::SameLine();\n\tImGui::Text(\"Show Cursor\");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##show_cursor\", &show_cursor);\n\tImGui::SameLine();\n\tImGui::Text(\"Remember Menu State\");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##remember_menu_state\", &remember_menu_state);\n\tImGui::SameLine();\n\tImGui::Text(\"Enable L3 + R3 Toggle\");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##enable_l3_r3_toggle\", &enable_l3_r3_toggle);\n\tImGui::SameLine();\n\tImGui::Text(\"Always Show Cursor\");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##always_show_cursor\", &always_show_cursor);\n\tImGui::Text(\"Log Level\");\n\tImGui::SameLine();\n\tImGui::PushItemWidth(100);\n\tImGui::Combo(\"##log_level\", &log_level, \"Trace\\0Debug\\0Info\\0Warn\\0Error\\0Critical\\0Off\\0\");\n\tImGui::PopItemWidth();\n\tif (log_level >= 0 && log_level <= 6) {\n\t\tspdlog::set_level(static_cast<spdlog::level::level_enum>(log_level));\n\t}\n}\n", "CodeBleu_score": 46.96144176704683}, {"code": "void FrameworkConfig::draw_main() \tImGui::SetNextWindowSize(ImVec2(400, 200), ImGuiCond_FirstUseEver);\n\tImGui::Begin(\"Main Configuration\", &show_main);\n\n\tImGui::Text(\"Menu Key\");\n\tImGui::SameLine();\n\tImGui::Text(\"Current: %s\", menu_key_name.c_str());\n\tImGui::SameLine();\n\tif (ImGui::Button(\"Change\")) {\n\t\tImGui::OpenPopup(\"ChangeMenuKey\");\n\t}\n\tif (ImGui::BeginPopup(\"ChangeMenuKey\")) {\n\t\tfor (int i = 0; i < IM_ARRAYSIZE(io.KeyMap); i++) {\n\t\t\tif (i % 4 == 0) {\n\t\t\t\tImGui::Text(\"%s\", io.KeyMap[i]? GetKeyName(i) : \"\");\n\t\t\t}\n\t\t\tif (ImGui::Selectable(GetKeyName(i), io.KeyMap[i] == menu_key)) {\n\t\t\t\tmenu_key = i;\n\t\t\t\tmenu_key_name = GetKeyName(i);\n\t\t\t\tImGui::CloseCurrentPopup();\n\t\t\t}\n\t\t}\n\t\tImGui::EndPopup();\n\t}\n\n\tImGui::Text(\"Show Cursor\");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##show_cursor\", &show_cursor);\n\n\tImGui::Text(\"Remember Menu State\");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##remember_menu_state\", &remember_menu_state);\n\n\tImGui::Text(\"Enable L3 + R3 Toggle\");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##l3_r3_toggle\", &l3_r3_toggle);\n\n\tImGui::Text(\"Always Show Cursor\");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##always_show_cursor\", &always_show_cursor);\n\n\tImGui::Text(\"Log Level\");\n\tImGui::SameLine();\n\tImGui::Text(\"Current: %s\", log_level_name.c_str());\n\tImGui::SameLine();\n\tif (ImGui::Button(\"Change\")) {\n\t\tImGui::OpenPopup(\"ChangeLogLevel\");\n\t}\n\tif (ImGui::BeginPopup(\"ChangeLogLevel\")) {\n\t\tfor (int i = 0; i < IM_ARRAYSIZE(log_", "CodeBleu_score": 47.077169883407386}, {"code": "void FrameworkConfig::draw_main() \tImGui::Begin(\"Main Config\");\n\tImGui::Text(\"Menu Key\");\n\tImGui::SameLine();\n\tImGui::PushItemWidth(100);\n\tImGui::InputInt(\"##menu_key\", &menu_key);\n\tImGui::Text(\"Show Cursor Key\");\n\tImGui::SameLine();\n\tImGui::PushItemWidth(100);\n\tImGui::InputInt(\"##show_cursor_key\", &show_cursor_key);\n\tImGui::Text(\"Remember Menu State\");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##remember_menu_state\", &remember_menu_state);\n\tImGui::Text(\"Enable L3 + R3 Toggle\");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##enable_l3_r3_toggle\", &enable_l3_r3_toggle);\n\tImGui::Text(\"Always Show Cursor\");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##always_show_cursor\", &always_show_cursor);\n\tImGui::Text(\"Log Level\");\n\tImGui::SameLine();\n\tImGui::PushItemWidth(100);\n\tImGui::Combo(\"##log_level\", &log_level, \"Trace\\0Debug\\0Info\\0Warn\\0Error\\0Critical\\0Off\\0\");\n\tif (log_level!= spdlog::level::off) {\n\t\tspdlog::set_level(spdlog::level::level_enum(log_level));\n\t}\n\tImGui::End();\n}\n", "CodeBleu_score": 46.730714106059715}]}
{"instance_id": "83fa7f401579", "generation_result": [{"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext )\t// Clear the existing data\n\tClear();\n\n\t// Check that the file exists\n\tif (!FPaths::FileExists( OSMFilePath ) ) {\n\t\tUE_LOG( LogOpenStreetMap, Error, TEXT( \"OSM file '%s' does not exist\" ), *OSMFilePath );\n\t\treturn false;\n\t}\n\n\t// Create a new XML reader\n\tFArchive* Reader = IFileManager::Get().CreateFileReader( *OSMFilePath );\n\tif ( Reader == nullptr ) {\n\t\tUE_LOG( LogOpenStreetMap, Error, TEXT( \"OSM file '%s' could not be opened\" ), *OSMFilePath );\n\t\treturn false;\n\t}\n\n\t// Parse the XML file\n\tbool bSuccess = FFastXml::ParseXmlFile( *Reader, TEXT( \"osm\" ), FOSMFile::OnNode, this, FeedbackContext );\n\n\t// Close the file\n\tReader->Close();\n\n\t// Check for errors\n\tif (!bSuccess ) {\n\t\tUE_LOG( LogOpenStreetMap, Error, TEXT( \"OSM file '%s' could not be parsed\" ), *OSMFilePath );\n\t\treturn false;\n\t}\n\n\t// Check that we have some data\n\tif ( Nodes.Num() == 0 ) {\n\t\tUE_LOG( LogOpenStreetMap, Error, TEXT( \"OSM file '%s' contains no nodes\" ), *OSMFilePath );\n\t\treturn false;\n\t}\n\n\t// Calculate the average latitude and longitude\n\tFVector2D AverageLatLon( 0.0f, 0.0f );\n\tfor ( const FOSMNode& Node : Nodes ) {\n\t\tAverageLatLon += FVector2D( Node.Latitude, Node.Longitude );\n\t}\n\tAverageLatLon /= Nodes.Num();\n\n\t// Set the average latitude and longitude\n\tSetAverageLatLon( AverageLatLon );\n\n\t// Success\n\treturn true;\n}\n", "CodeBleu_score": 49.089526020587826}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext )\tFXmlNode* RootNode = nullptr;\n\tif ( bIsFilePathActuallyTextBuffer ) {\n\t\tFXmlFile XmlFile;\n\t\tif ( XmlFile.LoadFile( *OSMFilePath, true ) ) {\n\t\t\tRootNode = XmlFile.GetRootNode();\n\t\t}\n\t} else {\n\t\tFXmlFile XmlFile;\n\t\tif ( XmlFile.LoadFile( *OSMFilePath ) ) {\n\t\t\tRootNode = XmlFile.GetRootNode();\n\t\t}\n\t}\n\tif ( RootNode == nullptr ) {\n\t\treturn false;\n\t}\n\tFXmlNode* Node = RootNode->FindChildNode( TEXT( \"bounds\" ) );\n\tif ( Node!= nullptr ) {\n\t\tFXmlNode* MinLatitudeNode = Node->FindChildNode( TEXT( \"minlat\" ) );\n\t\tFXmlNode* MaxLatitudeNode = Node->FindChildNode( TEXT( \"maxlat\" ) );\n\t\tFXmlNode* MinLongitudeNode = Node->FindChildNode( TEXT( \"minlon\" ) );\n\t\tFXmlNode* MaxLongitudeNode = Node->FindChildNode( TEXT( \"maxlon\" ) );\n\t\tif ( ( MinLatitudeNode!= nullptr ) && ( MaxLatitudeNode!= nullptr ) && ( MinLongitudeNode!= nullptr ) && ( MaxLongitudeNode!= nullptr ) ) {\n\t\t\tFString MinLatitudeString = MinLatitudeNode->GetContent();\n\t\t\tFString MaxLatitudeString = MaxLatitudeNode->GetContent();\n\t\t\tFString MinLongitudeString = MinLongitudeNode->GetContent();\n\t\t\tFString MaxLongitudeString = MaxLongitudeNode->GetContent();\n\t\t\tif ( ( MinLatitudeString.Len() > 0 ) && ( MaxLatitudeString.Len() > 0 ) && ( MinLongitudeString.Len() > 0 ) && ( MaxLongitudeString.Len() > 0 ) ) {\n\t\t\t\tfloat MinLatitude = FCString::Atof( *MinLatitudeString );\n\t\t\t\tfloat MaxLatitude = FCString::Atof( *MaxLatitudeString );\n\t\t\t\tfloat MinLongitude = FCString::Atof( *MinLongitudeString );\n\t\t\t\tfloat MaxLongitude = FCString::Atof( *MaxLongitudeString );\n\t\t\t\tAverageLatitude = ( MinLatitude + MaxLatitude ) * 0.5f;\n\t\t\t\tAverageLongitude = ( MinLongitude + MaxLongitude ) * 0.5f;", "CodeBleu_score": 45.4037468301568}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext )\tbool bSuccess = true;\n\tFString OSMFileText;\n\tif ( bIsFilePathActuallyTextBuffer ) {\n\t\tOSMFileText = OSMFilePath;\n\t} else {\n\t\tif (!FFileHelper::LoadFileToString( OSMFileText, *OSMFilePath ) ) {\n\t\t\tbSuccess = false;\n\t\t\tif ( FeedbackContext!= nullptr ) {\n\t\t\t\tFeedbackContext->Log( ELogVerbosity::Error, TEXT( \"Failed to load OpenStreetMap file.\" ) );\n\t\t\t}\n\t\t}\n\t}\n\tif ( bSuccess ) {\n\t\tbSuccess = LoadOpenStreetMapText( OSMFileText, FeedbackContext );\n\t}\n\treturn bSuccess;\n}\n", "CodeBleu_score": 35.45211995019299}]}
{"instance_id": "7349d775edf6", "generation_result": [{"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor)\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tAStreetMapActor* StreetMapActor = CastChecked<AStreetMapActor>(NewActor);\n\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\tif (StreetMapComponent) {\n\t\tStreetMapComponent->SetStreetMapAsset(CastChecked<UStreetMap>(Asset));\n\t}\n}\n", "CodeBleu_score": 73.50431299597027}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor)\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tAStreetMapActor* StreetMapActor = CastChecked<AStreetMapActor>(NewActor);\n\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\tStreetMapComponent->SetStreetMap(CastChecked<UStreetMap>(Asset));\n}\n", "CodeBleu_score": 70.36272815727617}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor)\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tif (Cast<UStreetMap>(Asset)) {\n\t\tAStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor);\n\t\tif (StreetMapActor) {\n\t\t\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\t\t\tif (StreetMapComponent) {\n\t\t\t\tStreetMapComponent->SetStreetMap(Cast<UStreetMap>(Asset));\n\t\t\t}\n\t\t}\n\t}\n}\n", "CodeBleu_score": 70.98934025569879}]}
{"instance_id": "f160ac6d0353", "generation_result": [{"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked()\tTArray<UStreetMapComponent*> SelectedComponents;\n\tTArray<UObject*> ObjectsToSync;\n\n\tGetSelectedComponents(SelectedComponents);\n\n\tfor (auto Component : SelectedComponents) {\n\t\tif (Component) {\n\t\t\tComponent->BuildMesh();\n\t\t\tObjectsToSync.Add(Component);\n\t\t}\n\t}\n\n\tif (ObjectsToSync.Num() > 0) {\n\t\tFEditorDelegates::RefreshSelectedViews.Broadcast();\n\t\tFEditorDelegates::RefreshLevelEditingViewports.Broadcast();\n\t\tFEditorSupportDelegates::RedrawAllViewports.Broadcast();\n\t\tGEditor->GetEditorSubsystem<UAssetEditorSubsystem>()->SyncBrowserToObjects(ObjectsToSync);\n\t}\n\n\treturn FReply::Handled();\n}\n", "CodeBleu_score": 47.42402789560144}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked()\tTArray<TWeakObjectPtr<UStreetMapComponent>> StreetMapComponents;\n\tGetSelectedStreetMapComponents(StreetMapComponents);\n\tfor (auto StreetMapComponent : StreetMapComponents) {\n\t\tif (StreetMapComponent.IsValid()) {\n\t\t\tStreetMapComponent->BuildMesh();\n\t\t}\n\t}\n\treturn FReply::Handled();\n}\n", "CodeBleu_score": 51.73923827016231}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked()\tTArray<UStreetMapComponent*> StreetMapComponents;\n\tTArray<UStreetMapComponent*> SelectedComponents = GetSelectedStreetMapComponents();\n\tStreetMapComponents.Append(SelectedComponents);\n\tfor (auto StreetMapComponent : StreetMapComponents) {\n\t\tif (StreetMapComponent) {\n\t\t\tStreetMapComponent->BuildMesh();\n\t\t}\n\t}\n\treturn FReply::Handled();\n}\n", "CodeBleu_score": 52.03745757212205}]}
{"instance_id": "b23f1f2b29fa", "generation_result": [{"code": "void FStreetMapImportingModule::StartupModule()\t// This code will execute after your module is loaded into memory; the exact timing is specified in the.uplugin file per-module\n\tFStreetMapStyle::Initialize();\n\tFStreetMapStyle::ReloadTextures();\n\n\t// Register the StreetMap asset type with the editor\n\tIAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n\tAssetTools.RegisterAssetTypeActions(MakeShareable(new FStreetMapAssetTypeActions));\n\n\t// Register the StreetMap class layout\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyModule.RegisterCustomClassLayout(\"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentCustomization::MakeInstance));\n\n\t// Notify the property editor that we have customized it\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}\n\n", "CodeBleu_score": 64.93515338095185}, {"code": "void FStreetMapImportingModule::StartupModule()\t// This code will execute after your module is loaded into memory; the exact timing is specified in the.uplugin file per-module\n\tFStreetMapStyle::Initialize();\n\tFStreetMapStyle::ReloadTextures();\n\n\t// Register the StreetMap asset type with the Editor.\n\tIAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n\tAssetTools.RegisterAssetTypeActions(MakeShareable(new FStreetMapAssetActions));\n\n\t// Register the StreetMap component layout class with the editor.\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyModule.RegisterCustomClassLayout(\"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n\n\t// Notify the property editor module that a new class layout has been registered.\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}\n", "CodeBleu_score": 67.6519113341593}, {"code": "void FStreetMapImportingModule::StartupModule()\t// This code will execute after your module is loaded into memory; the exact timing is specified in the.uplugin file per-module\n\t\n\t// Register the StreetMap asset type with the Editor\n\tIAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n\tAssetTools.RegisterAssetTypeActions(MakeShareable(new FStreetMapAssetActions(StreetMapStyle)));\n\n\t// Register the StreetMap style\n\tFSlateStyleRegistry::RegisterSlateStyle(*StreetMapStyle);\n\n\t// Register the StreetMap class layout\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyModule.RegisterCustomClassLayout(TEXT(\"StreetMapComponent\"), FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentCustomization::MakeInstance));\n\n\t// Notify the property editor module that the customization has changed\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}\n", "CodeBleu_score": 58.77499848321727}]}
{"instance_id": "1da549fe84e3", "generation_result": [{"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy()\tif (StreetMapMesh) {\n\t\tFStreetMapSceneProxy* Proxy = new FStreetMapSceneProxy(this);\n\t\treturn Proxy;\n\t}\n\treturn nullptr;\n}\n", "CodeBleu_score": 28.021003571798857}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy()\tif (Mesh == nullptr) {\n\t\treturn nullptr;\n\t}\n\tFStreetMapSceneProxy* Proxy = new FStreetMapSceneProxy(this);\n\treturn Proxy;\n}\n", "CodeBleu_score": 27.50908092241754}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy()\tif (StreetMapMesh.IsValid()) {\n\t\tFStreetMapSceneProxy* Proxy = new FStreetMapSceneProxy(this);\n\t\treturn Proxy;\n\t}\n\treturn nullptr;\n}\n", "CodeBleu_score": 29.98674193020526}]}
{"instance_id": "d0ee3b2e023e", "generation_result": [{"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle)\tTestAbility01Handle = ServerHandle;\n\tTArray<FName> InputNames;\n\tInputNames.Add(TEXT(\"Ability01\"));\n\tTestAbility01Handle.BindToInputNames(InputNames);\n}\n", "CodeBleu_score": 46.246448731497495}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle)\tTestAbility01Handle = ServerHandle;\n\tTestAbility01InputIDArray.Add(0);\n\tFAFServer::Get().BindAbility(TestAbility01Handle, TestAbility01InputIDArray);\n}\n", "CodeBleu_score": 42.73281359361224}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle)\tTestAbility01Handle = ServerHandle;\n\tTestAbility01Handle.InputIDArray.Add(EFAInputID::Ability01);\n\tTestAbility01Handle.BindToInputIDArray();\n}\n", "CodeBleu_score": 46.16244465706656}]}
{"instance_id": "e62f1b2cd4bd", "generation_result": [{"code": "void AARCharacter::MoveForward(float Value)\tif (Controller!= nullptr) {\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tconst FVector MoveDir = Direction * Value;\n\t\tAddMovementInput(MoveDir, Value);\n\t}\n}\n", "CodeBleu_score": 78.0499695243013}, {"code": "void AARCharacter::MoveForward(float Value)\t// Do not move if we are dead\n\tif (GetCharacterMovement()->IsFalling()) {\n\t\treturn;\n\t}\n\n\t// Get the forward vector from the controller\n\tconst FVector PlayerForward = GetControlRotation().GetForwardVector();\n\t// Get the right vector from the controller\n\tconst FVector PlayerRight = GetControlRotation().GetRightVector();\n\t// Calculate the new direction\n\tconst FVector DesiredDirection = PlayerForward * Value + PlayerRight * InputComponent->GetAxisValue(\"Turn\");\n\t// Move the character\n\tGetCharacterMovement()->AddInput(DesiredDirection, Value);\n}\n", "CodeBleu_score": 42.346312970061746}, {"code": "void AARCharacter::MoveForward(float Value)\tif ((Controller!= nullptr) && (Value!= 0.0f)) {\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tconst FVector MoveValue = Direction * Value;\n\t\tAddMovementInput(MoveValue, Value);\n\t}\n}\n", "CodeBleu_score": 81.96956809412977}]}
{"instance_id": "a77cdc67ee00", "generation_result": [{"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const\tif (WeaponMeshComponent) {\n\t\treturn WeaponMeshComponent->GetSocketLocation(Socket);\n\t}\n\treturn GetMesh()->GetSocketLocation(HeadSocket);\n}\n", "CodeBleu_score": 38.33464404267581}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const\tif (GetMesh() == nullptr) {\n\t\treturn GetMesh()->GetSocketLocation(Socket);\n\t}\n\treturn GetMesh()->GetSocketLocation(Socket);\n}\n", "CodeBleu_score": 47.67435168907834}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const\tif (!WeaponMesh) {\n\t\treturn GetMesh()->GetSocketLocation(FName(\"headSocket\"));\n\t}\n\treturn WeaponMesh->GetSocketLocation(Socket);\n}\n", "CodeBleu_score": 53.12080514409041}]}
{"instance_id": "f021203f736a", "generation_result": [{"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy)\tif (InEnemy == nullptr) {\n\t\treturn;\n\t}\n\n\t// Remove the enemy from the list of spawned enemies.\n\tSpawnedEnemies.Remove(InEnemy);\n\n\t// If the number of enemies is below the minimum, respawn them.\n\tif (SpawnedEnemies.Num() < MinNumOfEnemies) {\n\t\tRespawnEnemies();\n\t}\n}\n", "CodeBleu_score": 56.27199535742594}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy)\tif (InEnemy!= nullptr) {\n\t\tif (InEnemy->EnemyType == EEnemyType::EET_SKELETON) {\n\t\t\tSpawnedSkeletonCount--;\n\t\t\tif (SpawnedSkeletonCount <= 0) {\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;\n\t\t\t\tSpawnedSkeletonCount = 0;", "CodeBleu_score": 33.918743383001726}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy)\tif (InEnemy == nullptr) {\n\t\treturn;\n\t}\n\t// Remove the enemy from the list of enemies\n\tEnemies.Remove(InEnemy);\n\t// If there are no enemies left, set up the spawner to respawn\n\tif (Enemies.Num() == 0) {\n\t\tSpawnTimerHandle.Invalidate();\n\t\tif (SpawnTimer!= 0.0f) {\n\t\t\tSpawnTimerHandle = GetWorld()->GetTimerManager().SetTimer(this, &AAREnemySpawner::RespawnEnemies, SpawnTimer, false);\n\t\t}\n\t}\n}\n", "CodeBleu_score": 45.38294863699265}]}
{"instance_id": "dbab72cb539f", "generation_result": [{"code": "FString AARGameSession::ApproveLogin(const FString& Options)\tFString PlayerId;\n\tTArray<FString> Params;\n\tParams = Options.ParseIntoArray(TEXT(\" \"), true);\n\tfor (auto Param : Params) {\n\t\tif (Param.StartsWith(TEXT(\"PlayerId=\"))) {\n\t\t\tPlayerId = Param.RightChop(Param.Len() - 9);\n\t\t}\n\t}\n\treturn Super::ApproveLogin(Options);\n}\n", "CodeBleu_score": 49.5688406141283}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options)\tFString Result = Super::ApproveLogin(Options);\n\tTArray<FString> Params;\n\tParams.Empty();\n\tFParse::Value(*Options, TEXT(\"PlayerId=\"), Params);\n\tif (Params.Num() > 0) {\n\t\tPlayerId = Params[0];\n\t}\n\treturn Result;\n}\n", "CodeBleu_score": 42.09047058290234}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options)\tFString PlayerId = \"0\";\n\tTArray<FString> Params;\n\tParams.Empty();\n\tFString(Options).ParseIntoArray(Params, TEXT(\",\"), true);\n\tfor (auto Param : Params) {\n\t\tFString Key;\n\t\tFString Value;\n\t\tif (Param.Split(TEXT(\"=\"), &Key, &Value)) {\n\t\t\tif (Key.Equals(TEXT(\"PlayerId\"))) {\n\t\t\t\tPlayerId = Value;\n\t\t\t}\n\t\t}\n\t}\n\treturn Super::ApproveLogin(Options);\n}\n", "CodeBleu_score": 54.85674740708606}]}
{"instance_id": "85ea02df92a5", "generation_result": [{"code": "void UARRegisterView::OnRegisterClicked()\t// Get the username, display name, and password from the input fields\n\tFString Username = UsernameTextField->GetText().ToString();\n\tFString DisplayName = DisplayNameTextField->GetText().ToString();\n\tFString Password = PasswordTextField->GetText().ToString();\n\n\t// Check if any of the fields are empty\n\tif (Username.IsEmpty() || DisplayName.IsEmpty() || Password.IsEmpty()) {\n\t\t// Display a warning message\n\t\tFMessageDialog::Open(EAppMsgType::Ok, FText::FromString(\"Please fill in all fields!\"));\n\t}\n\telse {\n\t\t// Hide the register button\n\t\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\n\t\t// Register the new player\n\t\tGameInstance->RegisterNewPlayer(Username, DisplayName, Password);\n\t}\n}\n", "CodeBleu_score": 42.429729377687984}, {"code": "void UARRegisterView::OnRegisterClicked()\tFString Username = UsernameInput->GetText().ToString();\n\tFString DisplayName = DisplayNameInput->GetText().ToString();\n\tFString Password = PasswordInput->GetText().ToString();\n\n\tif (Username.IsEmpty() || DisplayName.IsEmpty() || Password.IsEmpty()) {\n\t\tFString WarningMessage = \"Please enter a username, display name, and password\";\n\t\tFMessageDialog::Open(EAppMsgType::Ok, FText::FromString(WarningMessage));\n\t\treturn;\n\t}\n\n\tHide();\n\tGameInstance->RegisterNewPlayer(Username, DisplayName, Password);\n}\n", "CodeBleu_score": 41.618994942320064}, {"code": "void UARRegisterView::OnRegisterClicked()\tFString Username = UsernameInput->GetText().ToString();\n\tFString DisplayName = DisplayNameInput->GetText().ToString();\n\tFString Password = PasswordInput->GetText().ToString();\n\n\tif (Username.IsEmpty() || DisplayName.IsEmpty() || Password.IsEmpty()) {\n\t\tFMessageDialog::Open(EAppMsgType::Ok, FText::FromString(\"Please fill in all fields\"));\n\t}\n\telse {\n\t\tRegisterNewPlayer(Username, DisplayName, Password);\n\t\tHide();\n\t}\n}\n", "CodeBleu_score": 36.34202553718994}]}
{"instance_id": "b33bb5886dd9", "generation_result": [{"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod)\tif (InMod.Attribute == FAF_ATR_Health) {\n\t\tif (InMod.NewValue <= 0) {\n\t\t\t// Get the actor that took damage\n\t\t\tAActor* DamageCauser = InMod.Actor;\n\t\t\tif (DamageCauser) {\n\t\t\t\t// Get the damage value\n\t\t\t\tfloat DamageValue = InMod.NewValue;\n\t\t\t\t// Get the damage location\n\t\t\t\tFVector DamageLocation = DamageCauser->GetActorLocation();\n\t\t\t\t// Convert the location to screen coordinates\n\t\t\t\tFVector2D ScreenLocation = FAARMath::WorldLocationToScreenLocation(DamageLocation);\n\t\t\t\t// Set the floating combat text\n\t\t\t\tSetFloatingCombatText(DamageValue, ScreenLocation);\n\t\t\t}\n\t\t}\n\t}\n}\n", "CodeBleu_score": 35.83460505590265}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod)\tif (InMod.Attribute == FAF_Attribute::FAF_Attribute_Health) {\n\t\tif (InMod.NewValue > InMod.OldValue) {\n\t\t\t// Get the target actor.\n\t\t\tAActor* TargetActor = InMod.Target.Get();\n\t\t\tif (TargetActor) {\n\t\t\t\t// Project the damage location to screen coordinates.\n\t\t\t\tFVector2D DamageLocation = FAARPlayerController::GetScreenLocationFromWorldLocation(TargetActor->GetActorLocation());\n\t\t\t\t// Set the floating combat text.\n\t\t\t\tSetFloatingCombatText(InMod.NewValue - InMod.OldValue, DamageLocation);\n\t\t\t}\n\t\t}\n\t}\n}\n", "CodeBleu_score": 31.93115507814919}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod)\tif (InMod.TargetActor!= nullptr) {\n\t\tFVector2D DamageLocation = FAARGameMode::GetActorLocationInScreenCoordinates(InMod.TargetActor);\n\t\tif (DamageLocation.X!= -1 && DamageLocation.Y!= -1) {\n\t\t\tFText DamageText = FText::Format(LOCTEXT(\"FloatingCombatText\", \"{0}\"), FText::AsNumber(InMod.NewValue));\n\t\t\tFAARHUD::SetFloatingCombatText(DamageText, DamageLocation);\n\t\t}\n\t}\n}\n", "CodeBleu_score": 27.929948637997203}]}
{"instance_id": "177d36e7e076", "generation_result": [{"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade)\tif (InMagazineUpgrade == nullptr) {\n\t\treturn;\n\t}\n\tif (!InMagazineUpgrade->IsValidForWeapon(this)) {\n\t\treturn;\n\t}\n\tclass UARWeaponComponent* WeaponComponent = GetWeaponComponent();\n\tif (WeaponComponent == nullptr) {\n\t\treturn;\n\t}\n\tclass AARPlayerCharacter* CharacterOwner = Cast<AARPlayerCharacter>(WeaponComponent->GetOwner());\n\tif (CharacterOwner == nullptr) {\n\t\treturn;\n\t}\n\tif (!CharacterOwner->IsLocallyControlled()) {\n\t\treturn;\n\t}\n\tclass UARWeaponMagazineUpgrade* NewMagazineUpgrade = DuplicateObject<UARWeaponMagazineUpgrade>(InMagazineUpgrade, WeaponComponent);\n\tif (NewMagazineUpgrade == nullptr) {\n\t\treturn;\n\t}\n\tNewMagazineUpgrade->SetWeapon(this);\n\tNewMagazineUpgrade->SetMagazineSize(WeaponComponent->GetMagazineSize());\n\tNewMagazineUpgrade->SetAmmoCount(WeaponComponent->GetAmmoCount());\n\tNewMagazineUpgrade->SetAmmoPerShot(WeaponComponent->GetAmmoPerShot());\n\tNewMagazineUpgrade->SetAmmoType(WeaponComponent->GetAmmoType());\n\tNewMagazineUpgrade->SetMagazineAmmoType(WeaponComponent->GetMagazineAmmoType());\n\tNewMagazineUpgrade->SetMagazineAmmoCount(WeaponComponent->GetMagazineAmmoCount());\n\tNewMagazineUpgrade->SetMagazineAmmoPerShot(WeaponComponent->GetMagazineAmmoPerShot());\n\tNewMagazineUpgrade->SetMagazineAmmoType(WeaponComponent->GetMagazineAmmoType());\n\tNewMagazineUpgrade->SetMagazineAmmoType(WeaponComponent->GetMagazineAmmoType());\n\tNewMagazineUpgrade->SetMagazineAmmoType(WeaponComponent->GetMagazineAmmoType());\n\tNewMagazineUpgrade->SetMagazineAmmoType(WeaponComponent->GetMagazineAmmoType());\n\tNewMagazineUpgrade->SetMagazineAmmoType(WeaponComponent->GetMagazineAmmoType());\n\tNewMagazineUpgrade->SetMagazineAmmoType(WeaponComponent->GetMagazineAmmoType());\n\tNewMagazineUpgrade->SetMagazineAmmoType(WeaponComponent->GetMagazineAmmoType());\n\tNewMagazineUpgrade->SetMagazineAmmoType(WeaponComponent", "CodeBleu_score": 34.68388925123867}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade)\tif (InMagazineUpgrade) {\n\t\tif (InMagazineUpgrade->IsValidUpgrade()) {\n\t\t\tUARItemWeaponComponent* WeaponComponent = GetWeaponComponent();\n\t\t\tif (WeaponComponent) {\n\t\t\t\tAARPlayerState* PlayerState = Cast<AARPlayerState>(WeaponComponent->GetOwner());\n\t\t\t\tif (PlayerState && PlayerState->GetAuthority() == ROLE_Authority) {\n\t\t\t\t\tWeaponComponent->AddMagazineUpgrade(InMagazineUpgrade);\n\t\t\t\t\tInMagazineUpgrade->SetUpgradeValue(WeaponComponent->GetMagazineUpgradeValue());\n\t\t\t\t\tInMagazineUpgrade->ApplyUpgradeEffect(this);\n\t\t\t\t\tOnMagazineUpdateAdded(InMagazineUpgrade);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n", "CodeBleu_score": 41.50840589101717}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade)\tif (InMagazineUpgrade == nullptr) {\n\t\treturn;\n\t}\n\tif (InMagazineUpgrade->GetWeaponClass()!= WeaponClass) {\n\t\treturn;\n\t}\n\tif (InMagazineUpgrade->GetWeaponType()!= WeaponType) {\n\t\treturn;\n\t}\n\tif (InMagazineUpgrade->GetWeaponSlot()!= WeaponSlot) {\n\t\treturn;\n\t}\n\tif (InMagazineUpgrade->GetWeaponState()!= WeaponState) {\n\t\treturn;\n\t}\n\tif (InMagazineUpgrade->GetWeaponAmmoType()!= WeaponAmmoType) {\n\t\treturn;\n\t}\n\tif (InMagazineUpgrade->GetWeaponAmmoState()!= WeaponAmmoState) {\n\t\treturn;\n\t}\n\tif (InMagazineUpgrade->GetWeaponAmmo()!= WeaponAmmo) {\n\t\treturn;\n\t}\n\tif (InMagazineUpgrade->GetWeaponFireMode()!= WeaponFireMode) {\n\t\treturn;\n\t}\n\tif (InMagazineUpgrade->GetWeaponFireModeState()!= WeaponFireModeState) {\n\t\treturn;\n\t}\n\tif (InMagazineUpgrade->GetWeaponFireModeAmmo()!= WeaponFireModeAmmo) {\n\t\treturn;\n\t}\n\tif (InMagazineUpgrade->GetWeaponFireModeAmmoState()!= WeaponFireModeAmmoState) {\n\t\treturn;\n\t}\n\tif (InMagazineUpgrade->GetWeaponFireModeBurstCount()!= WeaponFireModeBurstCount) {\n\t\treturn;\n\t}\n\tif (InMagazineUpgrade->GetWeaponFireModeBurstCountState()!= WeaponFireModeBurstCountState) {\n\t\treturn;\n\t}\n\tif (InMagazineUpgrade->GetWeaponFireModeRateOfFire()!= WeaponFireModeRateOfFire) {\n\t\treturn;\n\t}\n\tif (InMagazineUpgrade->GetWeaponFireModeRateOfFireState()!= WeaponFireModeRateOfFireState) {\n\t\treturn;\n\t}\n\tif (InMagazineUpgrade->GetWeaponFireModeRateOfFireDelay()!= WeaponFireModeRateOfFireDelay) {\n\t\treturn;\n\t}\n\tif (InMagazineUpgrade->GetWeaponFireModeRateOfFireDelayState()!= WeaponFireModeRateOfFireDelayState", "CodeBleu_score": 16.42278168230112}]}
{"instance_id": "404276da398b", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex)\tif (!Owner) {\n\t\treturn;\n\t}\n\n\tauto AARCharacter = Cast<AARCharacter>(Owner);\n\tif (!AARCharacter) {\n\t\treturn;\n\t}\n\n\tauto AbilityComponent = AARCharacter->GetAbilitySystemComponent();\n\tif (!AbilityComponent) {\n\t\treturn;\n\t}\n\n\tauto WeaponAbility = AbilityComponent->GetAbilityByClass(InAbilityTag);\n\tif (!WeaponAbility) {\n\t\treturn;\n\t}\n\n\tauto Weapon = GetEquippedWeapon(LocalIndex);\n\tif (!Weapon) {\n\t\treturn;\n\t}\n\n\tWeapon->SetAbilityToItem(WeaponAbility);\n}\n", "CodeBleu_score": 45.616910105026186}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex)\tAARCharacter* OwnerCharacter = Cast<AARCharacter>(GetOwner());\n\tif (OwnerCharacter) {\n\t\tUAbilitySystemComponent* AbilitySystemComponent = OwnerCharacter->GetAbilitySystemComponent();\n\t\tif (AbilitySystemComponent) {\n\t\t\tFGameplayAbilitySpecHandle AbilityHandle = AbilitySystemComponent->FindAbilityByClass(InAbilityTag);\n\t\t\tif (AbilityHandle.IsValid()) {\n\t\t\t\tUGAAbilityBase* Ability = Cast<UGAAbilityBase>(AbilitySystemComponent->GetAbilityInstanceFromHandle(AbilityHandle));\n\t\t\t\tif (Ability) {\n\t\t\t\t\tSetAbilityToItem(LocalIndex, Ability);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n", "CodeBleu_score": 49.08847786291016}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex)\tAARCharacter* OwnerCharacter = Cast<AARCharacter>(GetOwner());\n\tif (OwnerCharacter == nullptr) {\n\t\treturn;\n\t}\n\tUGAAbilityBase* Ability = Cast<UGAAbilityBase>(OwnerCharacter->GetAbilityByTag(InAbilityTag));\n\tif (Ability == nullptr) {\n\t\treturn;\n\t}\n\tSetAbilityToItem(Ability, LocalIndex);\n}\n", "CodeBleu_score": 51.64948390928603}]}
{"instance_id": "2e97aab98981", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex)\tAARCharacter* OwnerCharacter = Cast<AARCharacter>(GetOwner());\n\tif (OwnerCharacter) {\n\t\tFARWeaponRPC WeaponRPC;\n\t\tWeaponRPC.WeaponID = 0;\n\t\tWeaponRPC.WeaponName = \"\";\n\t\tWeaponRPC.WeaponType = 0;\n\t\tWeaponRPC.WeaponSlot = 0;\n\t\tWeaponRPC.WeaponLevel = 0;\n\t\tWeaponRPC.WeaponAmmo = 0;\n\t\tWeaponRPC.WeaponAmmoType = 0;\n\t\tWeaponRPC.WeaponAmmoClip = 0;\n\t\tWeaponRPC.WeaponAmmoReserve = 0;\n\t\tWeaponRPC.WeaponAmmoMax = 0;\n\t\tWeaponRPC.WeaponAmmoMaxClip = 0;\n\t\tWeaponRPC.WeaponAmmoMaxReserve = 0;\n\t\tWeaponRPC.WeaponFireMode = 0;\n\t\tWeaponRPC.WeaponFireModeName = \"\";\n\t\tWeaponRPC.WeaponFireModeDisplayName = \"\";\n\t\tWeaponRPC.WeaponFireModeDescription = \"\";\n\t\tWeaponRPC.WeaponFireModeData = \"\";\n\t\tWeaponRPC.WeaponFireModeDataName = \"\";\n\t\tWeaponRPC.WeaponFireModeDataDisplayName = \"\";\n\t\tWeaponRPC.WeaponFireModeDataDescription = \"\";\n\t\tWeaponRPC.WeaponFireModeDataTime = 0.0f;\n\t\tWeaponRPC.WeaponFireModeDataAmmo = 0;\n\t\tWeaponRPC.WeaponFireModeDataAmmoType = 0;\n\t\tWeaponRPC.WeaponFireModeDataAmmoClip = 0;\n\t\tWeaponRPC.WeaponFireModeDataAmmoReserve = 0;\n\t\tWeaponRPC.WeaponFireModeDataAmmoMax = 0;\n\t\tWeaponRPC.WeaponFireModeDataAmmoMaxClip = 0;\n\t\tWeaponRPC.WeaponFireModeDataAmmoMaxReserve = 0;\n\t\tWeaponRPC.WeaponFireModeDataFireMode = 0;\n\t\tWeaponRPC.WeaponFireModeDataFireModeName = \"\";\n\t\tWeaponRPC.WeaponFireModeDataFireModeDisplayName = \"\";\n\t\tWeaponRPC.WeaponFireModeDataFireModeDescription = \"\";\n\t\tWeaponRPC.WeaponFireModeDataFireModeData = \"\";\n\t\tWeaponRPC.WeaponFireModeDataFireModeDataName = \"\";\n\t\tWeaponRPC.WeaponFireModeDataFireModeDataDisplayName = \"\";\n\t\tWeaponRPC.WeaponFireModeDataFireModeDataDescription = \"\";\n\t\tWeaponRPC.WeaponFireModeDataFire", "CodeBleu_score": 30.499415286742813}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex)\tAARCharacter* OwnerCharacter = Cast<AARCharacter>(GetOwner());\n\tif (OwnerCharacter) {\n\t\tFARWeaponRPC WeaponRPC;\n\t\tWeaponRPC.WeaponData = OwnerCharacter->WeaponData;\n\t\tWeaponRPC.WeaponData.WeaponInventory[LocalIndex] = FWeaponData();\n\t\tOwnerCharacter->ServerEquipWeapon(WeaponRPC);\n\t\tif (LocalIndex == OwnerCharacter->WeaponData.CurrentWeaponIndex) {\n\t\t\tOwnerCharacter->ServerUnequipWeapon();\n\t\t}\n\t}\n}\n", "CodeBleu_score": 44.91714668423858}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex)\tAARCharacter* OwnerCharacter = Cast<AARCharacter>(GetOwner());\n\tif (OwnerCharacter) {\n\t\tFARWeaponRPC WeaponRPC;\n\t\tWeaponRPC.WeaponData = FWeaponData();\n\t\tWeaponRPC.WeaponData.WeaponName = \"\";\n\t\tWeaponRPC.WeaponData.WeaponType = EWeaponType::WT_None;\n\t\tWeaponRPC.WeaponData.WeaponSlot = EWeaponSlot::WS_None;\n\t\tWeaponRPC.WeaponData.WeaponState = EWeaponState::WS_None;\n\t\tWeaponRPC.WeaponData.WeaponAmmo = 0;\n\t\tWeaponRPC.WeaponData.WeaponAmmoInClip = 0;\n\t\tWeaponRPC.WeaponData.WeaponAmmoInReserve = 0;\n\t\tWeaponRPC.WeaponData.WeaponFireMode = EWeaponFireMode::WM_None;\n\t\tWeaponRPC.WeaponData.WeaponFireModeIndex = 0;\n\t\tWeaponRPC.WeaponData.WeaponFireModeData = FWeaponFireModeData();\n\t\tWeaponRPC.WeaponData.WeaponFireModeData.FireModeName = \"\";\n\t\tWeaponRPC.WeaponData.WeaponFireModeData.FireModeIndex = 0;\n\t\tWeaponRPC.WeaponData.WeaponFireModeData.FireModeData = FWeaponFireModeData();\n\t\tWeaponRPC.WeaponData.WeaponFireModeData.FireModeData.FireModeName = \"\";\n\t\tWeaponRPC.WeaponData.WeaponFireModeData.FireModeData.FireModeIndex = 0;\n\t\tWeaponRPC.WeaponData.WeaponFireModeData.FireModeData.FireModeData = FWeaponFireModeData();\n\t\tWeaponRPC.WeaponData.WeaponFireModeData.FireModeData.FireModeData.FireModeName = \"\";\n\t\tWeaponRPC.WeaponData.WeaponFireModeData.FireModeData.FireModeData.FireModeIndex = 0;\n\t\tWeaponRPC.WeaponData.WeaponFireModeData.FireModeData.FireModeData.FireModeData = FWeaponFireModeData();\n\t\tWeaponRPC.WeaponData.WeaponFireModeData.FireModeData.FireModeData.FireModeData.FireModeName = \"\";\n\t\tWeaponRPC.WeaponData.WeaponFireModeData.FireModeData.FireModeData.FireModeData.FireModeIndex = 0;\n\t\tWeaponRPC.WeaponData.WeaponFireModeData.FireMode", "CodeBleu_score": 31.22012046218104}]}
{"instance_id": "13cc35e5ecac", "generation_result": [{"code": "void FAsyncLoadingScreenModule::ShutdownModule()\tif (GIsEditor) {\n\t\treturn;\n\t}\n\tif (MoviePlayer!= nullptr) {\n\t\tMoviePlayer->OnMovieScenePlaybackStarted().RemoveAll(this);\n\t\tMoviePlayer->OnMovieScenePlaybackFinished().RemoveAll(this);\n\t}\n}\n", "CodeBleu_score": 16.93609479616213}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule()\tif (IsRunningDedicatedServer()) {\n\t\treturn;\n\t}\n\n\tFCoreUObjectModule& CoreUObjectModule = FModuleManager::LoadModuleChecked<FCoreUObjectModule>(TEXT(\"CoreUObject\"));\n\tIMoviePlayer& MoviePlayer = CoreUObjectModule.GetMoviePlayer();\n\tMoviePlayer.OnMovieScenePreLoadFinished().RemoveAll(this);\n\tMoviePlayer.OnMovieScenePreClose().RemoveAll(this);\n}\n", "CodeBleu_score": 14.99281334110999}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule()\t// This function may be called during shutdown to clean up your module.  For modules that support dynamic reloading,\n\t// we call this function before unloading the module.\n\tFAsyncLoadingScreenModule& AsyncLoadingScreenModule = FModuleManager::LoadModuleChecked<FAsyncLoadingScreenModule>(TEXT(\"AsyncLoadingScreen\"));\n\tAsyncLoadingScreenModule.OnLoadingScreenPreparationFinished.RemoveAll(this);\n}\n", "CodeBleu_score": 9.970567408882872}]}
{"instance_id": "2ee3ac60a8f3", "generation_result": [{"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen()\tFString LoadingScreenName = TEXT(\"DefaultLoadingScreen\");\n\tFString LoadingScreenClass = TEXT(\"DefaultLoadingScreen\");\n\tif (FModuleManager::Get().IsModuleLoaded(\"LoadingScreen\")) {\n\t\tISettingsModule* SettingsModule = FModuleManager::GetModulePtr<ISettingsModule>(\"Settings\");\n\t\tif (SettingsModule) {\n\t\t\tTSharedPtr<ISettingsSection> LoadingScreenSettingsSection = SettingsModule->GetSection(\"LoadingScreen\");\n\t\t\tif (LoadingScreenSettingsSection.IsValid()) {\n\t\t\t\tLoadingScreenName = LoadingScreenSettingsSection->GetValue(\"LoadingScreenName\");\n\t\t\t\tLoadingScreenClass = LoadingScreenSettingsSection->GetValue(\"LoadingScreenClass\");\n\t\t\t}\n\t\t}\n\t\tif (LoadingScreenClass.Len() > 0) {\n\t\t\t// StartupLoadingScreen is used to prevent the loading screen from displaying when the game is paused or when the game starts in the editor.\n\t\t\tif (!GIsEditor &&!FParse::Param(FCommandLine::Get(), TEXT(\"NOSTARTUPLOADINGSCREEN\"))) {\n\t\t\t\tGConfig->SetBool(TEXT(\"LoadingScreen\"), TEXT(\"bStartupLoadingComplete\"), false, GEngineIni);\n\t\t\t\tGConfig->Flush(false, GEngineIni);\n\t\t\t\tFLoadingScreenAttributes LoadingScreenAttributes;\n\t\t\t\tLoadingScreenAttributes.BackgroundColor = FColor::Black;\n\t\t\t\tLoadingScreenAttributes.BackgroundImagePath = FPaths::Combine(FPaths::ProjectContentDir(), TEXT(\"LoadingScreen/Background.jpg\"));\n\t\t\t\tLoadingScreenAttributes.LoadingImagePath = FPaths::Combine(FPaths::ProjectContentDir(), TEXT(\"LoadingScreen/Loading.jpg\"));\n\t\t\t\tLoadingScreenAttributes.MoviePaths = TArray<FString>{ FPaths::Combine(FPaths::ProjectContentDir(), TEXT(\"LoadingScreen/Loading.mp4\")) };\n\t\t\t\tLoadingScreenAttributes.MinimumLoadingImageDisplayTime = 2.0f;\n\t\t\t\tLoadingScreenAttributes.bScaleToFill = false;\n\t\t\t\tLoadingScreenAttributes.bScaleToFit = true;\n\t\t\t\tLoadingScreenAttributes.bShowMouseCursor = true;\n\t\t\t\tLoadingScreenAttributes.MoviePlayerAspect = 16.0f / 9.0f;\n\t\t\t\tLoadingScreenAttributes.MoviePlayerScale = 1.0f;\n\t\t\t\tLoadingScreenAttributes.MoviePlayerPosition = FVector2D(0.5f, 0.5f);\n\t\t\t\tLoadingScreenAttributes", "CodeBleu_score": 38.71264711223317}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen()\tif (GConfig->GetBool(TEXT(\"LoadingScreen\"), TEXT(\"Enabled\"), GEngineIni)) {\n\t\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"Preparing to setup loading screen\"));\n\t\tGConfig->SetBool(TEXT(\"LoadingScreen\"), TEXT(\"bStartup\"), false, GEngineIni);\n\t\tSetupLoadingScreen();\n\t}\n}\n", "CodeBleu_score": 41.99231206111737}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen()\t// Log the start of the setup process\n\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"PreSetupLoadingScreen\"));\n\n\t// Check if the loading screen is enabled\n\tif (IsLoadingScreenEnabled()) {\n\t\t// Retrieve the default loading screen settings\n\t\tFLoadingScreenAttributes LoadingScreenAttributes = GetDefault<ULoadingScreenSettings>()->LoadingScreenAttributes;\n\n\t\t// Set the startup flag to false\n\t\tLoadingScreenAttributes.bWaitForManualStop = false;\n\n\t\t// Set up the loading screen using the default settings\n\t\tSetupLoadingScreen(LoadingScreenAttributes);\n\t}\n}\n", "CodeBleu_score": 43.148309708810594}]}
{"instance_id": "c095588f550c", "generation_result": [{"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages()\t// Remove any existing background images\n\tRemoveBackgroundImages();\n\n\t// Retrieve the loading screen settings\n\tconst UAsyncLoadingScreenSettings* Settings = GetDefault<UAsyncLoadingScreenSettings>();\n\n\t// Load and add the startup images\n\tif (Settings->bShowStartupLoadingScreen) {\n\t\tfor (const FLoadingScreenDescription& StartupImage : Settings->StartupLoadingScreenImages) {\n\t\t\tFLoadingScreenImage StartupImageLoaded;\n\t\t\tStartupImageLoaded.Texture = LoadObject<UTexture2D>(nullptr, *StartupImage.ImageName, nullptr, LOAD_None, nullptr);\n\t\t\tStartupImageLoaded.ImageName = StartupImage.ImageName;\n\t\t\tStartupImageLoaded.LoadingImageSize = StartupImage.LoadingImageSize;\n\t\t\tStartupImageLoaded.LoadingImageColor = StartupImage.LoadingImageColor;\n\t\t\tStartupImageLoaded.bScaleToLoadingImageSize = StartupImage.bScaleToLoadingImageSize;\n\t\t\tStartupImageLoaded.BackgroundColor = StartupImage.BackgroundColor;\n\t\t\tStartupImageLoaded.bShowOnLoadingScreen = StartupImage.bShowOnLoadingScreen;\n\t\t\tStartupImageLoaded.LoadingScreenType = ELoadingScreenType::Startup;\n\t\t\tStartupLoadingScreenImages.Add(StartupImageLoaded);\n\t\t}\n\t}\n\n\t// Load and add the default images\n\tif (Settings->bShowDefaultLoadingScreen) {\n\t\tfor (const FLoadingScreenDescription& DefaultImage : Settings->DefaultLoadingScreenImages) {\n\t\t\tFLoadingScreenImage DefaultImageLoaded;\n\t\t\tDefaultImageLoaded.Texture = LoadObject<UTexture2D>(nullptr, *DefaultImage.ImageName, nullptr, LOAD_None, nullptr);\n\t\t\tDefaultImageLoaded.ImageName = DefaultImage.ImageName;\n\t\t\tDefaultImageLoaded.LoadingImageSize = DefaultImage.LoadingImageSize;\n\t\t\tDefaultImageLoaded.LoadingImageColor = DefaultImage.LoadingImageColor;\n\t\t\tDefaultImageLoaded.bScaleToLoadingImageSize = DefaultImage.bScaleToLoadingImageSize;\n\t\t\tDefaultImageLoaded.BackgroundColor = DefaultImage.BackgroundColor;\n\t\t\tDefaultImageLoaded.bShowOnLoadingScreen = DefaultImage.bShowOnLoadingScreen;\n\t\t\tDefaultImageLoaded.LoadingScreenType = ELoadingScreenType::Default;\n\t\t\tDefaultLoadingScreenImages.Add(DefaultImageLoaded);\n\t\t}\n\t}\n}\n", "CodeBleu_score": 44.980727419509066}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages()\t// Retrieve the settings for the loading screen\n\tFLoadingScreenAttributes LoadingScreenAttributes;\n\tGetLoadingScreenAttributes(LoadingScreenAttributes);\n\n\t// Clear the existing background images\n\tBackgroundImages.Empty();\n\n\t// Load the startup background image\n\tif (LoadingScreenAttributes.LoadingImage) {\n\t\tBackgroundImages.Add(LoadingScreenAttributes.LoadingImage);\n\t}\n\n\t// Load the default background image\n\tif (LoadingScreenAttributes.DefaultImage) {\n\t\tBackgroundImages.Add(LoadingScreenAttributes.DefaultImage);\n\t}\n}\n", "CodeBleu_score": 25.059133270780087}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages()\t// Remove all existing background images\n\tfor (auto& BackgroundImage : BackgroundImages) {\n\t\tBackgroundImage.Remove();\n\t}\n\tBackgroundImages.Empty();\n\n\t// Get the loading screen settings\n\tULoadingScreenSettings* LoadingScreenSettings = GetMutableDefault<ULoadingScreenSettings>();\n\n\t// Load and add startup background images\n\tif (LoadingScreenSettings->bShowStartupBackgroundImage) {\n\t\tfor (auto& StartupBackgroundImage : LoadingScreenSettings->StartupBackgroundImages) {\n\t\t\tUTexture2D* BackgroundImage = Cast<UTexture2D>(StaticLoadObject(UTexture2D::StaticClass(), NULL, *StartupBackgroundImage.ImageName));\n\t\t\tBackgroundImages.Add(BackgroundImage);\n\t\t}\n\t}\n\n\t// Load and add default background images\n\tif (LoadingScreenSettings->bShowDefaultBackgroundImage) {\n\t\tfor (auto& DefaultBackgroundImage : LoadingScreenSettings->DefaultBackgroundImages) {\n\t\t\tUTexture2D* BackgroundImage = Cast<UTexture2D>(StaticLoadObject(UTexture2D::StaticClass(), NULL, *DefaultBackgroundImage.ImageName));\n\t\t\tBackgroundImages.Add(BackgroundImage);\n\t\t}\n\t}\n}\n", "CodeBleu_score": 49.74735874899838}]}
{"instance_id": "4ffd56e2a326", "generation_result": [{"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime)\t// Calculate the alpha value based on the elapsed time and the animation speed.\n\tfloat Alpha = FMath::FInterpTo(LoadingCompleteText->GetColorAndOpacity().A, LoadingCompleteText->GetColorAndOpacity().A + 255.0f * InDeltaTime, InCurrentTime, 0.0f, 1.0f);\n\n\t// Set the text's alpha value.\n\tLoadingCompleteText->SetColorAndOpacity(FLinearColor(255, 255, 255, Alpha));\n\n\t// Return whether the animation should continue.\n\treturn EActiveTimerReturnType::Continue;\n}\n", "CodeBleu_score": 23.754295327149812}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime)\tif (InCurrentTime - TextFadeStartTime > TextFadeTime) {\n\t\tTextFadeStartTime = InCurrentTime;\n\t}\n\n\tif (InCurrentTime - TextFadeStartTime < TextFadeTime) {\n\t\tif (TextAlpha < 1.0f) {\n\t\t\tTextAlpha += TextFadeSpeed * InDeltaTime;\n\t\t}\n\t\telse if (TextAlpha > 1.0f) {\n\t\t\tTextAlpha -= TextFadeSpeed * InDeltaTime;\n\t\t}\n\t}\n\n\tif (TextAlpha < 0.0f) {\n\t\tTextAlpha = 0.0f;\n\t}\n\telse if (TextAlpha > 1.0f) {\n\t\tTextAlpha = 1.0f;\n\t}\n\n\treturn EActiveTimerReturnType::Continue;\n}\n", "CodeBleu_score": 39.86698993076556}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime)\tif (InCurrentTime - LastUpdateTime > 1.0f / FPS) {\n\t\t// Update the alpha value based on the elapsed time and animation speed.\n\t\tAlphaValue += (InDeltaTime * AnimationSpeed);\n\n\t\t// Reverse the animation direction when the alpha value reaches either extreme.\n\t\tif (AlphaValue > 1.0f || AlphaValue < 0.0f) {\n\t\t\tAnimationSpeed *= -1.0f;\n\t\t}\n\n\t\t// Update the text's alpha value.\n\t\tLoadingCompleteText->SetOpacity(AlphaValue);\n\n\t\t// Reset the last update time.\n\t\tLastUpdateTime = InCurrentTime;\n\t}\n\n\t// Continue the timer.\n\treturn EActiveTimerReturnType::Continue;\n}\n", "CodeBleu_score": 30.429741981154955}]}
{"instance_id": "7420af124c78", "generation_result": [{"code": "bool FRaceAwaiter::await_ready()\tstd::unique_lock<std::mutex> lock(data_mutex);\n\treturn index!= -1;\n}\n", "CodeBleu_score": 6.299792341288405}, {"code": "bool FRaceAwaiter::await_ready()\tstd::unique_lock<std::mutex> lock(data_mutex);\n\treturn index!= -1;\n}\n", "CodeBleu_score": 6.299792341288405}, {"code": "bool FRaceAwaiter::await_ready()\tstd::unique_lock<std::mutex> lock(dataMutex);\n\treturn index!= -1;\n}\n", "CodeBleu_score": 6.256317055442645}]}
{"instance_id": "fab9fe81573a", "generation_result": [{"code": "bool ShouldResumeFindPath(void* State, bool bCleanup)\tif (!State) {\n\t\treturn true;\n\t}\n\n\tFNavPathingQuery* PathQuery = static_cast<FNavPathingQuery*>(State);\n\tif (PathQuery->QueryID.IsValid()) {\n\t\tif (bCleanup) {\n\t\t\t// Abort the async query\n\t\t\tPathQuery->NavQuery->AbortQuery(PathQuery->QueryID);\n\t\t\t// Delete the query\n\t\t\tdelete PathQuery;\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "CodeBleu_score": 31.61198139108743}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup)\tif (State == nullptr) {\n\t\treturn false;\n\t}\n\n\tauto* const PathfindingState = static_cast<FPathfindingState*>(State);\n\n\tif (PathfindingState->QueryID.IsValid()) {\n\t\tif (bCleanup) {\n\t\t\tPathfindingState->QueryID.Invalidate();\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n", "CodeBleu_score": 27.383676825987003}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup)\tif (State == nullptr) {\n\t\treturn false;\n\t}\n\n\tauto* const StateStruct = static_cast<FindPathState*>(State);\n\tif (StateStruct->QueryID == FNavMeshQueryFilter::InvalidQueryID) {\n\t\treturn false;\n\t}\n\n\tif (bCleanup) {\n\t\tFNavMeshQueryFilter::CancelQuery(StateStruct->QueryID);\n\t\tStateStruct->QueryID = FNavMeshQueryFilter::InvalidQueryID;\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n", "CodeBleu_score": 31.481272153533734}]}
{"instance_id": "0656af2cb3eb", "generation_result": [{"code": "void AudioListener2D::_notification(int p_what)\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (Engine::get_singleton()->is_editor_hint()) {\n\t\t\t\tif (Engine::get_singleton()->is_audio_listener2d_processing_active()) {\n\t\t\t\t\tif (!Engine::get_singleton()->is_audio_listener2d_processing_paused()) {\n\t\t\t\t\t\tif (Engine::get_singleton()->get_main_loop()->is_notification_enabled()) {\n\t\t\t\t\t\t\tif (Engine::get_singleton()->is_audio_listener2d_processing_active()) {\n\t\t\t\t\t\t\t\tif (Engine::get_singleton()->is_audio_listener2d_processing_paused()) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (Engine::get_singleton()->is_audio_listener2d_processing_active()) {\n\t\t\t\tif (Engine::get_singleton()->is_audio_listener2d_processing_paused()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (Engine::get_singleton()->is_audio_listener2d_processing_active()) {\n\t\t\t\tif (Engine::get_singleton()->is_audio_listener2d_processing_paused()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (Engine::get_singleton()->is_audio_listener2d_processing_active()) {\n\t\t\t\tif (Engine::get_singleton()->is_audio_listener2d_processing_paused()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (Engine::get_singleton()->is_audio_listener2d_processing_active()) {\n\t\t\t\tif (Engine::get_singleton()->is_audio_listener2d_processing_paused()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (Engine::get_singleton()->is_audio_listener2d_processing_active()) {\n\t\t\t\tif (Engine::get_singleton()->is_audio_listener2d_processing_paused()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (Engine::get_singleton()->is_audio_listener2d_processing_active()) {\n\t\t\t\tif (Engine::get_singleton()->is_audio_listener2d_processing_paused()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif", "CodeBleu_score": 19.74607737560036}, {"code": "void AudioListener2D::_notification(int p_what)\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (Engine::get_singleton()->is_editor_hint() &&!get_tree()->is_current()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (Engine::get_singleton()->is_editor_hint() &&!get_tree()->is_network_server()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (Engine::get_singleton()->is_editor_hint() &&!get_tree()->is_paused()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (Engine::get_singleton()->is_editor_hint() && get_tree()->get_root()!= this) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!Engine::get_singleton()->is_editor_hint() &&!get_tree()->is_network_server()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!Engine::get_singleton()->is_editor_hint() &&!get_tree()->is_paused()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!Engine::get_singleton()->is_editor_hint() && get_tree()->get_root()!= this) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (Engine::get_singleton()->is_editor_hint() &&!get_tree()->is_network_server()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (Engine::get_singleton()->is_editor_hint() &&!get_tree()->is_paused()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (Engine::get_singleton()->is_editor_hint() && get_tree()->get_root()!= this) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!Engine::get_singleton()->is_editor_hint() &&!get_tree()->is_network_server()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!Engine::get_singleton()->is_editor_hint() &&!get_tree()->is_paused()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!Engine::get_singleton()->is_editor_hint() && get_tree()->get_root()!= this) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (Engine::get_singleton()->is_editor_hint() &&!get_tree()->is_network_server()) {\n\t\t\t\treturn;\n\t\t\t", "CodeBleu_score": 28.979802154164336}, {"code": "void AudioListener2D::_notification(int p_what)\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (Engine::get_singleton()->is_editor_hint() &&!Engine::get_singleton()->is_in_physics_frame()) {\n\t\t\t\tif (!is_inside_tree() &&!is_inside_world()) {\n\t\t\t\t\treturn; //don't make the listener current if it's not part of the scene tree\n\t\t\t\t}\n\n\t\t\t\tif (AudioServer::get_singleton()->listener_is_current(get_instance_id())) {\n\t\t\t\t\treturn; //listener is already current\n\t\t\t\t}\n\n\t\t\t\tif (AudioServer::get_singleton()->listener_count() == 0) {\n\t\t\t\t\tAudioServer::get_singleton()->make_listener_current(get_instance_id());\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (Engine::get_singleton()->is_editor_hint() &&!Engine::get_singleton()->is_in_physics_frame()) {\n\t\t\t\tif (!is_inside_tree() &&!is_inside_world()) {\n\t\t\t\t\treturn; //don't clear the current listener if it's not part of the scene tree\n\t\t\t\t}\n\n\t\t\t\tif (AudioServer::get_singleton()->listener_is_current(get_instance_id())) {\n\t\t\t\t\tAudioServer::get_singleton()->clear_current_listener();\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t}\n}\n", "CodeBleu_score": 47.93282957525076}]}
{"instance_id": "9aadd2c91e67", "generation_result": [{"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer)\tif (!thread_enabled && driver) {\n\t\tint32_t *src = nullptr;\n\t\tint32_t *dst = nullptr;\n\t\tint32_t *src_ptr = nullptr;\n\t\tint32_t *dst_ptr = nullptr;\n\t\tint32_t *dst_end = nullptr;\n\t\tint32_t *src_end = nullptr;\n\t\tint32_t *dst_mix = nullptr;\n\t\tint32_t *src_mix = nullptr;\n\t\tint32_t *src_mix_end = nullptr;\n\t\tint32_t *dst_mix_end = nullptr;\n\t\tint32_t volume = 0;\n\t\tint32_t volume_left = 0;\n\t\tint32_t volume_right = 0;\n\t\tint32_t volume_final = 0;\n\t\tint32_t volume_scale = 0;\n\t\tint32_t volume_scale_left = 0;\n\t\tint32_t volume_scale_right = 0;\n\t\tint32_t volume_scale_final = 0;\n\t\tint32_t volume_scale_inv = 0;\n\t\tint32_t volume_scale_inv_left = 0;\n\t\tint32_t volume_scale_inv_right = 0;\n\t\tint32_t volume_scale_inv_final = 0;\n\t\tint32_t volume_scale_left_vol = 0;\n\t\tint32_t volume_scale_right_vol = 0;\n\t\tint32_t volume_scale_final_vol = 0;\n\t\tint32_t volume_scale_inv_left_vol = 0;\n\t\tint32_t volume_scale_inv_right_vol = 0;\n\t\tint32_t volume_scale_inv_final_vol = 0;\n\t\tint32_t volume_scale_left_vol_final = 0;\n\t\tint32_t volume_scale_right_vol_final = 0;\n\t\tint32_t volume_scale_final_vol_final = 0;\n\t\t", "CodeBleu_score": 5.985201978216689}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer)\tif (audio_driver_active && audio_driver_thread_id == Thread::get_caller_id()) {\n\t\tint32_t *w = p_buffer;\n\n\t\twhile (p_frames > 0) {\n\t\t\tint todo = p_frames;\n\t\t\tif (todo > AUDIO_MIX_BUFFER_SIZE) {\n\t\t\t\ttodo = AUDIO_MIX_BUFFER_SIZE;\n\t\t\t}\n\n\t\t\taudio_mix_lock.lock();\n\t\t\tint32_t *r = audio_mix_buffer;\n\n\t\t\tfor (int i = 0; i < todo; i++) {\n\t\t\t\t*w = *r;\n\t\t\t\tw++;\n\t\t\t\tr++;\n\t\t\t}\n\n\t\t\taudio_mix_lock.unlock();\n\n\t\t\tp_frames -= todo;\n\t\t}\n\t}\n}\n", "CodeBleu_score": 41.70199204648984}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer)\tif (audio_driver_active) {\n\t\treturn;\n\t}\n\n\tif (audio_driver_thread) {\n\t\treturn;\n\t}\n\n\tint32_t *src = NULL;\n\tint32_t *dst = NULL;\n\n\tint32_t *dst_end = p_buffer + p_frames;\n\tint32_t *dst_ptr = p_buffer;\n\n\twhile (dst_ptr < dst_end) {\n\t\tsrc = audio_frame.buffer;\n\t\tdst = dst_ptr;\n\n\t\tint to_mix = MIN(dst_end - dst, audio_frame.buffer_size);\n\n\t\tfor (int i = 0; i < to_mix; i++) {\n\t\t\t*dst = *src;\n\t\t\tdst++;\n\t\t\tsrc++;\n\t\t}\n\n\t\tdst_ptr = dst;\n\t}\n}\n", "CodeBleu_score": 38.841100993282964}]}
{"instance_id": "56df08c77b69", "generation_result": [{"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const\tif (gravity_point) {\n\t\tVector2 point_to_pos = p_position - gravity_point;\n\t\tfloat point_to_pos_len_squared = point_to_pos.length_squared();\n\t\tif (point_to_pos_len_squared < CMP_EPSILON2) {\n\t\t\tr_gravity = Vector2(0, 0);\n\t\t} else {\n\t\t\tr_gravity = gravity_strength * point_to_pos / point_to_pos_len_squared;\n\t\t}\n\t} else {\n\t\tr_gravity = gravity_strength * gravity_vector;\n\t}\n}\n", "CodeBleu_score": 36.000302816165465}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const\tif (gravity_point.is_valid()) {\n\t\tr_gravity = gravity_point - p_position;\n\t\tr_gravity = r_gravity.normalized() * gravity_strength;\n\t} else {\n\t\tr_gravity = gravity_vector * gravity_strength;\n\t}\n}\n", "CodeBleu_score": 26.435092094761757}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const\tif (gravity_point_enabled) {\n\t\tfloat distance_squared = (p_position - gravity_point).length_squared();\n\t\tr_gravity = gravity_point - p_position;\n\t\tr_gravity /= distance_squared;\n\t\tr_gravity *= gravity_strength * distance_squared;\n\t} else {\n\t\tr_gravity = gravity_vector;\n\t}\n}\n", "CodeBleu_score": 26.20641406701092}]}
{"instance_id": "f8c60f8d0caa", "generation_result": [{"code": "void GodotBody2D::wakeup_neighbours()\tfor (int i = 0; i < get_child_count(); i++) {\n\t\tNode2D *child = Object::cast_to<Node2D>(get_child(i));\n\t\tif (child!= NULL && child->is_class(\"GodotBody2D\")) {\n\t\t\tGodotBody2D *body = Object::cast_to<GodotBody2D>(child);\n\t\t\tif (body->get_mode() == 1 &&!body->is_active()) {\n\t\t\t\tbody->set_active(true);\n\t\t\t}\n\t\t}\n\t}\n}\n", "CodeBleu_score": 35.31275540440299}, {"code": "void GodotBody2D::wakeup_neighbours()\tfor (int i = 0; i < constraints.size(); i++) {\n\t\tGodotBody2D *body = (GodotBody2D *)constraints[i]->get_body_a();\n\t\tif (body->mode == MODE_RIGID && body->state == STATE_SLEEPING) {\n\t\t\tbody->set_active(true);\n\t\t}\n\t}\n}\n", "CodeBleu_score": 29.686025192993814}, {"code": "void GodotBody2D::wakeup_neighbours()\tfor (int i = 0; i < get_constraint_count(); i++) {\n\t\tGodotPhysics2DServer::get_singleton()->body_set_active(get_constraint_body(i), true);\n\t}\n}\n", "CodeBleu_score": 12.219564818747882}]}
{"instance_id": "0c6f6c00da9a", "generation_result": [{"code": "void GodotArea3D::_queue_monitor_update() \tif (is_inside_tree() && is_inside_world() && is_visible_in_tree() &&!get_viewport().is_hidden()) {\n\t\tif (get_viewport().find_world() == get_world()) {\n\t\t\tif (get_viewport().find_visible_area(get_global_rect())!= NULL) {\n\t\t\t\tif (area_monitor_query == NULL) {\n\t\t\t\t\tarea_monitor_query = get_viewport().create_area_monitor_query(get_global_rect(), Vector2(0, 0), get_viewport().get_world_2d().get_canvas_transform(), this);\n\t\t\t\t\tarea_monitor_query->connect(\"area_changed\", this, \"_on_area_changed\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (area_monitor_query!= NULL) {\n\t\t\t\t\tarea_monitor_query->disconnect(\"area_changed\", this, \"_on_area_changed\");\n\t\t\t\t\tarea_monitor_query->queue_delete();\n\t\t\t\t\tarea_monitor_query = NULL;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (area_monitor_query!= NULL) {\n\t\t\t\tarea_monitor_query->disconnect(\"area_changed\", this, \"_on_area_changed\");\n\t\t\t\tarea_monitor_query->queue_delete();\n\t\t\t\tarea_monitor_query = NULL;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif (area_monitor_query!= NULL) {\n\t\t\tarea_monitor_query->disconnect(\"area_changed\", this, \"_on_area_changed\");\n\t\t\tarea_monitor_query->queue_delete();\n\t\t\tarea_monitor_query = NULL;\n\t\t}\n\t}\n}\n", "CodeBleu_score": 38.59328830760158}, {"code": "void GodotArea3D::_queue_monitor_update() \tif (is_inside_tree() && get_viewport() && get_viewport()->is_monitoring_area(this))  {\n\t\tget_viewport()->queue_screen_capture();\n\t}\n}\n", "CodeBleu_score": 27.52390090583219}, {"code": "void GodotArea3D::_queue_monitor_update() \tif (!is_inside_tree())\n\t\treturn;\n\n\tif (!get_world())\n\t\treturn;\n\n\tif (!get_viewport())\n\t\treturn;\n\n\tif (get_viewport()!= get_world()->get_viewport())\n\t\treturn;\n\n\tif (!get_viewport()->is_monitoring_area(this)) {\n\t\tget_viewport()->add_monitor_area(this);\n\t}\n}\n", "CodeBleu_score": 38.81033146850703}]}
{"instance_id": "efc39df0e3a3", "generation_result": [{"code": "void GodotBody3D::_update_transform_dependent()\t// Update center of mass and inertia tensor\n\tTransform3D transform = get_global_transform();\n\tVector3 com = transform.xform(get_mass_center());\n\tBasis inertia_tensor = get_inertia_tensor();\n\tBasis inv_inertia_tensor = transform.basis.transposed().scaled(1.0 / get_mass());\n\tBasis new_inertia_tensor = inertia_tensor.xform(inv_inertia_tensor);\n\tset_transform(transform);\n\tset_center_of_mass(com);\n\tset_inertia_tensor(new_inertia_tensor);\n}\n", "CodeBleu_score": 38.65752131511554}, {"code": "void GodotBody3D::_update_transform_dependent()\t// Recalculate the center of mass and principal inertia axes\n\tVector3 com = get_transform().get_origin();\n\tBasis basis = get_transform().get_basis();\n\tVector3 x_axis = basis.get_axis(0);\n\tVector3 y_axis = basis.get_axis(1);\n\tVector3 z_axis = basis.get_axis(2);\n\tVector3 x_2 = x_axis * x_axis;\n\tVector3 y_2 = y_axis * y_axis;\n\tVector3 z_2 = z_axis * z_axis;\n\tVector3 xy = x_axis * y_axis;\n\tVector3 xz = x_axis * z_axis;\n\tVector3 yz = y_axis * z_axis;\n\treal_t x_2_sum = x_2.dot(x_2);\n\treal_t y_2_sum = y_2.dot(y_2);\n\treal_t z_2_sum = z_2.dot(z_2);\n\treal_t xy_sum = xy.dot(xy);\n\treal_t xz_sum = xz.dot(xz);\n\treal_t yz_sum = yz.dot(yz);\n\treal_t x_2_y_2_sum = x_2_sum + y_2_sum;\n\treal_t x_2_y_2_z_2_sum = x_2_y_2_sum + z_2_sum;\n\t// Update the inertia tensor\n\tVector3 principal_inertia_axes[3];\n\tprincipal_inertia_axes[0] = Vector3(\n\t\t(y_2_sum + z_2_sum) / x_2_y_2_z_2_sum,\n\t\t(xy_sum - xz_sum) / x_2_y_2_z_2_sum,\n\t\t(xz_sum - xy_sum) / x_2_y_2_z_2_sum\n\t);\n\tprincipal_inertia_axes[1] = Vector3(\n\t\t(xy_sum - xz_sum) / x_2_y_2_z", "CodeBleu_score": 38.980400038784225}, {"code": "void GodotBody3D::_update_transform_dependent()\tif (body == NULL)\n\t\treturn;\n\n\t// Update the center of mass and principal inertia axes\n\tTransform3D transform = get_transform();\n\tTransform3D inv_transform = transform.affine_inverse();\n\tVector3 com = transform.xform(get_mass_center());\n\tBasis inverse_inertia = get_inv_inertia_tensor();\n\tBasis principal_axes = inverse_inertia.get_principal_axes();\n\tBasis inertia_tensor = Basis(inverse_inertia.xform(principal_axes));\n\n\t// Update the body\n\tbody->set_transform(transform);\n\tbody->set_inv_inertia_tensor(inertia_tensor);\n\tbody->set_principal_inertia_axes(principal_axes);\n\tbody->set_center_of_mass(com);\n}\n", "CodeBleu_score": 43.01144655514585}]}
{"instance_id": "aebafb4094a1", "generation_result": [{"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) \t// update mix time\n\tif (p_update_mix_time) {\n\t\tmix_time += p_frames / double(get_mix_rate());\n\t}\n\n\t// process audio\n\tif (audio_server.is_valid()) {\n\t\taudio_server->process(p_frames, p_buffer);\n\t}\n}\n", "CodeBleu_score": 47.54442658932197}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) \tif (audio_server) {\n\t\taudio_server->audio_process(p_frames, p_buffer, p_update_mix_time);\n\t}\n}\n", "CodeBleu_score": 33.196178669268136}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) \tif (audio_server) {\n\t\taudio_server->audio_server_process(p_frames, p_buffer, p_update_mix_time);\n\t}\n}\n", "CodeBleu_score": 39.64033442884103}]}
{"instance_id": "160bb23e8010", "generation_result": [{"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed)\tfor (int i = 0; i < feeds.size(); i++) {\n\t\tif (feeds[i] == p_feed) {\n\t\t\t//feed found, remove it\n\t\t\tfeeds.remove(i);\n\t\t\t//emit signal\n\t\t\temit_signal(\"feed_removed\", p_feed->get_id());\n\t\t\treturn;\n\t\t}\n\t}\n}\n", "CodeBleu_score": 43.574949651037684}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed)\tfor (int i = 0; i < feeds.size(); i++) {\n\t\tif (feeds[i].get() == p_feed.get()) {\n\t\t\tfeeds.remove(i);\n\t\t\temit_signal(\"feed_removed\", p_feed->get_id());\n\t\t\treturn;\n\t\t}\n\t}\n}\n", "CodeBleu_score": 41.42086727697039}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed)\tfor (List<CameraFeed *>::Element *E = feeds.front(); E; E = E->next()) {\n\t\tif (E->get() == p_feed) {\n\t\t\tfeeds.erase(E);\n\t\t\tfeed_removed(p_feed->get_id());\n\t\t\tmemdelete(p_feed);\n\t\t\treturn;\n\t\t}\n\t}\n}\n", "CodeBleu_score": 33.25118536900279}]}
{"instance_id": "bef3cf110c45", "generation_result": [{"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate)\tassert(action!= NULL);\n\tEaseRateAction *ret = new EaseRateAction();\n\tif (ret->initWithAction(action, rate)) {\n\t\tret->autorelease();\n\t\treturn ret;\n\t}\n\tCC_SAFE_DELETE(ret);\n\treturn NULL;\n}\n", "CodeBleu_score": 46.91338087212705}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate)\tassert(action);\n\tEaseRateAction *ret = new EaseRateAction();\n\tif (ret && ret->initWithAction(action, rate)) {\n\t\tret->autorelease();\n\t\treturn ret;\n\t}\n\tCC_SAFE_DELETE(ret);\n\treturn NULL;\n}\n", "CodeBleu_score": 50.663840717579525}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate)\tassert(action!= NULL);\n\tEaseRateAction* ret = new EaseRateAction();\n\tif (ret->initWithAction(action, rate)) {\n\t\tret->autorelease();\n\t\treturn ret;\n\t}\n\tCC_SAFE_DELETE(ret);\n\treturn NULL;\n}\n", "CodeBleu_score": 46.85975003010216}]}
{"instance_id": "97fc6f86ad54", "generation_result": [{"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName)\tif (node->name == childName) {\n\t\treturn node;\n\t}\n\tfor (auto& child : node->children) {\n\t\tNode* foundNode = findChildByNameRecursively(child, childName);\n\t\tif (foundNode) {\n\t\t\treturn foundNode;\n\t\t}\n\t}\n\treturn nullptr;\n}\n", "CodeBleu_score": 47.43101640007704}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName)\tif (node->name == childName) {\n\t\treturn node;\n\t}\n\tfor (Node* child : node->children) {\n\t\tNode* foundNode = findChildByNameRecursively(child, childName);\n\t\tif (foundNode!= nullptr) {\n\t\t\treturn foundNode;\n\t\t}\n\t}\n\treturn nullptr;\n}\n", "CodeBleu_score": 46.70578415684464}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName)\tif (node->name == childName) {\n\t\treturn node;\n\t}\n\tfor (auto &child : node->children) {\n\t\tNode* childNode = findChildByNameRecursively(child.get(), childName);\n\t\tif (childNode!= nullptr) {\n\t\t\treturn childNode;\n\t\t}\n\t}\n\treturn nullptr;\n}\n", "CodeBleu_score": 45.6163071990167}]}
{"instance_id": "5fcbe1fedcd2", "generation_result": [{"code": "void Animate3D::removeFromMap()\tif (target == NULL) {\n\t\treturn;\n\t}\n\t//If the target is a model, check the fade-in and fade-out maps.\n\tif (target->getType() == \"Model\") {\n\t\t//Erase the animation action from the fade-in map.\n\t\tif (fadeInMap.find(target->getName())!= fadeInMap.end()) {\n\t\t\tfadeInMap.erase(target->getName());\n\t\t}\n\t\t//Erase the animation action from the fade-out map.\n\t\tif (fadeOutMap.find(target->getName())!= fadeOutMap.end()) {\n\t\t\tfadeOutMap.erase(target->getName());\n\t\t}\n\t}\n\t//If the target is a camera, check the running animation map.\n\telse if (target->getType() == \"Camera\") {\n\t\t//Erase the animation action from the running animation map.\n\t\tif (runningMap.find(target->getName())!= runningMap.end()) {\n\t\t\trunningMap.erase(target->getName());\n\t\t}\n\t}\n}\n", "CodeBleu_score": 28.1739212934225}, {"code": "void Animate3D::removeFromMap()\tif (target) {\n\t\tif (fade_in_map.count(target)) {\n\t\t\tfade_in_map[target].erase(current_action);\n\t\t}\n\t\tif (fade_out_map.count(target)) {\n\t\t\tfade_out_map[target].erase(current_action);\n\t\t}\n\t\tif (running_map.count(target)) {\n\t\t\trunning_map[target].erase(current_action);\n\t\t}\n\t}\n}\n", "CodeBleu_score": 29.57484538720916}, {"code": "void Animate3D::removeFromMap()\t// If the target exists, search for and erase the action from fade-in, fade-out, and running animation maps if it matches the current instance.\n\tif (target) {\n\t\t// Search for and erase the action from fade-in map.\n\t\tstd::map<std::string, AnimationAction*>::iterator it = fadeInMap.find(target->getName());\n\t\tif (it!= fadeInMap.end()) {\n\t\t\tfadeInMap.erase(it);\n\t\t}\n\n\t\t// Search for and erase the action from fade-out map.\n\t\tit = fadeOutMap.find(target->getName());\n\t\tif (it!= fadeOutMap.end()) {\n\t\t\tfadeOutMap.erase(it);\n\t\t}\n\n\t\t// Search for and erase the action from running animation map.\n\t\tit = runningAnimationMap.find(target->getName());\n\t\tif (it!= runningAnimationMap.end()) {\n\t\t\trunningAnimationMap.erase(it);\n\t\t}\n\t}\n}\n", "CodeBleu_score": 45.369140870246916}]}
{"instance_id": "db8d394f7bc4", "generation_result": [{"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName)\tstd::string key = fileName + animationName;\n\tAnimation3D* animation = nullptr;\n\tauto it = Animation3D::cache.find(key);\n\tif (it!= Animation3D::cache.end()) {\n\t\tanimation = it->second;\n\t}\n\telse {\n\t\tanimation = new Animation3D();\n\t\tif (!animation->initialize(fileName, animationName)) {\n\t\t\tdelete animation;\n\t\t\tanimation = nullptr;\n\t\t}\n\t\telse {\n\t\t\tAnimation3D::cache[key] = animation;\n\t\t}\n\t}\n\treturn animation;\n}\n", "CodeBleu_score": 46.990863419747285}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName)\tstd::string key = fileName + animationName;\n\tAnimation3D* animation = Animation3D::animationCache.get(key);\n\tif (animation == NULL) {\n\t\tanimation = new Animation3D();\n\t\tif (!animation->initialize(fileName, animationName)) {\n\t\t\tdelete animation;\n\t\t\tanimation = NULL;\n\t\t}\n\t\tAnimation3D::animationCache.add(key, animation);\n\t}\n\treturn animation;\n}\n", "CodeBleu_score": 41.678061234965604}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName)\tstd::string key = fileName + animationName;\n\tAnimation3D* animation = nullptr;\n\tif (s_cache.find(key)!= s_cache.end()) {\n\t\tanimation = s_cache[key];\n\t}\n\telse {\n\t\tanimation = new Animation3D();\n\t\tif (!animation->init(fileName, animationName)) {\n\t\t\tdelete animation;\n\t\t\tanimation = nullptr;\n\t\t}\n\t\telse {\n\t\t\ts_cache[key] = animation;\n\t\t}\n\t}\n\treturn animation;\n}\n", "CodeBleu_score": 41.62452458285142}]}
{"instance_id": "cdf28d98d3ff", "generation_result": [{"code": "void Animation3DCache::removeUnusedAnimation()\tfor (auto iter = animationCache.begin(); iter!= animationCache.end();) {\n\t\tauto animation = iter->second;\n\t\tif (animation->getReferenceCount() == 1) {\n\t\t\tanimationCache.erase(iter++);\n\t\t\tdelete animation;\n\t\t}\n\t\telse\n\t\t\titer++;\n\t}\n}\n", "CodeBleu_score": 44.67651047372541}, {"code": "void Animation3DCache::removeUnusedAnimation()\tstd::map<std::string, Animation3D*>::iterator it;\n\tfor (it = _animationCache.begin(); it!= _animationCache.end();) {\n\t\tif (it->second->getReferenceCount() == 1) {\n\t\t\tdelete it->second;\n\t\t\tit = _animationCache.erase(it);\n\t\t}\n\t\telse {\n\t\t\tit++;\n\t\t}\n\t}\n}\n", "CodeBleu_score": 54.71642806409276}, {"code": "void Animation3DCache::removeUnusedAnimation()\tstd::map<std::string, Animation3D*>::iterator it;\n\tfor (it = _animationCache.begin(); it!= _animationCache.end();) {\n\t\tAnimation3D* animation = it->second;\n\t\tif (animation->getReferenceCount() == 1) {\n\t\t\tanimation->release();\n\t\t\tit = _animationCache.erase(it);\n\t\t} else {\n\t\t\t++it;\n\t\t}\n\t}\n}\n", "CodeBleu_score": 50.402701394247295}]}
{"instance_id": "de7926871eb8", "generation_result": [{"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode)\tBillBoard *billBoard = new BillBoard();\n\tif (billBoard && billBoard->initWithTexture(texture, mode))\n\t{\n\t\tbillBoard->autorelease();\n\t\treturn billBoard;\n\t}\n\tCC_SAFE_DELETE(billBoard);\n\treturn nullptr;\n}\n", "CodeBleu_score": 53.942498393647206}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode)\tBillBoard *billBoard = new (std::nothrow) BillBoard();\n\tif (billBoard && billBoard->initWithTexture(texture, mode)) {\n\t\tbillBoard->autorelease();\n\t\treturn billBoard;\n\t}\n\tCC_SAFE_DELETE(billBoard);\n\treturn nullptr;\n}\n", "CodeBleu_score": 62.683134566156426}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode)\tBillBoard *billBoard = new BillBoard();\n\tif (billBoard && billBoard->initWithTexture(texture, mode)) {\n\t\tbillBoard->autorelease();\n\t\treturn billBoard;\n\t}\n\tCC_SAFE_DELETE(billBoard);\n\treturn nullptr;\n}\n", "CodeBleu_score": 53.91251138089286}]}
{"instance_id": "eef1c2206d68", "generation_result": [{"code": "bool Bundle3D::load(const std::string& path)f (path.empty() || m_path == path) {\n\t\treturn true;\n\t}\n\tm_path = path;\n\tif (path.substr(path.size() - 4) == \".c3t\") {\n\t\treturn load_json(path);\n\t}\n\telse if (path.substr(path.size() - 4) == \".c3b\") {\n\t\treturn load_binary(path);\n\t}\n\telse {\n\t\tstd::cerr << \"WARNING: Bundle3D::load - Invalid file format: \" << path << std::endl;\n\t\treturn false;\n\t}\n}\n", "CodeBleu_score": 31.412141155646893}, {"code": "bool Bundle3D::load(const std::string& path)f (path.empty()) {\n\t\treturn false;\n\t}\n\n\tif (path == m_path) {\n\t\treturn true;\n\t}\n\n\tm_path = path;\n\n\tconst std::string extension = path.substr(path.find_last_of(\".\") + 1);\n\n\tif (extension == \"c3t\") {\n\t\treturn loadJson();\n\t}\n\telse if (extension == \"c3b\") {\n\t\treturn loadBinary();\n\t}\n\telse {\n\t\tstd::cout << \"WARNING: Invalid bundle format: \" << extension << std::endl;\n\t\treturn false;\n\t}\n}\n", "CodeBleu_score": 32.50394645601814}, {"code": "bool Bundle3D::load(const std::string& path)f (path.empty() || loaded) {\n\t\treturn false;\n\t}\n\n\tstd::string extension = path.substr(path.find_last_of(\".\") + 1);\n\tif (extension == \"c3t\") {\n\t\treturn load_json(path);\n\t}\n\telse if (extension == \"c3b\") {\n\t\treturn load_binary(path);\n\t}\n\telse {\n\t\tstd::cerr << \"Bundle3D::load(): Warning: Unknown extension '\" << extension << \"' for file '\" << path << \"'\" << std::endl;\n\t\treturn false;\n\t}\n}\n", "CodeBleu_score": 30.333709439586976}]}
{"instance_id": "37b6acea681e", "generation_result": [{"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata)\tskindata->reset();\n\tstd::string path = getSkinDataPath(id);\n\tstd::string extension = getFileExtension(path);\n\tif (extension == \"json\") {\n\t\treturn loadSkinDataJson(path, skindata);\n\t}\n\telse if (extension == \"bin\") {\n\t\treturn loadSkinDataBinary(path, skindata);\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n", "CodeBleu_score": 51.50099628876033}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata)\t// reset the skin data\n\tskindata->reset();\n\n\t// load the skin data\n\tif (m_skinformat == SKIN_FORMAT_BINARY) {\n\t\treturn loadSkinDataBinary(id, skindata);\n\t}\n\telse if (m_skinformat == SKIN_FORMAT_JSON) {\n\t\treturn loadSkinDataJson(id, skindata);\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n", "CodeBleu_score": 51.02193162337556}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata)\tskindata->reset();\n\treturn true;\n}\n", "CodeBleu_score": 20.712229181435447}]}
{"instance_id": "97449825e4ef", "generation_result": [{"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource)\tAudioDecoder* decoder = (AudioDecoder*) datasource;\n\tsize_t bytesRead = fread(ptr, size, nmemb, decoder->file);\n\tdecoder->filePosition += bytesRead;\n\treturn bytesRead;\n}\n", "CodeBleu_score": 33.797456668344594}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource)\tAudioDecoder* decoder = (AudioDecoder*)datasource;\n\tsize_t bytesRead = 0;\n\tif (decoder->bytesRemaining > 0) {\n\t\tbytesRead = size * nmemb;\n\t\tif (bytesRead > decoder->bytesRemaining) {\n\t\t\tbytesRead = decoder->bytesRemaining;\n\t\t}\n\t\tmemcpy(ptr, decoder->fileBuffer, bytesRead);\n\t\tdecoder->fileBuffer += bytesRead;\n\t\tdecoder->bytesRemaining -= bytesRead;\n\t}\n\treturn bytesRead;\n}\n", "CodeBleu_score": 46.48511004982777}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource)\tAudioDecoder* decoder = (AudioDecoder*) datasource;\n\tsize_t bytesToRead = size * nmemb;\n\tif (decoder->m_fileSize > 0) {\n\t\tif (decoder->m_filePos + bytesToRead > decoder->m_fileSize) {\n\t\t\tbytesToRead = decoder->m_fileSize - decoder->m_filePos;\n\t\t}\n\t}\n\tif (bytesToRead > 0) {\n\t\tfread(ptr, 1, bytesToRead, decoder->m_file);\n\t\tdecoder->m_filePos += bytesToRead;\n\t}\n\treturn bytesToRead;\n}\n", "CodeBleu_score": 48.467575131899025}]}
{"instance_id": "0f4db164ba5d", "generation_result": [{"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1)#ifdef DEBUG_AUDIO_DECODER\n    std::cout << \"AudioDecoder::AudioDecoder()\" << std::endl;", "CodeBleu_score": 10.1173669390278}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1)\t_pcmBuffer = std::make_shared<std::vector<char>>(4096);\n}\n", "CodeBleu_score": 31.352885077939842}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1)\t_pcmBuffer = std::make_shared<std::vector<char>>(4096);\n}\n", "CodeBleu_score": 31.352885077939842}]}
{"instance_id": "0f88663615c6", "generation_result": [{"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id)\tstd::unique_lock<std::mutex> lk(s_mutex);\n\tauto it = s_downloaderMap.find(id);\n\tif (it!= s_downloaderMap.end()) {\n\t\treturn it->second;\n\t}\n\treturn nullptr;\n}\n", "CodeBleu_score": 58.66371027939905}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id)\tcocos2d::Mutex::ScopedLock lock(downloaderMapMutex);\n\tstd::map<int, cocos2d::network::DownloaderAndroid*>::iterator it = downloaderMap.find(id);\n\tif (it!= downloaderMap.end()) {\n\t\treturn it->second;\n\t}\n\treturn nullptr;\n}\n", "CodeBleu_score": 54.4658618601364}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id)\tstd::lock_guard<std::mutex> lock(s_mutex);\n\tauto it = s_downloaderMap.find(id);\n\tif (it!= s_downloaderMap.end()) {\n\t\treturn it->second;\n\t}\n\treturn nullptr;\n}\n", "CodeBleu_score": 59.7119438581955}]}
{"instance_id": "a5aafaaa944c", "generation_result": [{"code": "function M.playMusic(filename, isLoop)\tif isLoop ~= nil then\n\t\treturn cc.SimpleAudioEngine:getInstance():playMusic(filename, isLoop)\n\telse\n\t\treturn cc.SimpleAudioEngine:getInstance():playMusic(filename)\n\tend", "CodeBleu_score": 46.18590462995014}, {"code": "function M.playMusic(filename, isLoop)\tif isLoop == nil then\n\t\tisLoop = true\n\tend\n\tif isLoop then\n\t\tcc.SimpleAudioEngine:getInstance():playMusic(filename, true)\n\telse\n\t\tcc.SimpleAudioEngine:getInstance():playMusic(filename, false)\n\tend", "CodeBleu_score": 45.748233722449406}, {"code": "function M.playMusic(filename, isLoop)\tif isLoop ~= nil then\n\t\tif isLoop then\n\t\t\tM.g_soundEngine:play2d(filename, true)\n\t\telse\n\t\t\tM.g_soundEngine:play2d(filename, false)\n\t\tend\n\telse\n\t\tM.g_soundEngine:play2d(filename, false)\n\tend", "CodeBleu_score": 38.53825327081405}]}
{"instance_id": "16f2ad4bb4e8", "generation_result": [{"code": "function ccs.TriggerObj:detect()\tif self.enabled then\n\t\tfor i = 1, #self.conditions do\n\t\t\tif not self.conditions[i]:detect() then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\treturn false", "CodeBleu_score": 21.87007676159181}, {"code": "function ccs.TriggerObj:detect()\treturn false", "CodeBleu_score": 4.65567970423593}, {"code": "function ccs.TriggerObj:detect()\tif self.isEnabled == false then\n\t\treturn true\n\tend\n\n\tlocal ret = true\n\tfor i = 1, #self.conditions do\n\t\tif self.conditions[i]:detect() == false then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn ret", "CodeBleu_score": 34.96441493013638}]}
{"instance_id": "e73b10418cb6", "generation_result": [{"code": "function ccs.TriggerObj:removeAll()\tfor i=1, #self.conditions do\n\t\tself.conditions[i]:removeAll()\n\tend\n\tfor i=1, #self.actions do\n\t\tself.actions[i]:removeAll()\n\tend\n\tself.conditions = {}\n\tself.actions = {}", "CodeBleu_score": 28.348727400928446}, {"code": "function ccs.TriggerObj:removeAll()\tfor i = 1, #self.actions do\n\t\tself.actions[i]:removeAll()\n\tend\n\tself.actions = {}\n\tfor i = 1, #self.conditions do\n\t\tself.conditions[i]:removeAll()\n\tend\n\tself.conditions = {}", "CodeBleu_score": 28.619972530654685}, {"code": "function ccs.TriggerObj:removeAll()\tfor i = 1, #self.conditions do\n\t\tself.conditions[i]:removeAll()\n\tend\n\tfor i = 1, #self.actions do\n\t\tself.actions[i]:removeAll()\n\tend\n\tself.conditions = {}\n\tself.actions = {}", "CodeBleu_score": 28.177832147934705}]}
{"instance_id": "d5a1333d794d", "generation_result": [{"code": "function BasicCollider:hurtEffect(target)\tlocal hurtAnimation = self:getCachedAnimation(\"hurtAnimation\")\n\tif hurtAnimation then\n\t\tlocal hurtEffect = hurtAnimation:clone()\n\t\thurtEffect:setLooping(false)\n\t\thurtEffect:setScale(0.5)\n\t\thurtEffect:setLocalPosition(Vector3(0, 0, 0.2))\n\t\thurtEffect:play()\n\t\thurtEffect:setCameraMask(2)\n\t\ttarget:addChild(hurtEffect)\n\t\tself:delay(hurtEffect:getDuration(), function()\n\t\t\ttarget:removeChild(hurtEffect)\n\t\tend)\n\tend", "CodeBleu_score": 42.64996181561131}, {"code": "function BasicCollider:hurtEffect(target)\tlocal hurtEffect = self.hurtEffect\n\tif hurtEffect == nil then\n\t\treturn\n\tend\n\tif target == nil then\n\t\treturn\n\tend\n\tlocal hurtEffect = self.hurtEffect\n\tlocal hurtEffect = hurtEffect:clone()\n\thurtEffect.animation:play()\n\thurtEffect.billboard:setCameraMask(1)\n\thurtEffect.billboard:setScale(self.scale)\n\thurtEffect.billboard:setLocalPosition(self.position)\n\ttarget:addChild(hurtEffect)", "CodeBleu_score": 44.68143141416076}, {"code": "function BasicCollider:hurtEffect(target)\tlocal effect = target:getEffect(self.effectName)\n\tif effect == nil then\n\t\teffect = target:addEffect(self.effectName)\n\t\teffect:setAnimation(self.hurtAnimation)\n\t\teffect:setBillboard()\n\t\teffect:setScale(self.effectScale)\n\t\teffect:setDepthWrite(false)\n\t\teffect:setDepthTest(false)\n\t\teffect:setCameraMask(self.cameraMask)\n\t\teffect:setBillboardOffset(self.effectOffset)\n\t\teffect:play()\n\tend", "CodeBleu_score": 28.972052318801637}]}
{"instance_id": "f478d7e70ea6", "generation_result": [{"code": "function MageNormalAttack:onTimeOut()\tself.mageNormalAttack.stop()\n\tself.mageNormalAttack.stop()\n\tlocal p = ParticleSystem(self.game.particles, \"mage_normal_attack_end\")\n\tp.emitter:setPosition(self.mageNormalAttack.emitter:getPosition())\n\tp.emitter:setVelocity(0,0,0)\n\tp.emitter:setAcceleration(0,0,0)\n\tp.emitter:setEmissionRate(100)\n\tp.emitter:setParticleLifetime(0.5)\n\tp.emitter:setScale(1,1,1)\n\tp.emitter:setParticleDuration(0.5)\n\tp.emitter:setParticleAngle(0,0)\n\tp.emitter:setParticleAngleVariance(360)\n\tp.emitter:setParticleSpeed(0)\n\tp.emitter:setParticleSpeedVariance(0)\n\tp.emitter:setParticleOffset(0,0,0)\n\tp.emitter:setParticleOffsetVariance(0,0,0)\n\tp.emitter:setParticleColor(1,1,1,1)\n\tp.emitter:setParticleColorVariance(0,0,0,0)\n\tp.emitter:setParticleAlpha(1)\n\tp.emitter:setParticleAlphaVariance(0)\n\tp.emitter:setParticleSize(1)\n\tp.emitter:setParticleSizeVariance(0)\n\tp.emitter:setParticleSpin(0)\n\tp.emitter:setParticleSpinVariance(0)\n\tp.emitter:setParticleMass(1)\n\tp.emitter:setParticleMassVariance(0)\n\tp.emitter:setParticleDragCoefficient(0)\n\tp.emitter:setParticleRotation(0)\n\tp.emitter:setParticleRotationVariance(0)\n\tp.emitter:setTexture(self.game.resx.. \"mage_normal_attack_end.png\")\n\tp.emitter:setBlendMode(BlendMode.BLEND_ADDITIVE)\n\tp:setZOrder(ZORDER.PARTICLES)\n\tp:setLayer(LAYER.PARTICLES)\n\tp:setScene(self.game.scene)\n\tself.game.scene:addChild(p)\n\tp:", "CodeBleu_score": 39.799427514360964}, {"code": "function MageNormalAttack:onTimeOut()\t--Stop the particle systems\n\tself.particleAttack:stop()\n\tself.particleAttack2:stop()\n\t--Create a new particle system\n\tself.particleAttack = ParticleSystem(self.game, self.game.resx/2, self.game.resy/2, \"attack_fireball\")\n\tself.particleAttack.emitter:setPosition(self.game.resx/2, self.game.resy/2)\n\tself.particleAttack.emitter:setZ(1)\n\tself.particleAttack.emitter:setZSpread(0)\n\tself.particleAttack.emitter:setSpread(math.pi)\n\tself.particleAttack.emitter:setEmissionRate(20)\n\tself.particleAttack.emitter:setParticleLifetime(0.2)\n\tself.particleAttack.emitter:setDuration(0.2)\n\tself.particleAttack.emitter:setParticleSpeed(10)\n\tself.particleAttack.emitter:setParticleSize(20, 20)\n\tself.particleAttack.emitter:setParticleSizeSpread(20, 20)\n\tself.particleAttack.emitter:setRotation(0, 0, 0)\n\tself.particleAttack.emitter:setAlpha(1, 1)\n\tself.particleAttack.emitter:setAlphaSpread(0)\n\tself.particleAttack.emitter:setScale(1, 1, 1)\n\tself.particleAttack.emitter:setScaleSpread(0)\n\tself.particleAttack.emitter:setBlendMode(\"add\")\n\tself.particleAttack.emitter:setTexture(\"attack_fireball.png\")\n\tself.particleAttack.emitter:setTextureSize(1024, 1024)\n\tself.particleAttack.emitter:setTextureScroll(0, 0)\n\tself.particleAttack.emitter:setTextureScrollSpeed(0, 0)\n\tself.particleAttack.emitter:setGravity(0, 0, 0)\n\tself.particleAttack.emitter:setRadialAcceleration(0, 0)\n\tself.particleAttack.emitter:setTangentialAcceleration(0, 0)\n\tself.particleAttack.emitter:setEmissionArea(\"ellipse\", 1, 1", "CodeBleu_score": 33.24909349868951}, {"code": "function MageNormalAttack:onTimeOut()\tself.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage.mage", "CodeBleu_score": 11.354883195064112}]}
{"instance_id": "d735c4ea6358", "generation_result": [{"code": "function BattlefieldUI:heroDead(hero)\tif hero.name == \"Knight\" then \n\t\thero.image.shader = \"hero_dead\"\n\t\thero.frame.visible = false\n\t\thero.angerFullSignal.visible = false\n\t\thero.angerClone.visible = false\n\telseif hero.name == \"Mage\" then \n\t\thero.image.shader = \"hero_dead\"\n\t\thero.frame.visible = false\n\t\thero.angerFullSignal.visible = false\n\t\thero.angerClone.visible = false\n\telseif hero.name == \"Archer\" then \n\t\thero.image.shader = \"hero_dead\"\n\t\thero.frame.visible = false\n\t\thero.angerFullSignal.visible = false\n\t\thero.angerClone.visible = false\n\tend", "CodeBleu_score": 32.8740695108723}, {"code": "function BattlefieldUI:heroDead(hero)\tlocal heroName = hero.name\n\tlocal heroFrame = self.heroFrames[heroName]\n\tlocal heroImage = self.heroImages[heroName]\n\tlocal heroAngerFull = self.heroAngerFulls[heroName]\n\tlocal heroAngerClone = self.heroAngerClones[heroName]\n\tlocal heroAngerCloneFrame = self.heroAngerCloneFrames[heroName]\n\tlocal heroAngerCloneImage = self.heroAngerCloneImages[heroName]\n\tlocal heroAngerCloneText = self.heroAngerCloneTexts[heroName]\n\tlocal heroAngerCloneTextFrame = self.heroAngerCloneTextFrames[heroName]\n\tlocal heroAngerCloneTextImage = self.heroAngerCloneTextImages[heroName]\n\tlocal heroAngerCloneTextName = self.heroAngerCloneTextNames[heroName]\n\tlocal heroAngerCloneTextCount = self.heroAngerCloneTextCounts[heroName]\n\tlocal heroAngerCloneTextCountFrame = self.heroAngerCloneTextCountFrames[heroName]\n\tlocal heroAngerCloneTextCountImage = self.heroAngerCloneTextCountImages[heroName]\n\tlocal heroAngerCloneTextCountName = self.heroAngerCloneTextCountNames[heroName]\n\tlocal heroAngerCloneTextCountCount = self.heroAngerCloneTextCountCounts[heroName]\n\t\n\theroFrame:SetAlpha(0.5)\n\theroImage:SetVertexColor(0.5, 0.5, 0.5, 1)\n\theroAngerFull:Hide()\n\theroAngerCloneFrame:Hide()\n\theroAngerCloneImage:Hide()\n\theroAngerCloneText:Hide()\n\theroAngerCloneTextFrame:Hide()\n\theroAngerCloneTextImage:Hide()\n\theroAngerCloneTextName:Hide()\n\theroAngerCloneTextCount:Hide()\n\theroAngerCloneTextCountFrame:Hide()\n\theroAngerCloneTextCountImage:Hide()\n\theroAngerCloneTextCountName:Hide()\n\theroAngerCloneTextCountCount:Hide()", "CodeBleu_score": 21.55736011243365}, {"code": "function BattlefieldUI:heroDead(hero)\tlocal heroName = hero.name\n\tlocal heroImage = hero.image\n\tlocal heroFrame = hero.frame\n\tlocal heroAngerFull = hero.angerFull\n\tlocal heroAngerClone = hero.angerClone\n\n\tif heroName == \"Knight\" then\n\t\theroImage.shader = \"shaders/hero_death_knight\"\n\t\theroFrame.shader = \"shaders/hero_death_knight\"\n\t\theroAngerFull.visible = false\n\t\theroAngerClone.visible = false\n\telseif heroName == \"Mage\" then\n\t\theroImage.shader = \"shaders/hero_death_mage\"\n\t\theroFrame.shader = \"shaders/hero_death_mage\"\n\t\theroAngerFull.visible = false\n\t\theroAngerClone.visible = false\n\telseif heroName == \"Archer\" then\n\t\theroImage.shader = \"shaders/hero_death_archer\"\n\t\theroFrame.shader = \"shaders/hero_death_archer\"\n\t\theroAngerFull.visible = false\n\t\theroAngerClone.visible = false\n\tend", "CodeBleu_score": 34.09170589630456}]}
{"instance_id": "009f167d3ab2", "generation_result": [{"code": "local function moveCamera(dt)\tlocal heroes = Hero.allHeroes()\n\tlocal heroCount = #heroes\n\n\tif heroCount == 0 then\n\t\treturn\n\tend\n\n\tlocal camera = nil\n\tif heroCount == 1 then\n\t\tcamera = heroes[1].camera\n\telse\n\t\tcamera = Camera.new()\n\t\tlocal focus = Vector3.new()\n\t\tlocal hero = nil\n\t\tfor i = 1, heroCount do\n\t\t\thero = heroes[i]\n\t\t\tfocus = focus + hero.camera.focus\n\t\tend\n\t\tcamera.focus = focus / heroCount\n\tend\n\n\tlocal target = camera.target\n\tlocal focus = camera.focus\n\tlocal up = camera.up\n\tlocal offset = camera.offset\n\tlocal rotation = camera.rotation\n\tlocal rotationOffset = camera.rotationOffset\n\n\tif camera.targetHero ~= nil then\n\t\ttarget = camera.targetHero.position + camera.targetHero.camera.offset\n\t\tfocus = camera.targetHero.position + camera.targetHero.camera.focusOffset\n\t\tup = camera.targetHero.camera.up\n\t\trotation = camera.targetHero.camera.rotation\n\t\trotationOffset = camera.targetHero.camera.rotationOffset\n\tend\n\n\tlocal targetDistance = (target - focus).length\n\tlocal targetRotation = rotation + rotationOffset\n\tlocal targetPosition = focus + (target - focus).normalized * targetDistance * camera.zoom\n\n\tif camera.targetHero ~= nil then\n\t\tcamera.rotation = math.lerp(camera.rotation, targetRotation, 10 * dt)\n\tend\n\n\tlocal rotationMatrix = Matrix4.newRotation(camera.rotation)\n\tlocal upMatrix = Matrix4.newRotation(up)\n\tlocal offsetMatrix = Matrix4.newTranslation(offset)\n\tlocal focusMatrix = Matrix4.newTranslation(-focus)\n\tlocal targetMatrix = Matrix4.newTranslation(-targetPosition)\n\tlocal cameraMatrix = rotationMatrix * upMatrix * offsetMatrix * focusMatrix * targetMatrix\n\n\tcamera.position = cameraMatrix * Vector4.new(0, 0, 0, 1)", "CodeBleu_score": 37.339951181302766}, {"code": "local function moveCamera(dt)\tlocal heroes = Hero.getHeroes()\n\tlocal focus = nil\n\tlocal specialCamera = nil\n\tlocal camera = nil\n\tlocal cameraFocus = nil\n\tlocal cameraTarget = nil\n\tlocal cameraTargetFocus = nil\n\tlocal cameraFocusPoint = nil\n\tlocal cameraTargetFocusPoint = nil\n\tlocal cameraFocusOffset = Vector3(0, 0, 0)\n\tlocal cameraTargetFocusOffset = Vector3(0, 0, 0)\n\tlocal cameraFocusOffsetDirection = Vector3(0, 0, 0)\n\tlocal cameraTargetFocusOffsetDirection = Vector3(0, 0, 0)\n\tlocal cameraFocusOffsetDistance = 0\n\tlocal cameraTargetFocusOffsetDistance = 0\n\tlocal cameraFocusOffsetDistanceSquared = 0\n\tlocal cameraTargetFocusOffsetDistanceSquared = 0\n\tlocal cameraFocusOffsetDistanceSquaredThreshold = 0\n\tlocal cameraTargetFocusOffsetDistanceSquaredThreshold = 0\n\tlocal cameraFocusOffsetDistanceThreshold = 0\n\tlocal cameraTargetFocusOffsetDistanceThreshold = 0\n\tlocal cameraFocusOffsetDistanceThresholdSquared = 0\n\tlocal cameraTargetFocusOffsetDistanceThresholdSquared = 0\n\tlocal cameraFocusOffsetDistanceThresholdSquared = 0\n\tlocal cameraTargetFocusOffsetDistanceThresholdSquared = 0\n\tlocal cameraFocusOffsetDistanceThresholdSquared = 0\n\tlocal cameraTargetFocusOffsetDistanceThresholdSquared = 0\n\tlocal cameraFocusOffsetDistanceSquaredThreshold = 0\n\tlocal cameraTargetFocusOffsetDistanceSquaredThreshold = 0\n\tlocal cameraFocusOffsetDistanceThreshold = 0\n\tlocal cameraTargetFocusOffsetDistanceThreshold = 0\n\tlocal cameraFocusOffsetDistanceThresholdSquared = 0\n\tlocal cameraTargetFocusOffsetDistanceThresholdSquared = 0\n\tlocal cameraFocusOffsetDistanceThresholdSquared = 0\n\tlocal cameraTargetFocusOffsetDistanceThresholdSquared = 0\n\tlocal cameraFocusOffsetDistanceSquaredThreshold = 0\n\tlocal cameraTargetFocusOffsetDistanceSquaredThreshold = 0\n\tlocal cameraFocusOffsetDistanceThreshold = 0\n\tlocal cameraTargetFocusOffsetDistanceThreshold = 0\n\tlocal cameraFocusOffsetDistanceThresholdSquared = 0\n\tlocal cameraTargetFocusOffsetDistanceThresholdSquared = 0\n\tlocal cameraFocusOffsetDistanceThresholdSquared = 0\n\tlocal cameraTargetFocusOffsetDistanceThresholdSquared = 0\n\tlocal camera", "CodeBleu_score": 20.353996563046618}, {"code": "local function moveCamera(dt)\tlocal heroes = getHeroes()\n\tlocal heroCount = #heroes\n\tlocal heroFocus = Vector3()\n\tlocal cameraFocus = Vector3()\n\tlocal cameraPosition = Vector3()\n\tlocal cameraOrientation = Quaternion()\n\tlocal heroesFocus = Vector3()\n\tlocal heroesFocusCount = 0\n\tlocal heroesFocusWeight = 0\n\tlocal heroesFocusWeightTotal = 0\n\tlocal heroesFocusWeightAverage = 0\n\tlocal cameraFocusWeight = 0\n\tlocal cameraFocusWeightTotal = 0\n\tlocal cameraFocusWeightAverage = 0\n\tlocal cameraFocusWeightThreshold = 0\n\tlocal cameraFocusWeightThresholdMax = 0\n\tlocal cameraFocusWeightThresholdMin = 0\n\tlocal cameraFocusWeightThresholdDelta = 0\n\tlocal cameraFocusWeightThresholdDeltaMax = 0\n\tlocal cameraFocusWeightThresholdDeltaMin = 0\n\tlocal cameraFocusWeightThresholdDeltaAverage = 0\n\tlocal cameraFocusWeightThresholdDeltaTotal = 0\n\tlocal cameraFocusWeightThresholdDeltaAverage = 0\n\tlocal cameraFocusWeightThresholdDeltaTotal = 0\n\tlocal cameraFocusWeightThresholdDeltaAverage = 0\n\tlocal cameraFocusWeightThresholdDeltaMax = 0\n\tlocal cameraFocusWeightThresholdDeltaMin = 0\n\tlocal cameraFocusWeightThresholdDeltaAverage = 0\n\tlocal cameraFocusWeightThresholdDeltaTotal = 0\n\tlocal cameraFocusWeightThresholdDeltaAverage = 0\n\tlocal cameraFocusWeightThresholdDeltaMax = 0\n\tlocal cameraFocusWeightThresholdDeltaMin = 0\n\tlocal cameraFocusWeightThresholdDeltaAverage = 0\n\tlocal cameraFocusWeightThresholdDeltaTotal = 0\n\tlocal cameraFocusWeightThresholdDeltaAverage = 0\n\tlocal cameraFocusWeightThresholdDeltaMax = 0\n\tlocal cameraFocusWeightThresholdDeltaMin = 0\n\tlocal cameraFocusWeightThresholdDeltaAverage = 0\n\tlocal cameraFocusWeightThresholdDeltaTotal = 0\n\tlocal cameraFocusWeightThresholdDeltaAverage = 0\n\tlocal cameraFocusWeightThresholdDeltaMax = 0\n\tlocal cameraFocusWeightThresholdDeltaMin = 0\n\tlocal cameraFocusWeightThresholdDeltaAverage = 0\n\tlocal cameraFocusWeightThresholdDeltaTotal = 0\n\tlocal cameraFocusWeightThresholdDeltaAverage = 0\n\tlocal cameraFocusWeightThresholdDeltaMax = ", "CodeBleu_score": 13.617186836298306}]}
{"instance_id": "f7f5e7fe1dc2", "generation_result": [{"code": "local function updateParticlePos()\tfor _, hero in pairs(HeroManager:GetAllHeroes()) do\n\t\tlocal effect = hero:FindModifierByName(\"modifier_imba_phantom_assassin_phantom_strike_effect\")\n\t\tif effect then\n\t\t\teffect:SetAbsOrigin(hero:GetAbsOrigin())\n\t\tend\n\tend", "CodeBleu_score": 20.73048821196505}, {"code": "local function updateParticlePos()\tfor i,hero in pairs(HeroManager:GetAllHeroes()) do\n\t\tif hero.particle_effect_name then\n\t\t\tlocal particle = ParticleManager:CreateParticle(hero.particle_effect_name, PATTACH_ABSORIGIN_FOLLOW, hero)\n\t\t\tParticleManager:SetParticleControl(particle, 0, hero:GetAbsOrigin())\n\t\t\tParticleManager:SetParticleControl(particle, 1, hero:GetAbsOrigin())\n\t\tend\n\tend", "CodeBleu_score": 32.61236730168496}, {"code": "local function updateParticlePos()\tfor i,hero in pairs(HeroManager:GetHeroes()) do\n\t\tif hero.effect_cast_particle_name ~= nil then\n\t\t\thero.effect_cast_particle:SetAbsOrigin(hero:GetAbsOrigin())\n\t\tend\n\tend", "CodeBleu_score": 19.809280062049307}]}
{"instance_id": "77829ef7341e", "generation_result": [{"code": "function ChooseRoleScene:playAudioWhenRotate()\tlocal hero = self.roleGrid:getSelectedItem()\n\tif hero then\n\t\tlocal heroRace = hero.race\n\t\tif heroRace == \"Knight\" then\n\t\t\taudio.play(knightRotate)\n\t\telseif heroRace == \"Archer\" then\n\t\t\taudio.play(archerRotate)\n\t\telseif heroRace == \"Mage\" then\n\t\t\taudio.play(mageRotate)\n\t\tend\n\tend", "CodeBleu_score": 39.84922119526381}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\tlocal currentHero = self.currentHero\n\tlocal race = currentHero.race\n\tif race == \"Knight\" then\n\t\taudio.play(knightAudio)\n\telseif race == \"Archer\" then\n\t\taudio.play(archerAudio)\n\telseif race == \"Mage\" then\n\t\taudio.play(mageAudio)\n\tend", "CodeBleu_score": 34.82999989249016}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\tlocal currentHero = self.heroes[self.selectedHeroTag]\n\tlocal raceType = currentHero.raceType\n\tif raceType == \"Knight\" then\n\t\taudio.play(self.knightAudio)\n\telseif raceType == \"Archer\" then\n\t\taudio.play(self.archerAudio)\n\telseif raceType == \"Mage\" then\n\t\taudio.play(self.mageAudio)\n\tend", "CodeBleu_score": 39.541558403977774}]}
{"instance_id": "2b35fdb15a13", "generation_result": [{"code": "function GameMaster:AddHeros()\t--Knight\n\tlocal knight = Hero(self.knightImage, self.knightIdleImage, self.knightAttackImage, self.knightDieImage)\n\tknight:SetPosition(100, 100)\n\tknight:SetLayer(self.layer)\n\tknight:SetMode(knight.IDLE)\n\tself.heroManager:Add(knight)\n\n\t--Mage\n\tlocal mage = Hero(self.mageImage, self.mageIdleImage, self.mageAttackImage, self.mageDieImage)\n\tmage:SetPosition(400, 100)\n\tmage:SetLayer(self.layer)\n\tmage:SetMode(mage.IDLE)\n\tself.heroManager:Add(mage)\n\n\t--Archer\n\tlocal archer = Hero(self.archerImage, self.archerIdleImage, self.archerAttackImage, self.archerDieImage)\n\tarcher:SetPosition(700, 100)\n\tarcher:SetLayer(self.layer)\n\tarcher:SetMode(archer.IDLE)\n\tself.heroManager:Add(archer)", "CodeBleu_score": 45.01611400332218}, {"code": "function GameMaster:AddHeros()\tlocal knight = Hero(\"Knight\", 1, 1, 1)\n\tlocal mage = Hero(\"Mage\", 1, 1, 1)\n\tlocal archer = Hero(\"Archer\", 1, 1, 1)\n\tknight:SetPosition(1, 1)\n\tmage:SetPosition(1, 3)\n\tarcher:SetPosition(1, 5)\n\tknight:SetMode(\"Idle\")\n\tmage:SetMode(\"Idle\")\n\tarcher:SetMode(\"Idle\")\n\tself.heroManager:Add(knight)\n\tself.heroManager:Add(mage)\n\tself.heroManager:Add(archer)", "CodeBleu_score": 35.96050835778895}, {"code": "function GameMaster:AddHeros()\t-- Create heroes\n\tlocal knight = Hero(\"Knight\", 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,", "CodeBleu_score": 9.570220134278118}]}
{"instance_id": "cdfbc82ff3cd", "generation_result": [{"code": "function GameMaster:showBoss()\tlocal boss = Rat()\n\tboss:setCameraMask(2)\n\tboss:setFacingDirection(\"left\")\n\tboss.x = 400\n\tboss.y = 200\n\tboss.aiEnabled = false\n\tboss:move(400, 200, 1, \"bounceOut\", \"left\")\n\tboss.aiEnabled = true\n\tself.monsterManager:add(boss)", "CodeBleu_score": 25.74624651829162}, {"code": "function GameMaster:showBoss()\tlocal boss = Rat()\n\tboss.cameraMask = 1\n\tboss:setPosition(self.map.width / 2, self.map.height / 2)\n\tboss:setFacingDirection(\"up\")\n\tboss.aiEnabled = false\n\tboss:move(self.map.width / 2, self.map.height / 2, 1000, \"bounceOut\")\n\tboss.aiEnabled = true\n\tself.monsterManager:addMonster(boss)", "CodeBleu_score": 35.33720061420647}, {"code": "function GameMaster:showBoss()\tlocal boss = Rat(self.map.rat_spritesheet, 100, 100)\n\tboss.camera_mask = self.map.rat_camera_mask\n\tboss.x = 100\n\tboss.y = 100\n\tboss.direction = \"right\"\n\tboss.ai = false\n\tboss:bounceOut()\n\tboss.ai = true\n\tself.monster_manager:addMonster(boss)", "CodeBleu_score": 29.180157288429108}]}
{"instance_id": "fa7b402853bb", "generation_result": [{"code": "function createAnimation(file, begin, finish, speed)\tlocal animation = Animation3D(file)\n\tlocal animate = Animate3D(animation, begin, finish)\n\tanimate.speed = speed\n\treturn animate", "CodeBleu_score": 33.055291160905334}, {"code": "function createAnimation(file, begin, finish, speed)\tlocal animation = Animation3D(file, begin, finish)\n\tlocal animate = Animate3D(animation, speed)\n\treturn animate", "CodeBleu_score": 28.11467960864577}, {"code": "function createAnimation(file, begin, finish, speed)\tlocal animation = Animation3D(file)\n\tlocal animate = Animate3D(animation, begin, finish)\n\tanimate.speed = speed\n\treturn animate", "CodeBleu_score": 33.055291160905334}]}
{"instance_id": "0725f2413b6b", "generation_result": [{"code": "function removeAll(table)\twhile #table > 0 do \n\t\ttable.remove(table, 1) \n\tend ", "CodeBleu_score": 18.161108639627756}, {"code": "function removeAll(table)\tfor i,v in ipairs(table) do \n\t\ttable.remove(table, i) \n\tend ", "CodeBleu_score": 27.74884508328055}, {"code": "function removeAll(table)\tfor i = #table, 1, -1 do \n\t\ttable.remove(table, i) \n\tend ", "CodeBleu_score": 26.21671922159971}]}
{"instance_id": "526d10bb37bb", "generation_result": [{"code": "function delayExecute(target, func, delay)\tlocal delayAction = cc.DelayTime:create(delay)\n\tlocal callFunc = cc.CallFunc:create(func)\n\tlocal seq = cc.Sequence:create(delayAction, callFunc, nil)\n\ttarget:runAction(seq)", "CodeBleu_score": 58.153859479586934}, {"code": "function delayExecute(target, func, delay)\tlocal action = cc.DelayTime:create(delay)\n\tlocal seq = cc.Sequence:create(action, func)\n\ttarget:runAction(seq)", "CodeBleu_score": 56.555277260427935}, {"code": "function delayExecute(target, func, delay)\tlocal seq = Sequence()\n\tseq:add(DelayTime(delay))\n\tseq:add(Func(func))\n\ttarget:runAction(seq)", "CodeBleu_score": 35.06740724210935}]}
{"instance_id": "3b277bd3d0d0", "generation_result": [{"code": "function LoadingScene:addLoadingText(layer)\tlocal loadingText = display.newText( \"Loading...\", 0, 0, native.systemFont, 20 )\n\tloadingText.anchorX = 0\n\tloadingText.anchorY = 0\n\tloadingText.x = display.contentCenterX\n\tloadingText.y = display.contentCenterY\n\tlayer:insert(loadingText)\n\tself._loading = loadingText", "CodeBleu_score": 17.65091431046676}, {"code": "function LoadingScene:addLoadingText(layer)\tself._loading = {}\n\tlocal fontSize = 100\n\tlocal font = native.newFont( \"Arcade.ttf\", fontSize )\n\tlocal x = display.contentCenterX\n\tlocal y = display.contentCenterY\n\tlocal loadingText = display.newText( \"Loading\", x, y, font, 255, 255, 255 )\n\tloadingText.anchorY = 1\n\tloadingText.anchorX = 0\n\tloadingText.rotation = 90\n\tloadingText.x = x\n\tloadingText.y = y - 100\n\tlayer:insert( loadingText )\n\tself._loading.text = loadingText\n\tlocal loadingPercent = display.newText( \"0%\", x, y, font, 255, 255, 255 )\n\tloadingPercent.anchorY = 1\n\tloadingPercent.anchorX = 0\n\tloadingPercent.rotation = 90\n\tloadingPercent.x = x\n\tloadingPercent.y = y\n\tlayer:insert( loadingPercent )\n\tself._loading.percent = loadingPercent\n\tlocal loadingBar = display.newRect( x, y, 300, 10 )\n\tloadingBar.anchorY = 1\n\tloadingBar.anchorX = 0\n\tloadingBar.rotation = 90\n\tloadingBar.x = x\n\tloadingBar.y = y + 100\n\tloadingBar:setFillColor( 255, 0, 0 )\n\tlayer:insert( loadingBar )\n\tself._loading.bar = loadingBar", "CodeBleu_score": 32.35714885601069}, {"code": "function LoadingScene:addLoadingText(layer)\tlocal font = \"fonts/AmaticSC-Regular.ttf\"\n\tlocal fontSize = 48\n\tlocal fontColor = {255, 255, 255}\n\tlocal fontShadowColor = {0, 0, 0}\n\tlocal fontShadowOffset = {2, 2}\n\tlocal fontShadowBlur = 2\n\tlocal text = \"Loading\"\n\tlocal x = display.contentCenterX\n\tlocal y = display.contentCenterY\n\tlocal loadingText = display.newText(text, x, y, font, fontSize)\n\tloadingText:setFillColor(unpack(fontColor))\n\tloadingText.anchorY = 0\n\tloadingText.anchorX = 0\n\tloadingText.x = x\n\tloadingText.y = y\n\tloadingText:setShadowColor(unpack(fontShadowColor))\n\tloadingText:setShadowOffset(unpack(fontShadowOffset))\n\tloadingText:setShadowBlur(fontShadowBlur)\n\tlayer:insert(loadingText)\n\tlocal loadingText2 = display.newText(text, x, y, font, fontSize)\n\tloadingText2:setFillColor(unpack(fontColor))\n\tloadingText2.anchorY = 0\n\tloadingText2.anchorX = 0\n\tloadingText2.x = x\n\tloadingText2.y = y\n\tloadingText2:setShadowColor(unpack(fontShadowColor))\n\tloadingText2:setShadowOffset(unpack(fontShadowOffset))\n\tloadingText2:setShadowBlur(fontShadowBlur)\n\tlayer:insert(loadingText2)\n\tlocal loadingText3 = display.newText(text, x, y, font, fontSize)\n\tloadingText3:setFillColor(unpack(fontColor))\n\tloadingText3.anchorY = 0\n\tloadingText3.anchorX = 0\n\tloadingText3.x = x\n\tloadingText3.y = y\n\tloadingText3:setShadowColor(unpack(fontShadowColor))\n\tloadingText3:setShadowOffset(unpack(fontShadowOffset))\n\tloadingText3:setShadowBlur(fontShadowBlur)\n\tlayer:insert(loadingText3)\n\tlocal loadingText4 = display.newText(text, x,", "CodeBleu_score": 30.36537779866037}]}
{"instance_id": "68250ae97644", "generation_result": [{"code": "function MainMenuScene.create()\tlocal scene = display.newScene()\n\tlocal layer = display.newLayer()\n\tscene:addLayer(layer)\n\tMainMenuScene.init(layer)\n\treturn scene", "CodeBleu_score": 58.45203431885897}, {"code": "function MainMenuScene.create()\tlocal scene = display.newScene()\n\tlocal layer = display.newLayer()\n\tscene:addChild(layer)\n\tlocal function onPlayGame()\n\t\t-- Create a new game scene and push it onto the scene stack.\n\t\tlocal gameScene = GameScene.create()\n\t\tcomposer.gotoScene(gameScene)\n\tend\n\tlocal function onQuit()\n\t\tcomposer.gotoScene(composer.getSceneName(\"startup\"))\n\tend\n\tlocal function onOptions()\n\t\tcomposer.gotoScene(composer.getSceneName(\"options\"))\n\tend\n\tlocal function onCredits()\n\t\tcomposer.gotoScene(composer.getSceneName(\"credits\"))\n\tend\n\tlocal function onAbout()\n\t\tcomposer.gotoScene(composer.getSceneName(\"about\"))\n\tend\n\tlocal function onScores()\n\t\tcomposer.gotoScene(composer.getSceneName(\"scores\"))\n\tend\n\tlocal function onHelp()\n\t\tcomposer.gotoScene(composer.getSceneName(\"help\"))\n\tend\n\tlocal function onHighScores()\n\t\tcomposer.gotoScene(composer.getSceneName(\"highscores\"))\n\tend\n\tlocal function onExit()\n\t\tcomposer.exit()\n\tend\n\tlocal function onRestart()\n\t\tcomposer.gotoScene(composer.getSceneName(\"game\"))\n\tend\n\tlocal function onBack()\n\t\tcomposer.gotoScene(composer.getSceneName(\"mainmenu\"))\n\tend\n\tlocal function onPlayAgain()\n\t\tcomposer.gotoScene(composer.getSceneName(\"game\"))\n\tend\n\tlocal function onPlayAgain2()\n\t\tcomposer.gotoScene(composer.getSceneName(\"game\"))\n\tend\n\tlocal function onPlayAgain3()\n\t\tcomposer.gotoScene(composer.getSceneName(\"game\"))\n\tend\n\tlocal function onPlayAgain4()\n\t\tcomposer.gotoScene(composer.getSceneName(\"game\"))\n\tend\n\tlocal function onPlayAgain5()\n\t\tcomposer.gotoScene(composer.getSceneName(\"game\"))\n\tend\n\tlocal function onPlayAgain6()\n\t\tcomposer.gotoScene(composer.getSceneName(\"game\"))\n\tend\n\tlocal function onPlayAgain7()\n\t\tcomposer.gotoScene(composer.getSceneName(\"game\"))\n\tend\n\tlocal function on", "CodeBleu_score": 39.45742759400866}, {"code": "function MainMenuScene.create()\tlocal scene = cc.Scene:create()\n\tlocal layer = MainMenuLayer.create()\n\tscene:addChild(layer)\n\treturn scene", "CodeBleu_score": 60.23125640880942}]}
{"instance_id": "81470efbb6ff", "generation_result": [{"code": "local function collision(object)\n\tif object.type == \"hero\" then\n\t\tfor i = 1, #monsterManager.monsters do\n\t\t\tif object.id ~= monsterManager.monsters[i].id then\n\t\t\t\tif object.x + object.width > monsterManager.monsters[i].x and object.x < monsterManager.monsters[i].x + monsterManager.monsters[i].width and object.y + object.height > monsterManager.monsters[i].y and object.y < monsterManager.monsters[i].y + monsterManager.monsters[i].height then\n\t\t\t\t\tsolveCollision(object, monsterManager.monsters[i])\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\t\n\tif object.type == \"monster\" then\n\t\tfor i = 1, #heroManager.heroes do\n\t\t\tif object.id ~= heroManager.heroes[i].id then\n\t\t\t\tif object.x + object.width > heroManager.heroes[i].x and object.x < heroManager.heroes[i].x + heroManager.heroes[i].width and object.y + object.height > heroManager.heroes[i].y and object.y < heroManager.heroes[i].y + heroManager.heroes[i].height then\n\t\t\t\t\tsolveCollision(object, heroManager.heroes[i])\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend", "CodeBleu_score": 30.77321021517078}, {"code": "local function collision(object)\n\tif object.type == \"hero\" then\n\t\tfor i, monster in pairs(monsterManager.monsters) do\n\t\t\tif collision.check(object, monster) then\n\t\t\t\tsolveCollision(object, monster)\n\t\t\tend\n\t\tend\n\telseif object.type == \"monster\" then\n\t\tfor i, hero in pairs(heroManager.heroes) do\n\t\t\tif collision.check(object, hero) then\n\t\t\t\tsolveCollision(object, hero)\n\t\t\tend\n\t\tend\n\tend\n ", "CodeBleu_score": 34.16471391468147}, {"code": "local function collision(object)\n\tlocal heroes = HeroManager.getAlive()\n\tlocal monsters = MonsterManager.getAlive()\n \n\tif object.type == \"hero\" then\n\t\theroes = heroes[1]\n\tend\n \n\tfor i,v in pairs(heroes) do\n\t\tif object.type == \"hero\" then\n\t\t\tif object.id ~= v.id and object.collision(v) then\n\t\t\t\tsolveCollision(object, v)\n\t\t\tend\n\t\telse\n\t\t\tif object.collision(v) then\n\t\t\t\tsolveCollision(object, v)\n\t\t\tend\n\t\tend\n\tend\n \n\tfor i,v in pairs(monsters) do\n\t\tif object.type == \"monster\" then\n\t\t\tif object.id ~= v.id and object.collision(v) then\n\t\t\t\tsolveCollision(object, v)\n\t\t\tend\n\t\telse\n\t\t\tif object.collision(v) then\n\t\t\t\tsolveCollision(object, v)\n\t\t\tend\n\t\tend\n\tend", "CodeBleu_score": 38.23428589925803}]}
{"instance_id": "f8915bebdc0e", "generation_result": [{"code": "function collisionDetect(dt)\tfor i=#HeroManager,1,-1 do\n\t\tif HeroManager[i].alive then\n\t\t\tfor j=#MonsterManager,1,-1 do\n\t\t\t\tif MonsterManager[j].alive then\n\t\t\t\t\tif HeroManager[i].collidesWith(MonsterManager[j]) then\n\t\t\t\t\t\tHeroManager[i].collide(MonsterManager[j])\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\tMonsterManager[j] = nil\n\t\t\t\tend\n\t\t\tend\n\t\telse\n\t\t\tHeroManager[i] = nil\n\t\tend\n\tend", "CodeBleu_score": 19.573892325530938}, {"code": "function collisionDetect(dt)\tfor i=#HeroManager,1,-1 do\n\t\tif HeroManager[i].alive then\n\t\t\tfor j=#MonsterManager,1,-1 do\n\t\t\t\tif MonsterManager[j].alive then\n\t\t\t\t\tif HeroManager[i].x + HeroManager[i].width > MonsterManager[j].x and HeroManager[i].x < MonsterManager[j].x + MonsterManager[j].width and HeroManager[i].y + HeroManager[i].height > MonsterManager[j].y and HeroManager[i].y < MonsterManager[j].y + MonsterManager[j].height then\n\t\t\t\t\t\tHeroManager[i].alive = false\n\t\t\t\t\t\tMonsterManager[j].alive = false\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend", "CodeBleu_score": 30.33268792436535}, {"code": "function collisionDetect(dt)\tfor i=#heroManager.sprites,1,-1 do\n\t\tif heroManager.sprites[i].alive == true then\n\t\t\t-- check for collisions with monsters\n\t\t\tfor j=#monsterManager.sprites,1,-1 do\n\t\t\t\tif monsterManager.sprites[j].alive == true then\n\t\t\t\t\tif heroManager.sprites[i].collidesWith(monsterManager.sprites[j]) == true then\n\t\t\t\t\t\theroManager.sprites[i].collide(monsterManager.sprites[j])\n\t\t\t\t\t\tmonsterManager.sprites[j].collide(heroManager.sprites[i])\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\t-- check for collisions with walls\n\t\t\tif heroManager.sprites[i].collidesWith(wallManager.walls[1]) == true then\n\t\t\t\theroManager.sprites[i].collide(wallManager.walls[1])\n\t\t\tend\n\t\t\tif heroManager.sprites[i].collidesWith(wallManager.walls[2]) == true then\n\t\t\t\theroManager.sprites[i].collide(wallManager.walls[2])\n\t\t\tend\n\t\t\tif heroManager.sprites[i].collidesWith(wallManager.walls[3]) == true then\n\t\t\t\theroManager.sprites[i].collide(wallManager.walls[3])\n\t\t\tend\n\t\t\tif heroManager.sprites[i].collidesWith(wallManager.walls[4]) == true then\n\t\t\t\theroManager.sprites[i].collide(wallManager.walls[4])\n\t\t\tend\n\t\t\tif heroManager.sprites[i].collidesWith(wallManager.walls[5]) == true then\n\t\t\t\theroManager.sprites[i].collide(wallManager.walls[5])\n\t\t\tend\n\t\t\tif heroManager.sprites[i].collidesWith(wallManager.walls[6]) == true then\n\t\t\t\theroManager.sprites[i].collide(wallManager.walls[6])\n\t\t\tend\n\t\t\tif heroManager.sprites[i].collidesWith(wallManager.walls[7]) == true then\n\t\t\t\theroManager.sprites[i].collide(wallManager.walls[7])\n\t\t\tend\n\t\t\tif heroManager.sprites[i].collidesWith(wallManager.walls[8]) == true then\n\t\t\t\theroManager.sprites[i", "CodeBleu_score": 30.16399262590147}]}
{"instance_id": "fc081bb122f5", "generation_result": [{"code": "function Actor:specialAttack()\tlocal attack = nil\n\tlocal attackName = \"\"\n\tlocal attackSound = nil\n\tlocal attackSoundName = \"\"\n\tlocal attackCollider = nil\n\tlocal attackColliderName = \"\"\n\tlocal attackColliderTag = \"\"\n\tlocal attackColliderLayer = \"\"\n\tlocal attackColliderShape = \"\"\n\tlocal attackColliderSize = \"\"\n\tlocal attackColliderDensity = \"\"\n\tlocal attackColliderRestitution = \"\"\n\tlocal attackColliderFriction = \"\"\n\tlocal attackColliderIsSensor = \"\"\n\tlocal attackColliderMask = \"\"\n\tlocal attackColliderGroupIndex = \"\"\n\tlocal attackColliderCategoryBits = \"\"\n\tlocal attackColliderMaskBits = \"\"\n\tlocal attackColliderGroupIndex = \"\"\n\tlocal attackColliderIsTrigger = \"\"\n\tlocal attackColliderUserData = \"\"\n\tlocal attackColliderLinearDamping = \"\"\n\tlocal attackColliderAngularDamping = \"\"\n\tlocal attackColliderIsBullet = \"\"\n\tlocal attackColliderIsSleepable = \"\"\n\tlocal attackColliderIsSensor = \"\"\n\tlocal attackColliderCollidesWith = \"\"\n\tlocal attackColliderCollisionGroup = \"\"\n\tlocal attackColliderCollisionResponse = \"\"\n\tlocal attackColliderCollisionCallback = \"\"\n\tlocal attackColliderPreSolveCallback = \"\"\n\tlocal attackColliderPostSolveCallback = \"\"\n\tlocal attackColliderTable = {}\n\tlocal attackColliderTable[\"name\"] = attackColliderName\n\tattackColliderTable[\"tag\"] = attackColliderTag\n\tattackColliderTable[\"layer\"] = attackColliderLayer\n\tattackColliderTable[\"shape\"] = attackColliderShape\n\tattackColliderTable[\"size\"] = attackColliderSize\n\tattackColliderTable[\"density\"] = attackColliderDensity\n\tattackColliderTable[\"restitution\"] = attackColliderRestitution\n\tattackColliderTable[\"friction\"] = attackColliderFriction\n\tattackColliderTable[\"isSensor\"] = attackColliderIsSensor\n\tattackColliderTable[\"mask\"] = attackColliderMask\n\tattackColliderTable[\"groupIndex\"] = attackColliderGroupIndex\n\tattackColliderTable[\"categoryBits\"] = attackColliderCategoryBits\n\tattackColliderTable[\"maskBits\"] = attackColliderMaskBits\n\tattackColliderTable[\"groupIndex\"] = attackColliderGroupIndex\n\tattackColliderTable[\"isTrigger\"] = attackColliderIsTrigger\n\tattackColliderTable[\"userData\"] = attackColliderUserData\n\tattackColliderTable[\"linearDamping\"] = attackColliderLinearDamping\n\tattackCollider", "CodeBleu_score": 18.24679274103655}, {"code": "function Actor:specialAttack()\tlocal attack = self.specialAttacks[self.specialAttackIndex]\n\tlocal attackCollider = Collider(self.x, self.y, attack.width, attack.height)\n\tattackCollider.attack = attack\n\tattackCollider.attacker = self\n\tattackCollider.attackerX = self.x\n\tattackCollider.attackerY = self.y\n\tattackCollider.attackerFacingDirection = self.facingDirection\n\tattackCollider.attackerFacingDirectionX = self.facingDirectionX\n\tattackCollider.attackerFacingDirectionY = self.facingDirectionY\n\tattackCollider.attackerFacingDirectionVector = self.facingDirectionVector\n\tattackCollider.attackerFacingDirectionRadians = self.facingDirectionRadians\n\tattackCollider.attackerFacingDirectionDegrees = self.facingDirectionDegrees\n\tattackCollider.attackerFacingDirectionRadians = self.facingDirectionRadians\n\tattackCollider.attackerFacingDirectionRadians = self.facingDirectionRadians\n\tattackCollider.attackerFacingDirectionRadians = self.facingDirectionRadians\n\tattackCollider.attackerFacingDirectionRadians = self.facingDirectionRadians\n\tattackCollider.attackerFacingDirectionRadians = self.facingDirectionRadians\n\tattackCollider.attackerFacingDirectionRadians = self.facingDirectionRadians\n\tattackCollider.attackerFacingDirectionRadians = self.facingDirectionRadians\n\tattackCollider.attackerFacingDirectionRadians = self.facingDirectionRadians\n\tattackCollider.attackerFacingDirectionRadians = self.facingDirectionRadians\n\tattackCollider.attackerFacingDirectionRadians = self.facingDirectionRadians\n\tattackCollider.attackerFacingDirectionRadians = self.facingDirectionRadians\n\tattackCollider.attackerFacingDirectionRadians = self.facingDirectionRadians\n\tattackCollider.attackerFacingDirectionRadians = self.facingDirectionRadians\n\tattackCollider.attackerFacingDirectionRadians = self.facingDirectionRadians\n\tattackCollider.attackerFacingDirectionRadians = self.facingDirectionRadians\n\tattackCollider.attackerFacingDirectionRadians = self.facingDirectionRadians\n\tattackCollider.attackerFacingDirectionRadians = self.facingDirectionRadians\n\tattackCollider.attackerFacingDirectionRadians = self.facingDirectionRadians\n\tattackCollider.attackerFacingDirectionRadians = self.facingDirectionRadians\n\tattackCollider.attackerFacingDirectionRadians = self.facingDirectionRadians\n\tattackCollider.attackerFacingDirectionRadians = self.facingDirectionRadians", "CodeBleu_score": 38.167749595462666}, {"code": "function Actor:specialAttack()\tlocal attack = nil\n\tlocal attackSound = nil\n\tlocal attackCollider = nil\n\tlocal attackColliderSound = nil\n\tlocal attackColliderSound2 = nil\n\tlocal attackColliderSound3 = nil\n\tlocal attackColliderSound4 = nil\n\tlocal attackColliderSound5 = nil\n\tlocal attackColliderSound6 = nil\n\tlocal attackColliderSound7 = nil\n\tlocal attackColliderSound8 = nil\n\tlocal attackColliderSound9 = nil\n\tlocal attackColliderSound10 = nil\n\tlocal attackColliderSound11 = nil\n\tlocal attackColliderSound12 = nil\n\tlocal attackColliderSound13 = nil\n\tlocal attackColliderSound14 = nil\n\tlocal attackColliderSound15 = nil\n\tlocal attackColliderSound16 = nil\n\tlocal attackColliderSound17 = nil\n\tlocal attackColliderSound18 = nil\n\tlocal attackColliderSound19 = nil\n\tlocal attackColliderSound20 = nil\n\tlocal attackColliderSound21 = nil\n\tlocal attackColliderSound22 = nil\n\tlocal attackColliderSound23 = nil\n\tlocal attackColliderSound24 = nil\n\tlocal attackColliderSound25 = nil\n\tlocal attackColliderSound26 = nil\n\tlocal attackColliderSound27 = nil\n\tlocal attackColliderSound28 = nil\n\tlocal attackColliderSound29 = nil\n\tlocal attackColliderSound30 = nil\n\tlocal attackColliderSound31 = nil\n\tlocal attackColliderSound32 = nil\n\tlocal attackColliderSound33 = nil\n\tlocal attackColliderSound34 = nil\n\tlocal attackColliderSound35 = nil\n\tlocal attackColliderSound36 = nil\n\tlocal attackColliderSound37 = nil\n\tlocal attackColliderSound38 = nil\n\tlocal attackColliderSound39 = nil\n\tlocal attackColliderSound40 = nil\n\tlocal attackColliderSound41 = nil\n\tlocal attackColliderSound42 = nil\n\tlocal attackColliderSound43 = nil\n\tlocal attackColliderSound44 = nil\n\tlocal attackColliderSound45 = nil\n\tlocal attackColliderSound46 = nil\n\tlocal attackColliderSound47 = nil\n\tlocal attackColliderSound48 = nil\n\tlocal attackColliderSound49 = nil\n\tlocal attackColliderSound50 = nil\n\tlocal", "CodeBleu_score": 5.715006512802246}]}
{"instance_id": "bfc98809aacb", "generation_result": [{"code": "function Slime:angryFace(trueFalse)\tif trueFalse == true then\n\t\tif self.angry == false then\n\t\t\tself.angry = true\n\t\t\tself.sprite.texture = self.angryTexture\n\t\t\tself.sprite.xScale = 1\n\t\t\tself.sprite.yScale = 1\n\t\t\tself.sprite.rotation = 0\n\t\tend\n\telse\n\t\tif self.angry == true then\n\t\t\tself.angry = false\n\t\t\tself.sprite.texture = self.normalTexture\n\t\t\tself.sprite.xScale = 1\n\t\t\tself.sprite.yScale = 1\n\t\t\tself.sprite.rotation = 0\n\t\tend\n\tend", "CodeBleu_score": 35.66113073403861}, {"code": "function Slime:angryFace(trueFalse)\tif trueFalse == true then \n\t\tif self.angry == false then \n\t\t\tself.angry = true \n\t\t\tself.texture = \"slime_angry\" \n\t\tend \n\telse \n\t\tif self.angry == true then \n\t\t\tself.angry = false \n\t\t\tself.texture = \"slime_normal\" \n\t\tend \n\tend ", "CodeBleu_score": 36.05106915790556}, {"code": "function Slime:angryFace(trueFalse)\tif trueFalse == true and self.angry == false then\n\t\tself.angry = true\n\t\tself.sprite:setGraphic(self.angryTexture)\n\telseif trueFalse == false and self.angry == true then\n\t\tself.angry = false\n\t\tself.sprite:setGraphic(self.defaultTexture)\n\tend", "CodeBleu_score": 42.037367473416126}]}
{"instance_id": "546a0b8fb77b", "generation_result": [{"code": "override fun getCharPixmap(char: Char): Pixmap\t// Get the font metrics for the character\n\tval fontMetrics = fontMetrics\n\tval ascent = fontMetrics.ascent\n\tval descent = fontMetrics.descent\n\tval leading = fontMetrics.leading\n\tval height = ascent + descent + leading\n\n\t// Create a bitmap for the character\n\tval bitmap = Bitmap(fontMetrics.stringWidth(char.toString()), height)\n\tval graphics = Graphics2D(bitmap)\n\n\t// Draw the character onto the bitmap\n\tgraphics.font = font\n\tgraphics.color = Color.BLACK\n\tgraphics.drawString(char.toString(), 0, ascent)\n\n\t// Convert the bitmap to pixel data\n\tval image = BufferedImage(bitmap.width, bitmap.height, BufferedImage.TYPE_INT_RGB)\n\timage.createGraphics().drawImage(bitmap, 0, 0, null)\n\tval data = image.getRaster().dataBuffer\n\tval pixels = IntArray(data.size)\n\tdata.get(pixels)\n\n\t// Construct a Pixmap object with the pixel data\n\tval pixmap = Pixmap(fontMetrics.stringWidth(char.toString()), height, Pixmap.Format.RGBA8888)\n\tpixmap.setPixels(0, 0, pixmap.width, pixmap.height, pixels)\n\n\treturn pixmap\n}\n", "CodeBleu_score": 43.474316026786795}, {"code": "override fun getCharPixmap(char: Char): Pixmap\tval text = char.toString()\n\tval font = getFont(fontSize)\n\tval fontMetrics = getFontMetrics(font)\n\tval textWidth = fontMetrics.stringWidth(text)\n\tval textHeight = fontMetrics.height\n\tval bitmap = Bitmap(textWidth, textHeight, Bitmap.Config.ARGB_8888)\n\tval canvas = Canvas(bitmap)\n\tcanvas.drawText(text, 0f, fontMetrics.ascent, font)\n\tval bitmapPixels = IntArray(textWidth * textHeight)\n\tbitmap.getPixels(bitmapPixels, 0, textWidth, 0, 0, textWidth, textHeight)\n\tval pixmap = Pixmap(textWidth, textHeight, Pixmap.Format.RGBA8888)\n\tpixmap.setPixels(bitmapPixels, 0, textWidth)\n\treturn pixmap\n}\n", "CodeBleu_score": 38.546894923779384}, {"code": "override fun getCharPixmap(char: Char): Pixmap\tval font = getFont(fontSize)\n\tval fontMetrics = Toolkit.getDefaultToolkit().getFontMetrics(font)\n\tval textWidth = fontMetrics.stringWidth(char.toString())\n\tval textHeight = fontMetrics.height\n\tval bitmap = BufferedImage(textWidth, textHeight, BufferedImage.TYPE_INT_ARGB)\n\tval graphics2D = bitmap.createGraphics()\n\tgraphics2D.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON)\n\tgraphics2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON)\n\tgraphics2D.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY)\n\tgraphics2D.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_QUALITY)\n\tgraphics2D.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON)\n\tgraphics2D.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_NORMALIZE)\n\tgraphics2D.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC)\n\tgraphics2D.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION, RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY)\n\tgraphics2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON)\n\tgraphics2D.setRenderingHint(RenderingHints.KEY_DITHERING, RenderingHints.VALUE_DITHER_ENABLE)\n\tgraphics2D.setRenderingHint(RenderingHints.KEY_TEXT_LCD_CONTRAST, 140)\n\tgraphics2D.setRenderingHint(RenderingHints.KEY_TEXT_LCD_RENDERING, RenderingHints.VALUE_TEXT_LCD_DEFAULT)\n\tgraphics2D.setRenderingHint(RenderingHints.KEY_TEXT_LCD_CONTRAST, 140)\n\tgraphics2D.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, Rendering", "CodeBleu_score": 28.001806383258764}]}
{"instance_id": "9c1ce2567ce1", "generation_result": [{"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ) *//*\n * The function saveGame(data: String, suggestedLocation: String, onSaved: (location: String) -> Unit, onError: (ex: Exception) -> Unit) saves game data to a specified location. It parses the suggested location URI, determines the filename, and defines a callback for file selection. Upon file selection, it attempts to write data to the chosen URI and invokes the onSaved callback if successful or onError in case of an exception. The function also opens a file chooser for user to select save location.\n */\n override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ) {\n *//*\n * The function saveGame(data: String, suggestedLocation: String, onSaved: (location: String) -> Unit, onError: (ex: Exception) -> Unit) saves game data to a specified location. It parses the suggested location URI, determines the filename, and defines a callback for file selection. Upon file selection, it attempts to write data to the chosen URI and invokes the onSaved callback if successful or onError in case of an exception. The function also opens a file chooser for user to select save location.\n */\n override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ) {\n *//*\n * The function saveGame(data: String, suggestedLocation: String, onSaved: (location: String) -> Unit, onError: (ex: Exception) -> Unit) saves game data to a specified location. It parses the suggested location URI, determines the filename, and defines a callback for file selection. Upon file selection, it attempts to write data to the chosen URI and invokes the onSaved callback if successful or onError in case of an exception. The function also opens a file chooser for user to select save location.\n */\n override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ) {\n *//*\n * The function saveGame(data: String, suggestedLocation: String, onSaved: (location: String) -> Unit, onError: (ex: Exception) -> Unit) saves game data to a", "CodeBleu_score": 38.34968222989809}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    )//        val file = File(suggestedLocation)", "CodeBleu_score": 13.890975343680193}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ) */\n", "CodeBleu_score": 13.890909090909092}]}
{"instance_id": "ea556fe12030", "generation_result": [{"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    )// 1. Open a file chooser for the user to select the file to load.", "CodeBleu_score": 19.37752610201206}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    )\n}\n", "CodeBleu_score": 19.371400902165885}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    )//        TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n    }\n", "CodeBleu_score": 20.210603365439216}]}
{"instance_id": "813990d9bb4d", "generation_result": [{"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int)\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n\t\taddCategory(Intent.CATEGORY_OPENABLE)\n\t\ttype = \"application/json\"\n\t\tputExtra(Intent.EXTRA_TITLE, fileName)\n\t\tif (uri.scheme == \"content\") {\n\t\t\tputExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n\t\t}\n\t}\n\tactivity.startActivityForResult(intent, requestCode)\n}\n", "CodeBleu_score": 68.05393166902275}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int)\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\n\tintent.addCategory(Intent.CATEGORY_OPENABLE)\n\tintent.type = \"application/json\"\n\tintent.putExtra(Intent.EXTRA_TITLE, fileName)\n\tif (uri.scheme == \"content\") {\n\t\tintent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n\t}\n\tstartActivityForResult(intent, requestCode)\n}\n", "CodeBleu_score": 81.42620393720425}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int)\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n\t\taddCategory(Intent.CATEGORY_OPENABLE)\n\t\ttype = \"application/json\"\n\t\tputExtra(Intent.EXTRA_TITLE, fileName)\n\t\tif (uri.scheme == \"content\") {\n\t\t\tputExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n\t\t}\n\t}\n\tactivity.startActivityForResult(intent, requestCode)\n}\n", "CodeBleu_score": 68.05393166902275}]}
{"instance_id": "a423b39ba6fe", "generation_result": [{"code": "fun createNotificationChannelInfo(appContext: Context)// Create a Notification channel.\n    val name = getString(R.string.channel_name)\n    val descriptionText = getString(R.string.channel_description)\n    val importance = NotificationManager.IMPORTANCE_DEFAULT\n    val channel = NotificationChannel(CHANNEL_ID, name, importance).apply {\n        description = descriptionText\n    }\n\n    // Register the channel with the system; you can't change the importance\n    // or other notification behaviors after this\n    val notificationManager: NotificationManager =\n        appContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n    notificationManager.createNotificationChannel(channel)\n}\n", "CodeBleu_score": 47.84774783658133}, {"code": "fun createNotificationChannelInfo(appContext: Context)}\n", "CodeBleu_score": 1.0745600660296022}, {"code": "fun createNotificationChannelInfo(appContext: Context)// Create the NotificationChannel, but only on API 26+ because", "CodeBleu_score": 1.0312134672987785}]}
{"instance_id": "4f3e7f77a567", "generation_result": [{"code": "fun packImages(workingPath: String)\tval assetsPath = workingPath + \"/assets\"\n\tval modsPath = workingPath + \"/mods\"\n\tval imagesPath = workingPath + \"/images\"\n\tval packer = Packer()\n\tval error = packer.pack(assetsPath, imagesPath)\n\tif (error!= null) {\n\t\tprintln(\"Error: \" + error)\n\t\treturn\n\t}\n\tval mods = File(modsPath).listFiles()\n\tif (mods!= null) {\n\t\tfor (mod in mods) {\n\t\t\tif (mod.name.startsWith(\".\")) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tval modAssetsPath = mod.absolutePath + \"/assets\"\n\t\t\tval modImagesPath = mod.absolutePath + \"/images\"\n\t\t\terror = packer.pack(modAssetsPath, modImagesPath)\n\t\t\tif (error!= null) {\n\t\t\t\tprintln(\"Error: \" + error)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}\n}\n", "CodeBleu_score": 41.17953314823431}, {"code": "fun packImages(workingPath: String)\t// Pack images for the main assets folder.\n\ttry {\n\t\tpackImagesForFolder(workingPath)\n\t} catch (e: Exception) {\n\t\tprintln(\"Error packing images for main assets folder: ${e.message}\")\n\t}\n\n\t// Scan the \"mods\" directory for mod folders.\n\tval modsPath = workingPath + \"/mods\"\n\tval mods = File(modsPath)\n\tif (mods.exists()) {\n\t\tval modFolders = mods.listFiles()\n\t\tfor (modFolder in modFolders) {\n\t\t\tif (modFolder.isDirectory &&!modFolder.name.startsWith(\".\")) {\n\t\t\t\t// Pack images for the mod folder.\n\t\t\t\ttry {\n\t\t\t\t\tpackImagesForFolder(modFolder.absolutePath)\n\t\t\t\t} catch (e: Exception) {\n\t\t\t\t\tprintln(\"Error packing images for mod folder ${modFolder.name}: ${e.message}\")\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n", "CodeBleu_score": 45.799197302517825}, {"code": "fun packImages(workingPath: String)\tval modPaths = workingPath.listFiles { _, name -> name == \"mods\" }\n\tif (modPaths.isEmpty()) {\n\t\tprintln(\"No mods directory found.\")\n\t\treturn\n\t}\n\tval modPath = modPaths[0].absolutePath\n\tval mainAssetsPath = workingPath.absolutePath\n\tprintln(\"Packing images for the main assets folder...\")\n\tpackImagesForPath(mainAssetsPath)\n\tprintln(\"Packing images for each mod...\")\n\tfor (file in File(modPath).listFiles()!!) {\n\t\tif (file.name.startsWith(\".\")) {\n\t\t\tcontinue\n\t\t}\n\t\tpackImagesForPath(file.absolutePath)\n\t}\n\tprintln(\"Done.\")\n}\n", "CodeBleu_score": 42.62655443924085}]}
{"instance_id": "206dbb3c21eb", "generation_result": [{"code": "suspend fun reloadWorldscreen()\tval worldscreen = getWorldscreen()\n\tworldscreen.reload()\n}\n", "CodeBleu_score": 6.035287771917758}, {"code": "suspend fun reloadWorldscreen()\tval worldscreen = getWorldscreen()\n\tif (worldscreen!= null) {\n\t\tworldscreen.dispose()\n\t\tworldscreen.create()\n\t}\n}\n", "CodeBleu_score": 24.48308566519273}, {"code": "suspend fun reloadWorldscreen()\tif (worldscreen!= null) {\n\t\tworldscreen!!.dispose()\n\t\tworldscreen = null\n\t}\n\tif (loadingScreen!= null) {\n\t\tloadingScreen!!.dispose()\n\t\tloadingScreen = null\n\t}\n\tif (loadingScreenTexture!= null) {\n\t\tloadingScreenTexture!!.dispose()\n\t\tloadingScreenTexture = null\n\t}\n\tif (loadingScreenTexture2!= null) {\n\t\tloadingScreenTexture2!!.dispose()\n\t\tloadingScreenTexture2 = null\n\t}\n\tif (loadingScreenTexture3!= null) {\n\t\tloadingScreenTexture3!!.dispose()\n\t\tloadingScreenTexture3 = null\n\t}\n\tif (loadingScreenTexture4!= null) {\n\t\tloadingScreenTexture4!!.dispose()\n\t\tloadingScreenTexture4 = null\n\t}\n\tif (loadingScreenTexture5!= null) {\n\t\tloadingScreenTexture5!!.dispose()\n\t\tloadingScreenTexture5 = null\n\t}\n\tif (loadingScreenTexture6!= null) {\n\t\tloadingScreenTexture6!!.dispose()\n\t\tloadingScreenTexture6 = null\n\t}\n\tif (loadingScreenTexture7!= null) {\n\t\tloadingScreenTexture7!!.dispose()\n\t\tloadingScreenTexture7 = null\n\t}\n\tif (loadingScreenTexture8!= null) {\n\t\tloadingScreenTexture8!!.dispose()\n\t\tloadingScreenTexture8 = null\n\t}\n\tif (loadingScreenTexture9!= null) {\n\t\tloadingScreenTexture9!!.dispose()\n\t\tloadingScreenTexture9 = null\n\t}\n\tif (loadingScreenTexture10!= null) {\n\t\tloadingScreenTexture10!!.dispose()\n\t\tloadingScreenTexture10 = null\n\t}\n\tif (loadingScreenTexture11!= null) {\n\t\tloadingScreenTexture11!!.dispose()\n\t\tloadingScreenTexture11 = null\n\t}\n\tif (loadingScreenTexture12!= null) {\n\t\tloadingScreenTexture12!!.dispose()\n\t\tloadingScreenTexture12 = null\n\t}\n\tif (loadingScreenTexture13!= null) {\n\t\tloadingScreenTexture13!!.dispose()\n\t\tloadingScreenTexture13 = null\n\t}\n\tif (loadingScreenTexture14!= null) {\n\t\tloadingScreenTexture14!!.dispose()\n\t\tloadingScreenTexture14 = null\n\t}\n", "CodeBleu_score": 19.173605356813074}]}
{"instance_id": "2d8fdcb5ad6f", "generation_result": [{"code": "fun goToMainMenu(): MainMenuScreen\treturn MainMenuScreen()\n}\n", "CodeBleu_score": 4.223404314564965}, {"code": "fun goToMainMenu(): MainMenuScreen\treturn MainMenuScreen()\n}\n", "CodeBleu_score": 4.223404314564965}, {"code": "fun goToMainMenu(): MainMenuScreen\tval mainMenuScreen = MainMenuScreen(game)\n\tgame.setScreen(mainMenuScreen)\n\treturn mainMenuScreen\n}\n", "CodeBleu_score": 14.510526148676945}]}
{"instance_id": "df60142d384c", "generation_result": [{"code": " protected fun setWindowedMode(settings: GameSettings): Boolean val mode = Windowed(settings.width, settings.height)\n val bounds = getWindowBounds()\n if (bounds.width < settings.width || bounds.height < settings.height) {\n // The window is too small for the desired game size.\n return false\n }\n // The window is large enough for the desired game size.\n window.displayMode = mode\n window.title = settings.title\n window.icon = settings.icon\n return true\n }\n /**\n * The function setFullscreenMode(settings: GameSettings): Boolean sets the game window to fullscreen mode based on provided settings. It retrieves the maximum window bounds, adjusts the window size within these bounds, and updates the window configuration and graphics mode. It returns true if the window size matches the maximum bounds.\n */\n protected fun setFullscreenMode(settings: GameSettings): Boolean {\n val mode = Fullscreen(settings.width, settings.height)\n val bounds = getWindowBounds()\n if (bounds.width < settings.width || bounds.height < settings.height) {\n // The window is too small for the desired game size.\n return false\n }\n // The window is large enough for the desired game size.\n window.displayMode = mode\n window.title = settings.title\n window.icon = settings.icon\n return true\n }\n /**\n * The function setBorderlessMode(settings: GameSettings): Boolean sets the game window to borderless mode based on provided settings. It retrieves the maximum window bounds, adjusts the window size within these bounds, and updates the window configuration and graphics mode. It returns true if the window size matches the maximum bounds.\n */\n protected fun setBorderlessMode(settings: GameSettings): Boolean {\n val mode = Borderless(settings.width, settings.height)\n val bounds = getWindowBounds()\n if (bounds.width < settings.width || bounds.height < settings.height) {\n // The window is too small for the desired game size.\n return false\n }\n // The window is large enough for the desired game size.\n window.displayMode = mode\n window.title = settings.title\n window.icon = settings.icon\n return true\n }\n /**\n * The function setWindowBounds(settings: GameSettings): RectangleInt sets the game window bounds based on provided settings. It retrieves the maximum window bounds, adjusts the window size within these bounds, and updates", "CodeBleu_score": 36.206719011139676}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean val screenSize = Toolkit.getDefaultToolkit().getScreenSize()\n val width = settings.width\n val height = settings.height\n val x = (screenSize.width - width) / 2\n val y = (screenSize.height - height) / 2\n if (width <= screenSize.width && height <= screenSize.height) {\n setSize(width, height)\n setLocation(x, y)\n isFullscreen = false\n return true\n } else {\n if (width!= 0) {\n settings.width = screenSize.width\n }\n if (height!= 0) {\n settings.height = screenSize.height\n }\n return false\n }\n }\n /**\n * The function setFullscreenMode(settings: GameSettings): Boolean sets the game window to fullscreen mode based on provided settings. It retrieves the maximum window bounds, adjusts the window size within these bounds, and updates the window configuration and graphics mode. It returns true if the window size matches the maximum bounds.\n */\n protected fun setFullscreenMode(settings: GameSettings): Boolean {\n val screenSize = Toolkit.getDefaultToolkit().getScreenSize()\n val width = settings.width\n val height = settings.height\n val x = 0\n val y = 0\n if (width <= screenSize.width && height <= screenSize.height) {\n setSize(width, height)\n setLocation(x, y)\n isFullscreen = true\n return true\n } else {\n if (width!= 0) {\n settings.width = screenSize.width\n }\n if (height!= 0) {\n settings.height = screenSize.height\n }\n return false\n }\n }\n /**\n * The function setDisplayMode(settings: GameSettings): Boolean sets the game window to fullscreen mode based on provided settings. It retrieves the maximum window bounds, adjusts the window size within these bounds, and updates the window configuration and graphics mode. It returns true if the window size matches the maximum bounds.\n */\n protected fun setDisplayMode(settings: GameSettings): Boolean {\n val screenSize = Toolkit.getDefaultToolkit().getScreenSize()\n val width = settings.width\n val height = settings.height\n val x = 0\n val y = 0\n if (width <= screenSize.width && height <= screenSize.height) {\n setSize(width, height)\n setLocation", "CodeBleu_score": 38.14355780005197}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean // Determine the maximum window size based on the desktop resolution\n val bounds = Toolkit.getDefaultToolkit().getScreenSize()\n val width = min(bounds.width, settings.width)\n val height = min(bounds.height, settings.height)\n // Center the window\n setLocation((bounds.width - width) / 2, (bounds.height - height) / 2)\n // Set the window size and mode\n setSize(width, height)\n setUndecorated(false)\n setResizable(true)\n return width == settings.width && height == settings.height\n }\n\n /**\n * The function setFullscreenMode(settings: GameSettings): Boolean sets the game window to fullscreen mode based on provided settings. It retrieves the maximum window bounds, adjusts the window size within these bounds, and updates the window configuration and graphics mode. It returns true if the window size matches the maximum bounds.\n */\n protected fun setFullscreenMode(settings: GameSettings): Boolean {\n // Determine the maximum window size based on the desktop resolution\n val bounds = Toolkit.getDefaultToolkit().getScreenSize()\n val width = min(bounds.width, settings.width)\n val height = min(bounds.height, settings.height)\n // Center the window\n setLocation((bounds.width - width) / 2, (bounds.height - height) / 2)\n // Set the window size and mode\n setSize(width, height)\n setUndecorated(true)\n setResizable(false)\n return width == settings.width && height == settings.height\n }\n\n /**\n * The function setBorderlessMode(settings: GameSettings): Boolean sets the game window to borderless mode based on provided settings. It retrieves the maximum window bounds, adjusts the window size within these bounds, and updates the window configuration and graphics mode. It returns true if the window size matches the maximum bounds.\n */\n protected fun setBorderlessMode(settings: GameSettings): Boolean {\n // Determine the maximum window size based on the desktop resolution\n val bounds = Toolkit.getDefaultToolkit().getScreenSize()\n val width = min(bounds.width, settings.width)\n val height = min(bounds.height, settings.height)\n // Center the window\n setLocation((bounds.width - width) / 2, (bounds.height - height) / 2)\n // Set the window size and mode\n", "CodeBleu_score": 37.24108008211332}]}
{"instance_id": "a8b17234c4e5", "generation_result": [{"code": "private fun getLinuxDistro(): String\tval releaseFile = File(\"/etc/os-release\")\n\tif (releaseFile.exists()) {\n\t\tval releaseMap = mutableMapOf<String, String>()\n\t\treleaseFile.forEachLine { line ->\n\t\t\tval keyValue = line.split(\"=\")\n\t\t\tif (keyValue.size == 2) {\n\t\t\t\treleaseMap[keyValue[0].trim()] = keyValue[1].trim().removeSurrounding(\"\\\"\")\n\t\t\t}\n\t\t}\n\t\treturn releaseMap[\"PRETTY_NAME\"]?: \"${releaseMap[\"NAME\"]} ${releaseMap[\"VERSION_ID\"]}\"\n\t}\n\treturn \"\"\n}\n", "CodeBleu_score": 35.49640458598543}, {"code": "private fun getLinuxDistro(): String\tval osReleaseFile = File(\"/etc/os-release\")\n\tval osReleaseMap = HashMap<String, String>()\n\tif (osReleaseFile.exists()) {\n\t\tosReleaseFile.forEachLine { line ->\n\t\t\tval split = line.split(\"=\")\n\t\t\tosReleaseMap[split[0]] = split[1].removeSurrounding(\"\\\"\")\n\t\t}\n\t}\n\treturn if (osReleaseMap.containsKey(\"PRETTY_NAME\")) {\n\t\tosReleaseMap[\"PRETTY_NAME\"]\n\t} else if (osReleaseMap.containsKey(\"NAME\") && osReleaseMap.containsKey(\"VERSION\")) {\n\t\tosReleaseMap[\"NAME\"] + \" \" + osReleaseMap[\"VERSION\"]\n\t} else {\n\t\t\"\"\n\t}\n}\n", "CodeBleu_score": 33.64586908224128}, {"code": "private fun getLinuxDistro(): String\tval osReleaseFile = File(\"/etc/os-release\")\n\tval osReleaseMap = mutableMapOf<String, String>()\n\tif (osReleaseFile.exists()) {\n\t\tosReleaseFile.forEachLine { line ->\n\t\t\tval split = line.split(\"=\")\n\t\t\tif (split.size == 2) {\n\t\t\t\tosReleaseMap[split[0]] = split[1].replace(\"\\\"\", \"\")\n\t\t\t}\n\t\t}\n\t}\n\treturn if (osReleaseMap.containsKey(\"PRETTY_NAME\")) {\n\t\tosReleaseMap[\"PRETTY_NAME\"]\n\t} else if (osReleaseMap.containsKey(\"NAME\") && osReleaseMap.containsKey(\"VERSION\")) {\n\t\t\"${osReleaseMap[\"NAME\"]} ${osReleaseMap[\"VERSION\"]}\"\n\t} else {\n\t\t\"\"\n\t}\n}\n", "CodeBleu_score": 37.1394675836612}]}
{"instance_id": "36a1d2e56540", "generation_result": [{"code": "private fun flashWindow()\ttry {\n\t\tval window = App.instance.window\n\t\tval windowHandle = window.handle\n\t\tval windowInfo = WindowInfo(windowHandle)\n\t\tval windowInfoClass = Class.forName(\"java.awt.peer.WindowPeer\")\n\t\tval flashWindow = windowInfoClass.getMethod(\"flashWindow\", Int::class.javaPrimitiveType)\n\t\tflashWindow.invoke(windowInfo, 5)\n\t} catch (e: Exception) {\n\t\tlogger.warn(\"Failed to flash window\", e)\n\t}\n}\n", "CodeBleu_score": 29.617699634525568}, {"code": "private fun flashWindow()\ttry {\n\t\tval window = window\n\t\tif (window.isActive) {\n\t\t\twindow.flashFrame(true)\n\t\t}\n\t} catch (e: Exception) {\n\t\tlogger.error(e) { \"Failed to flash window\" }\n\t}\n}\n", "CodeBleu_score": 15.952783960184794}, {"code": "private fun flashWindow()\ttry {\n\t\tval window = SwingUtilities.getWindowAncestor(this)\n\t\tif (window!= null) {\n\t\t\twindow.toFront()\n\t\t\twindow.flash()\n\t\t}\n\t} catch (e: Exception) {\n\t\tlogger.warn(\"Unable to flash window\", e)\n\t}\n}\n", "CodeBleu_score": 29.854064514650545}]}
{"instance_id": "8e3c7096415a", "generation_result": [{"code": "public void onFullBackup(FullBackupDataOutput data)\t// Back up the shared preferences file\n\tFile sharedPrefsFile = new File(getFilesDir(), \"shared_prefs/com.example.game.sharedprefs\");\n\ttry {\n\t\tFileInputStream sharedPrefsStream = new FileInputStream(sharedPrefsFile);\n\t\ttry {\n\t\t\tdata.writeEntityHeader(\"shared_prefs\", \"com.example.game.sharedprefs\");\n\t\t\tdata.writeEntityData(sharedPrefsStream, sharedPrefsFile.length());\n\t\t} finally {\n\t\t\tsharedPrefsStream.close();\n\t\t}\n\t} catch (IOException e) {\n\t\tLog.e(\"Game\", \"Failed to back up shared preferences file\", e);\n\t}\n\n\t// Back up the rankings, badges, and journal entries\n\tFile rankingsDir = new File(getFilesDir(), \"rankings\");\n\tFile[] rankingsFiles = rankingsDir.listFiles();\n\tif (rankingsFiles!= null) {\n\t\tfor (File rankingsFile : rankingsFiles) {\n\t\t\ttry {\n\t\t\t\tFileInputStream rankingsStream = new FileInputStream(rankingsFile);\n\t\t\t\ttry {\n\t\t\t\t\tdata.writeEntityHeader(\"rankings\", rankingsFile.getName());\n\t\t\t\t\tdata.writeEntityData(rankingsStream, rankingsFile.length());\n\t\t\t\t} finally {\n\t\t\t\t\trankingsStream.close();\n\t\t\t\t}\n\t\t\t} catch (IOException e) {\n\t\t\t\tLog.e(\"Game\", \"Failed to back up rankings file\", e);\n\t\t\t}\n\t\t}\n\t}\n\n\tFile badgesDir = new File(getFilesDir(), \"badges\");\n\tFile[] badgesFiles = badgesDir.listFiles();\n\tif (badgesFiles!= null) {\n\t\tfor (File badgesFile : badgesFiles) {\n\t\t\ttry {\n\t\t\t\tFileInputStream badgesStream = new FileInputStream(badgesFile);\n\t\t\t\ttry {\n\t\t\t\t\tdata.writeEntityHeader(\"badges\", badgesFile.getName());\n\t\t\t\t\tdata.writeEntityData(badgesStream, badgesFile.length());\n\t\t\t\t} finally {\n\t\t\t\t\tbadgesStream.close();\n\t\t\t\t}\n\t\t\t} catch (IOException e) {\n\t\t\t\tLog.e(\"Game\", \"Failed to back up badges file\", e);\n\t\t\t}\n\t\t}\n\t}\n\n\tFile journalDir = new File(getFilesDir(), \"journal\");\n\tFile[] journalFiles", "CodeBleu_score": 20.55013531089573}, {"code": "public void onFullBackup(FullBackupDataOutput data)\ttry {\n\t\t// Create a new file called \"my_backup.xml\" in the backup directory\n\t\tFileOutputStream fos = new FileOutputStream(new File(data.getBackupDataLocation(), \"my_backup.xml\"));\n\t\tBufferedOutputStream bos = new BufferedOutputStream(fos);\n\t\tXmlSerializer xml = Xml.newSerializer();\n\t\txml.setOutput(bos, \"utf-8\");\n\n\t\t// Write the XML declaration\n\t\txml.startDocument(\"utf-8\", true);\n\n\t\t// Start the root element\n\t\txml.startTag(null, \"my_backup\");\n\n\t\t// Write the shared preferences\n\t\tSharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);\n\t\txml.startTag(null, \"preferences\");\n\t\tSet<String> keys = prefs.getAll().keySet();\n\t\tfor (String key : keys) {\n\t\t\txml.startTag(null, \"pref\");\n\t\t\txml.attribute(null, \"key\", key);\n\t\t\txml.text(prefs.getString(key, \"\"));\n\t\t\txml.endTag(null, \"pref\");\n\t\t}\n\t\txml.endTag(null, \"preferences\");\n\n\t\t// Write the game data\n\t\txml.startTag(null, \"game_data\");\n\t\tfor (int i = 0; i < 10; i++) {\n\t\t\txml.startTag(null, \"ranking\");\n\t\t\txml.attribute(null, \"rank\", Integer.toString(i));\n\t\t\txml.text(Integer.toString(i));\n\t\t\txml.endTag(null, \"ranking\");\n\t\t}\n\t\txml.endTag(null, \"game_data\");\n\n\t\t// End the root element\n\t\txml.endTag(null, \"my_backup\");\n\n\t\t// Finish writing the XML document\n\t\txml.endDocument();\n\n\t\t// Close the output streams\n\t\tbos.close();\n\t\tfos.close();\n\t} catch (IOException e) {\n\t\tLog.e(\"BackupAgent\", \"Failed to write backup\", e);\n\t}\n}\n", "CodeBleu_score": 16.1512835841463}, {"code": "public void onFullBackup(FullBackupDataOutput data)\ttry {\n\t\tFileOutputStream fos = data.getFileOutputStream(\"shared_prefs/com.supercell.magic.splat.xml\");\n\t\tSharedPreferences sp = getSharedPreferences(\"com.supercell.magic.splat\", Context.MODE_PRIVATE);\n\t\tsp.edit().putBoolean(\"full_backup_done\", true).commit();\n\t\tsp.getAll().writeXml(fos);\n\t\tfos.close();\n\n\t\tFileOutputStream fos2 = data.getFileOutputStream(\"rankings.dat\");\n\t\tFileOutputStream fos3 = data.getFileOutputStream(\"badges.dat\");\n\t\tFileOutputStream fos4 = data.getFileOutputStream(\"journal_entries.dat\");\n\n\t\tif (new File(getFilesDir() + \"/rankings.dat\").exists()) {\n\t\t\tcopyFile(getFilesDir() + \"/rankings.dat\", fos2);\n\t\t}\n\n\t\tif (new File(getFilesDir() + \"/badges.dat\").exists()) {\n\t\t\tcopyFile(getFilesDir() + \"/badges.dat\", fos3);\n\t\t}\n\n\t\tif (new File(getFilesDir() + \"/journal_entries.dat\").exists()) {\n\t\t\tcopyFile(getFilesDir() + \"/journal_entries.dat\", fos4);\n\t\t}\n\n\t\tfos2.close();\n\t\tfos3.close();\n\t\tfos4.close();\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n}\n", "CodeBleu_score": 20.559790743523}]}
{"instance_id": "583999724a15", "generation_result": [{"code": "public boolean connectedToUnmeteredNetwork()\tConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n\tNetworkInfo activeNetwork = cm.getActiveNetworkInfo();\n\tif (activeNetwork!= null && activeNetwork.isConnected()) {\n\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\t\t\treturn!activeNetwork.isActiveNetworkMetered();\n\t\t} else {\n\t\t\treturn (activeNetwork.getType() == ConnectivityManager.TYPE_WIFI || activeNetwork.getType() == ConnectivityManager.TYPE_WIMAX || activeNetwork.getType() == ConnectivityManager.TYPE_BLUETOOTH || activeNetwork.getType() == ConnectivityManager.TYPE_ETHERNET);\n\t\t}\n\t}\n\treturn false;\n}\n", "CodeBleu_score": 68.18331896570507}, {"code": "public boolean connectedToUnmeteredNetwork()\tConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n\tNetworkInfo activeNetwork = cm.getActiveNetworkInfo();\n\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\t\treturn!activeNetwork.isActiveNetworkMetered();\n\t} else {\n\t\treturn (activeNetwork!= null && activeNetwork.isConnected() && activeNetwork.getType() == ConnectivityManager.TYPE_WIFI);\n\t}\n}\n", "CodeBleu_score": 46.34662014112686}, {"code": "public boolean connectedToUnmeteredNetwork()\tConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n\tNetworkInfo activeNetwork = cm.getActiveNetworkInfo();\n\tif (activeNetwork!= null && activeNetwork.isConnected()) {\n\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n\t\t\treturn!activeNetwork.isActiveNetworkMetered();\n\t\t} else {\n\t\t\tint type = activeNetwork.getType();\n\t\t\treturn type == ConnectivityManager.TYPE_WIFI || type == ConnectivityManager.TYPE_WIMAX || type == ConnectivityManager.TYPE_BLUETOOTH || type == ConnectivityManager.TYPE_ETHERNET;\n\t\t}\n\t}\n\treturn false;\n}\n", "CodeBleu_score": 58.71472740479997}]}
{"instance_id": "f8bd6cd4826b", "generation_result": [{"code": "protected boolean affectHero( Hero hero )\tif ( hero.health <= 0 ) {\n\t\thero.health = 1;\n\t\thero.status = Status.OK;\n\t\thero.messageLog.addMessage( new Message( MessageLog.MessageType.INFO, \"You wake up, but are still hurt. You feel a bit better.\" ) );\n\t\treturn true;\n\t}\n\n\tif ( hero.status == Status.OK ) {\n\t\thero.messageLog.addMessage( new Message( MessageLog.MessageType.INFO, \"You are feeling well.\" ) );\n\t\treturn true;\n\t}\n\n\tif ( hero.status == Status.POISONED ) {\n\t\thero.status = Status.OK;\n\t\thero.messageLog.addMessage( new Message( MessageLog.MessageType.INFO, \"You feel better now.\" ) );\n\t\treturn true;\n\t}\n\n\tif ( hero.status == Status.PARALYZED ) {\n\t\thero.status = Status.OK;\n\t\thero.messageLog.addMessage( new Message( MessageLog.MessageType.INFO, \"You feel a bit less paralyzed now.\" ) );\n\t\treturn true;\n\t}\n\n\tif ( hero.status == Status.ASLEEP ) {\n\t\thero.status = Status.OK;\n\t\thero.messageLog.addMessage( new Message( MessageLog.MessageType.INFO, \"You wake up, but are still hurt. You feel a bit better.\" ) );\n\t\treturn true;\n\t}\n\n\tif ( hero.status == Status.CONFUSED ) {\n\t\thero.status = Status.OK;\n\t\thero.messageLog.addMessage( new Message( MessageLog.MessageType.INFO, \"You feel a bit less confused now.\" ) );\n\t\treturn true;\n\t}\n\n\tif ( hero.status == Status.FROZEN ) {\n\t\thero.status = Status.OK;\n\t\thero.messageLog.addMessage( new Message( MessageLog.MessageType.INFO, \"You feel a bit less frozen now.\" ) );\n\t\treturn true;\n\t}\n\n\tif ( hero.status == Status.STONED ) {\n\t\thero.status = Status.OK;\n\t\thero.messageLog.addMessage( new Message( MessageLog.MessageType.INFO, \"You feel a bit less stoned now.\" ) );\n\t\treturn true;\n\t}\n\n", "CodeBleu_score": 28.044222569430154}, {"code": "protected boolean affectHero( Hero hero )\tif ( hero.isDead() ) {\n\t\treturn false;\n\t}\n\n\thero.setHunger( hero.getHunger() + 1 );\n\thero.setHealth( hero.getHealth() + 1 );\n\thero.setAilment( Ailment.NONE );\n\thero.setCurse( Curse.NONE );\n\n\thero.setLastAction( Action.NONE );\n\thero.setLastActionMessage( \"The hero is feeling well.\" );\n\n\thero.setPoison( 0 );\n\thero.setParalysis( 0 );\n\thero.setSleep( 0 );\n\n\thero.setStrength( hero.getStrength() + 1 );\n\thero.setDexterity( hero.getDexterity() + 1 );\n\thero.setConstitution( hero.getConstitution() + 1 );\n\thero.setIntelligence( hero.getIntelligence() + 1 );\n\thero.setWisdom( hero.getWisdom() + 1 );\n\thero.setCharisma( hero.getCharisma() + 1 );\n\n\thero.setExperience( hero.getExperience() + 1 );\n\n\thero.setGold( hero.getGold() + 1 );\n\n\thero.setLastAction( Action.NONE );\n\thero.setLastActionMessage( \"The hero is feeling well.\" );\n\n\thero.setPoison( 0 );\n\thero.setParalysis( 0 );\n\thero.setSleep( 0 );\n\n\thero.setStrength( hero.getStrength() + 1 );\n\thero.setDexterity( hero.getDexterity() + 1 );\n\thero.setConstitution( hero.getConstitution() + 1 );\n\thero.setIntelligence( hero.getIntelligence() + 1 );\n\thero.setWisdom( hero.getWisdom() + 1 );\n\thero.setCharisma( hero.getCharisma() + 1 );\n\n\thero.setExperience( hero.getExperience() + 1 );\n\n\thero.setGold( hero.getGold() + 1 );\n\n\thero.setLastAction( Action.NONE );\n\thero.setLastActionMessage( \"The hero is feeling well.\"", "CodeBleu_score": 35.68301480878253}, {"code": "protected boolean affectHero( Hero hero )\tif ( hero.isAlive() ) {\n\t\thero.setHealth( hero.getHealthMaximum() );\n\t\thero.setAilment( Ailment.NONE );\n\t\thero.setHunger( 0 );\n\t\thero.setFatigue( 0 );\n\t\thero.setPoison( 0 );\n\t\thero.setGold( 0 );\n\t\thero.setExperience( 0 );\n\t\thero.setGainedGold( 0 );\n\t\thero.setGainedExperience( 0 );\n\t\thero.setGainedItems( 0 );\n\t\thero.setGainedWeapons( 0 );\n\t\thero.setGainedArmor( 0 );\n\t\thero.setGainedPotions( 0 );\n\t\thero.setGainedScrolls( 0 );\n\t\thero.setGainedSpells( 0 );\n\t\thero.setGainedRings( 0 );\n\t\thero.setGainedAmulets( 0 );\n\t\thero.setGainedKeys( 0 );\n\t\thero.setGainedQuestItems( 0 );\n\t\thero.setGainedGold( 0 );\n\t\thero.setGainedExperience( 0 );\n\t\thero.setGainedItems( 0 );\n\t\thero.setGainedWeapons( 0 );\n\t\thero.setGainedArmor( 0 );\n\t\thero.setGainedPotions( 0 );\n\t\thero.setGainedScrolls( 0 );\n\t\thero.setGainedSpells( 0 );\n\t\thero.setGainedRings( 0 );\n\t\thero.setGainedAmulets( 0 );\n\t\thero.setGainedKeys( 0 );\n\t\thero.setGainedQuestItems( 0 );\n\t\thero.setGainedGold( 0 );\n\t\thero.setGainedExperience( 0 );\n\t\thero.setGainedItems( 0 );\n\t\thero.setGainedWeapons( 0 );\n\t\thero.setGainedArmor( 0 );\n\t\thero.setGainedPotions( 0 );\n\t\thero.setGainedScrolls( 0 );\n\t\thero.setGainedSpells( 0 );\n\t\thero.setGainedRings( 0 );\n\t", "CodeBleu_score": 32.17041259105387}]}
{"instance_id": "3a94f2e84c83", "generation_result": [{"code": "protected Item affectItem( Item item, int pos )\t// Waterskin\n\tif ( item.type == ItemType.WATER_SKIN ) {\n\t\tif ( item.state == ItemState.FULL ) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\titem.state = ItemState.FULL;\n\t\t\tGdx.app.postRunnable( new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tplaySound( Sound.ITEM_FULL_WATER_SKIN );\n\t\t\t\t}\n\t\t\t} );\n\t\t\treturn item;\n\t\t}\n\t}\n\n\t// Ankh\n\tif ( item.type == ItemType.ANKH ) {\n\t\tif ( item.state == ItemState.BLESSED ) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\titem.state = ItemState.BLESSED;\n\t\t\tGdx.app.postRunnable( new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tplaySound( Sound.ITEM_BLESSED_ANKH );\n\t\t\t\t}\n\t\t\t} );\n\t\t\treturn item;\n\t\t}\n\t}\n\n\t// Uncursed\n\tif ( item.cursed ) {\n\t\titem.cursed = false;\n\t\tGdx.app.postRunnable( new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tplaySound( Sound.ITEM_REMOVE_CURSE );\n\t\t\t}\n\t\t} );\n\t\treturn item;\n\t}\n\n\treturn null;\n}\n\n", "CodeBleu_score": 36.80656504524914}, {"code": "protected Item affectItem( Item item, int pos )\t// If the item is a waterskin and not full, fill it to the brim.\n\tif( item.getType() == ItemType.WATERSKIN && item.getState() < WATERSKIN_FULL ) {\n\t\titem.setState( WATERSKIN_FULL );\n\t\tgame.getAudio().playEffect( \"fill_waterskin\" );\n\t\treturn item;\n\t}\n\t// If the item is an ankh and not blessed, bless it.\n\tif( item.getType() == ItemType.ANKH && item.getState() < ANKH_BLESSED ) {\n\t\titem.setState( ANKH_BLESSED );\n\t\tgame.getAudio().playEffect( \"bless_ankh\" );\n\t\treturn item;\n\t}\n\t// If the item is cursed, remove its curse.\n\tif( item.isCursed() ) {\n\t\titem.setCursed( false );\n\t\tgame.getAudio().playEffect( \"remove_curse\" );\n\t\treturn item;\n\t}\n\treturn null;\n}\n", "CodeBleu_score": 39.68753121618182}, {"code": "protected Item affectItem( Item item, int pos )\tif ( item == null ) return null;\n\tif ( item.type == ItemType.ANCHOR ) {\n\t\tif (!Gdx.input.isKeyPressed( Input.Keys.SHIFT_LEFT ) ) {\n\t\t\tif (!item.bless() ) {\n\t\t\t\tGdx.app.log( \"GameScreen\", \"Ankh not blessed\" );\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t} else if ( item.type == ItemType.WATERSKIN ) {\n\t\tif (!Gdx.input.isKeyPressed( Input.Keys.SHIFT_LEFT ) ) {\n\t\t\tif (!item.fill( this.waterskin ) ) {\n\t\t\t\tGdx.app.log( \"GameScreen\", \"Waterskin not filled\" );\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t} else if ( item.type == ItemType.CURSED_ITEM ) {\n\t\tif (!Gdx.input.isKeyPressed( Input.Keys.SHIFT_LEFT ) ) {\n\t\t\tif (!item.removeCurse() ) {\n\t\t\t\tGdx.app.log( \"GameScreen\", \"Cursed item not removed\" );\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t} else if ( item.type == ItemType.SCROLL ) {\n\t\tif (!Gdx.input.isKeyPressed( Input.Keys.SHIFT_LEFT ) ) {\n\t\t\tif (!item.use( this ) ) {\n\t\t\t\tGdx.app.log( \"GameScreen\", \"Scroll not used\" );\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\treturn item;\n}\n", "CodeBleu_score": 23.970347329804625}]}
{"instance_id": "d322228d1a3e", "generation_result": [{"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls)\t// Apply the buff to the enemy\n\tenemy.addBuff(buffCls);\n\t// Check if the enemy was aligned as an enemy\n\tif (enemy.alignment.isEnemy()) {\n\t\t// Roll for loot\n\t\tif (MathUtils.randomBoolean(LootTable.getDropRate(hero.level))) {\n\t\t\t// If the enemy was killed by the buff, update the kill count\n\t\t\tif (enemy.isDead()) {\n\t\t\t\thero.kills++;\n\t\t\t}\n\t\t\t// If the hero is a Monk, give them additional energy\n\t\t\tif (hero instanceof Monk) {\n\t\t\t\t((Monk) hero).giveEnergy();\n\t\t\t}\n\t\t\t// If the hero is a Priest, give them additional health\n\t\t\tif (hero instanceof Priest) {\n\t\t\t\t((Priest) hero).giveHealth();\n\t\t\t}\n\t\t\t// If the hero is a Barbarian, give them additional health\n\t\t\tif (hero instanceof Barbarian) {\n\t\t\t\t((Barbarian) hero).giveHealth();\n\t\t\t}\n\t\t\t// If the hero is a Druid, give them additional health\n\t\t\tif (hero instanceof Druid) {\n\t\t\t\t((Druid) hero).giveHealth();\n\t\t\t}\n\t\t\t// If the hero is a Sorceress, give them additional health\n\t\t\tif (hero instanceof Sorceress) {\n\t\t\t\t((Sorceress) hero).giveHealth();\n\t\t\t}\n\t\t\t// If the hero is a Necromancer, give them additional health\n\t\t\tif (hero instanceof Necromancer) {\n\t\t\t\t((Necromancer) hero).giveHealth();\n\t\t\t}\n\t\t\t// If the hero is a Paladin, give them additional health\n\t\t\tif (hero instanceof Paladin) {\n\t\t\t\t((Paladin) hero).giveHealth();\n\t\t\t}\n\t\t\t// If the hero is a Assassin, give them additional health\n\t\t\tif (hero instanceof Assassin) {\n\t\t\t\t((Assassin) hero).giveHealth();\n\t\t\t}\n\t\t\t// If the hero is a Ranger, give them additional health\n\t\t\tif (hero instanceof Ranger) {\n\t\t\t\t((Ranger) hero).giveHealth();\n\t\t\t}\n\t\t\t// If the hero is a Knight, give them additional health\n\t\t\tif (hero instanceof Knight) {\n\t\t\t\t((Knight) hero).giveHealth", "CodeBleu_score": 22.92352695593832}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls)\tAllyBuff buff = buffCls.newInstance();\n\tenemy.addBuff(buff);\n\tif (enemy.alignment == Alignment.ENEMY) {\n\t\tint roll = Dice.d6();\n\t\tif (roll == 6) {\n\t\t\tenemy.alignment = Alignment.ALLY;\n\t\t\thero.kills++;\n\t\t\tif (hero.kills % 10 == 0) {\n\t\t\t\thero.ascensionLevel++;\n\t\t\t\thero.ascensionXP += hero.ascensionLevel * 100;\n\t\t\t\thero.ascensionXP -= hero.ascensionLevel * 50;\n\t\t\t\thero.ascensionXP -= hero.ascensionLevel * 50;\n\t\t\t\thero.ascensionXP -= hero.ascensionLevel * 50;\n\t\t\t\thero.ascensionXP -= hero.ascensionLevel * 50;\n\t\t\t\thero.ascensionXP -= hero.ascensionLevel * 50;\n\t\t\t\thero.ascensionXP -= hero.ascensionLevel * 50;\n\t\t\t\thero.ascensionXP -= hero.ascensionLevel * 50;\n\t\t\t\thero.ascensionXP -= hero.ascensionLevel * 50;\n\t\t\t\thero.ascensionXP -= hero.ascensionLevel * 50;\n\t\t\t\thero.ascensionXP -= hero.ascensionLevel * 50;\n\t\t\t\thero.ascensionXP -= hero.ascensionLevel * 50;\n\t\t\t\thero.ascensionXP -= hero.ascensionLevel * 50;\n\t\t\t\thero.ascensionXP -= hero.ascensionLevel * 50;\n\t\t\t\thero.ascensionXP -= hero.ascensionLevel * 50;\n\t\t\t\thero.ascensionXP -= hero.ascensionLevel * 50;\n\t\t\t\thero.ascensionXP -= hero.ascensionLevel * 50;\n\t\t\t\thero.ascensionXP -= hero.ascensionLevel * 50;\n\t\t\t\thero.ascensionXP -= hero.ascensionLevel * 50;\n\t\t\t\thero.ascensionXP -= hero.ascensionLevel * 50;\n\t\t\t\thero.ascensionXP -= hero.ascensionLevel * 50;\n\t\t\t\thero.ascensionXP -= hero.ascensionLevel * 50;\n\t\t\t\thero.ascensionXP -= hero.ascensionLevel * 50", "CodeBleu_score": 26.725728329172828}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls)\tAllyBuff buff = buffCls.newInstance();\n\tenemy.addBuff(buff);\n\tif (enemy.isEnemy()) {\n\t\tif (enemy.isBoss()) {\n\t\t\thero.getKillStats().incrementBossKills();\n\t\t} else {\n\t\t\thero.getKillStats().incrementKills();\n\t\t}\n\t\tif (hero.getLevel() < enemy.getLevel()) {\n\t\t\thero.gainExp(enemy.getLevel() - hero.getLevel());\n\t\t}\n\t\tif (hero instanceof Monk) {\n\t\t\thero.addEnergy(1);\n\t\t}\n\t\tif (hero.getLevel() >= 20) {\n\t\t\thero.getKillStats().incrementAscensionChallengesCompleted();\n\t\t}\n\t}\n}\n", "CodeBleu_score": 21.86844038166161}]}
{"instance_id": "9ee21c0149f3", "generation_result": [{"code": "public static void processEnemyKill(Char enemy)\n\tif (AscensionChallenge.isActive()) {\n\t\tif (enemy.isEnemy()) {\n\t\t\tif (enemy.hasEffect(\"AscensionChallenge\")) {\n\t\t\t\tif (AscensionChallenge.isBoosted()) {\n\t\t\t\t\tAscensionChallenge.setBoosted(false);\n\t\t\t\t\tAscensionChallenge.update();\n\t\t\t\t} else {\n\t\t\t\t\tif (enemy.getEnemyType() == EnemyType.BOSS) {\n\t\t\t\t\t\tAscensionChallenge.setStacks(AscensionChallenge.getStacks() - 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tAscensionChallenge.setStacks(AscensionChallenge.getStacks() - 2);\n\t\t\t\t\t}\n\t\t\t\t\tif (AscensionChallenge.getStacks() < AscensionChallenge.getStacksThreshold()) {\n\t\t\t\t\t\tAscensionChallenge.setStacksThreshold(AscensionChallenge.getStacksThreshold() - 1);\n\t\t\t\t\t\tAscensionChallenge.setStacks(AscensionChallenge.getStacks() - 1);\n\t\t\t\t\t\tAscensionChallenge.update();\n\t\t\t\t\t\tAscensionChallenge.log(\"Weakening message\");\n\t\t\t\t\t}\n\t\t\t\t\tif (AscensionChallenge.getStacks() == 0) {\n\t\t\t\t\t\tAscensionChallenge.deactivate();\n\t\t\t\t\t}\n\t\t\t\t\tif (AscensionChallenge.getStacks() == AscensionChallenge.getMaxStacks()) {\n\t\t\t\t\t\tAscensionChallenge.setExperience(AscensionChallenge.getExperience() + 1);\n\t\t\t\t\t\tAscensionChallenge.update();\n\t\t\t\t\t\tAscensionChallenge.log(\"Ascension Challenge experience gained\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n", "CodeBleu_score": 15.375904723818826}, {"code": "public static void processEnemyKill(Char enemy)\n\tif (enemy == null) {\n\t\treturn;\n\t}\n\tif (AscensionChallenge.isAscensionChallengeActive()) {\n\t\tif (enemy.isChampion()) {\n\t\t\tAscensionChallenge.setAscensionChallengeActive(false);\n\t\t\tAscensionChallenge.setAscensionChallengeFailed(true);\n\t\t\tAscensionChallenge.setAscensionChallengeFailedMessage(MessageBundle.getMessage(\"ASCENSION_CHALLENGE_FAILED_CHAMPION\"));\n\t\t\tAscensionChallenge.setAscensionChallengeFailedMessage2(MessageBundle.getMessage(\"ASCENSION_CHALLENGE_FAILED_CHAMPION_2\"));\n\t\t}\n\t\telse if (enemy.isMinion()) {\n\t\t\tAscensionChallenge.setAscensionChallengeActive(false);\n\t\t\tAscensionChallenge.setAscensionChallengeFailed(true);\n\t\t\tAscensionChallenge.setAscensionChallengeFailedMessage(MessageBundle.getMessage(\"ASCENSION_CHALLENGE_FAILED_MINION\"));\n\t\t\tAscensionChallenge.setAscensionChallengeFailedMessage2(MessageBundle.getMessage(\"ASCENSION_CHALLENGE_FAILED_MINION_2\"));\n\t\t}\n\t\telse if (enemy.isBoss()) {\n\t\t\tAscensionChallenge.setAscensionChallengeActive(false);\n\t\t\tAscensionChallenge.setAscensionChallengeFailed(true);\n\t\t\tAscensionChallenge.setAscensionChallengeFailedMessage(MessageBundle.getMessage(\"ASCENSION_CHALLENGE_FAILED_BOSS\"));\n\t\t\tAscensionChallenge.setAscensionChallengeFailedMessage2(MessageBundle.getMessage(\"ASCENSION_CHALLENGE_FAILED_BOSS_2\"));\n\t\t}\n\t\telse if (enemy.isBoss()) {\n\t\t\tAscensionChallenge.setAscensionChallengeActive(false);\n\t\t\tAscensionChallenge.setAscensionChallengeFailed(true);\n\t\t\tAscensionChallenge.setAscensionChallengeFailedMessage(MessageBundle.getMessage(\"ASCENSION_CHALLENGE_FAILED_BOSS\"));\n\t\t\tAscensionChallenge.setAscensionChallengeFailedMessage2(MessageBundle.getMessage(\"ASCENSION_CHALLENGE_FAILED_BOSS_2\"));\n\t\t}\n\t\telse if (enemy.isTransformable()) {\n\t\t\tif (AscensionChallenge.isAscensionChallengeBoosted()) {\n\t\t\t\tAscensionChallenge.setAscensionChallengeBoosted(false);\n\t\t\t\tAscensionChallenge.set", "CodeBleu_score": 14.097469917306832}, {"code": "public static void processEnemyKill(Char enemy)\n\tif (AscensionChallenge.isActive()) {\n\t\tint enemyType = enemy.getEnemyType();\n\t\tif (enemyType == EnemyType.BOSS) {\n\t\t\tif (AscensionChallenge.isBoosted()) {\n\t\t\t\tAscensionChallenge.setBoosted(false);\n\t\t\t\tAscensionChallenge.setStacks(AscensionChallenge.getStacks() - 1);\n\t\t\t}\n\t\t} else if (enemyType == EnemyType.SKULL) {\n\t\t\tif (AscensionChallenge.isBoosted()) {\n\t\t\t\tAscensionChallenge.setBoosted(false);\n\t\t\t\tAscensionChallenge.setStacks(AscensionChallenge.getStacks() - 1);\n\t\t\t}\n\t\t} else if (enemyType == EnemyType.SPIDER) {\n\t\t\tif (AscensionChallenge.isBoosted()) {\n\t\t\t\tAscensionChallenge.setBoosted(false);\n\t\t\t\tAscensionChallenge.setStacks(AscensionChallenge.getStacks() - 1);\n\t\t\t}\n\t\t} else if (enemyType == EnemyType.BAT) {\n\t\t\tif (AscensionChallenge.isBoosted()) {\n\t\t\t\tAscensionChallenge.setBoosted(false);\n\t\t\t\tAscensionChallenge.setStacks(AscensionChallenge.getStacks() - 1);\n\t\t\t}\n\t\t} else if (enemyType == EnemyType.CRAB) {\n\t\t\tif (AscensionChallenge.isBoosted()) {\n\t\t\t\tAscensionChallenge.setBoosted(false);\n\t\t\t\tAscensionChallenge.setStacks(AscensionChallenge.getStacks() - 1);\n\t\t\t}\n\t\t} else if (enemyType == EnemyType.SCORPION) {\n\t\t\tif (AscensionChallenge.isBoosted()) {\n\t\t\t\tAscensionChallenge.setBoosted(false);\n\t\t\t\tAscensionChallenge.setStacks(AscensionChallenge.getStacks() - 1);\n\t\t\t}\n\t\t} else if (enemyType == EnemyType.SKELETON) {\n\t\t\tif (AscensionChallenge.isBoosted()) {\n\t\t\t\tAscensionChallenge.setBoosted(false);\n\t\t\t\tAscensionChallenge.setStacks(AscensionChallenge.getStacks() - 1);\n\t\t\t}\n\t\t} else if (enemyType == EnemyType.GHOST) {\n\t\t\tif (AscensionChallenge.is", "CodeBleu_score": 16.734740390458384}]}
{"instance_id": "4fc9c3c1fcce", "generation_result": [{"code": "public static int AscensionCorruptResist(Mob m)\tif (m.HasBuff(BuffID.OnFire)) {\n\t\treturn m.GetMaxHealth();\n\t}\n\tif (m.HasBuff(BuffID.OnFire2)) {\n\t\treturn m.GetMaxHealth();\n\t}\n\tif (m.HasBuff(BuffID.OnFire3)) {\n\t\treturn m.GetMaxHealth();\n\t}\n\tif (m.HasBuff(BuffID.OnFire4)) {\n\t\treturn m.GetMaxHealth();\n\t}\n\tif (m.HasBuff(BuffID.OnFire5)) {\n\t\treturn m.GetMaxHealth();\n\t}\n\tif (m.HasBuff(BuffID.OnFire6)) {\n\t\treturn m.GetMaxHealth();\n\t}\n\tif (m.HasBuff(BuffID.OnFire7)) {\n\t\treturn m.GetMaxHealth();\n\t}\n\tif (m.HasBuff(BuffID.OnFire8)) {\n\t\treturn m.GetMaxHealth();\n\t}\n\tif (m.HasBuff(BuffID.OnFire9)) {\n\t\treturn m.GetMaxHealth();\n\t}\n\tif (m.HasBuff(BuffID.OnFire10)) {\n\t\treturn m.GetMaxHealth();\n\t}\n\tif (m.HasBuff(BuffID.OnFire11)) {\n\t\treturn m.GetMaxHealth();\n\t}\n\tif (m.HasBuff(BuffID.OnFire12)) {\n\t\treturn m.GetMaxHealth();\n\t}\n\tif (m.HasBuff(BuffID.OnFire13)) {\n\t\treturn m.GetMaxHealth();\n\t}\n\tif (m.HasBuff(BuffID.OnFire14)) {\n\t\treturn m.GetMaxHealth();\n\t}\n\tif (m.HasBuff(BuffID.OnFire15)) {\n\t\treturn m.GetMaxHealth();\n\t}\n\tif (m.HasBuff(BuffID.OnFire16)) {\n\t\treturn m.GetMaxHealth();\n\t}\n\tif (m.HasBuff(BuffID.OnFire17)) {\n\t\treturn m.GetMaxHealth();\n\t}\n\tif (m.HasBuff(BuffID.On", "CodeBleu_score": 18.594089986489156}, {"code": "public static int AscensionCorruptResist(Mob m)\tif (m.hasEffect(MobEffects.SNARED)) {\n\t\treturn m.getExperience();\n\t}\n\tif (m.hasEffect(MobEffects.BLINDNESS)) {\n\t\treturn m.getExperience();\n\t}\n\tif (m.hasEffect(MobEffects.WEAKNESS)) {\n\t\treturn m.getExperience();\n\t}\n\tif (m.hasEffect(MobEffects.POISON)) {\n\t\treturn m.getExperience();\n\t}\n\tif (m.hasEffect(MobEffects.WITHER)) {\n\t\treturn m.getExperience();\n\t}\n\tif (m.hasEffect(MobEffects.HUNGER)) {\n\t\treturn m.getExperience();\n\t}\n\tif (m.hasEffect(MobEffects.HASTE)) {\n\t\treturn m.getExperience();\n\t}\n\tif (m.hasEffect(MobEffects.MINING_FATIGUE)) {\n\t\treturn m.getExperience();\n\t}\n\tif (m.hasEffect(MobEffects.NAUSEA)) {\n\t\treturn m.getExperience();\n\t}\n\tif (m.hasEffect(MobEffects.BLINDNESS)) {\n\t\treturn m.getExperience();\n\t}\n\tif (m.hasEffect(MobEffects.WEAKNESS)) {\n\t\treturn m.getExperience();\n\t}\n\tif (m.hasEffect(MobEffects.POISON)) {\n\t\treturn m.getExperience();\n\t}\n\tif (m.hasEffect(MobEffects.WITHER)) {\n\t\treturn m.getExperience();\n\t}\n\tif (m.hasEffect(MobEffects.HUNGER)) {\n\t\treturn m.getExperience();\n\t}\n\tif (m.hasEffect(MobEffects.HASTE)) {\n\t\treturn m.getExperience();\n\t}\n\tif (m.hasEffect(MobEffects.MINING_FATIGUE)) {\n\t\treturn m.getExperience();\n\t}\n\tif (m.hasEffect(MobEffects.NAUSEA)) {\n\t\treturn m.getExperience();\n\t}\n\tif (m.hasEffect(MobEffects.BLINDNESS)) {\n\t\treturn m.getExperience();\n\t}\n\tif (m", "CodeBleu_score": 22.77053419489741}, {"code": "public static int AscensionCorruptResist(Mob m)\tif (m.hasBuff(\"Ascension\")) {\n\t\treturn m.getBuff(\"Ascension\").getVal();\n\t}\n\tif (m.hasBuff(\"Ascension_Transform\")) {\n\t\treturn m.getBuff(\"Ascension_Transform\").getVal();\n\t}\n\tif (m.hasBuff(\"Ascension_Transform_Buff\")) {\n\t\treturn m.getBuff(\"Ascension_Transform_Buff\").getVal();\n\t}\n\tif (m.hasBuff(\"Ascension_Buff\")) {\n\t\treturn m.getBuff(\"Ascension_Buff\").getVal();\n\t}\n\tif (m.hasBuff(\"Ascension_Block\")) {\n\t\treturn m.getEXP();\n\t}\n\tif (m.hasBuff(\"Ascension_Block_Buff\")) {\n\t\treturn m.getEXP();\n\t}\n\tif (m.hasBuff(\"Ascension_Block_Buff_2\")) {\n\t\treturn m.getEXP();\n\t}\n\tif (m.hasBuff(\"Ascension_Block_Buff_3\")) {\n\t\treturn m.getEXP();\n\t}\n\tif (m.hasBuff(\"Ascension_Block_Buff_4\")) {\n\t\treturn m.getEXP();\n\t}\n\tif (m.hasBuff(\"Ascension_Block_Buff_5\")) {\n\t\treturn m.getEXP();\n\t}\n\tif (m.hasBuff(\"Ascension_Block_Buff_6\")) {\n\t\treturn m.getEXP();\n\t}\n\tif (m.hasBuff(\"Ascension_Block_Buff_7\")) {\n\t\treturn m.getEXP();\n\t}\n\tif (m.hasBuff(\"Ascension_Block_Buff_8\")) {\n\t\treturn m.getEXP();\n\t}\n\tif (m.hasBuff(\"Ascension_Block_Buff_9\")) {\n\t\treturn m.getEXP();\n\t}\n\tif (m.hasBuff(\"Ascension_Block_Buff_10\")) {\n\t\treturn m.getEXP();\n\t}\n\tif (m.hasBuff(\"Ascension_Block_Buff_11\")) {\n\t\treturn m.getEXP();\n\t}\n\tif (m.hasBuff(\"Ascension_Block_Buff_12\")) {\n\t", "CodeBleu_score": 16.201436732506558}]}
{"instance_id": "bdc8df5952c7", "generation_result": [{"code": "public void hit( Char enemy )\t// Increment combo count\n\tif (!isComboValid( enemy ) ) {\n\t\tcomboCount = 0;\n\t}\n\tcomboCount++;\n\n\t// Set combo timer\n\tif ( enemy.isDead() || ( enemy.hasBuff( Buff.Type.CORRUPTION ) && enemy.getBuff( Buff.Type.CORRUPTION ).getDuration() == enemy.getBuff( Buff.Type.CORRUPTION ).getMaxDuration() ) ) {\n\t\tif ( cleaveLevel == 0 ) {\n\t\t\tcomboTimer = 0.2f;\n\t\t} else if ( cleaveLevel == 1 ) {\n\t\t\tcomboTimer = 0.3f;\n\t\t} else if ( cleaveLevel == 2 ) {\n\t\t\tcomboTimer = 0.4f;\n\t\t} else if ( cleaveLevel == 3 ) {\n\t\t\tcomboTimer = 0.5f;\n\t\t} else if ( cleaveLevel == 4 ) {\n\t\t\tcomboTimer = 0.6f;\n\t\t} else if ( cleaveLevel == 5 ) {\n\t\t\tcomboTimer = 0.7f;\n\t\t} else if ( cleaveLevel == 6 ) {\n\t\t\tcomboTimer = 0.8f;\n\t\t} else if ( cleaveLevel == 7 ) {\n\t\t\tcomboTimer = 0.9f;\n\t\t} else if ( cleaveLevel == 8 ) {\n\t\t\tcomboTimer = 1.0f;\n\t\t} else if ( cleaveLevel == 9 ) {\n\t\t\tcomboTimer = 1.1f;\n\t\t} else if ( cleaveLevel == 10 ) {\n\t\t\tcomboTimer = 1.2f;\n\t\t} else if ( cleaveLevel == 11 ) {\n\t\t\tcomboTimer = 1.3f;\n\t\t} else if ( cleaveLevel == 12 ) {\n\t\t\tcomboTimer = 1.4f;\n\t\t} else if ( cleaveLevel == 13 ) {\n\t\t\tcomboTimer = 1.5f;\n\t\t} else if ( cleaveLevel == 14 ) {\n\t\t\tcomboTimer = 1.6f;\n\t\t} else if ( cleaveLevel == 15 ) {\n\t\t\tcomboTimer = 1.7f;\n\t\t} else", "CodeBleu_score": 27.56009353927179}, {"code": "public void hit( Char enemy )\tif ( enemy.isDead() ) {\n\t\treturn;\n\t}\n\n\tif ( enemy.hasBuff( Char.BuffType.CORRUPTION ) ) {\n\t\tBuff corruption = enemy.getBuff( Char.BuffType.CORRUPTION );\n\t\tif ( corruption.getDuration() == 0 ) {\n\t\t\t// Corruption is already at full health, so we can extend the combo timer.\n\t\t\t// This is the only way combo time can be extended when the enemy is dead.\n\t\t\t// The combo timer is extended by 100% of the player's talent points in Cleave.\n\t\t\t// The combo timer is also extended by 100% of the player's talent points in Cleave.\n\t\t\t// The combo timer is also extended by 100% of the player's talent points in Cleave.\n\t\t\t// The combo timer is also extended by 100% of the player's talent points in Cleave.\n\t\t\t// The combo timer is also extended by 100% of the player's talent points in Cleave.\n\t\t\t// The combo timer is also extended by 100% of the player's talent points in Cleave.\n\t\t\t// The combo timer is also extended by 100% of the player's talent points in Cleave.\n\t\t\t// The combo timer is also extended by 100% of the player's talent points in Cleave.\n\t\t\t// The combo timer is also extended by 100% of the player's talent points in Cleave.\n\t\t\t// The combo timer is also extended by 100% of the player's talent points in Cleave.\n\t\t\t// The combo timer is also extended by 100% of the player's talent points in Cleave.\n\t\t\t// The combo timer is also extended by 100% of the player's talent points in Cleave.\n\t\t\t// The combo timer is also extended by 100% of the player's talent points in Cleave.\n\t\t\t// The combo timer is also extended by 100% of the player's talent points in Cleave.\n\t\t\t// The combo timer is also extended by 100% of the player's talent points in Cleave.\n\t\t\t// The combo timer is also extended by 10", "CodeBleu_score": 15.519275460396079}, {"code": "public void hit( Char enemy )\t// If the enemy is dead, do nothing\n\tif ( enemy.isDead() ) {\n\t\treturn;\n\t}\n\n\t// If the enemy has a Corruption buff with full health, extend the combo timer\n\tif ( enemy.hasBuff( Corruption.class ) && enemy.getBuff( Corruption.class ).getDuration() > 0 ) {\n\t\tint cleaveComboExtension = 100 * player.getTalentPointsInTree( Talent.CLEAVE ) / 10;\n\t\tif ( cleaveComboExtension > 0 ) {\n\t\t\tcomboTimer.extend( cleaveComboExtension );\n\t\t}\n\t}\n\n\t// Increment the combo count\n\tcomboCount++;\n\n\t// If the enemy is a boss, do nothing\n\tif ( enemy.isBoss() ) {\n\t\treturn;\n\t}\n\n\t// If the enemy has a Mastery buff, check if it's a valid combo\n\tif ( enemy.hasBuff( Mastery.class ) ) {\n\t\tMastery mastery = enemy.getBuff( Mastery.class );\n\t\tif ( mastery.checkValidCombo( enemy ) ) {\n\t\t\t// If the combo is valid, set the combo timer to the initial combo time\n\t\t\tcomboTimer.set( mastery.getInitialComboTime() );\n\t\t}\n\t}\n\n\t// If the enemy has a Shockwave buff, trigger the action indicator\n\tif ( enemy.hasBuff( Shockwave.class ) ) {\n\t\tShockwave shockwave = enemy.getBuff( Shockwave.class );\n\t\tshockwave.triggerActionIndicator( enemy );\n\t}\n\n\t// If the enemy has a Rally buff, trigger the action indicator\n\tif ( enemy.hasBuff( Rally.class ) ) {\n\t\tRally rally = enemy.getBuff( Rally.class );\n\t\trally.triggerActionIndicator( enemy );\n\t}\n\n\t// If the enemy has a Disorient buff, trigger the action indicator\n\tif ( enemy.hasBuff( Disorient.class ) ) {\n\t\tDisorient disorient = enemy.getBuff( Disorient.class );\n\t\tdisorient.triggerActionIndicator( enemy );\n\t}\n\n\t// If the enemy has a Corruption buff, trigger the action indicator\n\t", "CodeBleu_score": 30.333741486890663}]}
{"instance_id": "abf7c664b4dd", "generation_result": [{"code": "public int capacity()\treturn base_capacity + inventory.size() - (has_secondary_weapon? 1 : 0);\n}\n", "CodeBleu_score": 5.7762733020630215}, {"code": "public int capacity()\tint capacity = baseCapacity;\n\tfor (BagItem item : inventory) {\n\t\tcapacity += item.capacity();\n\t}\n\tif (equippedWeapon!= null) {\n\t\tcapacity -= equippedWeapon.capacity();\n\t}\n\treturn capacity;\n}\n", "CodeBleu_score": 19.066628151629196}, {"code": "public int capacity()\tint capacity = baseCapacity;\n\tfor (BagItem bagItem : inventory) {\n\t\tcapacity += bagItem.getCapacity();\n\t}\n\tif (equippedWeapon!= null) {\n\t\tcapacity -= equippedWeapon.getCapacity();\n\t}\n\treturn capacity;\n}\n", "CodeBleu_score": 15.144036679552093}]}
{"instance_id": "b97e41e092d2", "generation_result": [{"code": "public void updateHT( boolean boostHP )\tint newHT = (intodeBleu_score": 3.059924855864992}, {"code": "public void updateHT( boolean boostHP )\tint newHT = (int) Math.floor( ( ( 2.0 + ( 0.2 * level ) ) * ( 1.0 + ( 0.01 * HTbonus ) ) * ( 1.0 + ( 0.01 * HTmultiplier ) ) ) * ( 1.0 + ( 0.01 * HTbonus ) ) );\n\tif ( boostHP ) {\n\t\tHP = Math.min( HP + 1, newHT );\n\t}\n\telse {\n\t\tHP = Math.min( HP, newHT );\n\t}\n\tHT = newHT;\n}\n", "CodeBleu_score": 21.630824007250666}, {"code": "public void updateHT( boolean boostHP )\tint newHT = (int) Math.floor( ( 10 + ( getLevel() * 1.2 ) ) * ( 1 + ( getLevel() / 100 ) ) );\n\tif ( getBuff( RingOfMight.class )!= null ) {\n\t\tnewHT = (int) Math.floor( newHT * 1.25 );\n\t}\n\tif ( getBuff( ElixirOfMight.class )!= null ) {\n\t\tnewHT = (int) Math.floor( newHT * 1.25 );\n\t}\n\tsetHT( newHT );\n\tif ( boostHP ) {\n\t\tsetHP( getHT() );\n\t}\n\tif ( getHP() > getHT() ) {\n\t\tsetHP( getHT() );\n\t}\n}\n", "CodeBleu_score": 18.51437764644594}]}
{"instance_id": "b72bd91544e7", "generation_result": [{"code": "public boolean shoot( Char enemy, MissileWeapon wep )\tboolean hit = false;\n\tif ( enemy.isEnemy() || enemy.isNeutral() ) {\n\t\twep.setThrown( true );\n\t\twep.setOwner( this );\n\t\twep.setX( this.getX() + this.getWidth() / 2 - wep.getWidth() / 2 );\n\t\twep.setY( this.getY() + this.getHeight() / 2 - wep.getHeight() / 2 );\n\t\twep.setFacing( this.getFacing() );\n\t\twep.setDamage( this.getDamage() );\n\t\twep.setSpeed( this.getSpeed() );\n\t\twep.setRange( this.getRange() );\n\t\twep.setRadius( this.getRadius() );\n\t\twep.setHitboxRadius( this.getHitboxRadius() );\n\t\twep.setKnockback( this.getKnockback() );\n\t\twep.setKnockbackSide( this.getKnockbackSide() );\n\t\twep.setKnockbackUp( this.getKnockbackUp() );\n\t\twep.setCritChance( this.getCritChance() );\n\t\twep.setCritDamage( this.getCritDamage() );\n\t\twep.setAttackSpeed( this.getAttackSpeed() );\n\t\twep.setAccuracy( this.getAccuracy() );\n\t\twep.setCooldown( this.getCooldown() );\n\t\twep.setAttackType( this.getAttackType() );\n\t\twep.setBulletCount( this.getBulletCount() );\n\t\twep.setBulletSize( this.getBulletSize() );\n\t\twep.setBulletType( this.getBulletType() );\n\t\twep.setBulletImage( this.getBulletImage() );\n\t\twep.setBulletColor( this.getBulletColor() );\n\t\twep.setBulletColorEnd( this.getBulletColorEnd() );\n\t\twep.setBulletDamage( this.getBulletDamage() );\n\t\twep.setBulletSpeed( this.getBulletSpeed() );\n\t\twep.setBulletKnockback( this.getBulletKnockback() );\n\t\twep.setBulletKnockbackSide( this.getBulletKnockbackSide", "CodeBleu_score": 8.83688273359299}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep )\tif( enemy.isEnemy() || enemy.isMimic() ) {\n\t\tif( wep.isThrown() ) {\n\t\t\twep.setThrown( false );\n\t\t\twep.setOwner( null );\n\t\t}\n\t\tif( enemy.isEnemy() ) {\n\t\t\twep.setThrown( true );\n\t\t\twep.setOwner( this );\n\t\t\tif( this.isGladiator() || this.isDuelist() ) {\n\t\t\t\twep.setCombo( wep.getCombo() + 1 );\n\t\t\t}\n\t\t\tif( this.isGladiator() ) {\n\t\t\t\twep.setCombo( wep.getCombo() + 1 );\n\t\t\t}\n\t\t\tif( this.isDuelist() ) {\n\t\t\t\twep.setCombo( wep.getCombo() + 1 );\n\t\t\t}\n\t\t\tif( this.isGladiator() ) {\n\t\t\t\twep.setCombo( wep.getCombo() + 1 );\n\t\t\t}\n\t\t\tif( this.isDuelist() ) {\n\t\t\t\twep.setCombo( wep.getCombo() + 1 );\n\t\t\t}\n\t\t\tif( this.isGladiator() ) {\n\t\t\t\twep.setCombo( wep.getCombo() + 1 );\n\t\t\t}\n\t\t\tif( this.isDuelist() ) {\n\t\t\t\twep.setCombo( wep.getCombo() + 1 );\n\t\t\t}\n\t\t\tif( this.isGladiator() ) {\n\t\t\t\twep.setCombo( wep.getCombo() + 1 );\n\t\t\t}\n\t\t\tif( this.isDuelist() ) {\n\t\t\t\twep.setCombo( wep.getCombo() + 1 );\n\t\t\t}\n\t\t\tif( this.isGladiator() ) {\n\t\t\t\twep.setCombo( wep.getCombo() + 1 );\n\t\t\t}\n\t\t\tif( this.isDuelist() ) {\n\t\t\t\twep.setCombo( wep.getCombo() + 1 );\n\t\t\t}\n\t\t\tif( this.isGladiator() ) {\n\t\t\t\twep.setCombo( wep.getCombo() + 1 );\n\t\t\t}\n\t\t\tif( this.isDuelist() ) {\n\t\t\t\twep.setCombo", "CodeBleu_score": 10.70904133312504}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep )\tboolean hit = false;\n\tif( enemy.isEnemy() || enemy.isNeutral() ) {\n\t\twep.setThrown( true );\n\t\twep.setX( enemy.getX() );\n\t\twep.setY( enemy.getY() );\n\t\twep.setVx( 0 );\n\t\twep.setVy( 0 );\n\t\thit = enemy.hit( wep );\n\t\twep.setThrown( false );\n\t\tif( hit ) {\n\t\t\tif( enemy.isGladiator() || enemy.isDuelist() ) {\n\t\t\t\twep.setCombo( wep.getCombo() + 1 );\n\t\t\t\tif( wep.getCombo() == 1 ) {\n\t\t\t\t\twep.setVx( wep.getVx() + 1 );\n\t\t\t\t\twep.setVy( wep.getVy() + 1 );\n\t\t\t\t\twep.setX( wep.getX() + wep.getVx() );\n\t\t\t\t\twep.setY( wep.getY() + wep.getVy() );\n\t\t\t\t} else if( wep.getCombo() == 2 ) {\n\t\t\t\t\twep.setVx( wep.getVx() + 1 );\n\t\t\t\t\twep.setVy( wep.getVy() + 1 );\n\t\t\t\t\twep.setX( wep.getX() + wep.getVx() );\n\t\t\t\t\twep.setY( wep.getY() + wep.getVy() );\n\t\t\t\t\twep.setVx( wep.getVx() + 1 );\n\t\t\t\t\twep.setVy( wep.getVy() + 1 );\n\t\t\t\t\twep.setX( wep.getX() + wep.getVx() );\n\t\t\t\t\twep.setY( wep.getY() + wep.getVy() );\n\t\t\t\t} else if( wep.getCombo() == 3 ) {\n\t\t\t\t\twep.setVx( wep.getVx() + 1 );\n\t\t\t\t\twep.setVy( wep.getVy() + 1 );\n\t\t\t\t\twep.setX( wep.getX() + wep.getVx() );\n\t\t\t\t\twep.setY( wep.getY() + wep.getVy() );\n\t\t\t\t\twep", "CodeBleu_score": 16.8373061912831}]}
{"instance_id": "f265b39b6677", "generation_result": [{"code": "public int attackSkill( Char target )\tint skill = getBaseAttack();\n\n\t// check for weapon\n\tif ( getWeapon()!= null ) {\n\t\tskill += getWeapon().getAttackBonus();\n\t}\n\n\t// check for accuracy bonus\n\tif ( target.isPlayer() ) {\n\t\tskill += (target.getLevel() - getLevel()) * 2;\n\t}\n\n\t// check for buffs\n\tif ( target.isPlayer() ) {\n\t\tfor ( Buff buff : target.getBuffList().getAllBuffs() ) {\n\t\t\tif ( buff.getType() == Buff.Type.ACCURACY ) {\n\t\t\t\tskill += buff.getBonus();\n\t\t\t}\n\t\t}\n\t}\n\n\t// check for distance\n\tif ( target.isPlayer() ) {\n\t\tskill += (int) Math.ceil( Math.sqrt( Math.pow( target.getX() - getX(), 2 ) + Math.pow( target.getY() - getY(), 2 ) ) / 10.0 );\n\t}\n\n\treturn skill;\n}\n", "CodeBleu_score": 25.800020267768176}, {"code": "public int attackSkill( Char target )\tint skill = getBaseAttack();\n\tint weapon = getWeaponType();\n\tint weaponSkill = 0;\n\tint accuracy = getAccuracy();\n\tint distance = getDistance(target);\n\tint targetLevel = target.getLevel();\n\tint targetSize = target.getSize();\n\tint targetRace = target.getRace();\n\tint targetClass = target.getClassType();\n\tint targetAlignment = target.getAlignment();\n\tint targetStats = target.getStats();\n\tint targetAC = target.getAC();\n\tint targetHP = target.getHP();\n\tint targetMP = target.getMP();\n\tint targetSP = target.getSP();\n\tint targetMaxHP = target.getMaxHP();\n\tint targetMaxMP = target.getMaxMP();\n\tint targetMaxSP = target.getMaxSP();\n\tint targetHit = target.getHit();\n\tint targetEvasion = target.getEvasion();\n\tint targetMind = target.getMind();\n\tint targetBody = target.getBody();\n\tint targetSpirit = target.getSpirit();\n\tint targetMaxHit = target.getMaxHit();\n\tint targetMaxEvasion = target.getMaxEvasion();\n\tint targetMaxMind = target.getMaxMind();\n\tint targetMaxBody = target.getMaxBody();\n\tint targetMaxSpirit = target.getMaxSpirit();\n\tint targetHitRate = target.getHitRate();\n\tint targetEvasionRate = target.getEvasionRate();\n\tint targetMindRate = target.getMindRate();\n\tint targetBodyRate = target.getBodyRate();\n\tint targetSpiritRate = target.getSpiritRate();\n\tint targetLuck = target.getLuck();\n\tint targetLuckRate = target.getLuckRate();\n\tint targetHunger = target.getHunger();\n\tint targetHungerRate = target.getHungerRate();\n\tint targetMaxHunger = target.getMaxHunger();\n\tint targetMaxHungerRate = target.getMaxHungerRate();\n\tint targetRage = target.getRage();\n\tint targetRageRate = target.getRageRate();\n\tint", "CodeBleu_score": 22.030518448176817}, {"code": "public int attackSkill( Char target )\tint baseSkill = getBaseAttack();\n\tint skill = baseSkill;\n\tint weapon = getEquippedWeapon();\n\tif ( weapon == -1 ) {\n\t\treturn skill;\n\t}\n\tint weaponType = getWeaponType( weapon );\n\tint weaponSkill = getWeaponSkill( weapon );\n\tint weaponRange = getWeaponRange( weapon );\n\tint weaponAccuracy = getWeaponAccuracy( weapon );\n\tint weaponDamage = getWeaponDamage( weapon );\n\tint weaponDamageType = getWeaponDamageType( weapon );\n\tint weaponSpeed = getWeaponSpeed( weapon );\n\tint weaponMaxRange = getWeaponMaxRange( weapon );\n\tint weaponMinRange = getWeaponMinRange( weapon );\n\tint weaponMaxTarget = getWeaponMaxTarget( weapon );\n\tint weaponMinTarget = getWeaponMinTarget( weapon );\n\tint weaponMaxMagic = getWeaponMaxMagic( weapon );\n\tint weaponMinMagic = getWeaponMinMagic( weapon );\n\tint weaponMaxPhys = getWeaponMaxPhys( weapon );\n\tint weaponMinPhys = getWeaponMinPhys( weapon );\n\tint weaponMaxRange = getWeaponMaxRange( weapon );\n\tint weaponMinRange = getWeaponMinRange( weapon );\n\tint weaponMaxStr = getWeaponMaxStr( weapon );\n\tint weaponMinStr = getWeaponMinStr( weapon );\n\tint weaponMaxDex = getWeaponMaxDex( weapon );\n\tint weaponMinDex = getWeaponMinDex( weapon );\n\tint weaponMaxInt = getWeaponMaxInt( weapon );\n\tint weaponMinInt = getWeaponMinInt( weapon );\n\tint weaponMaxLuk = getWeaponMaxLuk( weapon );\n\tint weaponMinLuk = getWeaponMinLuk( weapon );\n\tint weaponMaxLevel = getWeaponMaxLevel( weapon );\n\tint weaponMinLevel = getWeaponMinLevel( weapon );\n\tint weaponMaxDurability = getWeaponMaxDurability( weapon );\n\tint weaponMinDurability = getWeaponMinDurability( weapon );\n\tint weaponMaxWeight = getWeaponMaxWeight( weapon );\n\tint weaponMinWeight = getWeaponMinWeight( weapon );\n\tint weaponMaxSlots = getWeaponMaxSlots( weapon );\n\tint weaponMinSlots = getWeaponMinSlots( weapon );\n\tint weaponMaxAttacks = get", "CodeBleu_score": 18.184537871107537}]}
{"instance_id": "9e50c198348d", "generation_result": [{"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n)repeat(repeats) {\n\t\toperation()\n\t}\n\tif (printResults) {\n\t\tprintln(this)\n\t}\n}\n", "CodeBleu_score": 52.149134188298916}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n)repeat(repeats) {\n\t\toperation()\n\t}\n\tif (printResults) {\n\t\tprintln(this)\n\t}\n}\n", "CodeBleu_score": 52.149134188298916}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n)repeat(repeats) {\n\t\toperation()\n\t}\n\n\tif (printResults) {\n\t\tprintln(this.toString())\n\t}\n}\n", "CodeBleu_score": 55.745225242989996}]}
{"instance_id": "5f6e11998a1f", "generation_result": [{"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>\tval behaviorTree = BehaviorTree(rootTask, blackboard)\n\tbehaviorTree.init()\n\treturn behaviorTree\n}\n", "CodeBleu_score": 62.66651729141424}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>\tval tree = BehaviorTree(rootTask, blackboard)\n\ttree.init()\n\treturn tree\n}\n", "CodeBleu_score": 45.24309499732565}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>\tval tree = BehaviorTree(rootTask, blackboard)\n\ttree.init()\n\treturn tree\n}\n", "CodeBleu_score": 45.24309499732565}]}
{"instance_id": "cdda12e45fb9", "generation_result": [{"code": "onPointerOver ()\t// Update the selected cell coordinates in the map.\n\tthis.map.selectedCell.x = this.x;\n\tthis.map.selectedCell.y = this.y;\n\n\t// Highlight the current cell and its related cells by changing their tint color.\n\tthis.tint = 0x000000;\n\tthis.relatedCells.forEach(cell => {\n\t\tcell.tint = 0x000000;\n\t});\n\n\t// Adjust the transparency of the cell's heightmap polygons if they exist.\n\tif (this.heightmap) {\n\t\tthis.heightmap.alpha = 0.5;\n\t}\n}\n", "CodeBleu_score": 16.769711795945703}, {"code": "onPointerOver ()\t// If the current cell is already selected, do nothing.\n\tif (this.isSelected) {\n\t\treturn;\n\t}\n\t// If the current cell is not selected, deselect the previously selected cell and highlight the current cell.\n\telse {\n\t\tif (this.selectedCell) {\n\t\t\tthis.selectedCell.deselect();\n\t\t}\n\t\tthis.selectedCell = this;\n\t\tthis.selectedCell.select();\n\t}\n\t// If the current cell has heightmap polygons, adjust their transparency.\n\tif (this.heightmapPolygons) {\n\t\tfor (var i = 0; i < this.heightmapPolygons.length; i++) {\n\t\t\tthis.heightmapPolygons[i].setAlpha(0.5);\n\t\t}\n\t}\n\t// If the current cell has related cells, adjust their tint colors.\n\tif (this.relatedCells) {\n\t\tfor (var i = 0; i < this.relatedCells.length; i++) {\n\t\t\tthis.relatedCells[i].setTint(0x000000);\n\t\t}\n\t}\n}\n", "CodeBleu_score": 25.87982101471579}, {"code": "onPointerOver ()\t// Update the selected cell coordinates in the map\n\tthis.selectedCellCoordinates = this.map.getCoordinatesFromMousePosition(this.mouseX, this.mouseY);\n\t// Highlight the current cell and its related cells by changing their tint color\n\tthis.highlightCell();\n\t// Adjust the transparency of the cell's heightmap polygons if they exist\n\tthis.adjustHeightmapPolygonsTransparency();\n}\n", "CodeBleu_score": 8.269051857167842}]}
{"instance_id": "850931ce3401", "generation_result": [{"code": "getTrafficDensity ()\tconst light = 0.25;\n\tconst heavy = 0.5;\n\tconst current = this.getTrafficDensityValue();\n\tif (current <= light) {\n\t\treturn 'light';\n\t} else if (current >= heavy) {\n\t\treturn 'heavy';\n\t} else {\n\t\treturn null;\n\t}\n}\n", "CodeBleu_score": 25.702787905994846}, {"code": "getTrafficDensity ()\tconst trafficDensity = {\n\t\t'light': 0,\n\t\t'medium': 1,\n\t\t'heavy': 2\n\t}\n\tif (this.trafficDensity === undefined) {\n\t\tthis.trafficDensity = trafficDensity.light\n\t}\n\treturn this.trafficDensity\n}\n", "CodeBleu_score": 16.116784861004348}, {"code": "getTrafficDensity ()\tif (this.trafficDensity === 'light') {\n\t\tif (this.trafficDensityLight <= this.trafficDensityCurrent) {\n\t\t\tthis.trafficDensity = 'heavy'\n\t\t}\n\t} else if (this.trafficDensity === 'heavy') {\n\t\tif (this.trafficDensityCurrent <= this.trafficDensityLight) {\n\t\t\tthis.trafficDensity = 'light'\n\t\t}\n\t} else {\n\t\tif (this.trafficDensityCurrent >= this.trafficDensityLight) {\n\t\t\tthis.trafficDensity = 'light'\n\t\t}\n\t}\n}\n", "CodeBleu_score": 22.43135260617839}]}
{"instance_id": "5958478bf873", "generation_result": [{"code": "restart: function ()\n\tvar trafficDensity = null;\n\tvar currentValue = this.getCurrentValue();\n\tif (currentValue < this.lightThreshold) {\n\t\ttrafficDensity = 'light';\n\t} else if (currentValue < this.heavyThreshold) {\n\t\ttrafficDensity = 'heavy';\n\t} else {\n\t\ttrafficDensity ='very heavy';\n\t}\n\treturn trafficDensity;\n}\n", "CodeBleu_score": 36.21544903328014}, {"code": "restart: function ()\n\tif (this.getTrafficDensity() === null) {\n\t\tthis.trafficDensity = 'light';\n\t} else if (this.getTrafficDensity() === 'light') {\n\t\tthis.trafficDensity = 'heavy';\n\t} else {\n\t\tthis.trafficDensity = 'light';\n\t}\n},\n", "CodeBleu_score": 34.53874817392211}, {"code": "restart: function ()\n\tvar trafficDensity = null;\n\tif (this.currentValue < this.lightThreshold) {\n\t\ttrafficDensity = 'light';\n\t} else if (this.currentValue < this.heavyThreshold) {\n\t\ttrafficDensity = 'heavy';\n\t}\n\treturn trafficDensity;\n},\n", "CodeBleu_score": 35.06778288568058}]}
{"instance_id": "d2441e586d58", "generation_result": [{"code": "flash: function (color, duration, force, alpha)\tif (!this.visible) {\n\t\treturn false;\n\t}\n\tif (force) {\n\t\tthis.clearEffect();\n\t}\n\tif (typeof color == \"undefined\") {\n\t\tcolor = this.color;\n\t}\n\tif (typeof duration == \"undefined\") {\n\t\tduration = 100;\n\t}\n\tif (typeof alpha == \"undefined\") {\n\t\talpha = 0.5;\n\t}\n\tthis.effect = {\n\t\ttype: \"flash\",\n\t\tcolor: color,\n\t\tduration: duration,\n\t\talpha: alpha\n\t};\n\treturn true;\n},\n", "CodeBleu_score": 44.26150625383583}, {"code": "flash: function (color, duration, force, alpha)\tif (typeof color === \"undefined\") {\n\t\tcolor = this.color;\n\t}\n\tif (typeof duration === \"undefined\") {\n\t\tduration = this.duration;\n\t}\n\tif (typeof force === \"undefined\") {\n\t\tforce = this.force;\n\t}\n\tif (typeof alpha === \"undefined\") {\n\t\talpha = this.alpha;\n\t}\n\tif (typeof this.effect === \"undefined\") {\n\t\tthis.effect = {};\n\t}\n\tif (this.effect.flash) {\n\t\tthis.effect.flash.stop();\n\t\tthis.effect.flash = null;\n\t}\n\tif (this.effect.fade) {\n\t\tthis.effect.fade.stop();\n\t\tthis.effect.fade = null;\n\t}\n\tif (this.effect.slide) {\n\t\tthis.effect.slide.stop();\n\t\tthis.effect.slide = null;\n\t}\n\tif (this.effect.scale) {\n\t\tthis.effect.scale.stop();\n\t\tthis.effect.scale = null;\n\t}\n\tif (this.effect.rotate) {\n\t\tthis.effect.rotate.stop();\n\t\tthis.effect.rotate = null;\n\t}\n\tif (this.effect.transform) {\n\t\tthis.effect.transform.stop();\n\t\tthis.effect.transform = null;\n\t}\n\tif (this.effect.opacity) {\n\t\tthis.effect.opacity.stop();\n\t\tthis.effect.opacity = null;\n\t}\n\tif (this.effect.color) {\n\t\tthis.effect.color.stop();\n\t\tthis.effect.color = null;\n\t}\n\tif (this.effect.backgroundColor) {\n\t\tthis.effect.backgroundColor.stop();\n\t\tthis.effect.backgroundColor = null;\n\t}\n\tif (this.effect.boxShadow) {\n\t\tthis.effect.boxShadow.stop();\n\t\tthis.effect.boxShadow = null;\n\t}\n\tif (this.effect.border) {\n\t\tthis.effect.border.stop();\n\t\tthis.effect.border = null;\n\t}\n\tif (this.effect.background) {\n\t\tthis.effect.background.stop();\n\t\tthis.", "CodeBleu_score": 35.675293233891715}, {"code": "flash: function (color, duration, force, alpha)\tif (typeof duration!== 'number') {\n\t\talpha = force;\n\t\tforce = duration;\n\t\tduration = 100;\n\t}\n\tif (typeof force!== 'boolean') {\n\t\talpha = force;\n\t\tforce = false;\n\t}\n\tif (typeof alpha!== 'number') {\n\t\talpha = 1;\n\t}\n\tif (typeof color ==='string') {\n\t\tcolor = this.parseColor(color);\n\t}\n\tif (typeof color!== 'object' ||!('r' in color) ||!('g' in color) ||!('b' in color) || color.r < 0 || color.r > 255 || color.g < 0 || color.g > 255 || color.b < 0 || color.b > 255) {\n\t\treturn false;\n\t}\n\tif (typeof duration!== 'number' || duration < 0) {\n\t\treturn false;\n\t}\n\tif (typeof alpha!== 'number' || alpha < 0 || alpha > 1) {\n\t\treturn false;\n\t}\n\tif (force) {\n\t\tthis.clearEffects();\n\t}\n\tif (this.effects.length > 0) {\n\t\tthis.effects[0].duration = 0;\n\t}\n\tthis.effects.unshift({\n\t\ttype: 'flash',\n\t\tcolor: color,\n\t\tduration: duration,\n\t\talpha: alpha\n\t});\n\treturn true;\n},", "CodeBleu_score": 49.477363908165174}]}
{"instance_id": "48b26381d975", "generation_result": [{"code": "createFluidLayer: function (children, addToWorld)\tvar layer = new CANNON.FlexLayer();\n\tlayer.children = children;\n\tlayer.fluidDensity = 1000;\n\tlayer.fluidLinearDrag = 0.0001;\n\tlayer.fluidLinearDrag = 0.0001;\n\tlayer.fluidLinearDrag = 0.0001;\n\tlayer.fluidViscosity = 0.000001;\n\tlayer.fluidStiffness = 10000;\n\tlayer.fluidRestDistance = 0.01;\n\tlayer.fluidGravity = -9.81;\n\tlayer.updateWorldProps();\n\tif (addToWorld) {\n\t\tthis.world.add(layer);\n\t}\n\tthis.layers.push(layer);\n\treturn layer;\n},\n", "CodeBleu_score": 31.536773440484456}, {"code": "createFluidLayer: function (children, addToWorld)\tvar layer = new Box2D.Dynamics.b2FluidLayerDef();\n\tlayer.categoryBits = 0x0001;\n\tlayer.maskBits = 0xFFFF;\n\tlayer.groupIndex = 0;\n\tlayer.userData = null;\n\tlayer.fluidDensity = 0.0;\n\tlayer.fluidLinearDrag = 0.0;\n\tlayer.fluidLinearDrag = 0.0;\n\tlayer.fluidAngularDrag = 0.0;\n\tlayer.fluidLinearDamping = 0.0;\n\tlayer.fluidAngularDamping = 0.0;\n\tlayer.fluidFriction = 0.0;\n\tlayer.fluidRestitution = 0.0;\n\tlayer.pressure = 0.0;\n\tlayer.temperature = 0.0;\n\tlayer.color.Set(0.5, 0.5, 0.5);\n\tlayer.width = 10.0;\n\tlayer.height = 10.0;\n\tlayer.shapes = [];\n\tlayer.shapes.length = 0;\n\tlayer.shapeCount = 0;\n\tlayer.particles = [];\n\tlayer.particles.length = 0;\n\tlayer.particleCount = 0;\n\tlayer.neighborCount = 0;\n\tlayer.neighbors = [];\n\tlayer.neighbors.length = 0;\n\tlayer.neighborDistance = 0.0;\n\tlayer.neighborTriads = [];\n\tlayer.neighborTriads.length = 0;\n\tlayer.neighborTriadCount = 0;\n\tlayer.neighborWeights = [];\n\tlayer.neighborWeights.length = 0;\n\tlayer.neighborWeightCount = 0;\n\tlayer.neighborVertexCount = 0;\n\tlayer.neighborVertexIndices = [];\n\tlayer.neighborVertexIndices.length = 0;\n\tlayer.neighborVertexCount = 0;\n\tlayer.neighborVertexWeights = [];\n\tlayer.neighborVertexWeights.length = 0;\n\tlayer.neighborVertexWeightCount = 0;\n\tlayer.neighborPairCount = 0;\n\tlayer.neighborPairs = [];\n\tlayer.neighborPairs.length = 0;\n\tlayer.neighborPairFlags =", "CodeBleu_score": 10.353867723367676}, {"code": "createFluidLayer: function (children, addToWorld)\tvar layer = new Box2D.Dynamics.b2FluidLayer();\n\tlayer.SetDensity(this.density);\n\tlayer.SetDiffusion(this.diffusion);\n\tlayer.SetViscosity(this.viscosity);\n\tlayer.SetVSThreshold(this.vst);\n\tlayer.SetVSCurve(this.vsc);\n\tlayer.SetMaxDensity(this.maxDensity);\n\tlayer.SetDestructionByAge(this.destructionByAge);\n\tlayer.SetDestructionByViscosity(this.destructionByViscosity);\n\tlayer.SetEfficiency(this.efficiency);\n\tlayer.SetSpawnRate(this.spawnRate);\n\tlayer.SetFluidColor(this.fluidColor);\n\tlayer.SetSpawnGroup(this.spawnGroup);\n\tlayer.SetMaxLifetime(this.maxLifetime);\n\tlayer.SetReactivity(this.reactivity);\n\tlayer.SetSurfaceTension(this.surfaceTension);\n\tlayer.SetViscousSurfaceTension(this.viscousSurfaceTension);\n\tlayer.SetVaporizationThreshold(this.vaporizationThreshold);\n\tlayer.SetForceOnVelocity(this.forceOnVelocity);\n\tlayer.SetForceOnPosition(this.forceOnPosition);\n\tlayer.SetGravity(this.gravity);\n\tlayer.SetLifetimeGranularity(this.lifetimeGranularity);\n\tlayer.SetParticleLifetime(this.particleLifetime);\n\tlayer.SetParticleDistance(this.particleDistance);\n\tlayer.SetParticleMaxCount(this.particleMaxCount);\n\tlayer.SetParticleMaxRadius(this.particleMaxRadius);\n\tlayer.SetParticleColor(this.particleColor);\n\tlayer.SetParticleColorMixing(this.particleColorMixing);\n\tlayer.SetParticleColorMultiply(this.particleColorMultiply);\n\tlayer.SetParticleColorAdd(this.particleColorAdd);\n\tlayer.SetParticleColorSubtract(this.particleColorSubtract);\n\tlayer.SetParticleColorRandom(this.particleColorRandom);\n\tlayer.SetParticleColorAnimation(this.particleColorAnimation);\n\tlayer.SetParticleColorAnimationSpeed(this.particleColorAnimationSpeed);\n\tlayer.SetParticleColor", "CodeBleu_score": 13.488837781639457}]}
{"instance_id": "624c9e2eb19f", "generation_result": [{"code": "createFullLayer: function (children)\tvar layer = new Phaser.FlexLayer(this.game, this.game.world, this.game.stage, this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height, this.scale);\n\tthis.layers.push(layer);\n\tthis.game.world.add(layer);\n\tif (children) {\n\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\tlayer.add(children[i]);\n\t\t}\n\t}\n\treturn layer;\n},\n", "CodeBleu_score": 39.55616484047101}, {"code": "createFullLayer: function (children)\tvar layer = new Phaser.FlexLayer(this.game, this.game.world, this.game.world.width, this.game.world.height, this.scale.x, this.scale.y);\n\n\tthis.layers.push(layer);\n\n\tif (children) {\n\t\tlayer.addMultiple(children);\n\t}\n\n\treturn layer;\n},\n", "CodeBleu_score": 42.64642129114299}, {"code": "createFullLayer: function (children)\tvar layer = new Phaser.FlexLayer(this, this.game.world, this.game.world.bounds, this.game.world.scale);\n\tthis.layers.push(layer);\n\tthis.game.world.add(layer);\n\tif (children) {\n\t\tlayer.addMultiple(children);\n\t}\n\treturn layer;\n},\n", "CodeBleu_score": 47.30691147069012}]}
{"instance_id": "1c7529bca3ce", "generation_result": [{"code": "crop: function (rect, copy)\tif (rect) {\n\t\tif (copy) {\n\t\t\tthis.cropRect.copy(rect);\n\t\t} else {\n\t\t\tthis.cropRect.set(rect);\n\t\t}\n\t\tthis.updateCrop();\n\t} else {\n\t\tthis.resetCrop();\n\t}\n},\n", "CodeBleu_score": 19.04181800933246}, {"code": "crop: function (rect, copy)\tif (rect) {\n\t\tif (copy) {\n\t\t\tthis.cropRect = new fabric.Rect(rect, {\n\t\t\t\tleft: rect.left,\n\t\t\t\ttop: rect.top,\n\t\t\t\tfill: 'rgba(100, 100, 255, 0.3)',\n\t\t\t\tevented: false\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tthis.cropRect.set(rect).setCoords();\n\t\t}\n\t\tthis.updateCrop();\n\t}\n\telse {\n\t\tthis.resetCrop();\n\t}\n},\n", "CodeBleu_score": 31.895854723046636}, {"code": "crop: function (rect, copy)\tif (rect) {\n\t\tif (copy) {\n\t\t\tthis.cropRect = rect.clone();\n\t\t} else {\n\t\t\tthis.cropRect.set(rect);\n\t\t}\n\t\tthis.updateCrop();\n\t} else {\n\t\tthis.cropRect = null;\n\t\tthis.resetFrame();\n\t}\n},\n", "CodeBleu_score": 27.74867797390428}]}
{"instance_id": "d767b9ea9212", "generation_result": [{"code": "move: function (x, y, wrap)\tif (x) {\n\t\tthis.moveH(x, wrap);\n\t}\n\tif (y) {\n\t\tthis.moveV(y, wrap);\n\t}\n\treturn this;\n},\n", "CodeBleu_score": 52.578226336219615}, {"code": "move: function (x, y, wrap)\tif (x) {\n\t\tthis.moveH(x, wrap);\n\t}\n\tif (y) {\n\t\tthis.moveV(y, wrap);\n\t}\n\treturn this;\n},\n", "CodeBleu_score": 52.578226336219615}, {"code": "move: function (x, y, wrap)\tif (x) {\n\t\tthis.moveH(x, wrap);\n\t}\n\tif (y) {\n\t\tthis.moveV(y, wrap);\n\t}\n\treturn this;\n},\n", "CodeBleu_score": 52.578226336219615}]}
{"instance_id": "c7cf015114f3", "generation_result": [{"code": "Phaser.Button.prototype.changeStateFrame = function (state)\n};\n", "CodeBleu_score": 2.1564653630926878}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state)\n};\n", "CodeBleu_score": 2.1564653630926878}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state)\n};\n", "CodeBleu_score": 2.1564653630926878}]}
{"instance_id": "e0294cb83ca3", "generation_result": [{"code": "weapon: function (quantity, key, frame, group, bulletClass)\tif (typeof quantity === 'undefined') { quantity = 1; }\n\tif (typeof key === 'undefined') { key = null; }\n\tif (typeof frame === 'undefined') { frame = null; }\n\tif (typeof group === 'undefined') { group = null; }\n\tif (typeof bulletClass === 'undefined') { bulletClass = null; }\n\n\tvar config = {\n\t\t'bulletClass': bulletClass,\n\t\t'bulletSpeed': 600,\n\t\t'fireRate': 600,\n\t\t'fireAngle': 0,\n\t\t'bulletAngleVariance': 0,\n\t\t'bulletInheritSpriteSpeed': true,\n\t\t'bulletKillType': Phaser.Weapon.KILL_LIFESPAN,\n\t\t'bulletLifespan': 3000,\n\t\t'bulletAllowCollision': false,\n\t\t'bulletKillDistance': 1000,\n\t\t'bulletCollideWorldBounds': false,\n\t\t'bulletBounce': 0,\n\t\t'bulletBouncePenetration': 0,\n\t\t'bulletMinSpeed': 0,\n\t\t'bulletMaxSpeed': 0,\n\t\t'bulletAcceleration': 0,\n\t\t'bulletScale': 1,\n\t\t'bulletQuantity': quantity,\n\t\t'bulletOffset': new Phaser.Point(),\n\t\t'bulletKillOnCollision': false,\n\t\t'bulletDebug': false,\n\t\t'bulletWorldWrap': false,\n\t\t'bulletSticky': false,\n\t\t'bulletTrackTarget': false,\n\t\t'bulletTrackVelocity': false,\n\t\t'bulletRevive': false,\n\t\t'bulletRandomRotate': false,\n\t\t'bulletBounceOnCollision': false,\n\t\t'bulletCollideCallback': null,\n\t\t'bulletCollideCallbackContext': null,\n\t\t'bulletDrag': 0,\n\t\t'bulletMaxHits': 0,\n\t\t'bulletHitCallback': null,\n\t\t'bulletHitCallbackContext': null,\n\t\t'bulletBody': null,\n\t\t'bulletBounceCallback': null,\n\t\t'bulletBounceCallbackContext': null,\n\t\t'bulletGravity': null,\n\t\t'bulletTween': null,\n\t\t'bulletTweenCallback': null,\n\t\t'bulletTweenCallbackContext': null,\n\t\t'bulletScaleCallback': null,\n\t\t'bullet", "CodeBleu_score": 18.692590066279593}, {"code": "weapon: function (quantity, key, frame, group, bulletClass)\n},\n", "CodeBleu_score": 8.068971077162235}, {"code": "weapon: function (quantity, key, frame, group, bulletClass)\tif (typeof quantity === 'undefined') { quantity = 1; }\n\tif (typeof key === 'undefined') { key = null; }\n\tif (typeof frame === 'undefined') { frame = null; }\n\tif (typeof group === 'undefined') { group = null; }\n\tif (typeof bulletClass === 'undefined') { bulletClass = null; }\n\n\tvar config = {\n\t\t'classType': bulletClass,\n\t\t'frame': frame,\n\t\t'bulletKey': key,\n\t\t'bulletGroup': group,\n\t\t'bulletSpeed': 600,\n\t\t'fireRate': 600,\n\t\t'onFire': null,\n\t\t'onFireParams': null,\n\t\t'onFireScope': null,\n\t\t'bulletKillType': Phaser.Weapon.KILL_LIFESPAN,\n\t\t'bulletKillTimer': 0,\n\t\t'bulletLifespan': 0,\n\t\t'bulletAllowCollision': false,\n\t\t'bulletBounce': null,\n\t\t'bulletCollideWorldBounds': false,\n\t\t'bulletCollideGroup': null,\n\t\t'bulletCollideCallback': null,\n\t\t'bulletCollideCallbackContext': null,\n\t\t'bulletHurtCallback': null,\n\t\t'bulletHurtContext': null,\n\t\t'bulletBounceCallback': null,\n\t\t'bulletBounceCallbackContext': null,\n\t\t'bulletGravity': null,\n\t\t'bulletBounceX': false,\n\t\t'bulletBounceY': false,\n\t\t'bulletMinVelocity': 0,\n\t\t'bulletMaxVelocity': 0,\n\t\t'bulletScale': 1,\n\t\t'bulletClass': null,\n\t\t'bulletWorldWrap': false,\n\t\t'bulletWorldWrapCallback': null,\n\t\t'bulletWorldWrapCallbackContext': null,\n\t\t'bulletDebug': false,\n\t\t'bulletOffsetX': 0,\n\t\t'bulletOffsetY': 0,\n\t\t'bulletQuantity': quantity\n\t};\n\n\treturn this.plugins.add(Phaser.Weapon, config);\n\n},\n", "CodeBleu_score": 28.450252968295906}]}
{"instance_id": "2fca91787d6c", "generation_result": [{"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull)\tif (cull) {\n\t\t//  Calculate normal\n\t\tvar normal = new Phaser.Point(0, 0);\n\t\tvar a = points[0];\n\t\tvar b = points[1];\n\t\tvar c = points[2];\n\t\tnormal.x = (b.y - a.y) * (c.z - a.z) - (c.y - a.y) * (b.z - a.z);\n\t\tnormal.y = (b.z - a.z) * (c.x - a.x) - (c.z - a.z) * (b.x - a.x);\n\t\tnormal.z = (b.x - a.x) * (c.y - a.y) - (c.x - a.x) * (b.y - a.y);\n\t\tvar camera = this.game.camera.worldView;\n\t\tvar dot = normal.dot(camera);\n\t\tif (dot > 0) {\n\t\t\tthis.drawPolygon(points);\n\t\t}\n\t} else {\n\t\tthis.drawPolygon(points);\n\t}\n};\n", "CodeBleu_score": 31.313998902310118}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull)\tif (cull === undefined) { cull = false; }\n\n\tvar context = this.context;\n\n\tif (cull) {\n\t\tvar camera = this.game.camera;\n\t\tvar cameraX = camera.x;\n\t\tvar cameraY = camera.y;\n\t\tvar cameraZ = camera.z;\n\n\t\tvar a = new Phaser.Point(points[0].x - cameraX, points[0].y - cameraY, points[0].z - cameraZ);\n\t\tvar b = new Phaser.Point(points[1].x - cameraX, points[1].y - cameraY, points[1].z - cameraZ);\n\t\tvar c = new Phaser.Point(points[2].x - cameraX, points[2].y - cameraY, points[2].z - cameraZ);\n\n\t\tvar ab = new Phaser.Point(b.x - a.x, b.y - a.y, b.z - a.z);\n\t\tvar ac = new Phaser.Point(c.x - a.x, c.y - a.y, c.z - a.z);\n\n\t\tvar normal = new Phaser.Point(ab.y * ac.z - ab.z * ac.y, ab.z * ac.x - ab.x * ac.z, ab.x * ac.y - ab.y * ac.x);\n\n\t\tif (normal.x * camera.direction.x + normal.y * camera.direction.y + normal.z * camera.direction.z < 0) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tcontext.beginPath();\n\tcontext.moveTo(points[0].x, points[0].y);\n\tcontext.lineTo(points[1].x, points[1].y);\n\tcontext.lineTo(points[2].x, points[2].y);\n\tcontext.lineTo(points[0].x, points[0].y);\n\tcontext.closePath();\n\tcontext.fill();\n};\n", "CodeBleu_score": 40.171177587090945}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull)\tif (cull) {\n\t\tvar normal = new Phaser.Point(0, 0, 1);\n\t\tvar p1 = new Phaser.Point(points[0], points[1]);\n\t\tvar p2 = new Phaser.Point(points[2], points[3]);\n\t\tvar p3 = new Phaser.Point(points[4], points[5]);\n\t\tvar v1 = new Phaser.Point(p2.x - p1.x, p2.y - p1.y);\n\t\tvar v2 = new Phaser.Point(p3.x - p1.x, p3.y - p1.y);\n\t\tnormal.x = v1.y * v2.z - v1.z * v2.y;\n\t\tnormal.y = v1.z * v2.x - v1.x * v2.z;\n\t\tnormal.z = v1.x * v2.y - v1.y * v2.x;\n\t\tnormal.normalize();\n\t\tvar dot = normal.x * this.camera.worldView.x + normal.y * this.camera.worldView.y + normal.z * this.camera.worldView.z;\n\t\tif (dot > 0) {\n\t\t\tthis.drawPolygon(points);\n\t\t}\n\t} else {\n\t\tthis.drawPolygon(points);\n\t}\n};\n", "CodeBleu_score": 37.12913912402248}]}
{"instance_id": "5d227ea7f97b", "generation_result": [{"code": "checkVideoProgress: function ()\tif (this.video.readyState === this.video.HAVE_ENOUGH_DATA) {\n\t\tthis.video.pause();\n\t\tthis.video.currentTime = 0;\n\t\tthis.video.play();\n\t\tthis.videoTexture.update();\n\t\tthis.video.removeEventListener('canplaythrough', this.checkVideoProgress);\n\t\tthis.video.removeEventListener('error', this.checkVideoProgress);\n\t\tthis.video.removeEventListener('stalled', this.checkVideoProgress);\n\t\tthis.video.removeEventListener('suspend', this.checkVideoProgress);\n\t\tthis.video.removeEventListener('abort', this.checkVideoProgress);\n\t\tthis.video.removeEventListener('emptied', this.checkVideoProgress);\n\t\tthis.video.removeEventListener('loadeddata', this.checkVideoProgress);\n\t\tthis.video.removeEventListener('loadedmetadata', this.checkVideoProgress);\n\t\tthis.video.removeEventListener('waiting', this.checkVideoProgress);\n\t\tthis.video.removeEventListener('playing', this.checkVideoProgress);\n\t\tthis.video.removeEventListener('pause', this.checkVideoProgress);\n\t\tthis.video.removeEventListener('timeupdate', this.checkVideoProgress);\n\t\tthis.video.removeEventListener('ended', this.checkVideoProgress);\n\t\tthis.video.removeEventListener('ratechange', this.checkVideoProgress);\n\t\tthis.video.removeEventListener('volumechange', this.checkVideoProgress);\n\t\tthis.video.removeEventListener('durationchange', this.checkVideoProgress);\n\t\tthis.video.removeEventListener('resize', this.checkVideoProgress);\n\t\tthis.video.removeEventListener('loadedmetadata', this.checkVideoProgress);\n\t\tthis.video.removeEventListener('loadstart', this.checkVideoProgress);\n\t\tthis.video.removeEventListener('progress', this.checkVideoProgress);\n\t\tthis.video.removeEventListener('suspend', this.checkVideoProgress);\n\t\tthis.video.removeEventListener('emptied', this.checkVideoProgress);\n\t\tthis.video.removeEventListener('stalled', this.checkVideoProgress);\n\t\tthis.video.removeEventListener('play', this.checkVideoProgress);\n\t\tthis.video.removeEventListener('pause', this.checkVideoProgress);\n\t\tthis.video.removeEventListener('loadedmetadata', this.checkVideoProgress);\n\t\tthis.video.removeEventListener('loadeddata', this.checkVideoProgress);\n\t\t", "CodeBleu_score": 10.674749108210628}, {"code": "checkVideoProgress: function ()\tif (this.video.readyState === 4) {\n\t\t// The video has loaded. Stop checking for progress.\n\t\tclearInterval(this.progressInterval);\n\t\tthis.progressInterval = null;\n\t\tthis.video.pause();\n\t\tthis.video.currentTime = this.time;\n\t\tthis.video.volume = this.volume;\n\t\tthis.video.muted = this.muted;\n\t\tthis.video.playbackRate = this.playbackRate;\n\t\tthis.video.play();\n\t\tthis.video.onseeked = function () {\n\t\t\tthis.onSeeked();\n\t\t}.bind(this);\n\t\tthis.video.onplay = function () {\n\t\t\tthis.onPlay();\n\t\t}.bind(this);\n\t\tthis.video.onpause = function () {\n\t\t\tthis.onPause();\n\t\t}.bind(this);\n\t\tthis.video.onplaying = function () {\n\t\t\tthis.onPlaying();\n\t\t}.bind(this);\n\t\tthis.video.onended = function () {\n\t\t\tthis.onEnded();\n\t\t}.bind(this);\n\t\tthis.video.onwaiting = function () {\n\t\t\tthis.onWaiting();\n\t\t}.bind(this);\n\t\tthis.video.onloadeddata = function () {\n\t\t\tthis.onLoadedData();\n\t\t}.bind(this);\n\t\tthis.video.oncanplay = function () {\n\t\t\tthis.onCanPlay();\n\t\t}.bind(this);\n\t\tthis.video.oncanplaythrough = function () {\n\t\t\tthis.onCanPlayThrough();\n\t\t}.bind(this);\n\t\tthis.video.onstalled = function () {\n\t\t\tthis.onStalled();\n\t\t}.bind(this);\n\t\tthis.video.onerror = function () {\n\t\t\tthis.onError();\n\t\t}.bind(this);\n\t\tthis.video.onloadedmetadata = function () {\n\t\t\tthis.onLoadedMetadata();\n\t\t}.bind(this);\n\t\tthis.video.onloadeddata = function () {\n\t\t\tthis.onLoadedData();\n\t\t}.bind(this);\n\t\tthis.video.onprogress = function () {\n\t\t\tthis.onProgress();\n\t\t}.bind(this);\n\t\tthis.video.onended = function () {\n\t\t\tthis.onEnded();", "CodeBleu_score": 19.602846363331693}, {"code": "checkVideoProgress: function ()\tif (this.video.readyState === 4) {\n\t\tif (this.video.currentTime > 0) {\n\t\t\tthis.video.pause();\n\t\t\tthis.video.currentTime = 0;\n\t\t}\n\t\tthis.video.src = this.videoSource;\n\t\tthis.video.load();\n\t\tthis.video.play();\n\t\tthis.video.style.opacity = 1;\n\t\tthis.video.style.visibility = \"visible\";\n\t\tclearTimeout(this.videoCheckProgressTimeout);\n\t\tthis.videoCheckProgressTimeout = null;\n\t} else {\n\t\tthis.videoCheckProgressTimeout = setTimeout(this.checkVideoProgress, 100);\n\t\tif (this.videoCheckProgressRetries < this.videoCheckProgressMaxRetries) {\n\t\t\tthis.videoCheckProgressRetries += 1;\n\t\t\tconsole.warn(\"Video loading failed, retrying \" + this.videoCheckProgressRetries + \" of \" + this.videoCheckProgressMaxRetries + \" times\");\n\t\t} else {\n\t\t\tconsole.error(\"Video loading failed, abandoning \" + this.videoCheckProgressMaxRetries + \" retries\");\n\t\t}\n\t}\n},\n", "CodeBleu_score": 31.21514034703756}]}
{"instance_id": "e48c3c53f00a", "generation_result": [{"code": "start: function (event, value)\tif (this.state!== 'down') {\n\t\tthis.state = 'down';\n\t\tthis.time = Date.now();\n\t\tthis.count = 0;\n\t\tthis.alt = event.altKey;\n\t\tthis.shift = event.shiftKey;\n\t\tthis.ctrl = event.ctrlKey;\n\t\tthis.fire('onDown', this.state, value);\n\t}\n},\n", "CodeBleu_score": 30.277345073135496}, {"code": "start: function (event, value)\tif (this.state === \"up\") {\n\t\tthis.state = \"down\";\n\t\tthis.value = value;\n\t\tthis.repeatCount = 0;\n\t\tthis.repeatDelay = 0;\n\t\tthis.startTime = (event && event.timeStamp) || Date.now();\n\t\tthis.altKey = event && event.altKey;\n\t\tthis.ctrlKey = event && event.ctrlKey;\n\t\tthis.shiftKey = event && event.shiftKey;\n\t\tthis.dispatch(\"onDown\", this.state, this.value);\n\t}\n},\n", "CodeBleu_score": 41.9086958725985}, {"code": "start: function (event, value)\tif (!this.isDown) {\n\t\tthis.isDown = true;\n\t\tthis.timeDown = this.time;\n\t\tthis.timeUp = this.time;\n\t\tthis.timeRepeat = this.time;\n\t\tthis.timeRepeatStart = this.time;\n\t\tthis.repeatCount = 0;\n\t\tthis.repeatDelay = 0;\n\t\tthis.repeatInterval = 0;\n\t\tthis.repeatTime = 0;\n\t\tthis.value = value;\n\t\tthis.alt = event.altKey;\n\t\tthis.ctrl = event.ctrlKey;\n\t\tthis.shift = event.shiftKey;\n\t\tthis.onDown.dispatch(this.value, this.alt, this.ctrl, this.shift);\n\t}\n},\n", "CodeBleu_score": 42.599132913766084}]}
{"instance_id": "a2cb3bdacb1e", "generation_result": [{"code": "onMouseDown: function (event)\tif (this.inputEnabled && this.mouseEnabled) {\n\t\tthis.mouse.start(event);\n\t\tif (this.preventDefault) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n},\n", "CodeBleu_score": 23.55974973640257}, {"code": "onMouseDown: function (event)\tif (this.enabled) {\n\t\tthis.mouse.down = true;\n\t\tthis.mouse.x = event.clientX;\n\t\tthis.mouse.y = event.clientY;\n\t\tif (this.mouse.callback) {\n\t\t\tthis.mouse.callback(event);\n\t\t}\n\t\tif (this.mouse.preventDefault) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n},\n", "CodeBleu_score": 34.02320899368245}, {"code": "onMouseDown: function (event)\t// If input is enabled, initialize the mouse pointer\n\tif (this.inputEnabled) {\n\t\tthis.input.mouse.start(event);\n\t}\n\n\t// If the mousedown event was prevented, don't let go\n\tif (event.isDefaultPrevented()) {\n\t\treturn;\n\t}\n\n\t// Otherwise, let's see if we have a mousedown callback and fire it\n\tif (this.mousedownCallback) {\n\t\tthis.mousedownCallback.call(this, event);\n\t}\n},\n", "CodeBleu_score": 33.488032610407544}]}
{"instance_id": "88538a5b66e8", "generation_result": [{"code": "onMouseUpGlobal: function (event)\t// If the mouse is not down, do nothing.\n\tif (!this.mouseIsDown) {\n\t\treturn;\n\t}\n\t// If this is a touch event, do nothing.\n\tif (event.pointerType === \"touch\") {\n\t\treturn;\n\t}\n\t// If the mouse is down and the event is not a left click, do nothing.\n\tif (event.button!== 0) {\n\t\treturn;\n\t}\n\t// If this is a touch event, do nothing.\n\tif (event.pointerType === \"touch\") {\n\t\treturn;\n\t}\n\t// Prevent default behavior.\n\tif (event.preventDefault) {\n\t\tevent.preventDefault();\n\t}\n\t// Store the event.\n\tthis.mouseDownEvent = event;\n\t// If there is a mouse down callback, invoke it.\n\tif (this.mouseDownCallback) {\n\t\tthis.mouseDownCallback(event);\n\t}\n\t// If input is enabled, assign an identifier to the event and start the mouse pointer input process.\n\tif (this.inputEnabled) {\n\t\tthis.mouseDownId = event.identifier;\n\t\tthis.mouseDownTime = this.getTime();\n\t\tthis.mouseDownPosition = this.getMousePosition(event);\n\t\tthis.mouseDownVelocity = 0;\n\t\tthis.mouseDownAcceleration = 0;\n\t\tthis.mouseDownDistance = 0;\n\t\tthis.mouseDownDirection = 0;\n\t\tthis.mouseDownIsDragging = false;\n\t\tthis.mouseDownIsDraggingLeft = false;\n\t\tthis.mouseDownIsDraggingRight = false;\n\t\tthis.mouseDownIsDraggingUp = false;\n\t\tthis.mouseDownIsDraggingDown = false;\n\t\tthis.mouseDownIsDraggingForward = false;\n\t\tthis.mouseDownIsDraggingBack = false;\n\t\tthis.mouseDownIsDraggingAny = false;\n\t\tthis.mouseDownIsDraggingPrimary = false;\n\t\tthis.mouseDownIsDraggingSecondary = false;\n\t\tthis.mouseDownIsDraggingTertiary = false;\n\t\tthis.mouseDownIsDraggingAnyPrimary = false;\n\t\tthis.mouseDownIsDraggingAnySecondary = false;\n\t\tthis.mouseDownIsDraggingAnyTertiary = false;\n\t\tthis.mouse", "CodeBleu_score": 36.68036705751382}, {"code": "onMouseUpGlobal: function (event)\tif (this.enabled) {\n\t\t// Prevent default behavior\n\t\tif (this.preventDefault) {\n\t\t\tevent.preventDefault();\n\t\t}\n\n\t\t// Store the event\n\t\tthis.mouseDownEvent = event;\n\n\t\t// Invoke the mouse down callback\n\t\tif (this.mouseDownCallback) {\n\t\t\tthis.mouseDownCallback(event);\n\t\t}\n\n\t\t// If input is enabled, assign an identifier to the event and start the mouse pointer input process\n\t\tif (this.inputEnabled) {\n\t\t\t// Assign an identifier to the event\n\t\t\tthis.mouseDownEvent.identifier = this.mouseDownIdentifier;\n\n\t\t\t// Increment the mouse down identifier\n\t\t\tthis.mouseDownIdentifier++;\n\n\t\t\t// Start the mouse pointer input process\n\t\t\tthis.mousePointerInputProcess();\n\t\t}\n\t}\n},\n", "CodeBleu_score": 44.55522374440134}, {"code": "onMouseUpGlobal: function (event)\tthis.mouseDown = false;\n\tthis.mouseMove = false;\n\tthis.mouseUp = true;\n\tthis.mouseDownEvent = event;\n\tthis.mouseUpEvent = event;\n\tthis.mouseDownTime = event.timeStamp;\n\tthis.mouseUpTime = event.timeStamp;\n\tthis.mouseDownPos = this.getMousePos(event);\n\tthis.mouseUpPos = this.getMousePos(event);\n\tthis.mouseDownButton = event.button;\n\tthis.mouseUpButton = event.button;\n\tthis.mouseDownCanvasPos = this.getCanvasPos(event);\n\tthis.mouseUpCanvasPos = this.getCanvasPos(event);\n\tthis.mouseDownCanvasNormPos = this.getCanvasNormPos(event);\n\tthis.mouseUpCanvasNormPos = this.getCanvasNormPos(event);\n\tthis.mouseDownViewPos = this.getViewPos(event);\n\tthis.mouseUpViewPos = this.getViewPos(event);\n\tthis.mouseDownViewNormPos = this.getViewNormPos(event);\n\tthis.mouseUpViewNormPos = this.getViewNormPos(event);\n\tthis.mouseDownWorldPos = this.getWorldPos(event);\n\tthis.mouseUpWorldPos = this.getWorldPos(event);\n\tthis.mouseDownWorldNormPos = this.getWorldNormPos(event);\n\tthis.mouseUpWorldNormPos = this.getWorldNormPos(event);\n\tthis.mouseDownElement = this.getElement(event);\n\tthis.mouseUpElement = this.getElement(event);\n\tthis.mouseDownElementPos = this.getElementPos(event);\n\tthis.mouseUpElementPos = this.getElementPos(event);\n\tthis.mouseDownElementNormPos = this.getElementNormPos(event);\n\tthis.mouseUpElementNormPos = this.getElementNormPos(event);\n\tthis.mouseDownElementWorldPos = this.getElementWorldPos(event);\n\tthis.mouseUpElementWorldPos = this.getElementWorldPos(event);\n\tthis.mouseDownElementWorldNormPos = this.getElementWorldNormPos(event);\n\tthis.mouseUpElementWorldNormPos = this.getElementWorldNormPos(event);", "CodeBleu_score": 33.230908499151326}]}
{"instance_id": "bf8b43ab3487", "generation_result": [{"code": "onTouchEnter: function (event)\tif (this.enabled && this.game.input.enabled) {\n\t\tthis.touchEnterCallback(event);\n\t\tevent.preventDefault();\n\t}\n},\n", "CodeBleu_score": 28.107478188974977}, {"code": "onTouchEnter: function (event)\tif (this.enabled && this.game.input.enabled && this.touchEnterCallback) {\n\t\tthis.touchEnterCallback(event);\n\t\tevent.preventDefault();\n\t}\n},\n", "CodeBleu_score": 30.875724877395456}, {"code": "onTouchEnter: function (event)\tif (this.enabled && this.game.input.enabled && this.touchEnterCallback) {\n\t\tthis.touchEnterCallback.call(this.callbackContext, event);\n\t\tevent.preventDefault();\n\t}\n},\n", "CodeBleu_score": 24.30509177572005}]}
