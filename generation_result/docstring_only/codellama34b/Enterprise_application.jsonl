{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\n    # Retrieve attachment IDs from HTTP request arguments\n    attachment_ids = self.request.args.getlist('attachment_ids')\n\n    # Verify read access rights and rules for the attachments\n    attachments = self.get_attachments(attachment_ids)\n\n    # Build zip file from the attachments' content\n    zip_file = self.build_zip_file(attachments)\n\n    # Prepare HTTP headers for the zip file\n    headers = self.prepare_zip_headers(zip_file)\n\n    # Return the zip file as an HTTP response\n    return self.send_file(zip_file, headers=headers)\n\n", "CodeBleu_score": 23.931223104872917}, {"code": "def export_zip_documents(self, **args)\n    # Get attachment IDs from HTTP request arguments\n    attachment_ids = self.request.get('attachment_ids', None)\n    if attachment_ids is None:\n        self.response.out.write(\n            'Error: No attachment IDs specified. Please specify attachment IDs in the HTTP request arguments.')\n        return\n    attachment_ids = attachment_ids.split(',')\n\n    # Verify read access rights and rules for the attachments\n    attachments = []\n    for attachment_id in attachment_ids:\n        attachment = Attachment.get_by_id(long(attachment_id))\n        if attachment is None:\n            self.response.out.write(\n                'Error: Attachment with ID %s does not exist.' % attachment_id)\n            return\n        if not self.user.has_read_access(attachment):\n            self.response.out.write(\n                'Error: You do not have read access rights for attachment with ID %s.' % attachment_id)\n            return\n        if not attachment.has_access_rule(self.user, 'read'):\n            self.response.out.write(\n                'Error: You do not have access rights to read attachment with ID %s.' % attachment_id)\n            return\n        attachments.append(attachment)\n\n    # Build a zip file from the attachments' content\n    zip_file = StringIO()\n    zip_archive = zipfile.ZipFile(zip_file, 'w')\n    for attachment in attachments:\n        zip_archive.writestr(attachment.filename, attachment.content)\n    zip_archive.close()\n\n    # Prepare HTTP headers for the zip file\n    self.response.headers['Content-Type'] = 'application/zip'\n    self.response.headers['Content-Disposition'] = 'attachment; filename=\"%s.zip\"' % self.user.username\n\n    # Return the zip file as an HTTP response\n    self.response.out.write(zip_file.getvalue())", "CodeBleu_score": 28.526097837661368}, {"code": "def export_zip_documents(self, **args)\n\n    # get arguments from HTTP request\n    attachment_ids = args.get('attachment_ids', None)\n\n    # verify read access right\n    if not self.has_access_right('read'):\n        self.write_message(\"You don't have access right to export documents.\")\n        return\n\n    # verify attachment IDs\n    if not attachment_ids:\n        self.write_message(\"No attachment IDs found in HTTP request.\")\n        return\n    if not isinstance(attachment_ids, list):\n        self.write_message(\"The attachment IDs in HTTP request must be a list.\")\n        return\n\n    # verify attachment IDs\n    for attachment_id in attachment_ids:\n        attachment = self.get_attachment(attachment_id)\n        if not attachment:\n            self.write_message(\"Attachment ID '%s' not found.\" % attachment_id)\n            return\n        if not attachment.get('content'):\n            self.write_message(\"Attachment ID '%s' has no content.\" % attachment_id)\n            return\n\n    # build zip file\n    import zipfile\n    import io\n    zip_file = io.BytesIO()\n    zip_file_name = 'export_zip_documents.zip'\n    with zipfile.ZipFile(zip_file, 'w', zipfile.ZIP_DEFLATED) as zip_file_object:\n        for attachment_id in attachment_ids:\n            attachment = self.get_attachment(attachment_id)\n            file_name = attachment.get('file_name')\n            content = attachment.get('content')\n            zip_file_object.writestr(file_name, content)\n\n    # prepare HTTP headers\n    self.set_header('Content-Type', 'application/zip')\n    self.set_header('Content-Disposition', 'attachment; filename=\"%s\"' % zip_file_name)\n\n    # return zip file as HTTP response\n    self.write(zip_file.getvalue())", "CodeBleu_score": 27.917025266647823}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\n    values = super(Portal, self)._prepare_home_portal_values(counters)\n    if self.env['account.move'].check_access_rights('read', raise_exception=False):\n        values['invoice_count'] = counters['invoice_count']\n        values['bill_count'] = counters['bill_count']\n    return values", "CodeBleu_score": 14.597015726927525}, {"code": "def _prepare_home_portal_values(self, counters)\n    values = super(_prepare_home_portal_values, self)._prepare_home_portal_values(counters)\n    if self.env.user.has_group('account.group_account_invoice'):\n        values.update({\n            'invoice_count': counters['invoice'],\n        })\n    if self.env.user.has_group('account.group_account_invoice'):\n        values.update({\n            'bill_count': counters['bill'],\n        })\n    return values\n", "CodeBleu_score": 20.868626861841946}, {"code": "def _prepare_home_portal_values(self, counters)\n    values = super(Portal, self)._prepare_home_portal_values(counters)\n    if self.user_has_groups('base.group_user'):\n        values['invoice_count'] = counters['invoice']\n        values['bill_count'] = counters['bill']\n    return values\n\n", "CodeBleu_score": 11.551822488822088}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n    from s3 import s3_orderby_fields\n    from s3.s3utils import s3_set_extension\n    from s3.s3validators import IS_ONE_OF\n\n    T = current.T\n    db = current.db\n    s3db = current.s3db\n    auth = current.auth\n    request = current.request\n    response = current.response\n    session = current.session\n    s3 = current.response.s3\n    settings = current.deployment_settings\n\n    # Get the current user\n    user = auth.user\n    if not user:\n        redirect(URL(c=\"default\", f=\"user\", args=\"login\"))\n\n    # Get the invoice table\n    itable = s3db.fin_voucher_invoice\n\n    # Get the invoice_billing table\n    btable = s3db.fin_voucher_invoice_billing\n\n    # Get the invoice_item table\n    itable = s3db.fin_voucher_invoice_item\n\n    # Get the invoice_item table\n    ltable = s3db.fin_voucher_invoice_item_line\n\n    # Get the product table\n    ptable = s3db.fin_voucher_program\n\n    # Get the product table\n    ctable = s3db.fin_voucher_claim\n\n    # Get the product table\n    btable = s3db.fin_voucher_billing\n\n    # Get the product table\n    dtable = s3db.fin_voucher_debit\n\n    # Get the product table\n    stable = s3db.fin_voucher_transaction\n\n    # Get the product table\n    ftable = s3db.fin_voucher_program_service\n\n    # Get the product table\n    mtable = s3db.fin_voucher_service_location\n\n    # Get the product table\n    ltable = s3db.fin_voucher_service_location_line\n\n    # Get the product table\n    htable = s3db.fin_voucher_program_service_location", "CodeBleu_score": 27.875616681960757}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the values needed for displaying invoices\n    # Prepare the", "CodeBleu_score": 7.211538461538461}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n    # Set the pagination\n    limit = 10\n    offset = (page - 1) * limit\n\n    # Set the sorting/filtering options\n    if sortby is None:\n        sortby = 'invoice_date'\n    if filterby is None:\n        filterby = 'all'\n\n    # Set the date range\n    if date_begin is None:\n        date_begin = '2018-01-01'\n    if date_end is None:\n        date_end = '2018-12-31'\n\n    # Retrieve the invoices\n    invoices = self.get_my_invoices(date_begin, date_end, sortby, filterby, offset, limit)\n\n    # Update the session history\n    self.update_session_history(invoices)\n\n    # Render the invoices page\n    return self.render('portal_my_invoices.html', invoices=invoices, date_begin=date_begin, date_end=date_end, sortby=sortby, filterby=filterby)", "CodeBleu_score": 29.894667785125506}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\n    # Get the invoice\n    invoice = frappe.get_doc(\"Sales Invoice\", invoice_id)\n\n    # Check if the invoice exists\n    if not invoice:\n        frappe.throw(_(\"Invoice not found\"), title=_(\"Not Found\"))\n\n    # Check if the invoice is a draft\n    if invoice.docstatus == 0:\n        frappe.throw(_(\"Draft invoices are not permitted\"), title=_(\"Not Permitted\"))\n\n    # Check if the invoice is cancelled\n    if invoice.docstatus == 2:\n        frappe.throw(_(\"Cancelled invoices are not permitted\"), title=_(\"Not Permitted\"))\n\n    # Check if the invoice is a return invoice\n    if invoice.is_return:\n        frappe.throw(_(\"Return invoices are not permitted\"), title=_(\"Not Permitted\"))\n\n    # Check if the invoice is a credit note\n    if invoice.is_return:\n        frappe.throw(_(\"Credit notes are not permitted\"), title=_(\"Not Permitted\"))\n\n    # Check if the invoice is unpaid\n    if invoice.outstanding_amount > 0:\n        frappe.throw(_(\"Unpaid invoices are not permitted\"), title=_(\"Not Permitted\"))\n\n    # Check if the invoice is overdue\n    if invoice.outstanding_amount < 0:\n        frappe.throw(_(\"Overdue invoices are not permitted\"), title=_(\"Not Permitted\"))\n\n    # Check if the invoice is a consolidated invoice\n    if invoice.consolidated_invoice:\n        frappe.throw(_(\"Consolidated invoices are not permitted\"), title=_(\"Not Permitted\"))\n\n    # Check if the invoice is a proforma invoice\n    if invoice.is_proforma:\n        frappe.throw(_(\"Proforma invoices are not permitted\"), title=_(\"Not Permitted\"))\n\n    # Check if the invoice is a tax invoice\n    if invoice.is_tax_invoice:\n        frappe.throw(_(\"Tax invo", "CodeBleu_score": 21.45078363509888}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n    from Acquisition import aq_inner\n    from bika.lims import bikaMessageFactory as _\n    from bika.lims.utils import tmpID\n    from bika.lims.utils import to_utf8\n    from bika.lims.utils import t\n    from bika.lims.browser.bika_listing import bikaListingView\n    from bika.lims.browser.bika_listing import WorkflowAction\n    from bika.lims.browser.bika_listing import WorkflowActionEvent\n    from bika.lims.browser.bika_listing import WorkflowActionCondition\n    from bika.lims.browser.bika_listing import WorkflowActionCategory\n    from bika.lims.browser.bika_listing import WorkflowActionCategoryCondition\n    from bika.lims.browser.bika_listing import WorkflowActionConditionException\n    from bika.lims.browser.bika_listing import WorkflowActionEventException\n    from bika.lims.browser.bika_listing import WorkflowActionCategoryException\n    from bika.lims.browser.bika_listing import WorkflowActionException\n    from bika.lims.browser.bika_listing import WorkflowActionCategoryConditionException\n    from bika.lims.browser.bika_listing import WorkflowActionEventConditionException\n    from bika.lims.browser.bika_listing import WorkflowActionCategoryConditionException\n    from bika.lims.browser.bika_listing import WorkflowActionCategoryEventException\n    from bika.lims.browser.bika_listing import WorkflowActionCategoryEventConditionException\n    from bika.lims.browser.bika_listing import WorkflowActionCategoryEventConditionException\n    from bika.lims.browser.bika_listing import WorkflowActionCategoryEventConditionException\n    from bika.lims.browser.bika_listing import WorkflowActionCategoryEventConditionException\n    from bika.lims.browser.bika_listing import WorkflowActionCategoryEventConditionException\n    from bika.lims.browser.bika_listing import WorkflowActionCategory", "CodeBleu_score": 9.02932738796031}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n    from Acquire.Identity import Authorisation\n    from Acquire.Service import get_trusted_service_url\n    from Acquire.Service import get_this_service\n    from Acquire.Service import call_function\n    from Acquire.ObjectStore import bytes_to_string\n    from Acquire.Crypto import PublicKey as _PublicKey\n    from Acquire.ObjectStore import string_to_bytes as _string_to_bytes\n    from Acquire.Service import Service as _Service\n    from Acquire.Identity import Authorisation as _Authorisation\n    from Acquire.Service import Service as _Service\n    from Acquire.Crypto import PrivateKey as _PrivateKey\n    from Acquire.Crypto import OTP as _OTP\n    from Acquire.Crypto import PublicKey as _PublicKey\n    from Acquire.Crypto import get_private_key as _get_private_key\n    from Acquire.Crypto import get_public_key as _get_public_key\n    from Acquire.Crypto import get_passphrase_secrets as _get_passphrase_secrets\n    from Acquire.Crypto import EncryptedSymmetricKey as _EncryptedSymmetricKey\n    from Acquire.Crypto import SymmetricKey as _SymmetricKey\n    from Acquire.Crypto import generate_symmetric_key as _generate_symmetric_key\n    from Acquire.Crypto import AES as _AES\n    from Acquire.Crypto import Hash as _Hash\n    from Acquire.Crypto import HMAC as _HMAC\n    from Acquire.Crypto import SignedMessage as _SignedMessage\n    from Acquire.Crypto import get_trusted_certificate_and_private_key as _get_trusted_certificate_and_private_key\n    from Acquire.Crypto import get_trusted_certificate as _get_trusted_certificate\n    from Acquire.Crypto import get_private_key as _get_private_key\n    from Acquire.Crypto import get_public_key as _get_public_key\n    from Acquire.Crypto import get_passphrase_secrets as _get_passphrase_secrets", "CodeBleu_score": 11.856435976980528}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n    # TODO: Remove this function when the product templates are updated in the demo data\n    #       (see https://github.com/odoo/odoo/pull/17352)\n    if not self.env.is_superuser():\n        return\n    product_template_domain = [('sale_ok', '=', True), ('type', '=', 'product')]\n    if company:\n        product_template_domain = expression.AND([product_template_domain, [('company_id', '=', company.id)]])\n    product_templates = self.env['product.template'].search(product_template_domain)\n    for product_template in product_templates:\n        if product_template.company_id.account_sale_tax_id:\n            product_template.write({'taxes_id': [(6, 0, [product_template.company_id.account_sale_tax_id.id])]})\n        if product_template.company_id.account_purchase_tax_id:\n            product_template.write({'supplier_taxes_id': [(6, 0, [product_template.company_id.account_purchase_tax_id.id])]})\n\n", "CodeBleu_score": 39.44551127669411}, {"code": "def _get_demo_data_products(self, company=False)\n    if company:\n        domain = [('company_id', '=', company.id)]\n    else:\n        domain = []\n    product_template_ids = self.env['product.template'].search(domain, limit=10)\n    if company and company.account_sale_tax_id:\n        product_template_ids.write({'taxes_id': [(6, 0, [company.account_sale_tax_id.id])]})\n    if company and company.account_purchase_tax_id:\n        product_template_ids.write({'supplier_taxes_id': [(6, 0, [company.account_purchase_tax_id.id])]})\n    return product_template_ids\n\n", "CodeBleu_score": 31.46537343362891}, {"code": "def _get_demo_data_products(self, company=False)\n    if company:\n        product_templates = self.env['product.template'].search(\n            [('company_id', '=', company.id)])\n        if company.account_sale_tax_id:\n            product_templates.write({\n                'taxes_id': [(6, 0, [company.account_sale_tax_id.id])]})\n        if company.account_purchase_tax_id:\n            product_templates.write({\n                'supplier_taxes_id': [(6, 0, [company.account_purchase_tax_id.id])]})\n\n", "CodeBleu_score": 26.806343819139713}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n    account_id = self.env['ir.model.data'].get_object_reference('account', xml_id)[1]\n    if account_id:\n        return account_id\n    else:\n        account_domain = [('company_id', '=', company.id), ('internal_type', '=', account_type)]\n        account_id = self.env['account.account'].search(account_domain, limit=1).id\n        if account_id:\n            return account_id\n        else:\n            return self.env['account.account'].search(account_domain, limit=1).id\n\n", "CodeBleu_score": 44.26669765745596}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n    account_id = self.env['ir.model.data'].get_object_reference(module='account', xml_id=xml_id)[1]\n    if account_id:\n        account = self.env['account.account'].browse(account_id)\n        if account.company_id.id == company.id:\n            return account\n    account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id', '=', account_type.id)], limit=1)\n    if account:\n        return account\n    return self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n\n", "CodeBleu_score": 43.12266168326767}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n    account = self.env['account.account'].search([('company_id', '=', company.id), ('xml_id', '=', xml_id)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id), ('internal_type', '=', account_type)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    return account\n", "CodeBleu_score": 45.64962943632966}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n    accounts = self.get_queryset()\n    accounts_by_company = accounts.filter(account_type=\"Current Year Earnings\").values('company').annotate(account_count=Count('company'))\n    for account in accounts_by_company:\n        if account['account_count'] > 1:\n            raise ValidationError(\"There can be only one account of type 'Current Year Earnings' for each company.\")\n", "CodeBleu_score": 18.56156737303242}, {"code": "def _check_account_type_unique_current_year_earning(self)\n    accounts = self.get_queryset().filter(account_type=\"Current Year Earnings\")\n    for company, account in accounts.values_list(\"company\", \"id\"):\n        if accounts.filter(company=company).count() > 1:\n            raise ValidationError(\n                \"There can only be one Current Year Earnings account per company.\"\n            )\n\n", "CodeBleu_score": 21.31774327760979}, {"code": "def _check_account_type_unique_current_year_earning(self)\n    accounts = self.get_accounts_by_type(AccountType.CURRENT_YEAR_EARNINGS)\n    if len(accounts) > 0:\n        accounts_grouped_by_company = {}\n        for account in accounts:\n            if account.company.id not in accounts_grouped_by_company:\n                accounts_grouped_by_company[account.company.id] = [account]\n            else:\n                accounts_grouped_by_company[account.company.id].append(account)\n        for company_id in accounts_grouped_by_company:\n            if len(accounts_grouped_by_company[company_id]) > 1:\n                raise ValidationError(\n                    \"There can only be one account of type Current Year Earnings per company.\"\n                )\n\n", "CodeBleu_score": 18.005445149495664}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n    if not name:\n        if self.env.context.get('partner_ids'):\n            return self.env['res.partner'].browse(self.env.context['partner_ids']).sorted(lambda p: p.name, reverse=True)\n        else:\n            return self.search([], limit=limit, order=order)\n    if domain is None:\n        domain = []\n    if operator == 'ilike' and not (name or '').strip():\n        domain = ['|', ('name', '=', False), ('name', '!=', False)]\n    else:\n        domain += [('name', operator, name)]\n    return self.search(domain, limit=limit, order=order)\n", "CodeBleu_score": 35.6332098091316}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n    if not name:\n        if self.env.context.get('section_id'):\n            domain = expression.AND([domain, [('section_id', '=', self.env.context['section_id'])]])\n        if self.env.context.get('tag_id'):\n            domain = expression.AND([domain, [('tag_ids', 'in', self.env.context['tag_id'])]])\n        if self.env.context.get('journal_id'):\n            domain = expression.AND([domain, [('journal_id', '=', self.env.context['journal_id'])]])\n        if self.env.context.get('partner_id'):\n            domain = expression.AND([domain, [('partner_id', '=', self.env.context['partner_id'])]])\n        if self.env.context.get('account_ids'):\n            domain = expression.AND([domain, [('id', 'in', self.env.context['account_ids'])]])\n        if self.env.context.get('favorite'):\n            domain = expression.AND([domain, [('favorite', '=', self.env.context['favorite'])]])\n        if self.env.context.get('type'):\n            domain = expression.AND([domain, [('type', '=', self.env.context['type'])]])\n        if self.env.context.get('mode'):\n            domain = expression.AND([domain, [('mode', '=', self.env.context['mode'])]])\n        if self.env.context.get('auto_reconcile'):\n            domain = expression.AND([domain, [('auto_reconcile', '=', self.env.context['auto_reconcile'])]])\n        if self.env.context.get('reconcile'):\n            domain = expression.AND([domain, [('reconcile', '=', self.env.context['reconcile'])]])\n        if self.env.context.get('reconcile_date'):\n            domain = expression.AND([domain, [('reconcile_date', '=', self.env.context['reconcile_", "CodeBleu_score": 35.511461212543736}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n    if not name and self.env.context.get('search_default_account_id'):\n        return self.env['account.account'].browse(self.env.context['search_default_account_id'])\n    if not name:\n        domain = expression.AND([domain, [('partner_id', '!=', False)]])\n        return self.search(domain, limit=limit, order=order)\n    if domain is None:\n        domain = []\n    if operator in expression.NEGATIVE_TERM_OPERATORS:\n        domain = expression.AND([domain, [('name', 'not like', name)]])\n    else:\n        domain = expression.AND([domain, [('name', operator, name)]])\n    return self.search(domain, limit=limit, order=order)\n\n", "CodeBleu_score": 42.79804433523531}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n    if self.env.context.get('lang') or self.env.context.get('website_id'):\n        return\n    for field in self._fields:\n        if field in excluded or field == 'name':\n            continue\n        if self[field] and self[field]._fields.get('name'):\n            self[field].copy_translations(new[field])\n        else:\n            new[field] = self[field]\n\n    # if the new record's name follows a specific pattern, it updates the translations for the name field in the cache to reflect the new name format\n    if new.name and new.name.startswith('/') and new.name.endswith('/'):\n        pattern = new.name\n        for lang in self.env['res.lang'].search([]):\n            if self.name in self._cache['translations'][lang.code]:\n                new._cache_set('translations', lang.code, self._cache['translations'][lang.code][self.name].replace(self.name, pattern))\n\n", "CodeBleu_score": 28.739505607404435}, {"code": "def copy_translations(self, new, excluded=())\n    excluded = list(excluded) + ['name']\n    for lang in self.env['res.lang'].search([]):\n        for field in self.fields_get(attributes=None).keys():\n            if field in excluded:\n                continue\n            value = self[field]\n            if isinstance(value, str) and value:\n                new.with_context(lang=lang[0]).write({field: value})\n            elif isinstance(value, bool):\n                new.with_context(lang=lang[0]).write({field: value})\n            elif isinstance(value, tuple):\n                new.with_context(lang=lang[0]).write({field: value[0]})\n\n    # update the cache to reflect the new name format\n    if new.name.startswith('/'):\n        new._fields['name'].get_translations(new, new.env['res.lang'].search([]))\n\n    return new", "CodeBleu_score": 29.758332737625455}, {"code": "def copy_translations(self, new, excluded=())\n    excluded = set(excluded)\n    excluded.add('name')\n    for field in self._fields:\n        if field in excluded:\n            continue\n        if not field.translate:\n            continue\n        new_value = getattr(self, field.name)\n        if new_value:\n            setattr(new, field.name, new_value)\n\n    # Update the cache for the new record's name field, if it follows a specific pattern\n    if new.name and new.name.startswith('New '):\n        new_name = new.name.replace('New ', '')\n        new.env['ir.translation']._update_translations_cache(new, 'name', new_name)\n\n", "CodeBleu_score": 26.56887142314513}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n    if self.env.context.get('active_model') == 'crm.lead' and self.env.context.get('active_id'):\n        lead = self.env['crm.lead'].browse(self.env.context['active_id'])\n        if lead.probability == 100:\n            self = lead.opportunity_id\n        else:\n            return {'type': 'ir.actions.act_window_close'}\n    if not self.env.context.get('active_model') == 'crm.lead' and not self.env.context.get('active_id'):\n        return {'type': 'ir.actions.act_window_close'}\n    if self.probability == 100:\n        self.stage_id.fold = False\n        self.stage_id.onchange_fold()\n    return {\n        'name': \"Customer Invoices\",\n        'view_mode': 'tree,form',\n        'res_model': 'account.move',\n        'type': 'ir.actions.act_window',\n        'domain': [('state', 'in', ['posted', 'all']), ('type', 'in', ['out_invoice', 'out_refund']), ('partner_id', '=', self.partner_id.id), ('invoice_line_ids.analytic_account_id', '=', self.id)],\n        'context': {'default_type': 'out_invoice', 'default_partner_id': self.partner_id.id, 'default_opportunity_id': self.id, 'default_invoice_line_ids': [{'analytic_account_id': self.id}], 'default_invoice_line_ids_nbr': 1, 'default_invoice_line_ids_qty': 1, 'default_invoice_line_ids_uom_id': self.product_uom_id.id, 'default_invoice_line_ids_price_unit': self.price_unit, 'default_invoice_line_ids_name': self.name, 'default_invoice_line_ids_account_id", "CodeBleu_score": 30.87352534875214}, {"code": "def action_view_invoice(self)\n    if not self.id:\n        return False\n    self.ensure_one()\n    domain = [\n        ('move_id.state', 'in', ['draft', 'posted']),\n        ('move_id.type', 'in', ['out_invoice', 'out_refund']),\n        ('move_id.invoice_sale_line_ids.sale_line_ids', 'in', self.ids),\n    ]\n    if self.analytic_account_id:\n        domain.append(('move_id.analytic_account_id', '=', self.analytic_account_id.id))\n    move_ids = self.env['account.move.line'].search(domain).mapped('move_id').ids\n    return {\n        'name': 'Invoices',\n        'domain': [('id', 'in', move_ids)],\n        'context': {'default_type': 'out_invoice'},\n        'res_model': 'account.move',\n        'type': 'ir.actions.act_window',\n        'view_mode': 'tree,form',\n        'view_type': 'form',\n        'view_id': False,\n        'target': 'current',\n    }\n\n", "CodeBleu_score": 40.21433164377296}, {"code": "def action_view_invoice(self)\n    self.ensure_one()\n    move_line_ids = self.env['account.move.line'].search([('sale_line_ids', 'in', self.ids), ('analytic_account_id', '!=', False)])\n    move_ids = self.env['account.move'].search([('id', 'in', move_line_ids.mapped('move_id').ids), ('state', '!=', 'draft')])\n    return {\n        'name': 'Invoices',\n        'view_mode': 'tree,form',\n        'res_model': 'account.move',\n        'type': 'ir.actions.act_window',\n        'domain': [('id', 'in', move_ids.ids)],\n        'context': {\n            'create': False,\n            'edit': False,\n            'view_no_maturity': True,\n            'view_no_partner': True,\n            'view_no_payment': True,\n            'view_no_invoice': True,\n            'view_no_order': True,\n            'view_no_picking': True,\n            'view_no_stock': True,\n            'view_no_address': True,\n            'view_no_price': True,\n            'view_no_weight': True,\n            'view_no_volume': True,\n            'view_no_company': True,\n            'view_no_user': True,\n            'view_no_currency': True,\n            'view_no_date': True,\n            'view_no_reference': True,\n            'view_no_check_total': True,\n            'view_no_check_communication': True,\n            'view_no_check_invoice': True,\n            'view_no_check_picking': True,\n            'view_no_check_move': True,\n            'view_no_check_quantity': True,\n            'view_no_check_picking_type': True,\n            'view_no_check_picking_lock': True,\n            'view_no_check_picking_in': True,\n            'view_", "CodeBleu_score": 21.66957440053221}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n    # Ensure a single record context\n    if len(self.ids) != 1:\n        raise UserError(_('This action can only be applied on a single record.'))\n    # Search for account move lines related to purchase types and the current record's ID\n    move_line_ids = self.env['account.move.line'].search([\n        ('account_id.internal_type', '=', 'purchase'),\n        ('account_id.internal_group', '=', 'purchase'),\n        ('purchase_id', '=', self.ids[0]),\n    ])\n    # Retrieve distinct move IDs\n    move_ids = move_line_ids.mapped('move_id').ids\n    # Construct and return an action to display vendor bills in a tree and form view, with a specific context to prevent creation and set the default move type to 'in_invoice'\n    return {\n        'name': _('Vendor Bills'),\n        'domain': [('id', 'in', move_ids)],\n        'res_model': 'account.move',\n        'view_mode': 'tree,form',\n        'type': 'ir.actions.act_window',\n        'context': {\n            'default_type': 'in_invoice',\n            'create': False,\n        },\n    }\n\n", "CodeBleu_score": 37.28229524282046}, {"code": "def action_view_vendor_bill(self)\n\n    self.ensure_one()\n    move_lines = self.env['account.move.line'].search([('account_id.user_type_id.type', '=', 'payable'), ('purchase_line_id', '=', self.id)])\n    move_ids = move_lines.mapped('move_id').ids\n    return {\n        'name': 'Vendor Bills',\n        'type': 'ir.actions.act_window',\n        'res_model': 'account.move',\n        'view_mode': 'tree,form',\n        'domain': [('id', 'in', move_ids)],\n        'context': {\n            'default_type': 'in_invoice',\n            'default_purchase_id': self.id,\n            'create': False,\n        },\n    }", "CodeBleu_score": 24.56661851629029}, {"code": "def action_view_vendor_bill(self)\n    if self.env.context.get('active_id'):\n        self.env.context.update({'active_id': self.env.context['active_id']})\n    if self.env.context.get('active_ids'):\n        self.env.context.update({'active_ids': self.env.context['active_ids']})\n    aml_obj = self.env['account.move.line']\n    aml_ids = aml_obj.search([('account_id', '=', self.id), ('purchase_line_id', '!=', False)])\n    move_ids = aml_ids.mapped('move_id').ids\n    action = self.env[\"ir.actions.actions\"]._for_xml_id(\"purchase.action_view_vendor_bill\")\n    action.update({\n        'context': {'default_move_type': 'in_invoice', 'search_default_posted': 0, 'default_type': 'in_invoice', 'default_journal_id': self.id, 'search_default_journal_id': self.id, 'search_default_account_id': self.id, 'search_default_move_id': move_ids},\n        'domain': [('id', 'in', move_ids)],\n    })\n    return action\n\n", "CodeBleu_score": 37.67199220873375}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n    if len(values) > 1 and 'attachment_ids' in values:\n        del values['attachment_ids']\n    with self.pool.cursor() as cr:\n        cr.execute(\"SELECT id FROM %s WHERE id IN %%s\" % self._table, (tuple(self.ids),))\n        self.env['ir.attachment'].search([('res_model', '=', self._name), ('res_id', 'in', [r[0] for r in cr.fetchall()])]).unlink()\n    return super(MailThread, self).write(values)", "CodeBleu_score": 38.35362703720722}, {"code": "def write(self, values)\n    if len(values) > 1:\n        if 'attachment_ids' in values:\n            values.pop('attachment_ids')\n        with self.pool.cursor() as cr:\n            cr.execute('SELECT id, attachment_ids FROM %s WHERE id IN %%s' % self._table, (tuple(values.keys()),))\n            for record in cr.dictfetchall():\n                if record['attachment_ids']:\n                    self.pool.get('ir.attachment').check(cr, self.uid, record['attachment_ids'])\n        return super(ClassName, self).write(values)\n    else:\n        return super(ClassName, self).write(values)", "CodeBleu_score": 38.0712705301669}, {"code": "def write(self, values)\n    if len(values) > 1:\n        values = values.copy()\n        if 'attachment_ids' in values:\n            del values['attachment_ids']\n    with self.env.cr.savepoint():\n        self._check_attachments(values)\n        return super(MailThread, self).write(values)\n", "CodeBleu_score": 37.56398775718248}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\n    bank_account_id = self.env.context.get('bank_account_id')\n    if bank_account_id:\n        bank_account = self.env['res.partner.bank'].browse(bank_account_id)\n    else:\n        bank_account = self.env['res.partner.bank'].search([\n            ('acc_number', '=', self.acc_number),\n            ('partner_id', '=', self.partner_id.id),\n        ], limit=1)\n        if not bank_account and not self.env.company.create_bank_accounts_automatically:\n            return self.env['res.partner.bank']\n        if not bank_account:\n            bank_account = self.env['res.partner.bank'].create({\n                'acc_number': self.acc_number,\n                'partner_id': self.partner_id.id,\n            })\n    return bank_account\n\n", "CodeBleu_score": 56.78923627570589}, {"code": "def _find_or_create_bank_account(self)\n    self.ensure_one()\n    if self.env.company.use_bank_account_statement_import:\n        bank_account = self.env['res.partner.bank'].search([('acc_number', '=', self.acc_number), ('partner_id', '=', self.partner_id.id)], limit=1)\n        if not bank_account:\n            bank_account = self.env['res.partner.bank'].create({\n                'acc_number': self.acc_number,\n                'partner_id': self.partner_id.id,\n                'bank_id': self.bank_id.id,\n                'acc_type': self.acc_type,\n                'company_id': self.company_id.id,\n            })\n        return bank_account\n    return self.env['res.partner.bank']\n", "CodeBleu_score": 56.30555938916809}, {"code": "def _find_or_create_bank_account(self)\n    bank_account = self.env['res.partner.bank'].with_context(active_test=False).search([('acc_number', '=', self.acc_number), ('partner_id', '=', self.partner_id.id)], limit=1)\n    if self.env['ir.config_parameter'].sudo().get_param('account.skip_bank_account_creation'):\n        return self.env['res.partner.bank']\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'acc_number': self.acc_number,\n            'partner_id': self.partner_id.id,\n            'acc_type': self.acc_type,\n            'bank_id': self.bank_id.id,\n            'currency_id': self.currency_id.id,\n            'company_id': self.company_id.id,\n        })\n    return bank_account.filtered(lambda x: x.company_id.id == self.company_id.id)\n", "CodeBleu_score": 58.19910436148979}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n    # Retrieve the company currency and the company amount\n    company_currency = self.env.company.currency_id\n    company_amount = self.env['res.currency'].compute(amount_currency, currency, company_currency, round=False)\n    # Retrieve the journal currency and the journal amount\n    journal_currency = self.journal_id.currency_id\n    journal_amount = self.env['res.currency'].compute(amount_currency, currency, journal_currency, round=False)\n    # Retrieve the transaction currency and the transaction amount\n    transaction_currency = currency\n    transaction_amount = amount_currency\n    # Retrieve the balance currency and the balance amount\n    balance_currency = self.env['res.currency'].browse(balance.currency_id.id)\n    balance_amount = balance.amount\n    # Adjust the transaction amount and balance accordingly\n    if currency == balance_currency:\n        transaction_amount = amount_currency\n        balance_amount = balance.amount\n    elif currency == company_currency:\n        transaction_amount = company_amount\n        balance_amount = self.env['res.currency'].compute(balance.amount, balance_currency, company_currency, round=False)\n    elif currency == journal_currency:\n        transaction_amount = journal_amount\n        balance_amount = self.env['res.currency'].compute(balance.amount, balance_currency, journal_currency, round=False)\n    # Prepare the counterpart amounts\n    counterpart_amounts = {\n        'transaction_currency': transaction_currency,\n        'transaction_amount': transaction_amount,\n        'journal_currency': journal_currency,\n        'journal_amount': journal_amount,\n        'company_currency': company_currency,\n        'company_amount': company_amount,\n        'balance_currency': balance_currency,\n        'balance_amount': balance_amount,\n    }\n    return counterpart_amounts\n", "CodeBleu_score": 25.758052988444476}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\n    # Retrieve the relevant accounting amounts and currencies\n    amount_company = balance.company_currency_id.round(amount_currency)\n    amount_journal = balance.journal_currency_id.round(amount_currency)\n    amount_transaction = currency.round(amount_currency)\n\n    # Compute the transaction amount, journal amount, and company amount using various exchange rates\n    if currency == balance.company_currency_id:\n        amount_transaction = amount_journal\n        amount_journal = amount_company\n    elif currency == balance.journal_currency_id:\n        amount_transaction = amount_company\n    else:\n        amount_journal = currency._convert(\n            amount_transaction, balance.company_currency_id, balance.company_id, balance.date\n        )\n    amount_company = currency._convert(\n        amount_transaction, balance.company_currency_id, balance.company_id, balance.date\n    )\n\n    # Adjust the transaction amount and balance accordingly\n    if currency == balance.company_currency_id:\n        amount_transaction = amount_transaction.copy()\n        amount_transaction.amount = 0.0\n    elif currency == balance.journal_currency_id:\n        amount_transaction = amount_transaction.copy()\n        amount_transaction.amount = 0.0\n        balance = balance.copy()\n        balance.amount = 0.0\n\n    return {\n        \"amount_transaction\": amount_transaction,\n        \"amount_journal\": amount_journal,\n        \"amount_company\": amount_company,\n        \"balance\": balance,\n    }", "CodeBleu_score": 27.233956405540148}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n    # Retrieve the transaction currency and company currency\n    transaction_currency = currency.id\n    company_currency = self.company_id.currency_id.id\n\n    # Retrieve the company currency rate and the transaction currency rate\n    company_currency_rate = self.company_id.currency_id._get_conversion_rate(transaction_currency, self.company_id, self.date)\n    transaction_currency_rate = currency._get_conversion_rate(transaction_currency, self.company_id, self.date)\n\n    # Compute the transaction amount and journal amount\n    transaction_amount = amount_currency * transaction_currency_rate\n    journal_amount = transaction_amount * company_currency_rate\n\n    # Compute the company amount\n    company_amount = balance * company_currency_rate\n\n    # If the company currency is the transaction currency, adjust the transaction amount and balance accordingly\n    if company_currency == transaction_currency:\n        transaction_amount = balance\n        balance = company_amount\n\n    # Return the transaction amount, journal amount, and company amount\n    return {\n        'transaction_amount': transaction_amount,\n        'journal_amount': journal_amount,\n        'company_amount': company_amount,\n    }", "CodeBleu_score": 12.575175873440186}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n    payment_method_line_commands = []\n    for journal in self:\n        payment_method_line_commands = []\n        if journal.type in ('bank', 'cash'):\n            payment_method_lines = self.env['account.payment.method.line'].search([('journal_id', '=', journal.id)])\n            payment_method_lines.unlink()\n            payment_methods = self.env['account.payment.method'].search([('payment_type', '=', 'outbound'), ('journal_id', '=', journal.id)])\n            for payment_method in payment_methods:\n                payment_method_line_commands.append((0, 0, {'payment_method_id': payment_method.id}))\n        journal.payment_method_line_ids = payment_method_line_commands\n\n", "CodeBleu_score": 34.65307112294534}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n    payment_method_line_commands = []\n    for journal in self:\n        payment_method_line_commands = []\n        if journal.type in ('bank', 'cash'):\n            payment_methods = self.env['account.payment.method'].search([('payment_type', '=', 'outbound'), ('journal_id', '=', journal.id)])\n            for payment_method in payment_methods:\n                payment_method_line_commands.append((0, 0, {'payment_method_id': payment_method.id}))\n        journal.payment_method_line_ids = payment_method_line_commands\n\n", "CodeBleu_score": 35.26537241115486}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n    for journal in self:\n        payment_method_line_ids = []\n        if journal.type in ('bank', 'cash'):\n            payment_methods = self.env['account.payment.method'].search([('payment_type', '=', 'outbound')])\n            for payment_method in payment_methods:\n                payment_method_line_ids.append((0, 0, {'payment_method_id': payment_method.id}))\n        journal.payment_method_line_ids = payment_method_line_ids\n\n", "CodeBleu_score": 38.54137379787381}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n    self.ensure_one()\n    if self.invoice_date and not self.date:\n        if self.is_sale_document():\n            self.date = self.invoice_date\n        else:\n            self.date = self.invoice_date + self.tax_report_accounting_date_difference()\n    elif not self.date:\n        self.date = fields.Date.today()\n\n    if self.date != self.date_old:\n        self.write({'date': self.date})\n        self.env['account.move.line']._recompute_tax_lines(self.id)\n        self.env['account.move.line']._recompute_tax_lines(self.id, force_recompute=True)\n\n", "CodeBleu_score": 30.13279181487367}, {"code": "def _compute_date(self)\n    if self.date:\n        return self.date\n    if self.invoice_date:\n        if self.is_sale_document():\n            return self.invoice_date\n        accounting_date = self.invoice_date + timedelta(days=self.company_id.tax_report_accounting_date_difference)\n        if accounting_date.date() != date.today():\n            self.date = accounting_date\n            self.env['account.move.line'].search([('move_id', '=', self.id)])._recompute_tax_lines()\n    else:\n        self.date = date.today()\n    return self.date\n\n", "CodeBleu_score": 28.58783486667137}, {"code": "def _compute_date(self)\n    if self.date:\n        return self.date\n    elif self.invoice_date:\n        if self.is_sale_document():\n            return self.invoice_date\n        else:\n            date = self.invoice_date\n            if self.tax_report_date_from:\n                date = self.tax_report_date_from\n            if self.tax_report_date_to:\n                date = self.tax_report_date_to\n            if date:\n                accounting_date = date + relativedelta(days=self.company_id.tax_cash_basis_journal_period)\n                if accounting_date.date() != fields.Date.today():\n                    self.write({'date': accounting_date})\n                    self.env['account.move'].post_move_recompute_tax_lines(self)\n            return date\n    return fields.Date.today()\n\n", "CodeBleu_score": 29.214952562808534}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n    if self.type in ('out_invoice', 'out_refund'):\n        if self.partner_id.property_supplier_payment_term_id:\n            self.payment_term_id = self.partner_id.property_supplier_payment_term_id.id\n        else:\n            self.payment_term_id = False\n    elif self.type in ('in_invoice', 'in_refund'):\n        if self.partner_id.property_supplier_payment_term_id:\n            self.payment_term_id = self.partner_id.property_supplier_payment_term_id.id\n        else:\n            self.payment_term_id = False\n    else:\n        self.payment_term_id = False\n\n", "CodeBleu_score": 33.38573997036032}, {"code": "def _compute_invoice_payment_term_id(self)\n    if self.invoice_payment_term_id:\n        return\n    if self.type in ('out_invoice', 'out_refund', 'out_receipt'):\n        self.invoice_payment_term_id = self.partner_id.with_company(self.company_id).property_supplier_payment_term_id.id\n    elif self.type in ('in_invoice', 'in_refund', 'in_receipt'):\n        self.invoice_payment_term_id = self.partner_id.with_company(self.company_id).property_supplier_payment_term_id.id\n    else:\n        self.invoice_payment_term_id = False\n\n", "CodeBleu_score": 32.20889279724785}, {"code": "def _compute_invoice_payment_term_id(self)\n    if self.type in ('out_invoice', 'out_refund', 'in_invoice', 'in_refund'):\n        if self.type in ('out_invoice', 'out_refund'):\n            self.invoice_payment_term_id = self.partner_id.with_company(self.company_id).property_supplier_payment_term_id.id\n        elif self.type in ('in_invoice', 'in_refund'):\n            self.invoice_payment_term_id = self.partner_id.with_company(self.company_id).property_supplier_payment_term_id.id\n        else:\n            self.invoice_payment_term_id = False\n\n", "CodeBleu_score": 29.83690812008263}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)    # First, we categorize taxes by their country and company.\n    tax_groups = self.env['account.tax.group'].search([('company_id', '=', self.company_id.id)])\n    tax_group_dict = {}\n    for tax in self:\n        key = (tax.country_id.id, tax.company_id.id)\n        if key not in tax_group_dict:\n            tax_group_dict[key] = tax_groups.filtered(lambda g: g.country_id.id == tax.country_id.id and g.company_id.id == tax.company_id.id)\n        tax.tax_group_id = tax_group_dict[key] and tax_group_dict[key][0].id or False", "CodeBleu_score": 21.660935584612584}, {"code": " def _compute_tax_group_id(self)    tax_groups = self.env['account.tax.group']\n    tax_groups_ids = {}\n    for tax in self:\n        key = (tax.company_id.id, tax.country_id.id)\n        if key not in tax_groups_ids:\n            tax_groups_ids[key] = tax_groups.search([('company_id', '=', tax.company_id.id), ('country_id', '=', tax.country_id.id)], limit=1)\n        if not tax_groups_ids[key]:\n            tax_groups_ids[key] = tax_groups.search([('company_id', '=', tax.company_id.id), ('country_id', '=', False)], limit=1)\n        tax.tax_group_id = tax_groups_ids[key]", "CodeBleu_score": 25.526752886847508}, {"code": " def _compute_tax_group_id(self)    for tax in self:\n        tax_groups = self.env['account.tax.group'].search([('tax_ids','=',tax.id)])\n        if tax_groups:\n            tax.tax_group_id = tax_groups[0]\n        else:\n            tax_groups = self.env['account.tax.group'].search([('tax_ids','=',tax.id),('company_id','=',tax.company_id.id)])\n            if tax_groups:\n                tax.tax_group_id = tax_groups[0]\n            else:\n                tax_groups = self.env['account.tax.group'].search([('tax_ids','=',tax.id),('company_id','=',False)])\n                if tax_groups:\n                    tax.tax_group_id = tax_groups[0]\n\n  def _get_tax_group_id(self):\n    \"\"\"This function returns the tax group for the given tax. It first searches for a tax group with the same country and company. If no exact match is found, it searches for a tax group without a specified country but within the same company.\"\"\"\n    tax_group_id = self.tax_group_id\n    if not tax_group_id:\n        tax_group_id = self.env['account.tax.group'].search([('tax_ids','=',self.id),('company_id','=',self.company_id.id)])\n        if not tax_group_id:\n            tax_group_id = self.env['account.tax.group'].search([('tax_ids','=',self.id),('company_id','=',False)])\n    return tax_group_id", "CodeBleu_score": 30.652416188449877}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n    import requests\n\n    # Set the database in the session\n    requests.get(url + '/web/database/manager', auth=(login, password), params={'db': db})\n\n    # Prepare the POST request data\n    data = {\n        'login': login,\n        'password': password,\n        'db': db,\n        'force': 'true' if force else 'false',\n    }\n\n    # Read the module file\n    with open(module_file, 'rb') as f:\n        data['file'] = f\n\n        # Upload the module file\n        response = requests.post(url + '/base_import_module/login_upload', data=data, headers={'Content-Type': 'multipart/form-data'})\n\n    # Check if the module file was uploaded successfully\n    if response.status_code != 200:\n        raise Exception('Failed to upload the module file.')\n\n    # Return the server's response text\n    return response.text", "CodeBleu_score": 50.71917717169728}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n    # Set the database in the session\n    self.session.get(url)\n    # Prepare the POST request data\n    data = {'login': login, 'password': password, 'db': db}\n    if force:\n        data['force'] = '1'\n    # Read the module file\n    with open(module_file, 'rb') as f:\n        module_file_content = f.read()\n    # Upload the module file to the server\n    response = self.session.post(url + 'base_import_module/login_upload', data=data, files={'module_file': module_file_content})\n    # If the server does not have the required module installed or is outdated, raise an exception\n    if 'module not found' in response.text:\n        raise Exception('The server does not have the required module installed.')\n    if 'module is outdated' in response.text:\n        raise Exception('The server has an outdated module.')\n    # Return the server's response text\n    return response.text", "CodeBleu_score": 50.78631059277306}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n    # Set the database in the session\n    self.get(url)\n    # Prepare the POST request data\n    data = {\n        'db': db,\n        'login': login,\n        'password': password,\n    }\n    if force:\n        data['force'] = '1'\n    # Read the module file\n    with open(module_file, 'rb') as f:\n        module_file_content = f.read()\n    # Send the POST request\n    response = self.post(url + '/base_import_module/login_upload', data=data, files={'file': module_file_content})\n    # Check for errors\n    if response.status_code != 200:\n        raise Exception('Server error: ' + str(response.status_code))\n    if 'error' in response.text:\n        raise Exception('Server error: ' + response.text)\n    # Return the response text\n    return response.text\n\n", "CodeBleu_score": 48.58287145117723}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n    import os\n    import sys\n    import logging\n    from odoo.tools import config\n    from odoo.modules.registry import Registry\n    from odoo.tools.translate import TranslationImporter\n\n    # Get the configuration settings for the database name and whether to overwrite existing translations\n    db_name = config['db_name']\n    overwrite = config['overwrite_existing_translations']\n\n    # Create a new database registry and use a cursor to initialize a TranslationImporter\n    registry = Registry(db_name)\n    with registry.cursor() as cr:\n        # Initialize the TranslationImporter\n        trans_imp = TranslationImporter(cr, 'en_US', 'l10n_generic_coa', 'l10n_generic_coa', '../l10n_generic_coa/i18n')\n\n        # Load translation files based on the configuration\n        if overwrite:\n            trans_imp.load('l10n_generic_coa', 'i18n', '../l10n_generic_coa/i18n', True, 'po', True)\n        else:\n            trans_imp.load('l10n_generic_coa', 'i18n', '../l10n_generic_coa/i18n', False, 'po', True)\n\n        # Save the translations, with the option to overwrite existing ones\n        trans_imp.save(overwrite)\n", "CodeBleu_score": 40.65711159360488}, {"code": "def import_translation()\n\n    import os\n    import sys\n    import getpass\n    from odoo.modules.registry import Registry\n    from odoo.tools.translate import TranslationImporter\n\n    # Get configuration settings\n    db_name = input(\"Enter the name of the database to import translations into: \")\n    overwrite_existing = input(\"Overwrite existing translations? (y/n): \")\n\n    # Initialize a new registry\n    registry = Registry(db_name)\n    with registry.cursor() as cr:\n        # Initialize a new TranslationImporter\n        ti = TranslationImporter(cr)\n        # Load the translation files\n        ti.load_module_terms_from_file(os.path.join(os.path.dirname(__file__), 'i18n', 'en_US.po'))\n        # Save the translations\n        ti.save(overwrite_existing=overwrite_existing == 'y')\n\n", "CodeBleu_score": 36.71199694580381}, {"code": "def import_translation()\n    import os\n    from odoo.modules.registry import Registry\n    from odoo.tools.translate import TranslationImport\n\n    # Get configuration settings\n    db_name = os.environ.get('DB_NAME')\n    overwrite = os.environ.get('OVERWRITE')\n    if overwrite is not None:\n        overwrite = overwrite.lower()\n        if overwrite == 'true':\n            overwrite = True\n        else:\n            overwrite = False\n\n    # Create new registry\n    registry = Registry(db_name)\n\n    # Initialize importer\n    with registry.cursor() as cr:\n        translations_importer = TranslationImport(cr)\n        translations_importer.load_module_terms(overwrite=overwrite)\n        translations_importer.load_translations(overwrite=overwrite)\n\n", "CodeBleu_score": 43.090635875588305}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n    if name in self.children:\n        return self.children[name]\n    else:\n        new_node = Node(name, info)\n        new_node.depth = self.depth + 1\n        new_node.parent = self\n        new_node.children = {}\n        new_node.children_names = []\n        if self.depth == 0:\n            new_node.root = self\n            new_node.root_name = self.root_name\n        else:\n            new_node.root = self.root\n            new_node.root_name = self.root_name\n        if 'root_name' in self.info:\n            new_node.root_name = self.info['root_name']\n        if 'root_name' in info:\n            new_node.root_name = info['root_name']\n        if 'root' in self.info:\n            new_node.root = self.info['root']\n        if 'root' in info:\n            new_node.root = info['root']\n        if 'root_name' in self.info:\n            new_node.root_name = self.info['root_name']\n        if 'root_name' in info:\n            new_node.root_name = info['root_name']\n        self.children[name] = new_node\n        self.children_names.append(name)\n        self.children_names.sort()\n        return new_node\n\n", "CodeBleu_score": 31.69486311511822}, {"code": "def add_child(self, name, info)\n\n    # create the node\n    node = Node(name, info, self.depth + 1, self.root)\n\n    # inherit attributes from parent\n    if self.root:\n        node.root = self.root\n    if self.parent:\n        node.parent = self.parent\n    if self.is_file:\n        node.is_file = self.is_file\n    if self.is_dir:\n        node.is_dir = self.is_dir\n    if self.is_link:\n        node.is_link = self.is_link\n    if self.is_broken:\n        node.is_broken = self.is_broken\n    if self.is_exec:\n        node.is_exec = self.is_exec\n    if self.is_hidden:\n        node.is_hidden = self.is_hidden\n    if self.is_dead:\n        node.is_dead = self.is_dead\n\n    # append the node to the children list if it's not already present\n    if node not in self.children:\n        self.children.append(node)\n\n    # sort the children by name\n    self.children.sort(key=lambda x: x.name)\n\n    # return the new node\n    return node", "CodeBleu_score": 39.4257444543062}, {"code": "def add_child(self, name, info)\n\n    # Create the new node\n    new_node = Node(name, info)\n\n    # Set the depth\n    new_node.depth = self.depth + 1\n\n    # Inherit certain attributes from the parent if they exist\n    if self.has_attribute(\"description\"):\n        new_node.description = self.description\n    if self.has_attribute(\"url\"):\n        new_node.url = self.url\n\n    # Add the new node to the children list if it's not already present\n    if new_node not in self.children:\n        self.children.append(new_node)\n\n    # Sort the children by name\n    self.sort_children()\n\n    # Return the new node\n    return new_node", "CodeBleu_score": 38.30969127976637}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n    result = {\n        \"account_name\": account[\"account_name\"],\n        \"account_type\": account[\"account_type\"],\n        \"account_category\": account[\"account_category\"],\n        \"account_subcategory\": account[\"account_subcategory\"],\n        \"root_type\": account[\"root_type\"],\n        \"dates\": dates,\n        \"balances\": [0 for date in dates],\n    }\n    if result[\"root_type\"] != \"Asset\" and result[\"root_type\"] != \"Expense\":\n        for i in range(len(result[\"balances\"])):\n            result[\"balances\"][i] = -result[\"balances\"][i]\n    for entry in gl_entries:\n        if entry[\"account_name\"] == result[\"account_name\"]:\n            if result[\"root_type\"] == \"Asset\":\n                for i in range(len(result[\"balances\"])):\n                    if entry[\"date\"] <= result[\"dates\"][i]:\n                        result[\"balances\"][i] += entry[\"amount\"]\n            elif result[\"root_type\"] == \"Liability\":\n                for i in range(len(result[\"balances\"])):\n                    if entry[\"date\"] <= result[\"dates\"][i]:\n                        result[\"balances\"][i] += entry[\"amount\"]\n            elif result[\"root_type\"] == \"Equity\":\n                for i in range(len(result[\"balances\"])):\n                    if entry[\"date\"] <= result[\"dates\"][i]:\n                        result[\"balances\"][i] += entry[\"amount\"]\n            elif result[\"root_type\"] == \"Revenue\":\n                for i in range(len(result[\"balances\"])):\n                    if entry[\"date\"] <= result[\"dates\"][i]:\n                        result[\"balances\"][i] += entry[\"amount\"]\n            elif result[\"root_type\"] == \"Expense\":\n                for i in range(len(result[\"balances\"])):\n                    if entry[\"date\"] <= result[\"dates\"][i]:\n                        result[\"balances\"][i] += entry[\"amount\"]\n    return result", "CodeBleu_score": 14.106384262563118}, {"code": "def build_result(account, dates, gl_entries)\n    # Initialize the result with the dates and zero balances\n    result = {\"dates\": dates, \"balances\": [0] * len(dates)}\n\n    # Determine the account's root type\n    root_type = account[\"root_type\"]\n\n    # Iterate through the entries\n    for entry in gl_entries:\n        # Update the balance for each date\n        for i in range(len(dates)):\n            if entry[\"date\"] == dates[i]:\n                if root_type == \"Asset\":\n                    result[\"balances\"][i] += entry[\"amount\"]\n                elif root_type == \"Expense\":\n                    result[\"balances\"][i] -= entry[\"amount\"]\n                else:\n                    result[\"balances\"][i] -= entry[\"amount\"]\n\n    # Accumulate the balances over time\n    for i in range(1, len(dates)):\n        result[\"balances\"][i] += result[\"balances\"][i - 1]\n\n    # Negate the balances if the root type is not Asset or Expense\n    if root_type != \"Asset\" and root_type != \"Expense\":\n        for i in range(len(result[\"balances\"])):\n            result[\"balances\"][i] = -result[\"balances\"][i]\n\n    return result", "CodeBleu_score": 23.369896441153017}, {"code": "def build_result(account, dates, gl_entries)\n\n    # Initialize the result with the dates and zeros for balances\n    result = {\n        \"account\": account,\n        \"balances\": {date: 0 for date in dates}\n    }\n\n    # Determine the account's root type\n    if account.startswith(\"1\"):\n        root_type = \"Asset\"\n    elif account.startswith(\"2\"):\n        root_type = \"Liability\"\n    elif account.startswith(\"3\"):\n        root_type = \"Equity\"\n    elif account.startswith(\"4\"):\n        root_type = \"Revenue\"\n    else:\n        root_type = \"Expense\"\n\n    # Iterate through the entries, updating the balance for each date\n    for entry in gl_entries:\n        if entry[\"account\"] == account:\n            for date in dates:\n                if date in entry[\"balances\"]:\n                    result[\"balances\"][date] += entry[\"balances\"][date]\n\n    # If the root type is not \"Asset\" or \"Expense,\" it negates the balances\n    if root_type != \"Asset\" and root_type != \"Expense\":\n        for date in dates:\n            result[\"balances\"][date] *= -1\n\n    # For \"Asset,\" \"Liability,\" and \"Equity\" accounts, it accumulates the balance over time\n    if root_type == \"Asset\" or root_type == \"Liability\" or root_type == \"Equity\":\n        for date in dates[1:]:\n            result[\"balances\"][date] += result[\"balances\"][dates[dates.index(date) - 1]]\n\n    # Finally, it returns the computed results\n    return result", "CodeBleu_score": 20.9683748602803}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\n    if self.account_type != \"Receivable\" and self.account_type != \"Payable\" and self.account_type_before_save in (\"Receivable\", \"Payable\"):\n        frappe.msgprint(\"\"\"\n            <b>Note:</b> You have changed the account type from Receivable/Payable to a non-Receivable/Payable type.\n            This may cause issues in the Accounts report.\n            If you still want to save this account, please click on 'Update'.\n            \"\"\",\n            title=\"Warning\",\n            indicator='orange'\n        )\n\n    if self.account_type == \"Receivable\" or self.account_type == \"Payable\":\n        if self.account_type_before_save != \"Receivable\" and self.account_type_before_save != \"Payable\":\n            frappe.msgprint(\"\"\"\n                <b>Note:</b> You have changed the account type from a non-Receivable/Payable type to Receivable/Payable type.\n                This may cause issues in the Accounts report.\n                If you still want to save this account, please click on 'Update'.\n                \"\"\",\n                title=\"Warning\",\n                indicator='orange'\n            )\n\n", "CodeBleu_score": 21.946195997336517}, {"code": "def validate_receivable_payable_account_type(self)\n    if self.account_type in (\"Receivable\", \"Payable\") and self.account_type != self.old_account_type:\n        if self.account_type not in (\"Receivable\", \"Payable\"):\n            frappe.msgprint(\n                \"Changing the account type from Receivable/Payable to a non-Receivable/Payable type may cause issues in the Accounts report. Please check Accounts report for any discrepancies.\"\n            )\n            self.add_comment_in_account_doc()\n\n", "CodeBleu_score": 22.914181880243632}, {"code": "def validate_receivable_payable_account_type(self)\n\n    if self.account_type in ['Receivable', 'Payable']:\n        self.validate_cust_supp_gl_entries()\n\n    if self.account_type not in ['Receivable', 'Payable']:\n        self.validate_cust_supp_gl_entries()\n\n", "CodeBleu_score": 14.10953083356486}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n    if not self.currency:\n        self.currency = frappe.db.get_value(\"Company\", self.company, \"default_currency\")\n        self.currency_explicitly_specified = False\n    else:\n        self.currency_explicitly_specified = True\n\n    if self.currency_explicitly_specified and self.currency != self.company_currency:\n        # Check if there are existing ledger entries with a different currency\n        if frappe.db.get_value(\"GL Entry\", {\"account\": self.name, \"currency\": [\"!=\", self.currency]}, \"name\"):\n            frappe.throw(\n                frappe._(\n                    \"Cannot change the currency of the account {0} as it has existing ledger entries with a different currency.\".format(\n                        self.name\n                    )\n                )\n            )\n\n        # Check if there are existing ledger entries with a different currency\n        if frappe.db.get_value(\"GL Entry\", {\"account\": self.name, \"currency\": [\"!=\", self.company_currency]}, \"name\"):\n            frappe.throw(\n                frappe._(\n                    \"Cannot change the currency of the account {0} as it has existing ledger entries with a different currency.\".format(\n                        self.name\n                    )\n                )\n            )\n\n", "CodeBleu_score": 40.34744493552843}, {"code": "def validate_account_currency(self)\n    from frappe.utils import money_in_words\n    from frappe.utils import get_defaults\n    from frappe.utils import get_number_format_info\n    from frappe.utils import get_number_format_info\n    from frappe.utils import get_number_format_info\n    from frappe.utils import get_number_format_info\n    from frappe.utils import get_number_format_info\n    from frappe.utils import get_number_format_info\n    from frappe.utils import get_number_format_info\n    from frappe.utils import get_number_format_info\n    from frappe.utils import get_number_format_info\n    from frappe.utils import get_number_format_info\n    from frappe.utils import get_number_format_info\n    from frappe.utils import get_number_format_info\n    from frappe.utils import get_number_format_info\n    from frappe.utils import get_number_format_info\n    from frappe.utils import get_number_format_info\n    from frappe.utils import get_number_format_info\n    from frappe.utils import get_number_format_info\n    from frappe.utils import get_number_format_info\n    from frappe.utils import get_number_format_info\n    from frappe.utils import get_number_format_info\n    from frappe.utils import get_number_format_info\n    from frappe.utils import get_number_format_info\n    from frappe.utils import get_number_format_info\n    from frappe.utils import get_number_format_info\n    from frappe.utils import get_number_format_info\n    from frappe.utils import get_number_format_info\n    from frappe.utils import get_number_format_info\n    from frappe.utils import get_number_format_info\n    from frappe.utils import get_number_format_info\n    from frappe.utils import get_number_format_info\n    from frappe.utils import get_number_format_info\n    from frappe.utils import get_number_format_info\n    from frappe.utils", "CodeBleu_score": 4.295747245424004}, {"code": "def validate_account_currency(self)\n\n    if self.currency:\n        self.currency_explicitly_specified = True\n    else:\n        self.currency = self.company.default_currency\n        self.currency_explicitly_specified = False\n\n    if self.currency != self.company.default_currency:\n        self.check_currency_change()\n\n    self.currency = self.currency\n", "CodeBleu_score": 26.148217271546248}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n    aggregated_entries = {}\n    for entry in entries:\n        key = generate_unique_key(entry, accounting_dimensions)\n        if key not in aggregated_entries:\n            aggregated_entries[key] = {\n                'debit': 0,\n                'credit': 0,\n                'debit_amount': 0,\n                'credit_amount': 0,\n                'currency': entry.get('currency'),\n                'account_closing_balance': entry.get('account_closing_balance'),\n            }\n        aggregated_entries[key]['debit'] += entry.get('debit')\n        aggregated_entries[key]['credit'] += entry.get('credit')\n        aggregated_entries[key]['debit_amount'] += entry.get('debit_amount')\n        aggregated_entries[key]['credit_amount'] += entry.get('credit_amount')\n    return aggregated_entries\n\n", "CodeBleu_score": 40.423908463504574}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n    aggregated_entries = {}\n    for entry in entries:\n        key = accounting_dimensions.get_key(entry)\n        if key in aggregated_entries:\n            aggregated_entries[key][\"debit\"] += entry[\"debit\"]\n            aggregated_entries[key][\"credit\"] += entry[\"credit\"]\n            aggregated_entries[key][\"amount\"] += entry[\"amount\"]\n        else:\n            aggregated_entries[key] = {\n                \"debit\": entry[\"debit\"],\n                \"credit\": entry[\"credit\"],\n                \"amount\": entry[\"amount\"],\n            }\n    return aggregated_entries\n\n", "CodeBleu_score": 32.41183743163316}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n    aggregated_entries = {}\n    for entry in entries:\n        key = tuple(entry[dimension] for dimension in accounting_dimensions)\n        if key in aggregated_entries:\n            aggregated_entries[key]['debit'] += entry['debit']\n            aggregated_entries[key]['credit'] += entry['credit']\n            aggregated_entries[key]['debit_amount'] += entry['debit_amount']\n            aggregated_entries[key]['credit_amount'] += entry['credit_amount']\n        else:\n            aggregated_entries[key] = {\n                'debit': entry['debit'],\n                'credit': entry['credit'],\n                'debit_amount': entry['debit_amount'],\n                'credit_amount': entry['credit_amount']\n            }\n    return aggregated_entries\n\n", "CodeBleu_score": 30.628431563076358}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\n    if self.type == 'in_invoice':\n        supplier = self.invoice_supplier\n        hold_type = 'in_invoice'\n    else:\n        supplier = self.supplier\n        hold_type = 'in_refund'\n\n    if supplier.on_hold == True and supplier.hold_type == hold_type:\n        if supplier.release_date > date.today():\n            raise UserError('Supplier is on hold until {}. Transaction cannot proceed.'.format(supplier.release_date))\n\n", "CodeBleu_score": 19.612948554907767}, {"code": "def ensure_supplier_is_not_blocked(self)\n\n    if self.is_supplier_payment_or_invoice():\n        supplier = self.get_supplier_info()\n        if supplier.on_hold:\n            if supplier.hold_type == self.get_hold_type():\n                if self.is_supplier_blocked(supplier):\n                    raise frappe.ValidationError(_(\"Supplier {0} is on hold till {1}. Transaction cannot proceed.\").format(supplier.supplier_name, supplier.release_date))\n", "CodeBleu_score": 19.678380632722366}, {"code": "def ensure_supplier_is_not_blocked(self)\n\n    if self.type in ['in_invoice', 'in_refund']:\n        supplier = self.invoice_supplier_id\n    elif self.type in ['in_payment', 'in_receipt']:\n        supplier = self.payment_supplier_id\n    else:\n        return\n\n    if supplier.active:\n        return\n\n    if supplier.on_hold:\n        if supplier.hold_type in ['invoice', 'payment'] and supplier.hold_type != self.type:\n            return\n        if supplier.hold_date <= fields.Date.today():\n            return\n        raise UserError(_('The supplier %s is on hold until %s.') % (supplier.name, supplier.hold_date))\n\n    raise UserError(_('The supplier %s is blocked.') % supplier.name)", "CodeBleu_score": 26.128658412664784}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n    repost_doctypes = frappe.get_all(\"Repost Voucher Settings\", fields=[\"parent\", \"voucher_type\", \"voucher_no\"], filters={\"docstatus\": 1})\n    repost_doctypes = [d for d in repost_doctypes if d.voucher_type == self.doctype and d.voucher_no == self.name]\n    if repost_doctypes:\n        repost_doctypes = {d.parent: d for d in repost_doctypes}\n        for doctype, repost_doctype in repost_doctypes.items():\n            rows = frappe.get_all(doctype, fields=[\"name\", \"parent\", \"parenttype\", \"parentfield\"], filters={\"voucher_type\": repost_doctype.voucher_type, \"voucher_no\": repost_doctype.voucher_no})\n            rows_by_parent = {}\n            for row in rows:\n                if row.parent not in rows_by_parent:\n                    rows_by_parent[row.parent] = []\n                rows_by_parent[row.parent].append(row)\n            for parent, rows in rows_by_parent.items():\n                parent_doc = frappe.get_doc(parent.parenttype, parent.parent)\n                for row in rows:\n                    if row.parentfield == \"repost_vouchers\":\n                        parent_doc.repost_vouchers.remove(row.name)\n                    elif row.parentfield == \"vouchers\":\n                        parent_doc.vouchers.remove(row.name)\n                parent_doc.ignore_links = True\n                parent_doc.ignore_validate = True\n                parent_doc.save()\n", "CodeBleu_score": 32.59677397130281}, {"code": "def _remove_references_in_repost_doctypes(self)\n    repost_doctypes = self.get_repost_doctypes()\n    for doctype in repost_doctypes:\n        if doctype in frappe.get_all(\"DocType\"):\n            repost_vouchers = frappe.db.get_all(\n                doctype,\n                filters={\n                    \"voucher_type\": self.doctype,\n                    \"voucher_no\": self.name,\n                },\n                fields=[\"parent\", \"parenttype\"],\n            )\n            if repost_vouchers:\n                repost_vouchers_by_parenttype = {}\n                for repost_voucher in repost_vouchers:\n                    if repost_voucher.parenttype not in repost_vouchers_by_parenttype:\n                        repost_vouchers_by_parenttype[repost_voucher.parenttype] = []\n                    repost_vouchers_by_parenttype[repost_voucher.parenttype].append(\n                        repost_voucher.parent\n                    )\n                for parenttype, parents in repost_vouchers_by_parenttype.items():\n                    parent = frappe.get_doc(parenttype, parents[0])\n                    if doctype == \"Repost Item Valuation\":\n                        parent.repost_vouchers = [\n                            voucher\n                            for voucher in parent.repost_vouchers\n                            if voucher.voucher_type != self.doctype\n                            or voucher.voucher_no != self.name\n                        ]\n                    else:\n                        parent.vouchers = [\n                            voucher\n                            for voucher in parent.vouchers\n                            if voucher.voucher_type != self.doctype\n                            or voucher.voucher_no != self.name\n                        ]\n                    parent.flags.ignore_validate_update_after_submit = True\n                    parent.flags.ignore_links = True\n                    parent.save()\n\n", "CodeBleu_score": 26.34942488944788}, {"code": "def _remove_references_in_repost_doctypes(self)\n    repost_doctypes = self.meta.get_repost_doctypes()\n    for repost_doctype in repost_doctypes:\n        repost_voucher_map = frappe._dict()\n        repost_vouchers = frappe.get_all(\n            repost_doctype,\n            filters={\n                \"voucher_type\": self.doctype,\n                \"voucher_no\": self.name,\n            },\n            fields=[\"parenttype\", \"parent\"],\n        )\n        for repost_voucher in repost_vouchers:\n            if repost_voucher.parenttype not in repost_voucher_map:\n                repost_voucher_map[repost_voucher.parenttype] = []\n            repost_voucher_map[repost_voucher.parenttype].append(\n                repost_voucher.parent\n            )\n        for parenttype, repost_voucher_list in repost_voucher_map.items():\n            parent_doc = frappe.get_doc(parenttype, repost_voucher_list[0])\n            if parent_doc.doctype in [\"Sales Invoice\", \"Purchase Invoice\"]:\n                parent_doc.set(\"repost_vouchers\", [])\n                parent_doc.set(\"vouchers\", [])\n            else:\n                parent_doc.set(\"vouchers\", [])\n            parent_doc.flags.ignore_validate_update_after_submit = True\n            parent_doc.flags.ignore_links = True\n            parent_doc.save()\n\n", "CodeBleu_score": 28.93687426863493}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n    import requests\n    import json\n    import pandas as pd\n    import datetime\n    import time\n    import sys\n    from decimal import Decimal\n    from plaid.errors import APIError\n\n    # Authenticate client\n    try:\n        client = self.authenticate_client()\n    except APIError as e:\n        sys.exit(e)\n\n    # Construct query parameters\n    try:\n        start_date = datetime.datetime.strptime(start_date, '%Y-%m-%d').date()\n        end_date = datetime.datetime.strptime(end_date, '%Y-%m-%d').date()\n        date_range = {'start_date': start_date.isoformat(), 'end_date': end_date.isoformat()}\n        if account_id:\n            account_ids = [account_id]\n        else:\n            account_ids = None\n        options = {'account_ids': account_ids, 'count': 100}\n    except Exception as e:\n        sys.exit(e)\n\n    # Fetch transactions\n    transactions = []\n    total_transactions = 0\n    num_transactions = 100\n    offset = 0\n    while num_transactions == 100:\n        try:\n            response = client.Transactions.get(date_range, options, offset)\n            transactions.extend(response['transactions'])\n            total_transactions = response['total_transactions']\n            num_transactions = response['display_size']\n            offset += num_transactions\n            time.sleep(1)\n        except APIError as e:\n            sys.exit(e)\n        except Exception as e:\n            sys.exit(e)\n\n    # Create dataframe\n    try:\n        df = pd.DataFrame(transactions)\n        df['amount'] = df['amount'].apply(lambda x: Decimal(x).quantize(Decimal('.01')))\n    except Exception as e:\n        sys.exit(e)\n\n    return df", "CodeBleu_score": 35.06655044802584}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n    # Authenticate client\n    try:\n        self.client.authenticate()\n    except Exception as e:\n        raise e\n\n    # Construct query parameters\n    query_params = {\n        'start_date': start_date,\n        'end_date': end_date,\n        'account_id': account_id\n    }\n\n    # Fetch transactions\n    try:\n        transactions = self.client.transactions.get(query_params)\n    except Exception as e:\n        raise e\n\n    # Check if there are more transactions to fetch\n    if transactions['total_number'] > len(transactions['transactions']):\n        # Fetch remaining transactions\n        try:\n            while len(transactions['transactions']) < transactions['total_number']:\n                transactions = self.client.transactions.get(query_params)\n        except Exception as e:\n            raise e\n\n    return transactions", "CodeBleu_score": 35.73871502876449}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n    import json\n    import requests\n    from .exceptions import (\n        InvalidCredentials,\n        InvalidDateRange,\n        InvalidAccountID,\n        InvalidQueryParameters,\n        InvalidRequest,\n        InvalidResponse,\n        InvalidSession,\n        InvalidSessionCredentials,\n        InvalidSessionCredentialsType,\n        InvalidSessionCredentialsStructure,\n        InvalidSessionID,\n        InvalidSessionIDType,\n        InvalidSessionIDStructure,\n        InvalidSessionType,\n        InvalidSessionStructure,\n        InvalidTransactions,\n        InvalidTransactionsType,\n        InvalidTransactionsStructure,\n        InvalidTransactionsDataType,\n        InvalidTransactionsDataStructure,\n        InvalidTransactionsData,\n        InvalidTransactionsDataLength,\n        InvalidTransactionsDataItem,\n        InvalidTransactionsDataItemType,\n        InvalidTransactionsDataItemStructure,\n        InvalidTransactionsDataItemID,\n        InvalidTransactionsDataItemIDType,\n        InvalidTransactionsDataItemIDStructure,\n        InvalidTransactionsDataItemDate,\n        InvalidTransactionsDataItemDateType,\n        InvalidTransactionsDataItemDateStructure,\n        InvalidTransactionsDataItemDescription,\n        InvalidTransactionsDataItemDescriptionType,\n        InvalidTransactionsDataItemDescriptionStructure,\n        InvalidTransactionsDataItemAmount,\n        InvalidTransactionsDataItemAmountType,\n        InvalidTransactionsDataItemAmountStructure,\n        InvalidTransactionsDataItemOriginalDescription,\n        InvalidTransactionsDataItemOriginalDescriptionType,\n        InvalidTransactionsDataItemOriginalDescriptionStructure,\n        InvalidTransactionsDataItemOriginalAmount,\n        InvalidTransactionsDataItemOriginalAmountType,\n        InvalidTransactionsDataItemOriginalAmountStructure,\n        InvalidTransactionsDataItemCategory,\n        InvalidTransactionsDataItemCategoryType,\n        InvalidTransactionsDataItemCategoryStructure,\n        InvalidTransactionsDataItemAccountID,\n        InvalidTransactionsDataItemAccountIDType,\n        InvalidTransactionsDataItemAccountIDStructure,\n        InvalidTransactionsDataItemAccountOwner,\n        InvalidTransactionsDataItemAccountOwnerType,\n        InvalidTransactionsDataItemAccountOwnerStructure,\n        InvalidTransactionsDataItemAccountName,\n        InvalidTransactionsDataItemAccountNameType,\n        InvalidTransactionsDataItemAccountNameStructure,\n        InvalidTransactionsDataItemAccount", "CodeBleu_score": 22.808616281098683}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n    from plaid.errors import PlaidError\n    from .models import Bank\n    from .utils import PlaidConnector\n\n    try:\n        # Parse the response\n        public_token = response['public_token']\n\n        # Retrieve access token using the PlaidConnector\n        plaid_connector = PlaidConnector()\n        access_token = plaid_connector.exchange_token(public_token)\n\n        # Check if bank already exists in database\n        bank = Bank.objects.filter(access_token=access_token).first()\n\n        # If bank does not exist, create and insert a new bank record\n        if not bank:\n            bank = Bank(access_token=access_token)\n            bank.save()\n\n        # If bank exists, update the access token for the existing bank record and save it\n        else:\n            bank.access_token = access_token\n            bank.save()\n\n    except PlaidError as e:\n        print(e.code)\n        print(e.message)\n        print(e.display_message)\n        print(e.request_id)\n\n    except Exception as e:\n        print(e)\n\n", "CodeBleu_score": 41.13626754537273}, {"code": "def add_institution(token, response)\n    try:\n        # Parse response\n        institution_id = response['institution']['institution_id']\n        access_token = response['access_token']\n        item_id = response['item_id']\n        # Get access token\n        access_token = PlaidConnector.get_access_token(token, item_id)\n        # Check if bank already exists\n        bank = Bank.query.filter_by(institution_id=institution_id).first()\n        if bank is None:\n            # Create bank\n            bank = Bank(\n                institution_id=institution_id,\n                access_token=access_token\n            )\n            # Insert bank\n            db.session.add(bank)\n            db.session.commit()\n        else:\n            # Update bank\n            bank.access_token = access_token\n            # Save bank\n            db.session.commit()\n    except Exception as e:\n        # Log error\n        logger.error(f'{e}', exc_info=True)\n\n", "CodeBleu_score": 36.67393814477595}, {"code": "def add_institution(token, response)\n    import json\n    import requests\n    from plaid import PlaidConnector\n    from .models import Bank\n    from django.conf import settings\n    from django.core.exceptions import ObjectDoesNotExist\n    from django.db import IntegrityError\n    from django.db import transaction\n    from django.http import HttpResponse\n    from django.utils import timezone\n\n    # Parse the response to retrieve the public token\n    response_data = json.loads(response)\n    public_token = response_data['public_token']\n\n    # Retrieve access token using the PlaidConnector\n    plaid_connector = PlaidConnector()\n    access_token = plaid_connector.exchange_public_token(public_token)\n\n    # Check if bank already exists in the database\n    try:\n        bank = Bank.objects.get(access_token=access_token)\n        bank.access_token = access_token\n        bank.save()\n    except ObjectDoesNotExist:\n        # If bank does not exist, create and insert a new bank record\n        bank = Bank()\n        bank.access_token = access_token\n        bank.name = response_data['institution']['name']\n        bank.plaid_institution_id = response_data['institution']['institution_id']\n        bank.plaid_institution_type = response_data['institution']['type']\n        bank.plaid_institution_subtype = response_data['institution']['subtype']\n        bank.plaid_institution_logo = response_data['institution']['logo']\n        bank.plaid_institution_hierarchy = response_data['institution']['hierarchy']\n        bank.plaid_institution_url = response_data['institution']['url']\n        bank.plaid_institution_primary_color = response_data['institution']['primary_color']\n        bank.plaid_institution_status = response_data['institution']['status']\n        bank.plaid_institution_country_codes = response_data['institution']['country_codes']\n        bank.plaid_institution_oauth = response_data['institution']['oauth']\n        bank.plaid", "CodeBleu_score": 35.79037021274651}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n    from datetime import datetime, timedelta\n    from django.utils.timezone import make_aware\n    from django.utils.dateparse import parse_date\n    from django.utils.translation import gettext as _\n    from django.core.exceptions import ObjectDoesNotExist\n    from django.db.models import Q\n    from django.db import transaction\n    from django.conf import settings\n    from django.contrib.auth.models import User\n    from apps.fyle.models import ExpenseGroup\n    from apps.fyle.utils import FyleConnector\n    from apps.mappings.models import Mapping, MappingSetting\n    from apps.workspaces.models import Workspace, WorkspaceSchedule, Configuration\n    from apps.fyle.models import ExpenseGroupSettings\n    from apps.netsuite.models import BankTransaction\n    from apps.netsuite.utils import NetSuiteConnector\n\n    # Get the last integration date\n    try:\n        last_integration_date = WorkspaceSchedule.objects.get(\n            workspace_id=bank_account.workspace.id,\n            enabled=True,\n            integration_type='NETSUITE'\n        ).schedule.last_synced_at\n    except WorkspaceSchedule.DoesNotExist:\n        last_integration_date = None\n\n    # Get the start and end dates for the transactions to be synced\n    if last_integration_date:\n        start_date = last_integration_date + timedelta(days=1)\n        end_date = datetime.now()\n    else:\n        start_date = parse_date(bank_account.created_at)\n        end_date = datetime.now()\n\n    # Get the bank transactions\n    bank_transactions = bank.get_bank_transactions(\n        bank_account.account_id,\n        start_date,\n        end_date\n    )\n\n    # Process the bank transactions\n    bank_transactions = process_bank_transactions(bank_transactions, bank_account)\n\n    # Create new bank transactions\n    bank_transactions_objects = []\n    for bank_transaction in bank_transactions:\n        bank_transactions_objects.append(", "CodeBleu_score": 31.903662705437252}, {"code": "def sync_transactions(bank, bank_account)\n    from django.utils import timezone\n    from django.core.exceptions import ObjectDoesNotExist\n    from django.db import transaction\n    from datetime import datetime, timedelta\n    from ..models import BankTransaction, BankAccount\n    from ..utils import get_bank_transactions, process_bank_transactions\n    from ..utils import get_last_integration_date, update_last_integration_date\n    from ..utils import get_start_end_dates, get_start_end_dates_from_transactions\n    from ..utils import get_bank_account_balance, update_bank_account_balance\n\n    try:\n        # Get the bank account balance\n        bank_account_balance = get_bank_account_balance(bank_account)\n\n        # Get the last integration date\n        last_integration_date = get_last_integration_date(bank_account)\n\n        # Get the start and end dates\n        start_date, end_date = get_start_end_dates(last_integration_date)\n\n        # Get the bank transactions\n        bank_transactions = get_bank_transactions(\n            bank, bank_account, start_date, end_date)\n\n        # If there are no bank transactions, get the start and end dates from the transactions\n        if not bank_transactions:\n            start_date, end_date = get_start_end_dates_from_transactions(\n                bank_account)\n\n            # If there are no bank transactions, get the bank transactions\n            bank_transactions = get_bank_transactions(\n                bank, bank_account, start_date, end_date)\n\n        # If there are bank transactions, process them\n        if bank_transactions:\n            # Process the bank transactions\n            bank_transactions = process_bank_transactions(\n                bank_transactions, bank_account)\n\n            # Get the new bank transactions\n            new_bank_transactions = bank_transactions.filter(\n                created_date__gt=last_integration_date)\n\n            # If there are new bank transactions, update the last integration date\n            if new_bank_transactions:\n                last_integration_date = new_bank_transactions.", "CodeBleu_score": 24.41827595278382}, {"code": "def sync_transactions(bank, bank_account)\n    from django.utils import timezone\n    from django.conf import settings\n    from django.db import transaction\n    from django.db.models import Max\n    from django.core.exceptions import ObjectDoesNotExist\n    from django.core.exceptions import MultipleObjectsReturned\n    from django.db.models import F\n    from datetime import timedelta\n    from ..models import BankTransaction\n    from ..models import BankAccount\n    from ..models import BankAccountType\n    from ..models import BankAccountStatement\n    from ..models import BankAccountStatementLine\n    from ..models import BankAccountStatementLineMatching\n    from ..models import BankTransaction\n    from ..models import BankTransactionLine\n    from ..models import BankTransactionLineMatching\n    from ..models import BankTransactionScheduler\n    from ..models import BankTransactionSchedulerReconciled\n    from ..models import BankTransactionSchedulerReconciledMatching\n    from ..models import BankTransactionSchedulerReconciledMatchingInvoice\n    from ..models import BankTransactionSchedulerReconciledMatchingInvoiceItem\n    from ..models import BankTransactionSchedulerReconciledMatchingInvoiceItemMatching\n    from ..models import BankTransactionSchedulerReconciledMatchingInvoiceItemMatchingLine\n    from ..models import BankTransactionSchedulerReconciledMatchingInvoiceItemMatchingLineItem\n    from ..models import BankTransactionSchedulerReconciledMatchingInvoiceItemMatchingLineItemMatching\n    from ..models import BankTransactionSchedulerReconciledMatchingInvoiceItemMatchingLineItemMatchingLine\n    from ..models import BankTransactionSchedulerReconciledMatchingInvoiceItemMatchingLineItemMatchingLineItem\n    from ..models import BankTransactionSchedulerReconciledMatchingInvoiceItemMatchingLineItemMatchingLineItemMatching\n    from ..models import BankTransactionSchedulerReconciledMatchingInvoiceItemMatchingLineItemMatchingLineItemMatchingLine\n    from ..models import BankTransactionSchedulerReconciledMatchingInvoiceItemMatchingLineItemMatchingLineItemMatchingLineMatching\n    from ..models import BankTransactionSchedulerReconciledMatchingInvoiceItemMatchingLineItemMatchingLineItemMatchingLineMatchingInvoice", "CodeBleu_score": 6.695470528667421}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n    import requests\n    import json\n    import logging\n    from .utils import preprocess_entry\n    from .utils import get_total_count\n    from .utils import get_batch_count\n    from .utils import get_batch_index\n    from .utils import get_batch_index_list\n    from .utils import get_batch_index_list_with_offset\n    from .utils import get_batch_index_list_with_offset_and_limit\n\n    logger = logging.getLogger(__name__)\n\n    # Construct query URI\n    query_uri = f\"{self.api_uri}/company/{self.realm_id}/query?query=select * from {entity}\"\n\n    # Get total number of entries\n    total_count = get_total_count(query_uri, self.access_token)\n\n    # Get number of batches\n    batch_count = get_batch_count(total_count)\n\n    # Get batch index list\n    batch_index_list = get_batch_index_list(batch_count)\n\n    # Get batch index list with offset\n    batch_index_list_with_offset = get_batch_index_list_with_offset(batch_count)\n\n    # Get batch index list with offset and limit\n    batch_index_list_with_offset_and_limit = get_batch_index_list_with_offset_and_limit(batch_count)\n\n    # Get entries in batches\n    for index, batch_index in enumerate(batch_index_list):\n        # Construct batch query URI\n        batch_query_uri = f\"{query_uri}&minorversion=62&page={batch_index}\"\n\n        # Get response\n        response = requests.get(batch_query_uri, headers={\"Authorization\": f\"Bearer {self.access_token}\"})\n\n        # If successful\n        if response.ok:\n            # Parse JSON\n            json_response = json.loads(response.text)\n\n            # Get entries\n            entries = json_response[\"QueryResponse\"][\"{0}Ret\".format(entity)]\n\n            # Preprocess entries\n            entries = preprocess_entry(entries)\n\n            #", "CodeBleu_score": 21.92439270010682}, {"code": "def _migrate_entries(self, entity)\n    import requests\n    import json\n    import os\n    import time\n    import datetime\n    import logging\n    import re\n    from decimal import Decimal\n    from dateutil import parser\n    from dateutil.tz import tzutc\n    from collections import OrderedDict\n    from .utils import preprocess_entries\n\n    logger = logging.getLogger(__name__)\n    logger.info('Migrating entries for entity: ' + entity)\n\n    # Construct the query URI\n    query = 'https://quickbooks.api.intuit.com/v3/company/' + self.realm_id + '/' + entity\n    query += '?minorversion=50'\n\n    # Determine the total number of entries\n    response = requests.get(query, headers=self.headers)\n    if response.status_code == 200:\n        total_count = json.loads(response.text)['QueryResponse'][entity]['totalCount']\n        logger.info('Total number of ' + entity + ': ' + str(total_count))\n    else:\n        logger.error('Error retrieving total number of ' + entity + ': ' + str(response.status_code) + ' ' + response.text)\n        return\n\n    # If there are no entries, return\n    if total_count == 0:\n        logger.info('No ' + entity + ' to migrate')\n        return\n\n    # Determine the number of batches\n    if total_count % 1000 == 0:\n        batch_count = total_count // 1000\n    else:\n        batch_count = total_count // 1000 + 1\n    logger.info('Number of batches: ' + str(batch_count))\n\n    # Retrieve entries in batches of 1000\n    for batch in range(batch_count):\n        # Construct the query URI\n        query = 'https://quickbooks.api.intuit.com/v3/company/' + self.realm_id + '/' + entity\n        query += '?minorversion=50&page=' + str(batch + 1)\n\n        # Ret", "CodeBleu_score": 23.610596895944674}, {"code": "def _migrate_entries(self, entity)\n    # construct the query URI\n    query_uri = self.base_url + '/company/' + self.realm_id + '/query?query=' + entity\n    # determine the total number of entries\n    try:\n        response = self.make_request(query_uri)\n        total = response[entity]['@numOfResults']\n    except Exception as e:\n        self.logger.error('Error while fetching total number of entries: ' + str(e))\n        self.logger.error('Response text: ' + str(response.text))\n        return\n    # fetch and process the entries in batches of 1000\n    for i in range(0, total, 1000):\n        try:\n            response = self.make_request(query_uri + '&startPosition=' + str(i + 1))\n            self.preprocess_and_save_entries(response[entity])\n        except Exception as e:\n            self.logger.error('Error while fetching entries: ' + str(e))\n            self.logger.error('Response text: ' + str(response.text))\n            return\n", "CodeBleu_score": 29.271122158477446}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n    invoice_type = invoice.get('InvoiceType')\n    if invoice_type == 'SalesInvoice':\n        invoice_type = 'SalesReceipt'\n    elif invoice_type == 'PurchaseInvoice':\n        invoice_type = 'Bill'\n    elif invoice_type == 'CreditMemo':\n        invoice_type = 'CreditMemo'\n    elif invoice_type == 'RefundReceipt':\n        invoice_type = 'RefundReceipt'\n    elif invoice_type == 'BillPayment':\n        invoice_type = 'BillPayment'\n    else:\n        raise Exception('Invalid Invoice Type')\n\n    if invoice_type in ['Bill', 'BillPayment']:\n        self.save_vendor_bill(invoice)\n    else:\n        self.save_customer_invoice(invoice)\n\n", "CodeBleu_score": 22.008562266766635}, {"code": "def _save_invoice(self, invoice)\n    if invoice.get('Id'):\n        return invoice\n\n    invoice_type = invoice.get('Type')\n    if invoice_type == 'SalesReceipt':\n        invoice = self.save_sales_receipt(invoice)\n    elif invoice_type == 'Invoice':\n        invoice = self.save_sales_invoice(invoice)\n    elif invoice_type == 'JournalEntry':\n        invoice = self.save_journal_entry(invoice)\n    else:\n        raise Exception('Invoice type %s not supported' % invoice_type)\n\n    return invoice\n", "CodeBleu_score": 29.292194678906792}, {"code": "def _save_invoice(self, invoice)\n    if invoice.get('Id'):\n        invoice['Id'] = invoice['Id'].replace('{-}', '')\n        invoice['Id'] = invoice['Id'].replace('{', '')\n        invoice['Id'] = invoice['Id'].replace('}', '')\n        invoice['Id'] = invoice['Id'].replace(' ', '')\n        invoice['Id'] = int(invoice['Id'])\n    else:\n        invoice['Id'] = self.get_next_id('Invoice')\n    invoice['SyncToken'] = 0\n    invoice['domain'] = 'QBO'\n    invoice['sparse'] = False\n    invoice['status'] = 'Draft'\n    invoice['TxnDate'] = invoice['TxnDate'].replace('T', ' ')\n    invoice['TxnDate'] = invoice['TxnDate'].replace('Z', '')\n    invoice['TxnDate'] = invoice['TxnDate'].split('+')[0]\n    if invoice['TxnDate'][10:16] == '00:00':\n        invoice['TxnDate'] = invoice['TxnDate'][:10]\n    invoice['TxnDate'] = datetime.datetime.strptime(invoice['TxnDate'], '%Y-%m-%d %H:%M:%S')\n    invoice['TxnDate'] = invoice['TxnDate'].strftime('%m/%d/%Y')\n    invoice['MetaData']['CreateTime'] = invoice['MetaData']['CreateTime'].replace('T', ' ')\n    invoice['MetaData']['CreateTime'] = invoice['MetaData']['CreateTime'].replace('Z', '')\n    invoice['MetaData']['CreateTime'] = invoice['MetaData']['CreateTime'].split('+')[0]\n    invoice['MetaData']['CreateTime'] = datetime.datetime.strptime(invoice['MetaData']['CreateTime'], '%Y-%m-%d %H:%M:%S')\n    invoice['MetaData']['CreateTime'] = invoice['MetaData']['CreateTime'].strftime('%m/%d/%Y')", "CodeBleu_score": 28.09575099404082}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n    import datetime\n    import pandas as pd\n    from dateutil.relativedelta import relativedelta\n    import holidays\n    import calendar\n\n    # Calculate interval between visits\n    interval = (end_date - start_date).days / no_of_visit\n\n    # Create a list of dates between start and end dates\n    dates_list = [start_date + relativedelta(days=x) for x in range(0, (end_date - start_date).days + 1)]\n\n    # Create a list of dates to avoid\n    dates_to_avoid = []\n    for date in dates_list:\n        if date.weekday() == 5:\n            dates_to_avoid.append(date)\n        elif date.weekday() == 6:\n            dates_to_avoid.append(date)\n        elif date in holidays.US(years=date.year):\n            dates_to_avoid.append(date)\n\n    # Create a list of dates to visit\n    dates_to_visit = []\n    for i in range(no_of_visit):\n        dates_to_visit.append(start_date + relativedelta(days=int(interval * (i + 1))))\n\n    # Remove dates to avoid from dates to visit\n    for date in dates_to_avoid:\n        if date in dates_to_visit:\n            dates_to_visit.remove(date)\n\n    # Adjust dates to visit to avoid holidays\n    for i in range(len(dates_to_visit)):\n        if dates_to_visit[i] in holidays.US(years=dates_to_visit[i].year):\n            dates_to_visit[i] = dates_to_visit[i] + relativedelta(days=1)\n\n    # Adjust dates to visit to avoid weekends\n    for i in range(len(dates_to_visit)):\n        if dates_to_visit[i].weekday() == 5:\n            dates_to_visit[i] = dates_to_visit[i] + relativedelta(", "CodeBleu_score": 31.097556061273156}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n    import datetime\n    import calendar\n    from dateutil.relativedelta import relativedelta\n    from dateutil.rrule import rrule, MONTHLY, WEEKLY, DAILY\n    from dateutil.rrule import MO, TU, WE, TH, FR, SA, SU\n    import pandas as pd\n    import numpy as np\n    import holidays\n    import warnings\n    warnings.filterwarnings('ignore')\n\n    # Calculate interval between visits\n    if no_of_visit > 1:\n        if no_of_visit <= 28:\n            interval = 1\n        elif no_of_visit <= 56:\n            interval = 2\n        elif no_of_visit <= 84:\n            interval = 3\n        elif no_of_visit <= 112:\n            interval = 4\n        elif no_of_visit <= 140:\n            interval = 5\n        elif no_of_visit <= 168:\n            interval = 6\n        elif no_of_visit <= 196:\n            interval = 7\n        elif no_of_visit <= 224:\n            interval = 8\n        elif no_of_visit <= 252:\n            interval = 9\n        elif no_of_visit <= 280:\n            interval = 10\n        elif no_of_visit <= 308:\n            interval = 11\n        elif no_of_visit <= 336:\n            interval = 12\n        elif no_of_visit <= 364:\n            interval = 13\n        elif no_of_visit <= 392:\n            interval = 14\n        elif no_of_visit <= 420:\n            interval = 15\n        elif no_of_visit <= 448:\n            interval = 16\n        elif no_of_visit <= 476:\n            interval = 17\n        elif no_of_visit <= 504:\n            interval = 18", "CodeBleu_score": 13.922447982291269}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\n    import datetime as dt\n    import pandas as pd\n    import numpy as np\n    import holidays\n\n    # create a list of holidays\n    us_holidays = holidays.US(years=range(2020, 2021))\n\n    # create a list of weekdays\n    weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n\n    # calculate the interval between visits\n    interval = (end_date - start_date).days / no_of_visit\n\n    # create a list of dates\n    dates = pd.date_range(start_date, end_date, freq='D')\n\n    # create a list of dates that are weekdays and not holidays\n    dates = [date for date in dates if date.weekday() < 5 and date.strftime('%Y-%m-%d') not in us_holidays]\n\n    # create a list of dates for the schedule\n    schedule = []\n\n    # iterate to create the schedule\n    for i in range(no_of_visit):\n\n        # get the date\n        date = dates[int(i * interval)]\n\n        # get the date\n        date = dt.datetime.strptime(date.strftime('%Y-%m-%d'), '%Y-%m-%d')\n\n        # add the date to the schedule\n        schedule.append(date)\n\n    # create a dataframe of the schedule\n    schedule = pd.DataFrame(schedule)\n\n    # rename the column\n    schedule = schedule.rename(columns={0: 'date'})\n\n    # add the salesperson to the schedule\n    schedule['salesperson'] = sales_person\n\n    # return the schedule\n    return schedule", "CodeBleu_score": 32.09195570773329}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = [])\n      $request = $this->request;\n      $response = $this->response;\n      $session = $this->session;\n\n      // Determine the method to handle the request\n      $method = $request->is('ajax') ? 'ajax' : 'html';\n\n      // Set the response type\n      $response->type('json');\n\n      // Set the response status\n      $response->statusCode(200);\n\n      // Set the response data\n      $response->body(json_encode($this->{$method}($view, $data)));\n\n      // Send the response\n      $response->send();\n\n      // Stop the request\n      $request->stop();\n\n   }\n\n   /**\n    * This function handles the request for HTML content. It renders HTML content for a modal using the specified view and data. The response includes success status, message, data with title, path, handle, and the rendered HTML.\n    */\n   public function html($view, $data = []) {\n\n      $response = $this->response;\n      $session = $this->session;\n\n      // Set the response data\n      $response->body(json_encode([\n         'success' => true,\n         'message' => 'Success',\n         'data' => [\n            'title' => $data['title'],\n            'path' => $data['path'],\n            'handle' => $data['handle'],\n            'html' => $this->view->render($view, $data)\n         ]\n      ]));\n\n      // Send the response\n      $response->send();\n\n      // Stop the request\n      $request->stop();\n\n   }\n\n   /**\n    * This function handles the request for AJAX content. It constructs a URL for bulk actions and renders HTML content for a modal using the specified view and data. The response includes success status, message, data with title, path, handle, and the rendered HTML.\n    */\n   public function ajax($view, $data = []) {\n\n      $response = $this->response;\n      $session = $this->session;\n\n      // Set the response data\n      $response->body(json_encode([\n         'success' => true,", "CodeBleu_score": 34.77989260350096}, {"code": "<?\n   public function response($view, $data = [])\n      $request = request();\n      $method = $request->getMethod();\n      $url = $request->getUrl();\n      $segments = $request->getSegments();\n      $action = end($segments);\n\n      // if the request is a bulk action, add the action to the URL\n      if ($method == 'POST' && $action == 'bulk') {\n         $url .= '/bulk/' . $request->get('action');\n      }\n\n      // if the request is a modal, render the HTML for the modal\n      if ($request->get('modal') == 'true') {\n         $html = $this->view->render($view, $data);\n      }\n\n      // construct the response\n      $response = [\n         'success' => true,\n         'message' => 'Success',\n         'data' => [\n            'title' => $data['title'],\n            'path' => $url,\n            'handle' => $data['handle'],\n            'html' => $html ?? null\n         ]\n      ];\n\n      // return the response as JSON\n      return json_encode($response);\n   }\n", "CodeBleu_score": 51.09738284685754}, {"code": "<?\n   public function response($view, $data = [])\n      $request = request();\n      $method = $request->method();\n      $modal = $request->get('modal');\n      $bulk = $request->get('bulk');\n      $success = true;\n      $message = '';\n      $html = '';\n\n      if ($method == 'DELETE') {\n         $success = $data['success'];\n         $message = $data['message'];\n      } elseif ($bulk) {\n         $data = $data['data'];\n         $html = $this->bulk($data);\n      } elseif ($modal) {\n         $html = $this->modal($view, $data);\n      }\n\n      $response = [\n         'success' => $success,\n         'message' => $message,\n         'data' => $data,\n         'html' => $html\n      ];\n\n      return response()->json($response);\n   }\n", "CodeBleu_score": 41.6180545918163}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request)    $contacts = $request->getContacts();\n    $contactsToDelete = array();\n    foreach ($contacts as $contact) {\n        if ($contact->getSelected()) {\n            $contactsToDelete[] = $contact;\n        }\n    }\n    foreach ($contactsToDelete as $contact) {\n        try {\n            $request->deleteContact($contact);\n        } catch (Exception $e) {\n            $this->get('session')->getFlashBag()->add('error', $e->getMessage());\n        }\n    }\n}\n", "CodeBleu_score": 44.87334301701901}, {"code": "<?\npublic function deleteContacts($request)\t$contacts = $request->getContacts();\n\t$contacts->rewind();\n\twhile($contacts->valid()) {\n\t\t$contact = $contacts->current();\n\t\ttry {\n\t\t\t$contact->delete();\n\t\t} catch (Exception $e) {\n\t\t\t$request->addError($e->getMessage());\n\t\t}\n\t\t$contacts->next();\n\t}\n}", "CodeBleu_score": 33.86032286460523}, {"code": "<?\npublic function deleteContacts($request)\t$contacts = $request->getContacts();\n\t$errors = [];\n\tforeach ($contacts as $contact) {\n\t\ttry {\n\t\t\t$contact->delete();\n\t\t} catch (Exception $e) {\n\t\t\t$errors[] = $e->getMessage();\n\t\t}\n\t}\n\tif (count($errors) > 0) {\n\t\techo '<div class=\"alert alert-danger\" role=\"alert\">';\n\t\tforeach ($errors as $error) {\n\t\t\techo '<p class=\"mb-0\">' . $error . '</p>';\n\t\t}\n\t\techo '</div>';\n\t}\n}\n", "CodeBleu_score": 40.146732313725494}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request)    $transactions = $request->getTransactions();\n    $this->getLogger()->info(\"Deleting transactions\");\n    $this->getLogger()->info(json_encode($transactions));\n    foreach ($transactions as $transaction) {\n        try {\n            $this->getTransactionService()->deleteTransaction($transaction);\n        } catch (\\Exception $e) {\n            $this->getLogger()->error(\"Exception occurred while deleting transaction\", array(\"exception\" => $e));\n            $this->flashError($this->getTranslator()->translate(\"An error occurred while deleting the transaction.\"));\n        }\n    }\n}\n", "CodeBleu_score": 44.473280241912306}, {"code": "<?\npublic function deleteTransactions($request)    $transactions = Transaction::find($request->get('transactions'));\n    $transactions->each(function($transaction) {\n        try {\n            $transaction->delete();\n        } catch (\\Exception $e) {\n            flash()->error($e->getMessage());\n        }\n    });\n}", "CodeBleu_score": 52.65512840808422}, {"code": "<?\npublic function deleteTransactions($request)    $transactions = $request->getTransactions();\n\n    foreach ($transactions as $transaction) {\n        try {\n            $this->dispatch(new DeleteTransactionJob($transaction));\n        } catch (Exception $e) {\n            flash()->error(\n                trans('texts.transaction_delete_error'),\n                trans('texts.transaction_delete_error_description', ['error' => $e->getMessage()])\n            );\n        }\n    }\n}", "CodeBleu_score": 49.39731579462839}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator)    $request = request();\n    $requestClass = get_class($request);\n    $formRequestClass = str_replace('Request', 'FormRequest', $requestClass);\n\n    if (class_exists($formRequestClass) && $request instanceof FormRequest) {\n        $formRequest = app()->make($formRequestClass);\n        $rules = $formRequest->rules();\n        $messages = $formRequest->messages();\n        $attributes = $formRequest->attributes();\n\n        $validator->after(function ($validator) use ($formRequest) {\n            $formRequest->withValidator($validator);\n        });\n\n        $validator->sometimes('*', 'required', function ($input) use ($formRequest) {\n            return $formRequest->requiredIf($input);\n        });\n\n        foreach ($rules as $key => $rule) {\n            if (strpos($key, '*.') === 0) {\n                $validator->each(str_replace('*.', '', $key), $rule);\n            } else {\n                $validator->addRule($key, $rule);\n            }\n        }\n\n        foreach ($messages as $key => $message) {\n            $validator->addCustomMessages([$key => $message]);\n        }\n\n        foreach ($attributes as $key => $attribute) {\n            $validator->addCustomAttributes([$key => $attribute]);\n        }\n    }\n\n    return $validator;\n}", "CodeBleu_score": 36.050909369984566}, {"code": "<?\npublic function withValidator($validator)    $requestClass = $this->getRequestClass();\n    if (!class_exists($requestClass) || !is_subclass_of($requestClass, FormRequest::class)) {\n        return;\n    }\n\n    $request = new $requestClass;\n    $request->initialize(\n        $this->getRequest(),\n        $this->getRequest()->getMethod(),\n        $this->getRequest()->getUri(),\n        $this->getRequest()->getContent()\n    );\n    $request->setContainer($this->getContainer());\n\n    $rules = $request->rules();\n    $messages = $request->messages();\n    $attributes = $request->attributes();\n\n    $validator->setRules($rules);\n    $validator->setCustomMessages($messages);\n    $validator->setCustomAttributes($attributes);\n\n    try {\n        $validator->validate();\n    } catch (ValidationException $e) {\n        $this->getValidator()->addFailures($e->failures());\n\n        throw $e;\n    }\n}", "CodeBleu_score": 35.81519239157396}, {"code": "<?\npublic function withValidator($validator)    $class = get_class($this);\n    if (class_exists($class) && is_subclass_of($this, 'Illuminate\\Foundation\\Http\\FormRequest')) {\n        $reflection = new ReflectionClass($class);\n        $instance = $reflection->newInstanceWithoutConstructor();\n        $validator->after(function ($validator) use ($instance) {\n            $instance->withValidator($validator);\n        });\n    }\n    return $validator;\n}\n", "CodeBleu_score": 25.084513217738763}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void\n\t// Check if the instance implements the ShouldUpdate interface\n\tif ($this instanceof \\Niirrty\\Web\\IUpdateable)\n\t{\n\n\t\t// Get the first argument\n\t\t$arg1 = \\array_shift($arguments);\n\n\t\t// Check if the first argument is a Model instance\n\t\tif ($arg1 instanceof \\Niirrty\\Web\\Model)\n\t\t{\n\n\t\t\t// Set the model\n\t\t\t$this->setModel($arg1);\n\n\t\t\t// Get the second argument\n\t\t\t$arg2 = \\array_shift($arguments);\n\n\t\t\t// Check if the second argument is a Request instance\n\t\t\tif ($arg2 instanceof \\Niirrty\\Web\\Request)\n\t\t\t{\n\n\t\t\t\t// Set the request\n\t\t\t\t$this->setRequest($arg2);\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}", "CodeBleu_score": 25.374672526499758}, {"code": "<?\npublic function bootUpdate(...$arguments): void\n    if (!$this instanceof ShouldUpdate) {\n        throw new Exception(sprintf(\"The %s class must implement the %s interface.\", get_class($this), ShouldUpdate::class));\n    }\n\n    if (count($arguments) === 1) {\n        $this->setModel($arguments[0]);\n    }\n\n    if (count($arguments) === 2) {\n        $this->setModel($arguments[0]);\n        $this->setRequest($arguments[1]);\n    }\n\n    $this->update();\n\n}", "CodeBleu_score": 25.227784745717525}, {"code": "<?\npublic function bootUpdate(...$arguments): void\n\t\tif ( $this instanceof \\Dracodeum\\Kit\\Interfaces\\Components\\Input\\Interfaces\\SchemaData ) {\n\t\t\t$this->setSchemaData(true);\n\t\t}\n\t\t\n\t\tif ( $this instanceof \\Dracodeum\\Kit\\Interfaces\\Components\\Input\\Interfaces\\Information ) {\n\t\t\t$this->setInformation(true);\n\t\t}\n\t\t\n\t\tif ( $this instanceof \\Dracodeum\\Kit\\Interfaces\\Components\\Input\\Interfaces\\Value ) {\n\t\t\t$this->setValue(true);\n\t\t}\n\t\t\n\t\tif ( $this instanceof \\Dracodeum\\Kit\\Interfaces\\Components\\Input\\Interfaces\\Error ) {\n\t\t\t$this->setError(true);\n\t\t}\n\t\t\n\t\tif ( $this instanceof \\Dracodeum\\Kit\\Interfaces\\Components\\Input\\Interfaces\\Errors ) {\n\t\t\t$this->setErrors(true);\n\t\t}\n\t\t\n\t\tif ( $this instanceof \\Dracodeum\\Kit\\Interfaces\\Components\\Input\\Interfaces\\Constraint ) {\n\t\t\t$this->setConstraint(true);\n\t\t}\n\t\t\n\t\tif ( $this instanceof \\Dracodeum\\Kit\\Interfaces\\Components\\Input\\Interfaces\\Constraints ) {\n\t\t\t$this->setConstraints(true);\n\t\t}\n\t\t\n\t\tif ( $this instanceof \\Dracodeum\\Kit\\Interfaces\\Components\\Input\\Interfaces\\Filter ) {\n\t\t\t$this->setFilter(true);\n\t\t}\n\t\t\n\t\tif ( $this instanceof \\Dracodeum\\Kit\\Interfaces\\Components\\Input\\Interfaces\\Filters ) {\n\t\t\t$this->setFilters(true);\n\t\t}\n\t\t\n\t\tif ( $this instanceof \\Dracodeum\\Kit\\Interfaces\\Components\\Input\\Interfaces\\Store ) {\n\t\t\t$this->setStore(true);\n\t\t}\n\t\t\n\t\tif ( $this instanceof \\Dracodeum\\Kit\\Interfaces\\Components\\Input\\Interfaces\\Stores ) {\n\t\t\t$this->setSt", "CodeBleu_score": 12.470908755577785}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name')    $sort = $this->getSort($sort);\n    $query = $this->applySearch($query);\n    $query = $this->applySorting($query, $sort);\n    return $this->checkJson($query);\n}\n", "CodeBleu_score": 27.295751781550653}, {"code": "<?\n public function scopeCollect($query, $sort = 'name')\n \t// Retrieve the sort parameter from the request\n \t$sort = request('sort', $sort);\n\n \t// Retrieve the search parameter from the request\n \t$search = request('search');\n\n \t// Retrieve the pagination parameter from the request\n \t$paginate = request('paginate');\n\n \t// Retrieve the json parameter from the request\n \t$json = request('json');\n\n \t// Retrieve the api parameter from the request\n \t$api = request('api');\n\n \t// Apply search and sorting to the query\n \t$query = $this->scopeSearch($query, $search)->scopeSort($query, $sort);\n\n \t// If the request expects a JSON response and is not an API request\n \tif ($json && !$api) {\n\n \t\t// Return all records\n \t\treturn $query->get();\n \t}\n\n \t// Otherwise, paginate the results\n \treturn $query->paginate($paginate);\n }\n", "CodeBleu_score": 42.346606036227804}, {"code": "<?\n public function scopeCollect($query, $sort = 'name')\n \t// Get the sort parameter from the request\n \t$sort = request()->sort ? request()->sort : $sort;\n\n \t// Apply search and sort to the query\n \t$query = $query->search()->orderBy($sort, 'asc');\n\n \t// Check if the request expects a JSON response and is not an API request\n \tif (request()->expectsJson() && !request()->is('api/*')) {\n\n \t\t// Return all records\n \t\treturn $query->get();\n\n \t} else {\n\n \t\t// Get the limit from the request or a default setting\n \t\t$limit = request()->limit ? request()->limit : config('settings.pagination.limit');\n\n \t\t// Paginate the results\n \t\treturn $query->paginate($limit);\n\n \t}\n\n }\n\n /**\n  * This function scopes a query to collect records with optional sorting. It retrieves the sorting parameter from the request, applies search and sorting to the query, and checks if the request expects a JSON response and is not an API request. If true, it returns all records; otherwise, it paginates the results based on a limit from the request or a default setting.\n  */\n public function scopeCollectDesc($query, $sort = 'name') {\n\n \t// Get the sort parameter from the request\n \t$sort = request()->sort ? request()->sort : $sort;\n\n \t// Apply search and sort to the query\n \t$query = $query->search()->orderBy($sort, 'desc');\n\n \t// Check if the request expects a JSON response and is not an API request\n \tif (request()->expectsJson() && !request()->is('api/*')) {\n\n \t\t// Return all records\n \t\treturn $query->get();\n\n \t} else {\n\n \t\t// Get the limit from the request or a default setting\n \t\t$limit = request()->limit ? request()->limit : config('settings.pagination.limit');\n\n \t\t// Paginate the results\n \t\treturn $query->paginate($limit);\n\n \t}\n\n }\n\n /**\n  * This function scopes a query to collect records", "CodeBleu_score": 44.03718269114706}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model)    $openAmount = 0;\n    $overdueAmount = 0;\n    $today = date_create();\n\n    if ($model->getStatus() == 'paid') {\n        return [0, 0];\n    }\n\n    if ($model->getStatus() == 'partial') {\n        $payments = $model->getPayments();\n        foreach ($payments as $payment) {\n            $openAmount += $payment->getAmount();\n        }\n    }\n\n    if ($model->getStatus() == 'open') {\n        $openAmount = $model->getTotal();\n    }\n\n    if ($model->getDueDate() < $today) {\n        $overdueAmount = $openAmount;\n        $openAmount = 0;\n    }\n\n    return [$openAmount, $overdueAmount];\n}\n", "CodeBleu_score": 46.41667771026275}, {"code": "<?\npublic function calculateDocumentTotals($model)\n    $openAmount = 0;\n    $overdueAmount = 0;\n\n    if ($model->status === 'paid') {\n        return [\n            'open' => $openAmount,\n            'overdue' => $overdueAmount\n        ];\n    }\n\n    foreach ($model->transactions as $transaction) {\n        $openAmount += $transaction->amount;\n    }\n\n    if ($model->status === 'partial') {\n        $openAmount = $model->total - $openAmount;\n    }\n\n    if ($model->due_date < date('Y-m-d')) {\n        $overdueAmount = $openAmount;\n        $openAmount = 0;\n    }\n\n    return [\n        'open' => $openAmount,\n        'overdue' => $overdueAmount\n    ];\n}", "CodeBleu_score": 38.943558795149535}, {"code": "<?\npublic function calculateDocumentTotals($model)    $openAmount = 0;\n    $overdueAmount = 0;\n\n    // If the document is paid, return zeroes.\n    if ($model->status == 'paid') {\n        return [\n            'openAmount' => $openAmount,\n            'overdueAmount' => $overdueAmount\n        ];\n    }\n\n    // If the document is partial, sum the payments.\n    if ($model->status == 'partial') {\n        foreach ($model->transactions as $transaction) {\n            $openAmount += $transaction->amount;\n        }\n    }\n\n    // If the document is open, return the open amount.\n    if ($model->status == 'open') {\n        return [\n            'openAmount' => $openAmount,\n            'overdueAmount' => $overdueAmount\n        ];\n    }\n\n    // If the document is overdue, return the overdue amount.\n    if ($model->status == 'overdue') {\n        return [\n            'openAmount' => $openAmount,\n            'overdueAmount' => $openAmount\n        ];\n    }\n\n    // If the document is due, calculate the overdue amount.\n    if ($model->status == 'due') {\n        $today = new DateTime();\n        $dueDate = new DateTime($model->dueDate);\n\n        // If today is after the due date, return the overdue amount.\n        if ($today > $dueDate) {\n            $overdueAmount = $openAmount;\n        }\n\n        // Return the open and overdue amounts.\n        return [\n            'openAmount' => $openAmount,\n            'overdueAmount' => $overdueAmount\n        ];\n    }\n\n    // Return the open and overdue amounts.\n    return [\n        'openAmount' => $openAmount,\n        'overdueAmount' => $overdueAmount\n    ];\n}", "CodeBleu_score": 39.0507649605859}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null)    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $results = ($total = $this->toBase()->getCountForPagination()) ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}\n", "CodeBleu_score": 92.72480476946421}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null)    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $results = ($total = $this->toBase()->getCountForPagination()) ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}\n", "CodeBleu_score": 92.72480476946421}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null)    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $results = ($total = $this->toBase()->getCountForPagination()) ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}\n", "CodeBleu_score": 92.72480476946421}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request)    $reconciliations = $this->getReconciliations($request);\n    $this->begin();\n    foreach ($reconciliations as $reconciliation) {\n        $reconciliation->status = 'reconciled';\n        $this->save($reconciliation);\n        $this->markTransactionsReconciled($reconciliation);\n    }\n    $this->commit();\n}\n", "CodeBleu_score": 37.6359587850792}, {"code": "<?\npublic function reconcile($request)\t\n\t// get the reconciliations\n\t$reconciliations = $this->get($request);\n\t\n\t// reconcile each one\n\tforeach ($reconciliations as $reconciliation) {\n\t\t\n\t\t// get the transactions within the reconciliation's date range and account ID\n\t\t$transactions = TransactionModel::find(\n\t\t\tarray(\n\t\t\t\t'accountId' => $reconciliation->accountId,\n\t\t\t\t'date' => array(\n\t\t\t\t\t'min' => $reconciliation->startDate,\n\t\t\t\t\t'max' => $reconciliation->endDate\n\t\t\t\t)\n\t\t\t)\n\t\t);\n\t\t\n\t\t// reconcile each transaction\n\t\tforeach ($transactions as $transaction) {\n\t\t\t$transaction->reconciled = true;\n\t\t\t$transaction->save();\n\t\t}\n\t\t\n\t\t// set the reconciliation's status to reconciled\n\t\t$reconciliation->status = 'reconciled';\n\t\t$reconciliation->save();\n\t}\n}", "CodeBleu_score": 42.53179074946974}, {"code": "<?\npublic function reconcile($request)\n\t// Retrieve the reconciliations\n\t$reconciliations = $this->find('all', array(\n\t\t'conditions' => array(\n\t\t\t'id' => $request['reconciliation_ids']\n\t\t)\n\t));\n\n\t// Loop through each reconciliation\n\tforeach ($reconciliations as $reconciliation) {\n\n\t\t// Begin a database transaction\n\t\t$this->begin();\n\n\t\t// Mark the reconciliation as reconciled\n\t\t$reconciliation['Reconciliation']['status'] = 'reconciled';\n\t\tif (!$this->save($reconciliation)) {\n\t\t\t$this->rollback();\n\t\t\treturn false;\n\t\t}\n\n\t\t// Mark all related transactions as reconciled\n\t\t$conditions = array(\n\t\t\t'Transaction.account_id' => $reconciliation['Reconciliation']['account_id'],\n\t\t\t'Transaction.date >=' => $reconciliation['Reconciliation']['opening_balance_date'],\n\t\t\t'Transaction.date <=' => $reconciliation['Reconciliation']['closing_balance_date']\n\t\t);\n\t\t$this->Transaction->updateAll(\n\t\t\tarray('Transaction.reconciled' => 1),\n\t\t\t$conditions\n\t\t);\n\n\t\t// Commit the database transaction\n\t\t$this->commit();\n\t}\n\n\t// Return true\n\treturn true;\n}\n", "CodeBleu_score": 32.30431732176982}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation    return DB::transaction(function () {\n        $this->deleteExistingInvitations();\n\n        $invitation = $this->createInvitation();\n\n        try {\n            $invitation->notify($this->user);\n        } catch (Exception $e) {\n            throw new Exception('Unable to notify user. Please try again later.');\n        }\n\n        return $invitation;\n    });\n}", "CodeBleu_score": 19.433722131450637}, {"code": "<?\npublic function handle(): UserInvitation    return DB::transaction(function () {\n        $this->deleteExistingInvitations();\n        $invitation = $this->createInvitation();\n        try {\n            $this->dispatchNotification($invitation);\n        } catch (Exception $e) {\n            throw new Exception('Failed to send invitation notification: ' . $e->getMessage());\n        }\n        return $invitation;\n    });\n}", "CodeBleu_score": 18.424877139627316}, {"code": "<?\npublic function handle(): UserInvitation    return DB::transaction(function () {\n        $this->user->invitations()->delete();\n\n        $invitation = $this->user->invitations()->create([\n            'token' => Str::random(32),\n        ]);\n\n        $this->dispatchNotification($invitation);\n\n        return $invitation;\n    });\n}", "CodeBleu_score": 19.129687473733778}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void    if (this.isReconciled()) {\n        throw new Exception('Cannot authorize a reconciled transaction');\n    }\n    if (this.isTransfer()) {\n        throw new UnauthorizedException('Cannot authorize a transfer transaction');\n    }\n    this.authorized = true;\n}\n", "CodeBleu_score": 24.133800032352834}, {"code": "<?\npublic function authorize(): void    if (this.reconciled) {\n        throw new Exception('This transaction has already been reconciled.');\n    }\n    if (this.transfer) {\n        throw new UnauthorizedException();\n    }\n}\n", "CodeBleu_score": 22.862268734172357}, {"code": "<?\npublic function authorize(): void    if ($this->isReconciled()) {\n        throw new Exception('Cannot authorize a transaction that has been reconciled');\n    }\n\n    if ($this->isTransfer()) {\n        throw new Exception('Cannot authorize a transfer transaction');\n    }\n}", "CodeBleu_score": 27.58901746039115}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName)  // Get the tenant ID from the access token\n  int tenantId = getTenantIdFromAccessToken();\n\n  // If tenant ID is not zero, allow access to the tables in the list\n  if (tenantId != 0) {\n    if (tableName.equals(\"customers\") ||\n        tableName.equals(\"orders\") ||\n        tableName.equals(\"products\") ||\n        tableName.equals(\"suppliers\")) {\n      return true;\n    }\n  }\n\n  // Deny access to all other tables\n  return false;\n}", "CodeBleu_score": 19.290867176785884}, {"code": "public boolean doTableFilter(String tableName)    // Get the tenant ID from the access token\n    String tenantId = getTenantIdFromAccessToken();\n\n    // Check if the tenant ID is zero\n    if (tenantId == \"0\") {\n        // Check if the table is in the list of tables that the tenant is allowed to access\n        if (tableName == \"table1\" || tableName == \"table2\" || tableName == \"table3\") {\n            // Allow access\n            return true;\n        }\n        else {\n            // Deny access\n            return false;\n        }\n    }\n    else {\n        // Allow access\n        return true;\n    }\n}", "CodeBleu_score": 20.22803919980374}, {"code": "public boolean doTableFilter(String tableName)    // Get the tenant ID from the request's access token.\n    String tenantId = getTenantId();\n    // If tenant ID is not zero, allow access to the tables that are not tenant-specific.\n    if (tenantId != \"0\") {\n        // Check if the table is one of the tables that are not tenant-specific.\n        if (tableName.equals(\"Products\") || tableName.equals(\"Suppliers\") || tableName.equals(\"Customers\")) {\n            return true;\n        }\n    }\n    // If tenant ID is zero, allow access to the tenant-specific tables.\n    else {\n        // Check if the table is one of the tenant-specific tables.\n        if (tableName.equals(\"Orders\") || tableName.equals(\"OrderDetails\")) {\n            return true;\n        }\n    }\n    // Deny access to all other tables.\n    return false;\n}\n", "CodeBleu_score": 23.644102288542978}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer()    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 63.74668985308922}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer()    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 63.74668985308922}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer()    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 63.57456832038203}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception    try {\n        // retrieve the account list\n        List<Account> accountList = accountService.findBySelect();\n\n        // convert the list to JSON\n        JSONArray json = new JSONArray();\n        for (Account account : accountList) {\n            json.put(account.toJson());\n        }\n\n        // return the JSON string\n        return json.toString();\n    } catch (Exception e) {\n        // log the error\n        logger.error(e);\n\n        // return a failure message\n        return \"{\\\"error\\\":\\\"\" + e.getMessage() + \"\\\"}\";\n    }\n}", "CodeBleu_score": 28.374026004188735}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception    List<Account> accounts = null;\n    String jsonString = null;\n    try {\n        accounts = accountService.findBySelect();\n        jsonString = JSONUtil.convertToJSON(accounts);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        return \"{\\\"error\\\":\\\"error\\\"}\";\n    }\n    return jsonString;\n}", "CodeBleu_score": 27.241266923961817}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception    String json = null;\n    try {\n        List<Account> accounts = accountService.findBySelect();\n        json = convertToJson(accounts);\n    } catch (Exception e) {\n        log.error(\"Error in findBySelect\", e);\n        json = \"{\\\"error\\\":\\\"Error in findBySelect, \" + e.getMessage() + \"\\\"}\";\n    }\n    return json;\n}\n", "CodeBleu_score": 28.89924820617346}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception\n        BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            List<Account> accounts = accountService.listWithBalance(name, serialNo, currentPage, pageSize);\n            int count = accountService.count(name, serialNo);\n            response.setData(accounts);\n            response.setCount(count);\n            response.setCurrentPage(currentPage);\n            response.setPageSize(pageSize);\n        } catch (Exception e) {\n            log.error(e.getMessage());\n            response.setCode(ResponseCode.ERROR);\n            response.setMessage(e.getMessage());\n        }\n        return response;\n    }", "CodeBleu_score": 40.370447019233005}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception\n    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<Account> accounts = accountService.listWithBalance(name, serialNo, currentPage, pageSize);\n        int count = accountService.count(name, serialNo);\n        response.setData(\"accounts\", accounts);\n        response.setData(\"count\", count);\n        response.setData(\"currentPage\", currentPage);\n        response.setData(\"pageSize\", pageSize);\n        response.setCode(BaseResponseInfo.SUCCESS);\n    } catch (Exception e) {\n        logger.error(\"AccountController.listWithBalance failed\", e);\n        response.setCode(BaseResponseInfo.ERROR);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 39.718070033552586}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception\n    BaseResponseInfo response = new BaseResponseInfo();\n    List<Account> accountList = null;\n    Integer count = null;\n    try {\n        accountList = accountService.listWithBalance(name, serialNo, currentPage, pageSize);\n        count = accountService.count(name, serialNo);\n        response.setData(\"accountList\", accountList);\n        response.setData(\"count\", count);\n    } catch (Exception e) {\n        log.error(\"listWithBalance error\", e);\n        response.setCode(ResponseCode.ERROR);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 38.21422269511237}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        AccountService accountService = new AccountService();\n        Account account = accountService.getAccount(name, serialNo);\n        if (account != null) {\n            response.setData(account.getStatistics());\n            response.setCode(200);\n        } else {\n            response.setCode(404);\n            response.setErrorMessage(\"Account not found\");\n        }\n    } catch (Exception e) {\n        logger.error(\"Error in getStatistics\", e);\n        response.setCode(500);\n        response.setErrorMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 37.3363128141581}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception\n    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        AccountService accountService = new AccountService();\n        response.setData(accountService.getStatistics(name, serialNo));\n        response.setCode(200);\n    } catch (Exception e) {\n        logger.error(\"Error occurred while fetching statistics\", e);\n        response.setCode(500);\n        response.setError(\"Error occurred while fetching statistics\");\n    }\n    return response;\n}", "CodeBleu_score": 36.159452647220924}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setData(accountService.getStatistics(name, serialNo));\n        response.setCode(200);\n    } catch (Exception e) {\n        logger.error(\"Failed to get statistics for name: \" + name + \", serialNo: \" + serialNo, e);\n        response.setCode(500);\n        response.setMessage(\"Failed to get statistics for name: \" + name + \", serialNo: \" + serialNo);\n    }\n    return response;\n}", "CodeBleu_score": 36.137496287508185}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<AccountHeadDetails> accountHeadDetails = accountHeadService.getDetailsByNumber(billNo);\n        if (accountHeadDetails != null && accountHeadDetails.size() > 0) {\n            response.setData(accountHeadDetails.get(0));\n            response.setStatus(200);\n        } else {\n            response.setData(null);\n            response.setStatus(204);\n        }\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        response.setStatus(500);\n        response.setData(\"Details could not be retrieved.\");\n    }\n    return response;\n}", "CodeBleu_score": 38.672543309042226}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception\n    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setData(accountHeadService.getDetailByNumber(billNo));\n        response.setStatus(200);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        response.setStatus(500);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 33.51877899300547}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception        BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            List<AccountHead> accountHeads = accountHeadService.findByBillNo(billNo);\n            if(accountHeads.size() > 0) {\n                response.setData(accountHeads.get(0));\n                response.setCode(200);\n            }else {\n                response.setCode(300);\n                response.setData(\"No data\");\n            }\n        }catch (Exception e) {\n            logger.error(\"Error while getting bill details\", e);\n            response.setCode(500);\n            response.setData(e.getMessage());\n        }\n        return response;\n    }", "CodeBleu_score": 37.68662636084043}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        // Get the current user\n        String userName = request.getRemoteUser();\n        // Get the depot information\n        DepotInfo depot = depotService.findDepotByUser(userName);\n        // Set the response code to 200 and include the data\n        response.setCode(200);\n        response.setData(depot);\n    } catch (Exception e) {\n        // Log the error\n        logger.error(e.getMessage(), e);\n        // Set the response code to 500 and include an error message\n        response.setCode(500);\n        response.setErrorMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 50.75606312023878}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        User user = (User) request.getSession().getAttribute(\"user\");\n        if (user == null) {\n            response.setCode(ResponseCode.ERROR_PARAM);\n            response.setData(\"\");\n            return response;\n        }\n        List<Depot> depots = depotService.findDepotByUserId(user.getId());\n        response.setCode(ResponseCode.SUCCESS);\n        response.setData(depots);\n        return response;\n    } catch (Exception e) {\n        logger.error(\"findDepotByCurrentUser error:{}\", e);\n        response.setCode(ResponseCode.ERROR);\n        response.setData(e.getMessage());\n        return response;\n    }\n}", "CodeBleu_score": 39.79383712618419}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        res.code = 200;\n        res.data = depotService.findDepotByCurrentUser(request);\n    } catch (Exception e) {\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u4ed3\u5e93\u4fe1\u606f\u5931\u8d25\";\n        logger.error(e.getMessage());\n    }\n    return res;\n}", "CodeBleu_score": 64.02072076056704}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception    JSONArray jsonArray = new JSONArray();\n    List<RoleFunction> roleFunctions = roleFunctionService.findRoleFunction(type, keyId);\n    JSONObject jsonObject = new JSONObject();\n    jsonObject.put(\"roleFunctions\", roleFunctions);\n    jsonArray.add(jsonObject);\n    if (request.getHeader(\"tenantId\") != null) {\n        if (!request.getHeader(\"tenantId\").equals(\"1\")) {\n            JSONArray filteredRoleFunctions = new JSONArray();\n            for (int i = 0; i < jsonArray.length(); i++) {\n                if (jsonArray.getJSONObject(i).getJSONArray(\"roleFunctions\").getJSONObject(0).getString(\"functionCd\")\n                        .equals(\"\u7cfb\u7edf\u7ba1\u7406\")) {\n                    continue;\n                } else {\n                    filteredRoleFunctions.add(jsonArray.getJSONObject(i));\n                }\n            }\n            return filteredRoleFunctions;\n        }\n    }\n    return jsonArray;\n}", "CodeBleu_score": 33.908035896979406}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception\n    JSONArray jsonArray = new JSONArray();\n    JSONObject jsonObject = new JSONObject();\n    jsonObject.put(\"UBType\", type);\n    jsonObject.put(\"UBKeyId\", keyId);\n    List<RoleFunction> roleFunctionList = roleFunctionService.findRoleFunctions(type, keyId);\n    for (RoleFunction roleFunction : roleFunctionList) {\n        if (roleFunction.getFunctionCd().equals(\"\u7cfb\u7edf\u7ba1\u7406\")) {\n            if (request.getHeader(\"tenantId\").equals(\"1\")) {\n                jsonArray.add(roleFunction);\n            }\n        } else {\n            jsonArray.add(roleFunction);\n        }\n    }\n    jsonObject.put(\"roleFunctionList\", jsonArray);\n    jsonArray.add(jsonObject);\n    return jsonArray;\n}\n", "CodeBleu_score": 29.1186491153457}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception    JSONArray functionList = new JSONArray();\n    List<RoleFunction> functions = roleFunctionService.findRoleFunctions(type, keyId);\n    for (RoleFunction function : functions) {\n        JSONObject functionJson = new JSONObject();\n        functionJson.put(\"id\", function.getId());\n        functionJson.put(\"name\", function.getName());\n        functionJson.put(\"code\", function.getCode());\n        functionJson.put(\"type\", function.getType());\n        functionJson.put(\"keyId\", function.getKeyId());\n        functionJson.put(\"parentId\", function.getParentId());\n        functionJson.put(\"level\", function.getLevel());\n        functionJson.put(\"order\", function.getOrder());\n        functionJson.put(\"status\", function.getStatus());\n        functionJson.put(\"remark\", function.getRemark());\n        functionJson.put(\"tenantId\", function.getTenantId());\n        functionJson.put(\"createTime\", function.getCreateTime());\n        functionJson.put(\"createUser\", function.getCreateUser());\n        functionJson.put(\"updateTime\", function.getUpdateTime());\n        functionJson.put(\"updateUser\", function.getUpdateUser());\n        functionJson.put(\"delFlag\", function.getDelFlag());\n        functionList.add(functionJson);\n    }\n    JSONObject json = new JSONObject();\n    json.put(\"functionList\", functionList);\n    return json;\n}", "CodeBleu_score": 32.23586310308969}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception     BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response = platformConfigService.getInfoByKey(platformKey);\n        response.setCode(200);\n        response.setData(response.getData());\n    } catch (Exception e) {\n        logger.error(\"Exception in getInfoByKey: \", e);\n        response.setCode(500);\n        response.setData(\"Exception occurred while retrieving platform configuration information\");\n    }\n    return response;\n}\n", "CodeBleu_score": 40.320223852106324}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception \n    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setData(platformConfigService.getInfoByKey(platformKey));\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        response.setCode(500);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}\n", "CodeBleu_score": 42.481756753111576}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception     BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setData(platformConfigService.getInfoByKey(platformKey));\n        response.setCode(200);\n    } catch (Exception e) {\n        logger.error(\"getInfoByKey error\", e);\n        response.setCode(500);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 40.7785962191607}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception    BaseResponseInfo responseInfo = new BaseResponseInfo();\n    try {\n        List<SystemConfig> configList = systemConfigService.getSystemConfigList();\n        if (configList.size() > 0) {\n            responseInfo.setData(configList.get(0));\n        }\n        responseInfo.setCode(200);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        responseInfo.setCode(500);\n        responseInfo.setData(\"Exception: \" + e.getMessage());\n    }\n    return responseInfo;\n}", "CodeBleu_score": 42.15849137851207}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList();\n        if (systemConfigList.size() > 0) {\n            response.setCode(200);\n            response.setData(systemConfigList.get(0));\n        } else {\n            response.setCode(200);\n            response.setData(null);\n        }\n    } catch (Exception e) {\n        logger.error(\"\", e);\n        response.setCode(500);\n        response.setData(\"Exception: \" + e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 37.81010257291864}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList();\n        if (systemConfigList != null && systemConfigList.size() > 0) {\n            response.setData(systemConfigList.get(0));\n            response.setCode(200);\n        } else {\n            response.setCode(500);\n            response.setData(\"No system config info\");\n        }\n    } catch (Exception e) {\n        logger.error(\"Exception:\", e);\n        response.setCode(500);\n        response.setData(\"Exception:\" + e.getMessage());\n    }\n    return response;\n}\n", "CodeBleu_score": 35.37425840569445}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response)    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n        CommonsMultipartFile file = (CommonsMultipartFile) multipartRequest.getFile(\"file\");\n        String filePath = request.getParameter(\"filePath\");\n        String fileName = file.getOriginalFilename();\n        String url = \"\";\n        if (filePath.equals(\"1\")) {\n            url = AliOssUtil.upload(file);\n        } else {\n            url = FileUtil.upload(file);\n        }\n        res.code = 1;\n        res.data = url;\n    } catch (Exception e) {\n        e.printStackTrace();\n        res.code = 0;\n        res.data = \"\u4e0a\u4f20\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 48.04814907058019}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response)    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        String filePath = request.getSession().getServletContext().getRealPath(\"/\");\n        String basePath = filePath.substring(0, filePath.indexOf(\"\\\\WEB-INF\"));\n        // \u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u7684\u8def\u5f84\n        String path = basePath + \"\\\\upload\\\\\" + request.getParameter(\"path\") + \"\\\\\";\n        // \u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u7684\u540d\u79f0\n        String fileName = request.getParameter(\"fileName\");\n        // \u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u7684\u7c7b\u578b\n        String type = request.getParameter(\"type\");\n        // \u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u7684\u5927\u5c0f\n        long fileSize = Long.parseLong(request.getParameter(\"fileSize\"));\n        // \u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u7684\u6269\u5c55\u540d\n        String ext = fileName.substring(fileName.lastIndexOf(\".\"));\n        // \u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u7684\u6269\u5c55\u540d\n        String fileType = request.getParameter(\"fileType\");\n        // \u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u7684\u6269\u5c55\u540d\n        String fileMd5 = request.getParameter(\"fileMd5\");\n        // \u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u7684\u6269\u5c55\u540d\n        String fileKey = request.getParameter(\"fileKey\");\n        // \u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u7684\u6269\u5c55\u540d\n        String uploadType = request.getParameter(\"uploadType\");\n        // \u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u7684\u6269\u5c55\u540d\n        String uploadPath = request.getParameter(\"uploadPath\");\n        // \u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u7684\u6269\u5c55\u540d\n        String uploadFileName = request.getParameter(\"uploadFileName\");\n        // \u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u7684\u6269\u5c55\u540d\n        String fileUrl = request.getParameter(\"fileUrl\");\n        // \u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u7684\u6269\u5c55\u540d\n        String fileNewName = request.getParameter(\"fileNewName\");\n        // \u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u7684\u6269\u5c55\u540d\n        String fileOldName = request.getParameter(\"fileOldName\");\n        // \u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u7684\u6269\u5c55\u540d\n        String fileOld", "CodeBleu_score": 27.96535840919896}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response)    String methodName = \"upload\";\n    BaseResponseInfo resInfo = new BaseResponseInfo();\n    try {\n        // 1. Get the request parameters\n        Map<String, Object> params = new HashMap<String, Object>();\n        params = getRequestParameters(request);\n        String fileType = (String) params.get(\"fileType\");\n        String filePath = (String) params.get(\"filePath\");\n        String fileName = (String) params.get(\"fileName\");\n        // 2. Get the file from the request\n        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n        MultipartFile multipartFile = multipartRequest.getFile(\"file\");\n        // 3. Check if the file exists\n        if (multipartFile == null) {\n            resInfo.setCode(ResponseCode.ERR_FILE_NOT_FOUND);\n            resInfo.setMsg(\"File not found\");\n            return resInfo;\n        }\n        // 4. Check if the file type is valid\n        if (!fileType.equals(\"image\") && !fileType.equals(\"file\")) {\n            resInfo.setCode(ResponseCode.ERR_INVALID_FILE_TYPE);\n            resInfo.setMsg(\"Invalid file type\");\n            return resInfo;\n        }\n        // 5. Check if the file path is valid\n        if (filePath == null || filePath.length() == 0) {\n            resInfo.setCode(ResponseCode.ERR_INVALID_FILE_PATH);\n            resInfo.setMsg(\"Invalid file path\");\n            return resInfo;\n        }\n        // 6. Check if the file name is valid\n        if (fileName == null || fileName.length() == 0) {\n            resInfo.setCode(ResponseCode.ERR_INVALID_FILE_NAME);\n            resInfo.setMsg(\"Invalid file name\");\n            return resInfo;\n        }\n        // 7. Check if the file size is valid\n        if (multipartFile.getSize() > 10485760) {\n            resInfo.setCode(ResponseCode.ERR_INVALID_FILE_SIZE);\n            resInfo.setMsg(\"Invalid file size\");\n            return res", "CodeBleu_score": 35.22375096024694}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response)     String title = jsonObject.getString(\"title\");\n     String head = jsonObject.getString(\"head\");\n     String tip = jsonObject.getString(\"tip\");\n     List<JSONObject> data = jsonObject.getJSONArray(\"data\").toJavaList(JSONObject.class);\n     try {\n         excelService.exportExcel(title, head, tip, data, response);\n     } catch (Exception e) {\n         log.error(\"Export Excel error\", e);\n     }\n }", "CodeBleu_score": 72.50507753517799}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response)     try {\n         String title = jsonObject.getString(\"title\");\n         String head = jsonObject.getString(\"head\");\n         String tip = jsonObject.getString(\"tip\");\n         List<List<String>> dataList = jsonObject.getObject(\"dataList\", List.class);\n         String fileName = title + \".xlsx\";\n         response.setContentType(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8\");\n         response.setHeader(\"Content-Disposition\", \"attachment;filename=\" + URLEncoder.encode(fileName, \"UTF-8\"));\n         excelService.exportExcelByParam(title, head, tip, dataList, response.getOutputStream());\n     } catch (Exception e) {\n         log.error(e.getMessage(), e);\n     }\n }", "CodeBleu_score": 58.48668516874388}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response)     try {\n         // get parameters from JSON object\n         String title = jsonObject.getString(\"title\");\n         JSONArray head = jsonObject.getJSONArray(\"head\");\n         JSONArray tip = jsonObject.getJSONArray(\"tip\");\n         JSONArray data = jsonObject.getJSONArray(\"data\");\n         // call exportExcel service\n         exportExcel(title, head, tip, data, response);\n     } catch (Exception e) {\n         // log exception\n         log.error(\"exportExcelByParam failed: \", e);\n         // return error message\n         ResponseUtil.sendErrorMsg(response, e.getMessage());\n     }\n }\n \n /**\n  * This function exports data to an Excel file. It writes the output to the HTTP response. It handles and logs any exceptions that occur during the process.\n  */\n public void exportExcel(String title, JSONArray head, JSONArray tip, JSONArray data,\n                         HttpServletResponse response) {\n     try {\n         // create workbook\n         XSSFWorkbook workbook = new XSSFWorkbook();\n         // create sheet\n         XSSFSheet sheet = workbook.createSheet(title);\n         // create style for title\n         XSSFCellStyle titleStyle = workbook.createCellStyle();\n         // set title style\n         titleStyle.setAlignment(HorizontalAlignment.CENTER);\n         titleStyle.setVerticalAlignment(VerticalAlignment.CENTER);\n         // create title font\n         XSSFFont titleFont = workbook.createFont();\n         // set title font\n         titleFont.setFontName(\"\u5fae\u8f6f\u96c5\u9ed1\");\n         titleFont.setFontHeightInPoints((short) 20);\n         titleFont.setBold(true);\n         // set title font\n         titleStyle.setFont(titleFont);\n         // create title row\n         XSSFRow titleRow = sheet.createRow(0);\n         // create title cell\n         XSSFCell titleCell = titleRow.createCell(0);\n         // set title cell value and style\n         titleCell.setCellValue(title);\n         titleCell.setCellStyle(titleStyle);\n         // create style for head\n         XSSFCellStyle headStyle = workbook.createCellStyle", "CodeBleu_score": 51.687253687610955}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception     String name = obj.getString(\"name\");\n    String description = obj.getString(\"description\");\n    BigDecimal initialAmount = obj.has(\"initialAmount\") ? obj.getBigDecimal(\"initialAmount\") : BigDecimal.ZERO;\n    boolean isDefault = obj.has(\"isDefault\") ? obj.getBoolean(\"isDefault\") : false;\n    Account account = new Account(name, description, initialAmount);\n    if (isDefault) {\n        account.setDefault(true);\n    } else {\n        account.setDefault(false);\n    }\n    account.setEnabled(true);\n    account.setCreatedBy(getUser(request));\n    account.setCreatedDate(new Date());\n    account.setModifiedBy(getUser(request));\n    account.setModifiedDate(new Date());\n    int result = accountDao.insert(account);\n    if (result == 1) {\n        log.info(\"Inserted account: {}\", account);\n    } else {\n        log.error(\"Failed to insert account: {}\", account);\n    }\n    return result;\n}", "CodeBleu_score": 41.02625287686509}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception \tAccount account = new Account();\n\taccount.setName(obj.getString(\"name\"));\n\taccount.setDescription(obj.getString(\"description\"));\n\taccount.setAccountType(obj.getString(\"accountType\"));\n\taccount.setCurrency(obj.getString(\"currency\"));\n\taccount.setBalance(obj.getDouble(\"balance\"));\n\taccount.setEnabled(obj.getBoolean(\"enabled\"));\n\tif (obj.has(\"default\")) {\n\t\taccount.setDefaultAccount(obj.getBoolean(\"default\"));\n\t}\n\telse {\n\t\taccount.setDefaultAccount(false);\n\t}\n\tif (obj.has(\"parentAccountId\")) {\n\t\taccount.setParentAccountId(obj.getInt(\"parentAccountId\"));\n\t}\n\telse {\n\t\taccount.setParentAccountId(0);\n\t}\n\tif (obj.has(\"initialAmount\")) {\n\t\taccount.setInitialAmount(obj.getDouble(\"initialAmount\"));\n\t}\n\telse {\n\t\taccount.setInitialAmount(0);\n\t}\n\tif (obj.has(\"initialAmountDate\")) {\n\t\taccount.setInitialAmountDate(obj.getString(\"initialAmountDate\"));\n\t}\n\telse {\n\t\taccount.setInitialAmountDate(\"\");\n\t}\n\tif (obj.has(\"interestRate\")) {\n\t\taccount.setInterestRate(obj.getDouble(\"interestRate\"));\n\t}\n\telse {\n\t\taccount.setInterestRate(0);\n\t}\n\tif (obj.has(\"interestStartDate\")) {\n\t\taccount.setInterestStartDate(obj.getString(\"interestStartDate\"));\n\t}\n\telse {\n\t\taccount.setInterestStartDate(\"\");\n\t}\n\tif (obj.has(\"interestCompoundPeriod\")) {\n\t\taccount.setInterestCompoundPeriod(obj.getInt(\"interestCompoundPeriod\"));\n\t}\n\telse {\n\t\taccount.setInterestCompoundPeriod(0);\n\t}\n\tif (obj.has(\"interestCompoundPeriodType\")) {\n\t\taccount.setInterestCompoundPeriodType(obj.getInt(\"interestCompoundPeriodType\"));\n\t}", "CodeBleu_score": 18.176921998833514}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception \t\n\t//initialize the account\n\tAccount account = new Account();\n\t\n\t//set the initial amount to zero if not specified\n\tif (obj.has(\"amount\")) {\n\t\taccount.setAmount(obj.getDouble(\"amount\"));\n\t} else {\n\t\taccount.setAmount(0);\n\t}\n\t\n\t//set the account name\n\taccount.setName(obj.getString(\"name\"));\n\t\n\t//determine if this should be the default account\n\tif (obj.has(\"default\")) {\n\t\taccount.setDefaultAccount(obj.getBoolean(\"default\"));\n\t} else {\n\t\tif (account.getName().equals(\"Cash\")) {\n\t\t\taccount.setDefaultAccount(true);\n\t\t} else {\n\t\t\taccount.setDefaultAccount(false);\n\t\t}\n\t}\n\t\n\t//enable the account\n\taccount.setEnabled(true);\n\t\n\t//insert the account\n\tint result = account.insert(request);\n\t\n\t//log the operation\n\tString message = \"Account \" + account.getName() + \" was added.\";\n\tlog.info(message);\n\t\n\treturn result;\n}", "CodeBleu_score": 32.22033317478443}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo)    try {\n        return this.getAccountsWithBalance(name, serialNo).size();\n    } catch (Exception e) {\n        LOGGER.error(\"Error occurred while listing accounts with balance: \", e);\n        return null;\n    }\n}\n", "CodeBleu_score": 29.121258382557446}, {"code": "public Long listWithBalanceCount(String name, String serialNo)    try {\n        return this.getMapper().listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        LOG.error(\"Error while listing accounts with balance\", e);\n        return null;\n    }\n}\n", "CodeBleu_score": 30.19401712575617}, {"code": "public Long listWithBalanceCount(String name, String serialNo)    try {\n        return listWithBalanceCountMapper.count(name, serialNo);\n    } catch (Exception e) {\n        LOGGER.error(\"Error while getting the count of accounts with the name {} and serial number {}\", name, serialNo);\n        return null;\n    }\n}\n", "CodeBleu_score": 28.93891350709704}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception\ttry {\n\t\tDepotItemMapper depotItemMapper = SQLManager.getInstance().getMapper(DepotItemMapper.class);\n\t\tint result = depotItemMapper.deleteByPrimaryKey(id);\n\t\treturn result;\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\treturn 0;\n\t}\n}\n", "CodeBleu_score": 40.557680749762426}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception    try {\n        DepotItemMapper mapper = sqlSession.getMapper(DepotItemMapper.class);\n        return mapper.deleteByPrimaryKey(id);\n    }\n    catch (Exception e) {\n        logger.error(e.getMessage());\n        return 0;\n    }\n}\n", "CodeBleu_score": 37.66873673594118}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception    try {\n        DepotItemMapper mapper = sqlSession.getMapper(DepotItemMapper.class);\n        return mapper.deleteDepotItem(id);\n    }\n    catch (Exception e) {\n        logger.error(\"Error deleting depot item: \" + e.getMessage());\n        return 0;\n    }\n}\n", "CodeBleu_score": 35.245883321728655}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey)    try {\n        String url = \"http://localhost:8080/api/projects/\" + projectName + \"/nodes/\" + nodeType + \"/\" + nodeKey;\n        HttpClient client = HttpClient.newHttpClient();\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(url))\n                .build();\n        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n        if (response.body().contains(\"key\")) {\n            return true;\n        }\n    } catch (Exception e) {\n        System.out.println(e.getMessage());\n    }\n    return false;\n}", "CodeBleu_score": 37.71585334346577}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey)    try {\n        HttpClient client = HttpClient.newHttpClient();\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(\"http://localhost:8080/add-node/\" + projectName + \"/\" + nodeType + \"/\" + nodeKey))\n            .build();\n        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n        if (response.body().contains(nodeKey)) {\n            return true;\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    return false;\n}", "CodeBleu_score": 38.111253068289244}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey)    try {\n        // Create an HTTP client\n        HttpClient client = HttpClient.newHttpClient();\n\n        // Construct the request URL\n        String url = \"http://localhost:8080/api/v1/projects/\" + projectName + \"/nodes/\" + nodeType + \"/\" + nodeKey;\n\n        // Send the request\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(url))\n                .GET()\n                .build();\n        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n\n        // Process the response\n        String responseBody = response.body();\n        System.out.println(responseBody);\n        return responseBody.contains(nodeKey);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return false;\n}", "CodeBleu_score": 39.024766183979956}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to)    HttpClient client = HttpClients.createDefault();\n    HttpGet request = new HttpGet(endpoint + \"addEdge\");\n    CloseableHttpResponse response = null;\n    try {\n        request.addHeader(\"accept\", \"application/json\");\n        List<NameValuePair> params = new ArrayList<NameValuePair>();\n        params.add(new BasicNameValuePair(\"project\", projectName));\n        params.add(new BasicNameValuePair(\"edgeType\", edgeType));\n        params.add(new BasicNameValuePair(\"fromType\", fromType));\n        params.add(new BasicNameValuePair(\"toType\", toType));\n        params.add(new BasicNameValuePair(\"from\", from));\n        params.add(new BasicNameValuePair(\"to\", to));\n        request.setEntity(new UrlEncodedFormEntity(params, \"UTF-8\"));\n        response = client.execute(request);\n        HttpEntity entity = response.getEntity();\n        String result = EntityUtils.toString(entity);\n        JSONObject jsonObject = new JSONObject(result);\n        return jsonObject.has(\"key\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        return false;\n    } finally {\n        try {\n            client.close();\n            response.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}", "CodeBleu_score": 41.48514289914579}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to)  CloseableHttpClient client = HttpClients.createDefault();\n  HttpGet httpGet = new HttpGet(baseURL + \"/add_edge/\" + projectName + \"/\" + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to);\n  CloseableHttpResponse response = null;\n  try {\n    response = client.execute(httpGet);\n    HttpEntity entity = response.getEntity();\n    String responseString = EntityUtils.toString(entity);\n    JSONObject responseJSON = new JSONObject(responseString);\n    if (responseJSON.has(\"key\")) {\n      return true;\n    }\n  } catch (Exception e) {\n    e.printStackTrace();\n  } finally {\n    try {\n      client.close();\n      if (response != null) {\n        response.close();\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n  return false;\n}", "CodeBleu_score": 53.19260764661813}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to)    // Build the URL with the parameters\n    String url = String.format(\"%s/add-edge?project=%s&edgeType=%s&fromType=%s&toType=%s&from=%s&to=%s\",\n            this.baseUrl, projectName, edgeType, fromType, toType, from, to);\n\n    // Create a CloseableHttpClient to execute the request\n    CloseableHttpClient client = HttpClients.createDefault();\n\n    // Create a GET request to the specified URL\n    HttpGet request = new HttpGet(url);\n\n    // Execute the request and get the response\n    CloseableHttpResponse response = null;\n    try {\n        response = client.execute(request);\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n\n    // Get the response as a String\n    String jsonString = null;\n    try {\n        jsonString = EntityUtils.toString(response.getEntity());\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n\n    // Parse the response as JSON\n    JSONObject json = null;\n    try {\n        json = new JSONObject(jsonString);\n    } catch (JSONException e) {\n        e.printStackTrace();\n        return false;\n    }\n\n    // Check if the response contains a key\n    boolean success = json.has(\"key\");\n\n    // Close the resources\n    try {\n        client.close();\n        response.close();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n\n    return success;\n}", "CodeBleu_score": 40.55026508406675}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event)  if (event == null || event.getMessage() == null) {\n    throw new IllegalArgumentException(\"Event or message is null\");\n  }\n  if (event.getLocation() == null) {\n    event.setLocation(new Location(\"test\", \"test\", \"test\"));\n  }\n  event.setTime(System.currentTimeMillis());\n  String json = gson.toJson(event);\n  String topic = (event.getTarget() == null) ? \"test\" : event.getTarget();\n  ProducerRecord<String, String> record = new ProducerRecord<>(topic, json);\n  producer.send(record);\n  producer.flush();\n}", "CodeBleu_score": 38.38941593640109}, {"code": "public void sendEvent(Event event)    if (event == null || event.getMessage() == null) {\n        System.out.println(\"Event is null or has a null message.\");\n        return;\n    }\n    if (event.getLocation() == null) {\n        Location testLocation = new Location();\n        testLocation.setLatitude(0.0);\n        testLocation.setLongitude(0.0);\n        event.setLocation(testLocation);\n    }\n    event.setEventTime(System.currentTimeMillis());\n    String jsonString = event.toJson();\n    String topic = \"test\";\n    if (target != null) {\n        topic = target;\n    }\n    ProducerRecord<String, String> producerRecord = new ProducerRecord<String, String>(topic, jsonString);\n    producer.send(producerRecord);\n    producer.flush();\n}", "CodeBleu_score": 54.972780045190326}, {"code": "public void sendEvent(Event event)    if (event != null && event.getMessage() != null) {\n        if (event.getLocation() == null) {\n            event.setLocation(new Location(40.7128, -74.0060));\n        }\n        event.setEventTime(System.currentTimeMillis());\n        String eventJson = new Gson().toJson(event);\n        String topic = event.getTarget() == null ? \"test\" : event.getTarget();\n        ProducerRecord<String, String> record = new ProducerRecord<>(topic, eventJson);\n        producer.send(record);\n        producer.flush();\n    }\n}", "CodeBleu_score": 39.57723029452047}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content)  // Create an OSS client instance.\n  OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);\n\n  // Upload the object.\n  ossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n  // Shut down the OSS client instance.\n  ossClient.shutdown();\n\n  // Return the URL of the uploaded object.\n  return \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 33.377734449370074}, {"code": "public String upload(String objName, byte[] content)    // Initialization\n    String endpoint = \"oss-cn-shanghai.aliyuncs.com\";\n    String accessKeyId = \"your-access-key-id\";\n    String accessKeySecret = \"your-access-key-secret\";\n    String bucketName = \"your-bucket-name\";\n    String objectName = objName;\n\n    // Create an OSSClient instance.\n    OSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\n    // Upload the object.\n    ossClient.putObject(bucketName, objectName, new ByteArrayInputStream(content));\n\n    // Shut down the OSSClient instance.\n    ossClient.shutdown();\n\n    // Return the URL of the uploaded object.\n    return \"https://\" + bucketName + \".\" + endpoint + \"/\" + objectName;\n}", "CodeBleu_score": 38.9996513688201}, {"code": "public String upload(String objName, byte[] content)    String endpoint = \"oss-cn-beijing.aliyuncs.com\";\n    String accessKeyId = \"yourAccessKeyId\";\n    String accessKeySecret = \"yourAccessKeySecret\";\n    String bucketName = \"yourBucketName\";\n\n    // Create an OSSClient instance.\n    OSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\n    // Upload the object.\n    ossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n    // Shut down the OSSClient instance.\n    ossClient.shutdown();\n\n    // Return the URL of the object.\n    return \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 40.33431914436164}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception    IpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo(\"unknown\", \"unknown\", \"unknown\");\n    }\n    return worker.getLocationInfo(ipAddress);\n}\n", "CodeBleu_score": 27.534150755596787}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception    IpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\");\n    }\n    return worker.getLocationInfo(ipAddress);\n}\n", "CodeBleu_score": 29.34539938504305}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception    IpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo(ipAddress, \"unknown\", \"unknown\", \"unknown\", \"unknown\");\n    }\n    return worker.getLocationInfo(ipAddress);\n}\n", "CodeBleu_score": 28.581202422599816}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception    if (this.esClient == null || this.esRestClient == null) {\n        synchronized (this) {\n            if (this.esClient == null || this.esRestClient == null) {\n                // parse hosts and ports\n                String[] hosts = this.esHosts.split(\",\");\n                Integer[] ports = new Integer[hosts.length];\n                for (int i = 0; i < hosts.length; i++) {\n                    String[] hostPort = hosts[i].split(\":\");\n                    if (hostPort.length == 2) {\n                        hosts[i] = hostPort[0];\n                        ports[i] = Integer.parseInt(hostPort[1]);\n                    } else {\n                        ports[i] = 9200;\n                    }\n                }\n\n                // build low-level REST client\n                RestClientBuilder restClientBuilder = RestClient.builder(hosts);\n                if (this.esUsername != null && this.esUsername.length() > 0 && this.esPassword != null && this.esPassword.length() > 0) {\n                    final CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n                    credentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(this.esUsername, this.esPassword));\n                    restClientBuilder.setHttpClientConfigCallback(httpClientBuilder -> httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider));\n                }\n                if (this.esSslEnabled) {\n                    restClientBuilder.setHttpClientConfigCallback(httpClientBuilder -> {\n                        try {\n                            SSLContextBuilder sslBuilder = SSLContexts.custom();\n                            if (this.esSslTrustAllCerts) {\n                                sslBuilder.loadTrustMaterial(null, (certificate, authType) -> true);\n                            } else {\n                                if (this.esSslTrustStorePath != null && this.esSslTrustStorePath.length() > 0) {\n                                    sslBuilder.loadTrustMaterial(new File(this.esSslTrustStorePath), this.esSslTrustStorePassword.toCharArray());\n                                }\n                            }", "CodeBleu_score": 25.60664086152328}, {"code": "protected void ensureESClientInitialized() throws Exception\tif (esClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (esClient == null) {\n\t\t\t\t// parse hosts and ports\n\t\t\t\tString[] hosts = esHosts.split(\",\");\n\t\t\t\tInteger[] ports = new Integer[hosts.length];\n\t\t\t\tfor (int i = 0; i < hosts.length; i++) {\n\t\t\t\t\tString[] hostAndPort = hosts[i].split(\":\");\n\t\t\t\t\tif (hostAndPort.length == 1) {\n\t\t\t\t\t\tports[i] = 9200;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tports[i] = Integer.parseInt(hostAndPort[1]);\n\t\t\t\t\t}\n\t\t\t\t\thosts[i] = hostAndPort[0];\n\t\t\t\t}\n\t\t\t\t// build low-level REST client\n\t\t\t\tRestClientBuilder restClientBuilder = RestClient.builder(hosts);\n\t\t\t\tif (esUsername != null && !esUsername.isEmpty() && esPassword != null && !esPassword.isEmpty()) {\n\t\t\t\t\tfinal CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n\t\t\t\t\tcredentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(esUsername, esPassword));\n\t\t\t\t\trestClientBuilder.setHttpClientConfigCallback(httpClientBuilder -> httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider));\n\t\t\t\t}\n\t\t\t\tesClient = restClientBuilder.build();\n\t\t\t\t// build high-level REST client\n\t\t\t\tesRestClient = new RestHighLevelClient(esClient);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 30.699987165362476}, {"code": "protected void ensureESClientInitialized() throws Exception  if (lowLevelClient == null || highLevelClient == null) {\n    synchronized (this) {\n      if (lowLevelClient == null || highLevelClient == null) {\n        logger.info(\"Initializing Elasticsearch client\");\n        // Parse cluster hosts and ports\n        String[] hosts = clusterHosts.split(\",\");\n        Integer[] ports = new Integer[hosts.length];\n        for (int i = 0; i < hosts.length; i++) {\n          String[] hostPort = hosts[i].split(\":\");\n          hosts[i] = hostPort[0];\n          ports[i] = Integer.parseInt(hostPort[1]);\n        }\n        // Build low-level REST client\n        RestClientBuilder lowLevelClientBuilder = RestClient.builder(hosts);\n        if (useSsl) {\n          lowLevelClientBuilder.setHttpClientConfigCallback(new RestClientBuilder.HttpClientConfigCallback() {\n            @Override\n            public HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder) {\n              try {\n                return httpClientBuilder.setSSLContext(SSLContext.getDefault());\n              } catch (NoSuchAlgorithmException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          });\n        }\n        lowLevelClient = lowLevelClientBuilder.build();\n        // Build high-level REST client\n        RestHighLevelClientBuilder highLevelClientBuilder = new RestHighLevelClientBuilder(lowLevelClient);\n        highLevelClient = highLevelClientBuilder.build();\n        logger.info(\"Elasticsearch client initialized\");\n      }\n    }\n  }\n}\n", "CodeBleu_score": 32.306789963170935}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort)    List<HttpHost> hosts = new ArrayList<>();\n    String[] hostList = clusterHostList.split(\",\");\n    for (String host : hostList) {\n        String[] hostAndPort = host.split(\":\");\n        int port = hostAndPort.length == 2 ? Integer.parseInt(hostAndPort[1]) : clusterPort;\n        hosts.add(new HttpHost(hostAndPort[0], port));\n    }\n    return hosts;\n}", "CodeBleu_score": 41.263626800280676}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort)    List<HttpHost> hosts = new ArrayList<>();\n    String[] hostList = clusterHostList.split(\",\");\n    for (String host : hostList) {\n        host = host.trim();\n        if (host.startsWith(\"http://\") || host.startsWith(\"https://\")) {\n            try {\n                URL url = new URL(host);\n                host = url.getHost();\n                if (url.getPort() != -1) {\n                    clusterPort = url.getPort();\n                }\n            } catch (MalformedURLException e) {\n                System.err.println(\"Error parsing URL: \" + e.getMessage());\n            }\n        }\n        hosts.add(new HttpHost(host, clusterPort));\n    }\n    return hosts;\n}", "CodeBleu_score": 36.969534652324924}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort)    List<HttpHost> hosts = new ArrayList<HttpHost>();\n    String[] hostList = clusterHostList.split(\",\");\n\n    for (String host : hostList) {\n        hosts.add(new HttpHost(host.trim(), clusterPort));\n    }\n\n    return hosts;\n}", "CodeBleu_score": 35.398239216241656}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException    while (true) {\n        try {\n            // Get a task from the queue.\n            final Task task = getNextTask();\n            if (task == null) {\n                // If no tasks are available, wait 30 seconds and try again.\n                Thread.sleep(30000);\n            } else {\n                // If a task is available, process it.\n                processTask(task);\n            }\n        } catch (Exception e) {\n            // Log any exceptions.\n            System.err.println(\"Exception while processing tasks. \" + e.getMessage());\n        }\n    }\n}\n", "CodeBleu_score": 13.944580971188794}, {"code": "protected void pollingWork() throws InterruptedException    // Poll for tasks from the queue with a 30-second timeout\n    List<Task> tasks = queue.poll(30, TimeUnit.SECONDS);\n\n    // Check for a null value or an empty list\n    if (tasks == null || tasks.isEmpty()) {\n        return;\n    }\n\n    // Process the tasks\n    for (Task task : tasks) {\n        try {\n            // Check the task type\n            if (task instanceof SendMessageTask) {\n                // Extract the message data\n                SendMessageTask messageTask = (SendMessageTask) task;\n                String recipientNumber = messageTask.getRecipientNumber();\n                String message = messageTask.getMessage();\n\n                // Validate the data\n                if (recipientNumber == null || recipientNumber.isEmpty() || message == null || message.isEmpty()) {\n                    // Log an error message\n                    logger.error(\"Invalid message data: recipient number = \" + recipientNumber + \", message = \" + message);\n                    continue;\n                }\n\n                // Send the message\n                sendMessage(recipientNumber, message);\n            }\n            else {\n                // Log an error message\n                logger.error(\"Invalid task type: \" + task.getClass().getName());\n            }\n        }\n        catch (Exception e) {\n            // Log an error message\n            logger.error(\"Failed to process task: \" + task, e);\n        }\n    }\n}\n", "CodeBleu_score": 32.05527645683631}, {"code": "protected void pollingWork() throws InterruptedException    // Create a new poller for the queue.\n    QueuePoller poller = new QueuePoller(queueUrl);\n\n    // Poll for messages indefinitely.\n    while (true) {\n        // Poll for a message from the queue.\n        List<Message> messages = poller.poll();\n\n        // Process each message in the list.\n        for (Message message : messages) {\n            // Extract the message data.\n            String messageBody = message.getBody();\n            String messageType = message.getAttribute(\"MessageType\");\n\n            // Process the message based on the message type.\n            if (\"Notification\".equals(messageType)) {\n                // Parse the message body as JSON.\n                JSONObject json = new JSONObject(messageBody);\n\n                // Extract the message recipient number and message data.\n                String recipientNumber = json.getString(\"recipientNumber\");\n                String messageData = json.getString(\"messageData\");\n\n                // Validate the message data.\n                if (!Message.isValidMessageData(messageData)) {\n                    // Log an error message and continue.\n                    logger.error(\"Invalid message data: \" + messageData);\n                    continue;\n                }\n\n                // Validate the recipient number.\n                if (!Message.isValidNumber(recipientNumber)) {\n                    // Log an error message and continue.\n                    logger.error(\"Invalid recipient number: \" + recipientNumber);\n                    continue;\n                }\n\n                // Send the message.\n                try {\n                    Message.send(messageData, recipientNumber);\n                } catch (Exception e) {\n                    // Log an error message and continue.\n                    logger.error(\"Failed to send message: \" + e.getMessage());\n                    continue;\n                }\n            } else {\n                // Log an error message and continue.\n                logger.error(\"Invalid message type: \" + messageType);\n                continue;\n            }\n        }\n    }\n}", "CodeBleu_score": 24.025481096178915}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception\n    // Create a CloseableHttpClient.\n    CloseableHttpClient httpClient = HttpClients.createDefault();\n\n    // Create a HttpGet object.\n    HttpGet httpGetRequest = new HttpGet(uri);\n\n    // Add additional header to the GET request.\n    httpGetRequest.addHeader(\"Accept\", \"application/xml\");\n\n    // Execute the request and catch the response.\n    CloseableHttpResponse httpResponse = httpClient.execute(httpGetRequest);\n\n    try {\n\n        // Check for HTTP status code: 200 = success.\n        if (httpResponse.getStatusLine().getStatusCode() != 200) {\n            throw new RuntimeException(\"Failed : HTTP error code : \" + httpResponse.getStatusLine().getStatusCode());\n        }\n\n        // Get the response entity.\n        HttpEntity entity = httpResponse.getEntity();\n\n        // If the response does not enclose an entity, there is no need to worry about connection release.\n        if (entity == null) {\n            throw new ClientProtocolException(\"Response contains no content\");\n        }\n\n        // A Simple JSON Response Read.\n        InputStream is = entity.getContent();\n        BufferedReader br = new BufferedReader(new InputStreamReader(is));\n        String line = br.readLine();\n        StringBuilder sb = new StringBuilder();\n        while (line != null) {\n            sb.append(line);\n            line = br.readLine();\n        }\n        is.close();\n        br.close();\n\n        // Log the XML content.\n        System.out.println(sb.toString());\n\n        // Return the XML content as a string.\n        return sb.toString();\n    } finally {\n        httpResponse.close();\n    }\n}", "CodeBleu_score": 39.791985525859985}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception    CloseableHttpClient httpClient = HttpClients.createDefault();\n    HttpGet httpGet = new HttpGet(uri);\n    CloseableHttpResponse httpResponse = httpClient.execute(httpGet);\n    HttpEntity httpEntity = httpResponse.getEntity();\n    String response = EntityUtils.toString(httpEntity);\n    httpClient.close();\n    return response;\n}\n", "CodeBleu_score": 48.29119712761823}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception    // Create a CloseableHttpClient to execute the HTTP request.\n    CloseableHttpClient httpClient = HttpClients.createDefault();\n\n    // Create a HttpGet object with the URI.\n    HttpGet httpGet = new HttpGet(uri);\n\n    // Execute the request and catch the response.\n    CloseableHttpResponse response = httpClient.execute(httpGet);\n\n    // Get the HttpEntity from the response.\n    HttpEntity entity = response.getEntity();\n\n    // Convert the HttpEntity to a UTF-8 encoded string.\n    String responseString = EntityUtils.toString(entity, \"UTF-8\");\n\n    // Close the response and the client.\n    response.close();\n    httpClient.close();\n\n    // Return the response string.\n    return responseString;\n}\n", "CodeBleu_score": 53.47958145066156}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document document = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n    Element root = document.getDocumentElement();\n    Object[] decoded = decodeElement(root, doTrim);\n    if (decoded != null) {\n        Map<String, Object> result = new HashMap<String, Object>();\n        result.put(root.getTagName(), decoded);\n        return result;\n    }\n    return null;\n}\n", "CodeBleu_score": 57.38137712130501}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document document = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n    Object[] root = decodeElement(document.getDocumentElement(), doTrim);\n    if (root != null) {\n        Map<String, Object> map = new HashMap<String, Object>();\n        map.put((String) root[0], root[1]);\n        return map;\n    }\n    return null;\n}\n", "CodeBleu_score": 57.37409947124409}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document document = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n\n    Map<String, Object> messageMap = new HashMap<String, Object>();\n    NodeList rootChildNodes = document.getDocumentElement().getChildNodes();\n    if (rootChildNodes.getLength() > 0) {\n        for (int i = 0; i < rootChildNodes.getLength(); i++) {\n            Node rootChildNode = rootChildNodes.item(i);\n            if (rootChildNode.getNodeType() == Node.ELEMENT_NODE) {\n                String rootChildNodeName = rootChildNode.getNodeName();\n                Object rootChildNodeValue = decodeElement(rootChildNode, doTrim);\n                messageMap.put(rootChildNodeName, rootChildNodeValue);\n            }\n        }\n    }\n    return messageMap;\n}\n", "CodeBleu_score": 49.66179889368133}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord)    if (orderRecord.getC_Order_ID() <= 0) {\n        return;\n    }\n    final IOrderBL orderBL = Services.get(IOrderBL.class);\n    final IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n\n    final I_C_Order order = InterfaceWrapperHelper.create(orderRecord, I_C_Order.class);\n    if (order.isProcessed()) {\n        return;\n    }\n\n    final I_C_OrderLine firstOrderLine = orderDAO.retrieveOrderLine(order, 0);\n    if (firstOrderLine == null) {\n        return;\n    }\n\n    final boolean eligibleForAutoProcessing = orderBL.isEligibleForAutomaticProcessing(order);\n    if (eligibleForAutoProcessing) {\n        final String trxName = Services.get(ITrxManager.class).createTrxName(order, true);\n        Services.get(IOrderBL.class).scheduleAfterCommit(order, trxName);\n        Loggables.addLog(\"Enqueued order {} for automatic shipping and invoicing\", order);\n    } else {\n        Loggables.addLog(\"Order {} is not eligible for automatic processing\", order);\n        final boolean postponeScheduleGeneration = orderBL.isPostponeScheduleGeneration(order);\n        if (!postponeScheduleGeneration) {\n            Services.get(IOrderBL.class).scheduleMissingSchedulesAfterCommit(order);\n            Loggables.addLog(\"Enqueued order {} for schedule generation\", order);\n        }\n    }\n}", "CodeBleu_score": 40.9613068788714}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord)\t// If the order is not eligible for auto-processing, we don't need to do anything\n\tif (!isEligibleForAutoProcessing(orderRecord)) {\n\t\tlogger.debug(\"Order {} is not eligible for auto-processing; schedules will be generated after commit\", orderRecord);\n\t\treturn;\n\t}\n\n\tfinal IOrderBL orderBL = Services.get(IOrderBL.class);\n\tfinal IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n\tfinal IOrderLineBL orderLineBL = Services.get(IOrderLineBL.class);\n\tfinal IOrderPayScheduleBL orderPayScheduleBL = Services.get(IOrderPayScheduleBL.class);\n\tfinal IOrderPayScheduleRepository orderPayScheduleRepository = Services.get(IOrderPayScheduleRepository.class);\n\tfinal IOrderPaymentScheduleBL orderPaymentScheduleBL = Services.get(IOrderPaymentScheduleBL.class);\n\tfinal IOrderPaymentScheduleRepository orderPaymentScheduleRepository = Services.get(IOrderPaymentScheduleRepository.class);\n\n\tfinal Properties ctx = InterfaceWrapperHelper.getCtx(orderRecord);\n\tfinal String trxName = InterfaceWrapperHelper.getTrxName(orderRecord);\n\n\tfinal OrderId orderId = OrderId.ofRepoId(orderRecord.getC_Order_ID());\n\tfinal I_C_Order order = orderDAO.getById(orderId, I_C_Order.class);\n\n\tfinal boolean isSOTrx = order.isSOTrx();\n\tfinal CurrencyPrecision currencyPrecision = orderBL.getPricePrecision(order);\n\n\tfinal List<I_C_OrderLine> orderLines = orderDAO.retrieveOrderLines(order, I_C_OrderLine.class);\n\tfinal List<I_C_OrderLine> orderLinesWithMissingSchedules = orderLineBL.retrieveMissingScheduleOrderLines(orderLines);\n\n\tfinal List<I_C_Order_CompensationGroup> compensationGroups = orderDAO.retrieveCompensationGroups(order);\n\tfinal List<I_C", "CodeBleu_score": 43.23023240561698}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord)\t// check if the order is eligible for auto-processing\n\tif (isEligibleForAutoProcessing(orderRecord)) {\n\t\t// log the action\n\t\tLoggables.addLog(\"Order {} is eligible for auto-processing\", orderRecord.getC_Order_ID());\n\n\t\t// enqueue the order for automatic shipping and invoicing\n\t\tenqueueOrderForAutoProcessing(orderRecord);\n\t}\n\telse {\n\t\t// log the action\n\t\tLoggables.addLog(\"Order {} is not eligible for auto-processing\", orderRecord.getC_Order_ID());\n\n\t\t// schedule the creation of missing shipment schedules if they are not postponed\n\t\tscheduleCreateMissingShipmentSchedulesIfNotPostponed(orderRecord);\n\t}\n}\n", "CodeBleu_score": 22.564882204951672}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User    $user = $this->getUser($request);\n\n    if (!$user || !$this->getPasswordHasher()->verify($request->getPlainPassword(), $user->getPassword())) {\n        $this->eventDispatcher->dispatch(new AuthenticationFailureEvent($request, $this->getProviderKey(), [\n            'username' => $request->getUsername(),\n        ]));\n\n        throw new AuthenticationException('Invalid credentials.');\n    }\n\n    return $user;\n}", "CodeBleu_score": 43.3364927778479}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User    $user = $this->getUser($request);\n\n    if (!$user) {\n        $this->triggerFailedAuthenticationEvent($request);\n\n        throw new AuthenticationException('Authentication failed.');\n    }\n\n    $passwordValid = $this->passwordHasher->check($user->getPassword(), $request->getParsedBodyParam('password'));\n\n    if (!$passwordValid) {\n        $this->triggerFailedAuthenticationEvent($request);\n\n        throw new AuthenticationException('Authentication failed.');\n    }\n\n    return $user;\n}", "CodeBleu_score": 43.58435864321744}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User    $user = $this->userProvider->loadUserByUsername($request->get('email'));\n\n    if (!$user || !$this->passwordEncoder->isPasswordValid($user, $request->get('password'))) {\n        $this->eventDispatcher->dispatch(new AuthenticationFailureEvent($request, $this->providerKey), AuthenticationEvents::AUTHENTICATION_FAILURE);\n\n        throw new AuthenticationException('Invalid credentials.');\n    }\n\n    return $user;\n}\n", "CodeBleu_score": 38.14013192045466}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void    $this->limiter->hit($request);\n\n    throw ValidationException::withMessages([\n        'email' => [trans('auth.failed')],\n    ]);\n}\n", "CodeBleu_score": 86.14176106773154}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void    $this->limiter->hit($this->throttleKey($request));\n\n    throw ValidationException::withMessages([\n        $this->username() => [trans('auth.failed')],\n    ]);\n}\n", "CodeBleu_score": 66.47414212216478}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void    $this->limiter->hit($this->throttleKey($request));\n    throw ValidationException::withMessages([\n        $this->username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 66.47414212216478}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request)    $user = $this->user->find($request->session()->get('user_id'));\n\n    if ($user) {\n        $credentials = $user->getWebAuthnCredentials();\n\n        $publicKey = $credentials->prepareAssertion($request->input('challenge'));\n\n        $this->view->render('TwoFactorChallenge', [\n            'rememberMe' => $request->session()->get('remember_me'),\n            'publicKey' => $publicKey\n        ]);\n    } else {\n        $this->view->render('TwoFactorChallenge', [\n            'rememberMe' => $request->session()->get('remember_me'),\n            'publicKey' => null\n        ]);\n    }\n}", "CodeBleu_score": 39.143701130039894}, {"code": "<?\npublic function toResponse($request)    $user_id = $request->session()->get('user_id');\n    $user = User::find($user_id);\n    if($user) {\n        $public_key = $user->public_key;\n        $request->session()->put('public_key', $public_key);\n        $request->session()->put('user', $user);\n        $response = [\n            'public_key' => $public_key,\n            'remember_me' => $request->session()->get('remember_me'),\n            'two_factor_enabled' => $user->two_factor_enabled\n        ];\n        return view('TwoFactorChallenge', $response);\n    }\n}", "CodeBleu_score": 44.2283743319109}, {"code": "<?\npublic function toResponse($request)    // Get the user ID from the session\n    $userId = $request->session()->get('userId');\n\n    // Fetch the user\n    $user = $this->user->find($userId);\n\n    // If the user exists, prepare a WebAuthn assertion\n    if ($user) {\n        $publicKey = $this->prepareAssertion($user);\n    }\n\n    // Return the response\n    return view('TwoFactorChallenge', [\n        'publicKey' => $publicKey ?? null,\n        'rememberMe' => $request->session()->get('rememberMe'),\n        'twoFactorEnabled' => $user ? $user->two_factor_enabled : false\n    ]);\n}", "CodeBleu_score": 44.186752136028105}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User    $user = null;\n    $token = UserToken::where('driver', $driver)->where('socialite_user_id', $socialite->id)->first();\n    if ($token) {\n        $user = $token->user;\n    } else {\n        $user = User::where('email', $socialite->email)->first();\n        if (!$user) {\n            $user = User::create([\n                'name' => $socialite->name,\n                'email' => $socialite->email,\n                'email_verified_at' => now(),\n            ]);\n        }\n        $token = UserToken::create([\n            'user_id' => $user->id,\n            'driver' => $driver,\n            'socialite_user_id' => $socialite->id,\n            'token' => $socialite->token,\n            'refresh_token' => $socialite->refreshToken,\n            'expires_at' => $socialite->expiresIn ? now()->addSeconds($socialite->expiresIn) : null,\n        ]);\n    }\n    return $user;\n}", "CodeBleu_score": 46.71955412840172}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User    $socialiteUser = $socialite->user();\n\n    $userToken = UserToken::where('driver', $driver)->where('token', $socialiteUser->id)->first();\n\n    if (!$userToken) {\n        $userToken = new UserToken;\n        $userToken->driver = $driver;\n        $userToken->token = $socialiteUser->id;\n\n        $user = User::where('email', $socialiteUser->email)->first();\n\n        if (!$user) {\n            $user = new User;\n            $user->name = $socialiteUser->name;\n            $user->email = $socialiteUser->email;\n            $user->save();\n        }\n\n        $userToken->user()->associate($user);\n        $userToken->save();\n    }\n\n    $user = $userToken->user;\n\n    Auth::login($user);\n\n    return $user;\n}\n", "CodeBleu_score": 39.09056467965463}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User    // Check if the user has already signed in with the given driver and socialite user ID\n    $userToken = UserToken::where('driver', $driver)->where('socialite_user_id', $socialite->id)->first();\n\n    // If the user token exists, retrieve the associated user\n    if ($userToken) {\n        $user = $userToken->user;\n    }\n    // If the user token does not exist, check if the socialite email matches an existing user\n    else {\n        $user = User::where('email', $socialite->email)->first();\n\n        // If the user exists, associate the socialite token with the user\n        if ($user) {\n            $userToken = new UserToken;\n            $userToken->user_id = $user->id;\n            $userToken->driver = $driver;\n            $userToken->socialite_user_id = $socialite->id;\n            $userToken->save();\n        }\n        // If the user does not exist, create a new user and associate the socialite token with the user\n        else {\n            $user = new User;\n            $user->email = $socialite->email;\n            $user->name = $socialite->name;\n            $user->save();\n\n            $userToken = new UserToken;\n            $userToken->user_id = $user->id;\n            $userToken->driver = $driver;\n            $userToken->socialite_user_id = $socialite->id;\n            $userToken->save();\n        }\n    }\n\n    // Authenticate the user\n    Auth::login($user);\n\n    return $user;\n}", "CodeBleu_score": 39.72570089398466}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool    $user = $this->retrieveUser($request);\n\n    if (!$user) {\n        return false;\n    }\n\n    $credentials = $request->input('credentials');\n\n    if (!$user->validateAssertion($credentials)) {\n        $this->fireFailedEvent($user, $credentials);\n\n        throw ValidationException::withMessages([\n            'credentials' => [trans('auth.failed')],\n        ]);\n    }\n\n    return true;\n}", "CodeBleu_score": 51.34764363665434}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool    $credentials = $request->getParsedBody();\n    $user = $this->getUserFromRequest($request);\n    if (!$user) {\n        return false;\n    }\n    $credentials = $this->filterCredentials($credentials);\n    if (!$this->validateAssertion($user, $credentials)) {\n        $this->triggerFailedAuthenticationEvent($user, $credentials);\n        throw new AuthenticationException();\n    }\n    return true;\n}\n", "CodeBleu_score": 60.591963826997876}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool    $credentials = $request->getParsedBody()['credentials'] ?? [];\n\n    $user = $this->retrieveUser($request);\n    if (!$user) {\n        return false;\n    }\n\n    $publicKey = $this->publicKeyCredentialLoader->loadArray($credentials);\n\n    $result = $this->server->getPublicKey()->validateAssertion($publicKey, $user->getPublicKeyCredentialSource());\n\n    if ($result->isSuccess()) {\n        return true;\n    }\n\n    $this->fireFailedAuthenticationEvent($user, $result);\n\n    throw $this->failedAuthenticationException($user, $result);\n}", "CodeBleu_score": 51.29676730748247}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User    if (!isset($email)) {\n        error_log('No email provided');\n        return null;\n    }\n\n    try {\n        $user = User::findByEmail($email);\n    } catch (Exception $e) {\n        error_log('Unable to find user');\n        return null;\n    }\n\n    return $user;\n}", "CodeBleu_score": 54.47385318087996}, {"code": "<?\nprivate function user(): ?User    $email = request()->get('email');\n    if (!$email) {\n        Log::error('No email provided to retrieve user');\n        return null;\n    }\n\n    try {\n        $user = User::where('email', $email)->first();\n        if (!$user) {\n            Log::error('User not found for email: ' . $email);\n            return null;\n        }\n    } catch (Exception $e) {\n        Log::error('Error retrieving user for email: ' . $email . ' ' . $e->getMessage());\n        return null;\n    }\n\n    return $user;\n}", "CodeBleu_score": 53.874010037309404}, {"code": "<?\nprivate function user(): ?User    $email = request()->get('email');\n\n    if (! $email) {\n        Log::error('No email provided to retrieve user.');\n\n        return null;\n    }\n\n    try {\n        return User::where('email', $email)->firstOrFail();\n    } catch (Exception $e) {\n        Log::error('Unable to retrieve user by email.', ['email' => $email]);\n\n        return null;\n    }\n}\n", "CodeBleu_score": 62.35102357209736}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void    if (config('scout.driver') && config('scout.flush')) {\n        foreach (config('scout.indexes') as $index) {\n            $index = new $index;\n            $table = $index->searchableAs();\n            Artisan::call('scout:flush', [\n                'model' => $table,\n            ]);\n        }\n        Log::info('Scout indexes flushed.');\n    }\n}", "CodeBleu_score": 44.46643647922175}, {"code": "<?\nprotected function scoutFlush(): void    if (config('scout.driver') === 'meilisearch' && config('scout.flush')) {\n        foreach (config('scout.meilisearch.indexes') as $index) {\n            $table = (new $index)->searchableAs();\n            Artisan::call('scout:flush', ['model' => $table]);\n        }\n        Log::info('Flushed Meilisearch indexes.');\n    }\n}", "CodeBleu_score": 56.93804627011968}, {"code": "<?\nprotected function scoutFlush(): void    if (config('scout.driver') === 'meilisearch') {\n        foreach (config('scout.meilisearch.indexes') as $index => $settings) {\n            $table = $settings['table'];\n\n            $this->command->call('scout:flush', [\n                'model' => $table,\n            ]);\n        }\n\n        $this->command->info('All indexes flushed.');\n    }\n}", "CodeBleu_score": 45.08378117518806}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard    $vcard = $this->read($resource);\n    if ($vcard === null) {\n        $vcard = $this->createVCard($resource);\n    }\n\n    $this->exportName($vcard, $resource);\n    $this->exportBirthday($vcard, $resource);\n    $this->exportAnniversary($vcard, $resource);\n    $this->exportGender($vcard, $resource);\n    $this->exportAddresses($vcard, $resource);\n    $this->exportEmails($vcard, $resource);\n    $this->exportPhoneNumbers($vcard, $resource);\n    $this->exportOrganization($vcard, $resource);\n    $this->exportTitle($vcard, $resource);\n    $this->exportRole($vcard, $resource);\n    $this->exportUrls($vcard, $resource);\n    $this->exportNotes($vcard, $resource);\n    $this->exportPhoto($vcard, $resource);\n    $this->exportLogo($vcard, $resource);\n\n    return $vcard;\n}\n", "CodeBleu_score": 27.006087426629076}, {"code": "<?\nprivate function export(VCardResource $resource): VCard    $vcard = $this->read($resource);\n    if (!$vcard) {\n        $vcard = new VCard();\n        $vcard->setUID($resource->getUID());\n    }\n\n    $this->applyExporters($vcard, $resource);\n\n    return $vcard;\n}\n", "CodeBleu_score": 16.834451806840097}, {"code": "<?\nprivate function export(VCardResource $resource): VCard    $vcard = $this->read($resource);\n    if (!$vcard) {\n        $vcard = $this->create($resource);\n    }\n    $this->applyExporters($vcard, $resource);\n    return $vcard;\n}\n", "CodeBleu_score": 15.74337175111084}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool\t$object = $this->getObject($addressBookId, $cardUri);\n\tif ($object instanceof Sabre\\CardDAV\\ICard) {\n\t\t$this->dispatch(new Jobs\\DeleteContact($object));\n\t} elseif ($object instanceof Sabre\\CardDAV\\ICard) {\n\t\t$this->dispatch(new Jobs\\DeleteGroup($object));\n\t} else {\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 32.27868484766717}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool    $object = $this->getCard($addressBookId, $cardUri);\n    if (is_null($object)) {\n        return false;\n    }\n    if ($object instanceof Sabre_CardDAV_ICSObject) {\n        $this->server->getPlugin('ics')->deleteICSObject($object);\n        return true;\n    }\n    if ($object instanceof Sabre_CardDAV_VCard) {\n        $this->server->getPlugin('vcard')->deleteVCard($object);\n        return true;\n    }\n    if ($object instanceof Sabre_CardDAV_AddressBook) {\n        $this->server->getPlugin('vcard')->deleteAddressBook($object);\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 45.356227662266846}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool    $object = $this->getObject($addressBookId, $cardUri);\n    if ($object instanceof \\Sabre\\CardDAV\\ICard) {\n        $job = new \\OCA\\DAV\\CardDAV\\Jobs\\DeleteCard(\n            $object->getBackend(),\n            $object->getId(),\n            $object->getCardUri()\n        );\n        $jobList = \\OC::$server->getJobList();\n        $jobList->add($job);\n        return true;\n    } elseif ($object instanceof \\Sabre\\CardDAV\\IGroup) {\n        $job = new \\OCA\\DAV\\CardDAV\\Jobs\\DeleteGroup(\n            $object->getBackend(),\n            $object->getId(),\n            $object->getCardUri()\n        );\n        $jobList = \\OC::$server->getJobList();\n        $jobList->add($job);\n        return true;\n    }\n    return false;\n}\n", "CodeBleu_score": 49.7629593122615}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data)    $user = Auth::user();\n    $lead = Lead::find($data['lead_id']);\n    $file = $this->request->file('file');\n    $file_name = $file->getClientOriginalName();\n    $file_path = $file->store('lead_activities');\n    $lead_activity = $lead->activities()->create([\n        'user_id' => $user->id,\n        'activity_type_id' => $data['activity_type_id'],\n        'description' => $data['description'],\n        'details' => $data['details'],\n        'date' => $data['date'],\n        'time' => $data['time'],\n        'duration' => $data['duration'],\n    ]);\n    $lead_activity->attachments()->create([\n        'name' => $file_name,\n        'path' => $file_path,\n    ]);\n    return $lead_activity;\n}", "CodeBleu_score": 45.97483014072977}, {"code": "<?\npublic function upload(array $data)    $file = $this->getRequest()->getFile('file');\n    if (!$file) {\n        return;\n    }\n\n    $lead = $this->getLead();\n    $leadActivity = $this->createLeadActivity($lead, $data);\n    $leadActivity->setCreatedBy($this->getCurrentUser());\n    $leadActivity->setCreatedTime(time());\n    $leadActivity->save();\n\n    $leadActivityFile = $this->createLeadActivityFile($leadActivity, $file);\n    $leadActivityFile->setCreatedBy($this->getCurrentUser());\n    $leadActivityFile->setCreatedTime(time());\n    $leadActivityFile->save();\n\n    return $leadActivityFile;\n}", "CodeBleu_score": 42.560966757516724}, {"code": "<?\npublic function upload(array $data)    $user = Auth::user();\n\n    if (!request()->hasFile('file')) {\n        return;\n    }\n\n    $file = request()->file('file');\n\n    $leadActivity = $this->createLeadActivity($data, $user);\n\n    $uploadedFile = $this->createUploadedFile($file, $leadActivity);\n\n    return $uploadedFile;\n}\n", "CodeBleu_score": 39.44973704924117}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception)    if ($exception instanceof ModelNotFoundException) {\n        return response()->json([\n            'error' => 'Resource not found'\n        ], 404);\n    }\n\n    if ($exception instanceof PDOException) {\n        return response()->json([\n            'error' => 'Database error'\n        ], 500);\n    }\n\n    if ($exception instanceof ParseError) {\n        return response()->json([\n            'error' => 'Parse error'\n        ], 500);\n    }\n\n    if ($exception instanceof HttpException) {\n        return response()->json([\n            'error' => $exception->getMessage()\n        ], $exception->getStatusCode());\n    }\n\n    if (request()->is('api/admin/*')) {\n        return response()->json([\n            'error' => $exception->getMessage()\n        ], 500);\n    }\n\n    return redirect('/admin/session/create');\n}", "CodeBleu_score": 36.84219446793212}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception)    if ($exception instanceof ModelNotFoundException) {\n        return response()->json([\n            'error' => 'Resource not found'\n        ], 404);\n    } else if ($exception instanceof PDOException) {\n        return response()->json([\n            'error' => 'Database error'\n        ], 500);\n    } else if ($exception instanceof ParseError) {\n        return response()->json([\n            'error' => 'Parse error'\n        ], 500);\n    }\n\n    if (request()->is('admin/*')) {\n        return parent::render($request, $exception);\n    } else {\n        return redirect('/admin/session/create');\n    }\n}", "CodeBleu_score": 35.32209788550586}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception)    $request = $this->request;\n    $response = $this->response;\n\n    $message = $exception->getMessage();\n    $statusCode = 500;\n\n    if ($exception instanceof HttpException) {\n        $statusCode = $exception->getStatusCode();\n    } elseif ($exception instanceof ModelNotFoundException) {\n        $statusCode = 404;\n    } elseif ($exception instanceof PDOException) {\n        $statusCode = 500;\n    } elseif ($exception instanceof ParseError) {\n        $statusCode = 500;\n    }\n\n    if (str_contains($request->getPathInfo(), '/admin/')) {\n        $response->setContent(view('admin/error', compact('message')));\n    } else {\n        $response->setContent(view('admin/sessions/create'));\n    }\n\n    $response->setStatusCode($statusCode);\n    $response->send();\n}", "CodeBleu_score": 43.56734328421607}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode)    $acceptHeader = $_SERVER['HTTP_ACCEPT'];\n    if (strpos($acceptHeader, 'application/json') !== false) {\n        $response = array(\n            'status' => 'error',\n            'message' => $this->getStatusCodeMessage($statusCode)\n        );\n        return $this->generateJsonResponse($response, $statusCode);\n    } else {\n        return $this->generateViewResponse($path, $statusCode);\n    }\n}\n", "CodeBleu_score": 40.046378723219156}, {"code": "<?\nprivate function response($path, $statusCode)\t// If the request expects a JSON response, return a JSON object with an error message.\n\tif (request()->expectsJson()) {\n\t\treturn response()->json(['error' => 'Not found.'], $statusCode);\n\t}\n\n\t// Otherwise, return an error view corresponding to the provided status code and path.\n\treturn response()->view('errors.' . $statusCode, ['path' => $path], $statusCode);\n}\n", "CodeBleu_score": 54.40339119127604}, {"code": "<?\nprivate function response($path, $statusCode)\tif ($this->request->isAjax()) {\n\t\t$this->response->body(json_encode(array('error' => $this->error)));\n\t\treturn $this->response;\n\t}\n\telse {\n\t\t$this->response->status($statusCode);\n\t\t$this->response->body($this->view->render($path, array('error' => $this->error)));\n\t\treturn $this->response;\n\t}\n}\n", "CodeBleu_score": 34.87671702168137}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate()    $response = [];\n    $activities = [];\n    $count = 0;\n\n    // Get request data\n    $request = json_decode(file_get_contents('php://input'), true);\n    $activityIds = $request['activityIds'];\n    $isDone = $request['isDone'];\n\n    // Iterate over activity IDs\n    foreach($activityIds as $activityId) {\n        // Dispatch 'beforeUpdate' event\n        $event = new \\App\\Events\\ActivityEvent($activityId, $isDone);\n        event($event);\n\n        // Update activity\n        $activity = \\App\\Activity::find($activityId);\n        $activity->is_done = $isDone;\n        $activity->save();\n\n        // Dispatch 'afterUpdate' event\n        $event = new \\App\\Events\\ActivityEvent($activityId, $isDone);\n        event($event);\n\n        // Add activity to response\n        $activities[] = $activity;\n        $count++;\n    }\n\n    // Add response data\n    $response['activities'] = $activities;\n    $response['count'] = $count;\n\n    // Return response as JSON\n    return response()->json($response);\n}", "CodeBleu_score": 39.329545570829275}, {"code": "<?\npublic function massUpdate()    $this->require_acl('admin', 'massupdate');\n    $this->check_csrf();\n\n    $activity_ids = $this->request->get('activity_ids', 'int');\n    $is_done = $this->request->get('is_done', 'int');\n\n    $count = 0;\n    foreach ($activity_ids as $activity_id) {\n        $activity = new Activity($activity_id);\n        if ($activity->is_done != $is_done) {\n            $activity->is_done = $is_done;\n            $activity->save();\n            $count++;\n        }\n    }\n\n    $this->json(array('success' => true, 'count' => $count));\n}", "CodeBleu_score": 35.07171201860757}, {"code": "<?\npublic function massUpdate()    $this->autoRender = false;\n    $this->response->type('json');\n\n    $activityIds = $this->request->data['activityIds'];\n    $isDone = $this->request->data['isDone'];\n\n    $numUpdated = 0;\n    foreach ($activityIds as $activityId) {\n        $activity = $this->Activities->get($activityId);\n        if ($activity->is_done != $isDone) {\n            $this->Activities->dispatchEvent('Model.beforeUpdate', [$activity]);\n            $activity->is_done = $isDone;\n            $this->Activities->save($activity);\n            $this->Activities->dispatchEvent('Model.afterUpdate', [$activity]);\n            $numUpdated++;\n        }\n    }\n\n    $response = [\n        'success' => $numUpdated > 0,\n        'numUpdated' => $numUpdated\n    ];\n\n    return json_encode($response);\n}", "CodeBleu_score": 37.623959386229096}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy()\n \t// If the request contains an array of activity IDs, iterate over them.\n \tif ( $this->request->data['activities'] ) {\n\n \t\t// Iterate over the activities.\n \t\tforeach ( $this->request->data['activities'] as $activity_id ) {\n\n \t\t\t// Dispatch the beforeDestroy event.\n \t\t\t$this->dispatchEvent( 'beforeDestroy', array( 'id' => $activity_id ) );\n\n \t\t\t// Delete the activity.\n \t\t\t$this->delete( $activity_id );\n\n \t\t\t// Dispatch the afterDestroy event.\n \t\t\t$this->dispatchEvent( 'afterDestroy', array( 'id' => $activity_id ) );\n \t\t}\n \t}\n\n \t// Return a JSON response indicating a successful destruction.\n \t$this->jsonResponse( array( 'success' => true ) );\n }\n", "CodeBleu_score": 22.210956066500316}, {"code": "<?\n public function massDestroy() \t$activityIds = request()->input('ids');\n \tforeach ($activityIds as $activityId) {\n \t\t$activity = Activity::find($activityId);\n \t\tevent(new ActivityDeleting($activity));\n \t\t$activity->delete();\n \t\tevent(new ActivityDeleted($activity));\n \t}\n \treturn response()->json(['success' => true]);\n }", "CodeBleu_score": 23.776476348156955}, {"code": "<?\n public function massDestroy()    $ids = request('ids');\n\n    foreach ($ids as $id) {\n        $activity = Activity::findOrFail($id);\n\n        event(new ActivityDeleting($activity));\n\n        $activity->delete();\n\n        event(new ActivityDeleted($activity));\n    }\n\n    return response()->json(['message' => 'Activities deleted successfully']);\n}", "CodeBleu_score": 26.51667141264373}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards()    $request = \\Slim\\Slim::getInstance()->request();\n    $cards = json_decode($request->getBody());\n    $updatedCards = array();\n    foreach($cards as $card) {\n        $updatedCards[] = $this->updateCard($card);\n    }\n    echo json_encode($updatedCards);\n}\n", "CodeBleu_score": 25.728273062235218}, {"code": "<?\n public function updateCards()    $request = $this->getRequest();\n    $response = $this->getResponse();\n\n    $cards = $request->getParam('cards');\n    $selection = $request->getParam('selection');\n\n    $updatedCards = array();\n\n    foreach ($cards as $card) {\n        $card['selected'] = false;\n        foreach ($selection as $selected) {\n            if ($card['id'] == $selected['id']) {\n                $card['selected'] = true;\n            }\n        }\n        $updatedCards[] = $card;\n    }\n\n    $response->setBody(json_encode($updatedCards));\n}", "CodeBleu_score": 41.7323427680231}, {"code": "<?\n public function updateCards()  $request = $this->getRequest();\n  $data = $request->getBody();\n  $data = json_decode($data);\n\n  $cards = $this->getCards();\n  foreach ($data as $card) {\n    $cardId = $card->id;\n    $cardSelected = $card->selected;\n    foreach ($cards as $key => $value) {\n      if ($cardId == $value['id']) {\n        $cards[$key]['selected'] = $cardSelected;\n      }\n    }\n  }\n  return json_encode($cards);\n}\n", "CodeBleu_score": 39.47479765434216}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store()\n\t// Validate the request data\n\t$this->validate();\n\n\t// Fire an event before saving\n\t$dispatcher = App::make('Dingo\\Api\\Dispatcher');\n\t$response = $dispatcher->post('internal/configurations/store', Input::all());\n\n\t// Create the configuration\n\t$configuration = Configuration::create(Input::all());\n\n\t// Fire an event after saving\n\t$dispatcher = App::make('Dingo\\Api\\Dispatcher');\n\t$response = $dispatcher->post('internal/configurations/store', Input::all());\n\n\t// Flash a success message to the session\n\tSession::flash('success', 'Successfully created configuration!');\n\n\t// Redirect to the previous page\n\treturn Redirect::back();\n\n}", "CodeBleu_score": 21.598916941488007}, {"code": "<?\npublic function store()\n\t// Dispatch the before event\n\t$this->dispatchEvent('before');\n\n\t// Create the configuration\n\t$this->createConfiguration($this->request->getPost());\n\n\t// Dispatch the after event\n\t$this->dispatchEvent('after');\n\n\t// Flash a success message to the session\n\t$this->flash->success('Configuration saved.');\n\n\t// Redirect back to the previous page\n\t$this->redirectBack();\n\n}", "CodeBleu_score": 21.11796772245102}, {"code": "<?\npublic function store()\n\t// Validate the request data\n\t$this->validate();\n\n\t// Dispatch the before store event\n\tEvent::dispatch('configuration.beforeStore', [$this->request->all()]);\n\n\t// Create the configuration\n\t$configuration = Configuration::create($this->request->all());\n\n\t// Dispatch the after store event\n\tEvent::dispatch('configuration.afterStore', [$configuration]);\n\n\t// Flash a success message to the session\n\tSession::flash('success', 'Successfully created configuration!');\n\n\t// Redirect to the previous page\n\treturn Redirect::back();\n}", "CodeBleu_score": 24.299704762696823}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download()    $filePath = $this->getParam('filePath');\n    $fileName = $this->getParam('fileName');\n    $fullFileName = $filePath . $fileName;\n\n    $file = $this->getFile($fullFileName);\n\n    header('Content-Description: File Transfer');\n    header('Content-Type: application/octet-stream');\n    header('Content-Disposition: attachment; filename=' . $fileName);\n    header('Content-Transfer-Encoding: binary');\n    header('Expires: 0');\n    header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n    header('Pragma: public');\n    header('Content-Length: ' . filesize($file));\n    ob_clean();\n    flush();\n    readfile($file);\n    exit;\n}\n", "CodeBleu_score": 25.534437366658562}, {"code": "<?\npublic function download()\t// get the file path\n\t$filePath = $this->getParam('file');\n\n\t// construct the file name\n\t$fileName = $filePath . '.json';\n\n\t// get the file contents\n\t$contents = $this->getFileContents($fileName);\n\n\t// output the file contents\n\t$this->outputFileContents($fileName, $contents);\n}\n", "CodeBleu_score": 27.132600977624143}, {"code": "<?\npublic function download()\t$filePath = $this->request->getParam('filePath');\n\t$fileName = $this->request->getParam('fileName');\n\t$file = $this->getFile($filePath, $fileName);\n\t$this->response->setHeader('Content-Type', $file->getMimeType());\n\t$this->response->setHeader('Content-Disposition', 'attachment; filename=\"' . $file->getFileName() . '\"');\n\t$this->response->setHeader('Content-Length', $file->getFileSize());\n\t$this->response->setBody($file->getFileContent());\n}\n", "CodeBleu_score": 28.471250739046774}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list)     List<AdminModelSort> sortList = new ArrayList<AdminModelSort>();\n    for (String modelName : list) {\n        AdminModelSort sort = new AdminModelSort();\n        sort.setUserId(userId);\n        sort.setModelName(modelName);\n        sort.setSortOrder(list.indexOf(modelName));\n        sortList.add(sort);\n    }\n    adminModelSortRepository.deleteByUserId(userId);\n    adminModelSortRepository.saveAll(sortList);\n    return success();\n}", "CodeBleu_score": 30.747643151517355}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list)     List<AdminModelSort> sortList = new ArrayList<>();\n    for (int i = 0; i < list.size(); i++) {\n        AdminModelSort sort = new AdminModelSort();\n        sort.setAdminId(admin.getId());\n        sort.setModelName(list.get(i));\n        sort.setSortOrder(i);\n        sortList.add(sort);\n    }\n    adminModelSortDao.deleteByAdminId(admin.getId());\n    adminModelSortDao.saveInBatch(sortList);\n    return success();\n}", "CodeBleu_score": 49.04408549004816}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list)     List<AdminModelSort> newSorts = new ArrayList<AdminModelSort>();\n\n    for (int i = 0; i < list.size(); i++) {\n        AdminModelSort sort = new AdminModelSort();\n        sort.setUserId(userId);\n        sort.setModel(list.get(i));\n        sort.setSortOrder(i);\n        newSorts.add(sort);\n    }\n\n    //remove existing sort settings for the user\n    List<AdminModelSort> existingSorts = adminModelSortService.findByUserId(userId);\n    for (AdminModelSort sort : existingSorts) {\n        adminModelSortService.delete(sort.getId());\n    }\n\n    //save new sort settings\n    adminModelSortService.save(newSorts);\n\n    return success();\n}", "CodeBleu_score": 55.38594065410018}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting)    AdminConfiguration config = adminConfigurationService.findById(moduleSetting.getId());\n    if (config.getModule().equals(Module.CRM)) {\n        return error(new ErrorResponse(\"Cannot change the status of a CRM module\"));\n    }\n\n    config.setStatus(moduleSetting.getStatus());\n    adminConfigurationService.save(config);\n    return ok(new SuccessResponse(\"Module status updated\"));\n}", "CodeBleu_score": 51.2707999634624}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting)    AdminConfiguration adminConfiguration = adminConfigurationService.getAdminConfiguration(moduleSetting.getSettingId());\n    if (adminConfiguration.getModule().equals(Module.CRM)) {\n        return new Result(Result.Status.ERROR, \"You cannot change the status of a CRM module.\");\n    }\n    adminConfiguration.setStatus(moduleSetting.getStatus());\n    adminConfigurationService.saveAdminConfiguration(adminConfiguration);\n    return new Result(Result.Status.SUCCESS, \"The module setting has been updated.\");\n}", "CodeBleu_score": 51.13198634058185}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting)\n    // Get the current admin configuration\n    AdminConfiguration currentAdminConfiguration = adminConfigurationRepository.findById(moduleSetting.getId()).orElse(null);\n\n    // Check if the module is CRM\n    if (currentAdminConfiguration.getModule().equals(\"CRM\")) {\n        return new ResponseEntity<>(new ErrorBO(\"CRM module cannot be disabled\"), HttpStatus.BAD_REQUEST);\n    }\n\n    // Update the status of the admin configuration\n    currentAdminConfiguration.setStatus(moduleSetting.getStatus());\n\n    // Save the updated setting\n    adminConfigurationRepository.save(currentAdminConfiguration);\n\n    return new ResponseEntity<>(new SuccessBO(\"Module status updated successfully\"), HttpStatus.OK);\n}", "CodeBleu_score": 46.94949580786295}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey)     //Retrieve the user configuration by the custom key\n    UserConfiguration userConfiguration = userConfigurationRepository.findByCustomKey(customKey);\n    if (userConfiguration != null) {\n        //Update the user configuration with the provided JSON\n        userConfiguration.setValue(json.toString());\n        userConfigurationRepository.save(userConfiguration);\n    } else {\n        //Create a new user configuration with the provided JSON and save it\n        userConfiguration = new UserConfiguration();\n        userConfiguration.setCustomKey(customKey);\n        userConfiguration.setValue(json.toString());\n        userConfigurationRepository.save(userConfiguration);\n    }\n    return new ResponseEntity<>(HttpStatus.OK);\n}", "CodeBleu_score": 50.78147004584652}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey)     try {\n        // Retrieve the user configuration by the custom key\n        UserConfiguration userConfiguration = userConfigurationRepository.findByCustomKey(customKey);\n\n        // If the configuration exists, update its value with the provided JSON\n        if (userConfiguration != null) {\n            userConfiguration.setValue(json.toString());\n            userConfigurationRepository.save(userConfiguration);\n        }\n        // If not, create a new user configuration with the provided JSON and save it\n        else {\n            userConfiguration = new UserConfiguration();\n            userConfiguration.setCustomKey(customKey);\n            userConfiguration.setValue(json.toString());\n            userConfigurationRepository.save(userConfiguration);\n        }\n\n        return new ResponseEntity<>(HttpStatus.OK);\n    } catch (Exception e) {\n        return new ResponseEntity<>(HttpStatus.BAD_REQUEST);\n    }\n}", "CodeBleu_score": 51.24661835846138}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey)     try {\n        //Retrieve the user configuration by the custom key\n        UserConfiguration userConfig = userConfigService.getUserConfigurationByKey(customKey);\n        //If the configuration exists, update its value with the provided JSON\n        if(userConfig != null) {\n            userConfig.setValue(json.toJSONString());\n            userConfigService.updateUserConfiguration(userConfig);\n        }\n        //If not, create a new user configuration with the provided JSON and save it\n        else {\n            userConfig = new UserConfiguration();\n            userConfig.setCustomKey(customKey);\n            userConfig.setValue(json.toJSONString());\n            userConfigService.addUserConfiguration(userConfig);\n        }\n        //Return a successful result\n        return new ResponseEntity<>(new SuccessResult(true), HttpStatus.OK);\n    }\n    catch(Exception e) {\n        //Return an error result\n        return new ResponseEntity<>(new ErrorResult(e.getMessage()), HttpStatus.BAD_REQUEST);\n    }\n}", "CodeBleu_score": 56.357677182729084}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId)     AdminUser user = adminUserDao.findById(userId);\n    if (user == null) {\n        return Result.failure(\"User not found\");\n    }\n    Department department = departmentDao.findById(user.getDepartmentId());\n    if (department != null) {\n        user.setDepartmentName(department.getName());\n    }\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.success(user);\n}", "CodeBleu_score": 42.325108832415914}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId)     AdminUser user = adminUserService.getById(userId);\n    if (user == null) {\n        return Result.fail(ResultCode.USER_NOT_FOUND);\n    }\n    // \u83b7\u53d6\u7528\u6237\u6240\u5c5e\u90e8\u95e8\u540d\u79f0\n    Department department = departmentService.getById(user.getDepartmentId());\n    if (department != null) {\n        user.setDepartmentName(department.getName());\n    }\n    // \u654f\u611f\u4fe1\u606f\u4e0d\u8fd4\u56de\u7ed9\u524d\u7aef\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.success(user);\n}", "CodeBleu_score": 41.92834896531104}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId)     AdminUser user = adminUserService.getById(userId);\n    if (user == null) {\n        return Result.error(\"User does not exist\");\n    }\n\n    Long departmentId = user.getDepartmentId();\n    String departmentName = departmentService.getById(departmentId).getName();\n    user.setDepartmentName(departmentName);\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.ok(user);\n}", "CodeBleu_score": 47.17114897844783}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice()      // Get the user ID\n     String userId = session().get(\"userId\");\n\n     // Get the number of \"readNotice\" entries for the user\n     int count = ReadNotice.find.where().eq(\"user_id\", userId).findRowCount();\n\n     // If there are multiple entries, update them all to status 1\n     if (count > 1) {\n         ReadNotice.find.where().eq(\"user_id\", userId).findList().forEach(readNotice -> {\n             readNotice.status = 1;\n             readNotice.update();\n         });\n     }\n     // If there are no entries, create a new one and save it\n     else if (count == 0) {\n         ReadNotice readNotice = new ReadNotice();\n         readNotice.user_id = userId;\n         readNotice.status = 1;\n         readNotice.save();\n     }\n     // If there is only one entry, update it to status 1\n     else {\n         ReadNotice readNotice = ReadNotice.find.where().eq(\"user_id\", userId).findUnique();\n         readNotice.status = 1;\n         readNotice.update();\n     }\n\n     return ok(toJson(new Result(true, \"success\")));\n }", "CodeBleu_score": 36.66449922292798}, {"code": " public Result readNotice()     // Get the current user ID\n    String id = session().get(\"id\");\n    // Get the current user name\n    String name = session().get(\"name\");\n    // Get the current user role\n    String role = session().get(\"role\");\n    // Get the current user email\n    String email = session().get(\"email\");\n    // Check if there are multiple \"readNotice\" entries for the current user\n    List<ReadNotice> readNoticeList = ReadNotice.find.where().eq(\"user_id\", id).findList();\n    // If there are multiple entries, update the status to 1 for all matching entries\n    if (readNoticeList.size() > 1) {\n        for (ReadNotice readNotice : readNoticeList) {\n            readNotice.status = 1;\n            readNotice.update();\n        }\n    }\n    // If there is only one entry, create a new \"readNotice\" entry with status 1 and save it\n    else {\n        ReadNotice readNotice = new ReadNotice();\n        readNotice.user_id = id;\n        readNotice.status = 1;\n        readNotice.save();\n    }\n    // Return a success result\n    return ok(readNotice.render(id, name, role, email));\n}", "CodeBleu_score": 30.34745268357054}, {"code": " public Result readNotice() \n    // Get the user ID from the session cookie\n    String userId = session(\"userId\");\n\n    // Get the \"readNotice\" entry for the user\n    List<ReadNotice> readNoticeList = ReadNotice.find.where().eq(\"user_id\", userId).findList();\n\n    // Check if there are multiple entries for the user\n    if (readNoticeList.size() > 1) {\n\n        // Update the status to 1 for all matching entries\n        for (ReadNotice readNotice : readNoticeList) {\n            readNotice.status = 1;\n            readNotice.update();\n        }\n\n    } else {\n\n        // Create a new \"readNotice\" entry with status 1\n        ReadNotice readNotice = new ReadNotice();\n        readNotice.user_id = userId;\n        readNotice.status = 1;\n        readNotice.save();\n\n    }\n\n    // Return a success result\n    return ok(Json.toJson(\"success\"));\n\n}", "CodeBleu_score": 26.825441624903256}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO)    // Search for the configuration named \"companyInfo\"\n    AdminConfigBO config = adminCompanyBO.getConfig(\"companyInfo\");\n    if (config == null) {\n        // If the configuration doesn't exist, create it\n        config = new AdminConfigBO();\n        config.setName(\"companyInfo\");\n        config.setValue(\"\");\n        config.setType(AdminConfigType.JSON);\n    }\n\n    // Update the value with the provided company information\n    config.setValue(companyInfo);\n\n    // Save or update the configuration\n    adminCompanyBO.saveConfig(config);\n}", "CodeBleu_score": 35.68757990653294}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO)    // Find the configuration with the name \"companyInfo\"\n    ConfigurationKey companyInfoConfigKey = ConfigurationKey.valueOf(\"companyInfo\");\n    Configuration companyInfoConfig = adminCompanyBO.getConfiguration(companyInfoConfigKey);\n    if (companyInfoConfig == null) {\n        // Create a new configuration with default values\n        companyInfoConfig = new Configuration(companyInfoConfigKey, \"{}\");\n    }\n    // Set the configuration's value with the provided company information in JSON format\n    companyInfoConfig.setValue(adminCompanyBO.getCompanyInfo().toJson());\n    // Save or update the configuration\n    adminCompanyBO.setConfiguration(companyInfoConfig);\n}", "CodeBleu_score": 36.34201351329753}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO)    // Get the configuration record\n    ConfigurationKey configKey = ConfigurationKey.getConfigurationKey(\"companyInfo\");\n    Configuration configuration = Configuration.get(configKey);\n    if (configuration == null) {\n        configuration = new Configuration();\n        configuration.setName(configKey.toString());\n    }\n\n    // Update the configuration's value with the provided company information\n    configuration.setValue(adminCompanyBO.toString());\n\n    // Save or update the configuration\n    configuration.save();\n}\n", "CodeBleu_score": 37.34629003053737}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig()\tString configKey = 'AdminCompany';\n\tString configValue = '';\n\tAdminCompanyBO adminCompany = new AdminCompanyBO();\n\ttry {\n\t\tconfigValue = queryAdminConfig(configKey);\n\t\tif (configValue != '') {\n\t\t\tadminCompany = new AdminCompanyBO(configValue);\n\t\t}\n\t} catch (Exception e) {\n\t\tlog.error('Error querying admin configuration', e);\n\t}\n\treturn adminCompany;\n}\n", "CodeBleu_score": 26.163312664123}, {"code": "public AdminCompanyBO queryAdminConfig()    // Retrieve the configuration value from the database\n    String configValue = AdminConfig.getConfigValue(AdminConfig.COMPANY_CONFIG);\n\n    // If the configuration value is null, return a new instance of AdminCompanyBO\n    if (configValue == null) {\n        return new AdminCompanyBO();\n    }\n\n    // Otherwise, parse the configuration value into an AdminCompanyBO object and return it\n    return (AdminCompanyBO) ObjectSerializer.deserialize(configValue);\n}\n", "CodeBleu_score": 21.534534198208505}, {"code": "public AdminCompanyBO queryAdminConfig()    AdminCompanyBO adminCompany = new AdminCompanyBO();\n    String adminConfig = query(\"SELECT Value FROM AdminConfig WHERE Key = 'Company'\");\n    if (adminConfig != null) {\n        adminCompany = (AdminCompanyBO) parseJSON(adminConfig);\n    }\n    return adminCompany;\n}\n", "CodeBleu_score": 39.06125404839147}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList)    List<AdminConfig> configList = new ArrayList<>();\n    for (String string : stringList) {\n        AdminConfig config = new AdminConfig();\n        config.setLogConfigName(\"welcomeSpeech\");\n        config.setLogConfigValue(string);\n        config.setLogConfigType(\"string\");\n        configList.add(config);\n    }\n    configList.add(new AdminConfig(\"logConfigName\", \"welcomeSpeech\", \"string\"));\n    configList.add(new AdminConfig(\"logConfigName\", \"welcomeSpeech\", \"string\"));\n    configList.add(new AdminConfig(\"logConfigName\", \"welcomeSpeech\", \"string\"));\n    configList.add(new AdminConfig(\"logConfigName\", \"welcomeSpeech\", \"string\"));\n    configList.add(new AdminConfig(\"logConfigName\", \"welcomeSpeech\", \"string\"));\n    configList.add(new AdminConfig(\"logConfigName\", \"welcomeSpeech\", \"string\"));\n    configList.add(new AdminConfig(\"logConfigName\", \"welcomeSpeech\", \"string\"));\n    configList.add(new AdminConfig(\"logConfigName\", \"welcomeSpeech\", \"string\"));\n    configList.add(new AdminConfig(\"logConfigName\", \"welcomeSpeech\", \"string\"));\n    configList.add(new AdminConfig(\"logConfigName\", \"welcomeSpeech\", \"string\"));\n    configList.add(new AdminConfig(\"logConfigName\", \"welcomeSpeech\", \"string\"));\n    configList.add(new AdminConfig(\"logConfigName\", \"welcomeSpeech\", \"string\"));\n    configList.add(new AdminConfig(\"logConfigName\", \"welcomeSpeech\", \"string\"));\n    configList.add(new AdminConfig(\"logConfigName\", \"welcomeSpeech\", \"string\"));\n    configList.add(new AdminConfig(\"logConfigName\", \"welcomeSpeech\", \"string\"));\n    configList.add(new AdminConfig(\"logConfigName\", \"welcomeSpeech\", \"string\"));\n    configList.add(new AdminConfig(\"logConfigName\", \"welcomeSpeech\", \"string\"));\n    configList.add(new AdminConfig(\"logConfigName\", \"welcomeSpeech\", \"string", "CodeBleu_score": 39.876235322382044}, {"code": " public void setLogWelcomeSpeech(List<String> stringList)    List<AdminConfig> adminConfigList = new ArrayList<>();\n    for (String string : stringList) {\n        AdminConfig adminConfig = new AdminConfig();\n        adminConfig.setName(\"logWelcomeSpeech\");\n        adminConfig.setValue(string);\n        adminConfigList.add(adminConfig);\n    }\n    adminConfigService.deleteAdminConfigs(adminConfigList);\n    adminConfigService.saveAdminConfigs(adminConfigList);\n}", "CodeBleu_score": 43.428219514386015}, {"code": " public void setLogWelcomeSpeech(List<String> stringList)    List<AdminConfig> configs = new ArrayList<>();\n    for (String string : stringList) {\n        AdminConfig config = new AdminConfig();\n        config.setName(LOG_WELCOME_SPEECH);\n        config.setValue(string);\n        configs.add(config);\n    }\n    AdminConfig.removeConfigs(LOG_WELCOME_SPEECH);\n    AdminConfig.setConfigs(configs);\n}", "CodeBleu_score": 46.17026354648019}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO)    String username = adminInitDataBO.getUsername();\n    String password = adminInitDataBO.getPassword();\n    String salt = adminInitDataBO.getSalt();\n    String userId = adminInitDataBO.getUserId();\n\n    if (verifyPassword(username, password, salt)) {\n        String accessCode = generateAccessCode(userId);\n        redisTemplate.opsForValue().set(userId, accessCode, 10, TimeUnit.MINUTES);\n        return accessCode;\n    } else {\n        throw new InvalidPasswordException();\n    }\n}\n", "CodeBleu_score": 30.846551710216563}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO)    String username = adminInitDataBO.getUsername();\n    String password = adminInitDataBO.getPassword();\n    String accessCode = \"\";\n    String salt = \"\";\n    String userId = \"\";\n    String userDetails = \"\";\n    String result = \"\";\n    try {\n        userDetails = userDAO.getUserDetails(username);\n        userId = userDetails.split(\":\")[0];\n        salt = userDetails.split(\":\")[1];\n        accessCode = userDAO.getAccessCode(userId);\n        if (accessCode.equals(\"\")) {\n            accessCode = generateAccessCode();\n            userDAO.setAccessCode(userId, accessCode);\n        }\n        if (userDAO.verifyPassword(username, password, salt)) {\n            result = accessCode;\n        } else {\n            throw new Exception(\"Invalid password\");\n        }\n    } catch (Exception e) {\n        logger.error(e.getMessage());\n        throw new RuntimeException(e.getMessage());\n    }\n    return result;\n}", "CodeBleu_score": 33.78658362259889}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO)    String username = adminInitDataBO.getUsername();\n    String password = adminInitDataBO.getPassword();\n    String userId = adminInitDataBO.getUserId();\n\n    User user = userRepository.findById(userId).orElseThrow(() -> new UserNotFoundException(userId));\n\n    if (!passwordEncoder.matches(password, user.getPassword())) {\n        throw new InvalidPasswordException();\n    }\n\n    String accessCode = UUID.randomUUID().toString();\n    redisTemplate.opsForValue().set(accessCode, userId, 10, TimeUnit.MINUTES);\n\n    return accessCode;\n}", "CodeBleu_score": 37.568255910687775}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth()  String userId = getUserId();\n  String key = getKey(userId);\n  String unauthUrls = redis.get(key);\n  if (unauthUrls == null) {\n    return false;\n  }\n  String[] urlArray = unauthUrls.split(\",\");\n  for (String url : urlArray) {\n    if (url.equals(getInitialAuthUrl())) {\n      return true;\n    }\n  }\n  return false;\n}", "CodeBleu_score": 35.65091163760379}, {"code": "private boolean verifyInitAuth()  String userId = getUserId();\n  String key = \"unauth_menu_urls:\" + userId;\n  List<String> unauthMenuUrls = redisService.getList(key);\n  return unauthMenuUrls.contains(getInitAuthUrl());\n}\n", "CodeBleu_score": 25.973252424934167}, {"code": "private boolean verifyInitAuth()  String userId = getUserId();\n  String key = \"unauth_\" + userId;\n  String unauthUrls = redis.get(key);\n  if (unauthUrls != null) {\n    List<String> unauthUrlList = Arrays.asList(unauthUrls.split(\",\"));\n    if (unauthUrlList.contains(request.getRequestURL().toString())) {\n      return true;\n    }\n  }\n  return false;\n}\n", "CodeBleu_score": 43.171844121412356}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList)    List<AdminRoleMenu> roleMenuList = new ArrayList<AdminRoleMenu>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    adminRoleMenuDao.saveBatch(roleMenuList);\n}", "CodeBleu_score": 52.76982894261116}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList)    List<AdminRoleMenu> roleMenuList = new ArrayList<AdminRoleMenu>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    adminRoleMenuService.saveRoleMenu(roleMenuList);\n}", "CodeBleu_score": 52.505553975876005}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList)    List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    adminRoleMenuService.saveBatch(roleMenuList);\n}", "CodeBleu_score": 57.77187116329874}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog)     // Retrieve log index\n    String index = SysLogIndex.getIndex(sysLog.getLogTime());\n    // Convert log object to map\n    Map<String, Object> map = sysLog.toMap();\n    // Format creation time\n    map.put(\"logTime\", sysLog.getLogTime().toString());\n    // Remove ID\n    map.remove(\"id\");\n    // Create index request\n    IndexRequest request = new IndexRequest(index).source(map);\n    // Submit request to Elasticsearch client\n    client.indexAsync(request, RequestOptions.DEFAULT, new ActionListener<IndexResponse>() {\n        @Override\n        public void onResponse(IndexResponse indexResponse) {\n            // Successful\n        }\n\n        @Override\n        public void onFailure(Exception e) {\n            // Log error message\n            logger.error(e.getMessage());\n        }\n    });\n}", "CodeBleu_score": 41.48548212419782}, {"code": "public void saveSysLog(SysLog sysLog)     try {\n        // Get the index\n        String index = getIndexName(sysLog.getCreated());\n\n        // Convert the log object to a map\n        Map<String, Object> log = objectMapper.convertValue(sysLog, Map.class);\n\n        // Format the creation time\n        String created = dateTimeFormatter.format(sysLog.getCreated());\n        log.put(\"created\", created);\n\n        // Remove the ID\n        log.remove(\"id\");\n\n        // Create an index request\n        IndexRequest request = new IndexRequest(index).id(sysLog.getId()).source(log);\n\n        // Submit the request\n        client.indexAsync(request, RequestOptions.DEFAULT, listener);\n    } catch (Exception e) {\n        logger.error(e.getMessage());\n    }\n}", "CodeBleu_score": 44.18477221772056}, {"code": "public void saveSysLog(SysLog sysLog)     try {\n        String index = \"syslog-\" + LocalDate.now().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));\n        Map<String, Object> map = new HashMap<>();\n        map.put(\"id\", sysLog.getId());\n        map.put(\"username\", sysLog.getUsername());\n        map.put(\"operation\", sysLog.getOperation());\n        map.put(\"method\", sysLog.getMethod());\n        map.put(\"params\", sysLog.getParams());\n        map.put(\"time\", sysLog.getTime());\n        map.put(\"ip\", sysLog.getIp());\n        map.put(\"createTime\", LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")));\n        IndexRequest indexRequest = new IndexRequest(index).source(map);\n        restHighLevelClient.indexAsync(indexRequest, RequestOptions.DEFAULT, new ActionListener<IndexResponse>() {\n            @Override\n            public void onResponse(IndexResponse indexResponse) {\n                log.info(\"SysLog save successfully!\");\n            }\n            @Override\n            public void onFailure(Exception e) {\n                log.error(\"SysLog save failed!\");\n            }\n        });\n    } catch (Exception e) {\n        log.error(\"SysLog save failed!\");\n    }\n}", "CodeBleu_score": 41.365618422522495}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO)    try {\n        // Initialize the search criteria\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchSourceBuilder.query(querySysLogBO.getQueryBuilder());\n        // Sort by creation time in descending order\n        searchSourceBuilder.sort(\"createTime\", SortOrder.DESC);\n        // Exclude specific fields from the response\n        searchSourceBuilder.fetchSource(new String[]{\"id\"}, null);\n        // Execute the search request\n        SearchRequest searchRequest = new SearchRequest(getIndexName());\n        searchRequest.source(searchSourceBuilder);\n        SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n        // Map the search results to SysLog objects\n        List<SysLog> sysLogList = Arrays.stream(searchResponse.getHits().getHits())\n                .map(hit -> JSON.parseObject(hit.getSourceAsString(), SysLog.class))\n                .collect(Collectors.toList());\n        // Populate a BasePage object with the results, including total hits and current page\n        BasePage<SysLog> basePage = new BasePage<>();\n        basePage.setTotal(searchResponse.getHits().getTotalHits().value);\n        basePage.setRecords(sysLogList);\n        return basePage;\n    } catch (IOException e) {\n        LOGGER.error(\"Failed to query system log page list\", e);\n        throw new RuntimeException(e);\n    }\n}", "CodeBleu_score": 55.00725178377536}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO)    // 1. Initialize the search criteria\n    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n    // 2. Add the query criteria\n    boolQueryBuilder.must(QueryBuilders.termQuery(\"type\", querySysLogBO.getType()));\n    boolQueryBuilder.must(QueryBuilders.termQuery(\"username\", querySysLogBO.getUsername()));\n    boolQueryBuilder.must(QueryBuilders.termQuery(\"operation\", querySysLogBO.getOperation()));\n    boolQueryBuilder.must(QueryBuilders.termQuery(\"status\", querySysLogBO.getStatus()));\n    // 3. Add the range query criteria\n    boolQueryBuilder.must(QueryBuilders.rangeQuery(\"createTime\").gte(querySysLogBO.getStartTime()).lte(querySysLogBO.getEndTime()));\n    // 4. Add the sort criteria\n    SortOrder sortOrder = querySysLogBO.getAsc() ? SortOrder.ASC : SortOrder.DESC;\n    SortBuilder sortBuilder = SortBuilders.fieldSort(\"createTime\").order(sortOrder);\n    // 5. Add the search request\n    SearchRequest searchRequest = new SearchRequest(this.indexName);\n    SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n    searchSourceBuilder.query(boolQueryBuilder);\n    searchSourceBuilder.sort(sortBuilder);\n    searchSourceBuilder.from((querySysLogBO.getPageNo() - 1) * querySysLogBO.getPageSize());\n    searchSourceBuilder.size(querySysLogBO.getPageSize());\n    searchSourceBuilder.fetchSource(new String[]{\"id\", \"username\", \"operation\", \"method\", \"params\", \"time\", \"ip\", \"createTime\"}, null);\n    searchRequest.source(searchSourceBuilder);\n    // 6. Execute the search request\n    try {\n        SearchResponse searchResponse = this.restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n        // 7. Get the search hits and total hits\n        SearchHits searchHits = searchResponse.getHits();\n        long totalHits = searchHits.getTotalHits().value;\n        // 8. Initialize", "CodeBleu_score": 39.60033536072365}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO)    // 1. Initialize the search criteria\n    BoolQueryBuilder queryBuilder = QueryBuilders.boolQuery();\n    // 2. Build the query criteria\n    if (querySysLogBO.getLogType() != null) {\n        queryBuilder.must(QueryBuilders.termQuery(\"logType\", querySysLogBO.getLogType()));\n    }\n    if (querySysLogBO.getLogLevel() != null) {\n        queryBuilder.must(QueryBuilders.termQuery(\"logLevel\", querySysLogBO.getLogLevel()));\n    }\n    if (querySysLogBO.getLogTag() != null) {\n        queryBuilder.must(QueryBuilders.termQuery(\"logTag\", querySysLogBO.getLogTag()));\n    }\n    if (querySysLogBO.getLogMessage() != null) {\n        queryBuilder.must(QueryBuilders.termQuery(\"logMessage\", querySysLogBO.getLogMessage()));\n    }\n    if (querySysLogBO.getLogTimestamp() != null) {\n        queryBuilder.must(QueryBuilders.termQuery(\"logTimestamp\", querySysLogBO.getLogTimestamp()));\n    }\n    if (querySysLogBO.getCreatedBy() != null) {\n        queryBuilder.must(QueryBuilders.termQuery(\"createdBy\", querySysLogBO.getCreatedBy()));\n    }\n    if (querySysLogBO.getCreatedAt() != null) {\n        queryBuilder.must(QueryBuilders.termQuery(\"createdAt\", querySysLogBO.getCreatedAt()));\n    }\n    if (querySysLogBO.getUpdatedBy() != null) {\n        queryBuilder.must(QueryBuilders.termQuery(\"updatedBy\", querySysLogBO.getUpdatedBy()));\n    }\n    if (querySysLogBO.getUpdatedAt() != null) {\n        queryBuilder.must(QueryBuilders.termQuery(\"updatedAt\", querySysLogBO.getUpdatedAt()));\n    }\n    // 3. Sort the results by creation time in descending order\n    SortOrder sortOrder = SortOrder.DESC;\n    FieldSortBuilder sortBuilder = SortBuilders.fieldSort(\"createdAt", "CodeBleu_score": 22.492635216818385}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest)  const file = fs.createWriteStream(dest);\n  const request = https.get(url, response => {\n    response.pipe(file);\n    file.on('finish', () => file.close());\n  });\n  await new Promise((resolve, reject) => {\n    file.on('error', err => {\n      fs.unlink(dest, () => reject(err));\n    });\n    file.on('finish', () => resolve());\n  });\n}\n", "CodeBleu_score": 46.91642561675453}, {"code": "async function downloadFile(url, dest)  const file = require('fs').createWriteStream(dest);\n  const request = require('https').get(url, (response) => {\n    response.pipe(file);\n    file.on('finish', () => {\n      file.close();\n    });\n  });\n  request.on('error', (err) => {\n    file.close();\n    require('fs').unlink(dest, () => {\n      throw err;\n    });\n  });\n  file.on('error', (err) => {\n    file.close();\n    require('fs').unlink(dest, () => {\n      throw err;\n    });\n  });\n  await new Promise((resolve, reject) => {\n    file.on('finish', resolve);\n    file.on('error', reject);\n  });\n}\n", "CodeBleu_score": 44.28164360979287}, {"code": "async function downloadFile(url, dest)  const file = fs.createWriteStream(dest);\n  const request = https.get(url, response => {\n    response.pipe(file);\n    file.on(\"finish\", () => file.close());\n  });\n  await new Promise((resolve, reject) => {\n    file.on(\"close\", resolve);\n    request.on(\"error\", err => {\n      fs.unlink(dest, () => reject(err));\n    });\n  });\n}\n", "CodeBleu_score": 47.68028482980801}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet)\n  // Filter out already processed module IDs\n  return Flux.fromIterable(module.getDependentModules())\n    .filter(dependentModuleId -> !circularDependencyCheckSet.contains(dependentModuleId))\n\n    // Add new module IDs to the circular dependency check set\n    .doOnNext(dependentModuleId -> circularDependencyCheckSet.add(dependentModuleId))\n\n    // Retrieve the corresponding modules\n    .flatMap(this::getModuleById)\n\n    // Handle errors by logging a warning and continues processing\n    .onErrorResume(throwable -> {\n      LOGGER.warn(\"Failed to retrieve dependent module: {}\", throwable.getMessage());\n      return Flux.empty();\n    });\n}", "CodeBleu_score": 57.45729057758475}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet)     return moduleRepository.findAllById(module.getDependencies())\n         .filter(dependentModule -> !circularDependencyCheckSet.contains(dependentModule.getId()))\n         .doOnNext(dependentModule -> circularDependencyCheckSet.add(dependentModule.getId()))\n         .switchIfEmpty(Flux.empty().doOnComplete(() -> log.warn(\"Module with ID {} has invalid dependencies\", module.getId())))\n         .onErrorResume(error -> {\n             log.warn(\"Error while retrieving dependent modules for module with ID {}: {}\", module.getId(), error.getMessage());\n             return Flux.empty();\n         });\n }", "CodeBleu_score": 49.02919163579389}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet)\n  // get the module IDs of the dependent modules\n  Set<String> dependentModuleIds = module.getDependentModuleIds();\n\n  // filter out already processed module IDs\n  Set<String> filteredDependentModuleIds = dependentModuleIds.stream()\n    .filter(moduleId -> !circularDependencyCheckSet.contains(moduleId))\n    .collect(Collectors.toSet());\n\n  // add new module IDs to the circular dependency check set\n  circularDependencyCheckSet.addAll(filteredDependentModuleIds);\n\n  // retrieve the corresponding modules\n  Flux<Application> dependentModules = applicationService.findByIds(filteredDependentModuleIds);\n\n  // handle errors by logging a warning and continues processing\n  dependentModules = dependentModules.onErrorContinue((error, moduleId) -> {\n    LOGGER.warn(\"Could not retrieve dependent module with ID '{}' for module with ID '{}'\", moduleId, module.getId());\n  });\n\n  return dependentModules;\n}", "CodeBleu_score": 45.024998852754806}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds)    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        if (entry.getKey().equals(\"componentType\") && entry.getValue().equals(\"module\")) {\n            String appId = (String) map.get(\"appId\");\n            if (appId != null && !appId.isEmpty()) {\n                dependentModuleIds.add(appId);\n            }\n        }\n        if (entry.getValue() instanceof Map) {\n            doGetDependentModules((Map<?, ?>) entry.getValue(), dependentModuleIds);\n        } else if (entry.getValue() instanceof List) {\n            for (Object listEntry : (List<?>) entry.getValue()) {\n                if (listEntry instanceof Map) {\n                    doGetDependentModules((Map<?, ?>) listEntry, dependentModuleIds);\n                }\n            }\n        }\n    }\n}\n", "CodeBleu_score": 43.88770919315563}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds)    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        if (entry.getKey().equals(\"componentType\") && entry.getValue().equals(\"module\")) {\n            String appId = (String) map.get(\"appId\");\n            if (appId != null && appId.trim().length() > 0) {\n                dependentModuleIds.add(appId);\n            }\n        } else if (entry.getValue() instanceof Map<?, ?>) {\n            doGetDependentModules((Map<?, ?>) entry.getValue(), dependentModuleIds);\n        } else if (entry.getValue() instanceof List<?>) {\n            doGetDependentModules((List<?>) entry.getValue(), dependentModuleIds);\n        }\n    }\n}\n", "CodeBleu_score": 39.71113710520298}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds)    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        Object key = entry.getKey();\n        Object value = entry.getValue();\n        if (key instanceof String && value instanceof Map) {\n            Map<?, ?> nestedMap = (Map<?, ?>) value;\n            if (\"module\".equals(nestedMap.get(\"componentType\")) && !StringUtils.isBlank((String) nestedMap.get(\"appId\"))) {\n                dependentModuleIds.add((String) nestedMap.get(\"appId\"));\n            }\n            doGetDependentModules(nestedMap, dependentModuleIds);\n        } else if (value instanceof List) {\n            List<?> list = (List<?>) value;\n            for (Object listValue : list) {\n                if (listValue instanceof Map) {\n                    doGetDependentModules((Map<?, ?>) listValue, dependentModuleIds);\n                }\n            }\n        }\n    }\n}\n", "CodeBleu_score": 42.64029972513498}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException     // Read the DataBuffer into a byte array.\n    byte[] byteArray = new byte[dataBuffer.readableBytes()];\n    dataBuffer.readBytes(byteArray);\n\n    // Decode the byte array into a BufferedImage.\n    InputStream inputStream = new ByteArrayInputStream(byteArray);\n    BufferedImage bufferedImage = ImageIO.read(inputStream);\n\n    // Resize the BufferedImage if createThumbnail is true.\n    if (createThumbnail) {\n        bufferedImage = resizeImage(bufferedImage);\n    }\n\n    // Encode the BufferedImage into a byte array and build an Asset.\n    // If not creating a thumbnail, retain the original content type.\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    ImageIO.write(bufferedImage, createThumbnail ? \"jpg\" : srcContentType.subtype(), outputStream);\n    Asset asset = Asset.createFromBytes(outputStream.toByteArray());\n    asset.setContentType(createThumbnail ? \"image/jpeg\" : srcContentType.toString());\n\n    // Release the DataBuffer and return the new Asset.\n    dataBuffer.release();\n    return asset;\n}\n", "CodeBleu_score": 41.58556963983254}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException     // Read the data buffer into a ByteArrayInputStream\n    InputStream inputStream = new ByteArrayInputStream(dataBuffer.getData());\n    // Read the image data into a BufferedImage\n    BufferedImage image = ImageIO.read(inputStream);\n    // Resize the image if necessary\n    if (createThumbnail) {\n        image = resizeImage(image);\n    }\n    // Write the image to a ByteArrayOutputStream\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    ImageIO.write(image, \"jpg\", outputStream);\n    // Create a new Asset\n    Asset asset = new Asset();\n    // Set the asset's body to the image data\n    asset.setBody(outputStream.toByteArray());\n    // Set the asset's content type to JPEG\n    asset.setContentType(\"image/jpeg\");\n    return asset;\n}\n", "CodeBleu_score": 38.89238064908926}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException     byte[] bytes = dataBuffer.getData();\n    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);\n    BufferedImage image = ImageIO.read(byteArrayInputStream);\n    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n    ImageIO.write(image, \"jpg\", byteArrayOutputStream);\n    bytes = byteArrayOutputStream.toByteArray();\n    DataBuffer buffer = new DataBuffer(bytes);\n    Asset asset = new Asset();\n    asset.setData(buffer);\n    asset.setContentType(MediaType.IMAGE_JPEG_VALUE);\n    return asset;\n}\n", "CodeBleu_score": 36.881588532744466}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId)    return assetRepository.findById(assetId)\n        .flatMap(asset -> {\n            ServerHttpResponse response = exchange.getResponse();\n            response.setStatusCode(HttpStatus.OK);\n            if (asset.getContentType() != null) {\n                response.getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n            }\n            DataBuffer dataBuffer = response.bufferFactory().wrap(asset.getData());\n            return response.writeWith(Mono.just(dataBuffer));\n        });\n}", "CodeBleu_score": 55.350756066494064}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId)  return Mono.just(assetId)\n      .flatMap(id -> assetRepository.findById(id))\n      .doOnNext(asset -> exchange.getResponse().setStatusCode(HttpStatus.OK))\n      .doOnNext(asset -> asset.getContentType().ifPresent(contentType -> exchange.getResponse().getHeaders().setContentType(MediaType.parseMediaType(contentType))))\n      .flatMap(asset -> exchange.getResponse().writeWith(Mono.just(asset.getData())));\n}", "CodeBleu_score": 34.07529719045301}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId)    return assetRepository.findById(assetId)\n        .flatMap(asset -> {\n            exchange.getResponse().setStatusCode(HttpStatus.OK);\n            if (asset.getContentType() != null) {\n                exchange.getResponse().getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n            }\n            DataBuffer dataBuffer = exchange.getResponse().bufferFactory().wrap(asset.getData());\n            return exchange.getResponse().writeWith(Mono.just(dataBuffer));\n        });\n}", "CodeBleu_score": 47.524073515642634}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode()     return Flux.defer(() -> {\n        final WorkspaceMode workspaceMode = (WorkspaceMode) session.get(WorkspaceMode.class);\n        if (workspaceMode == WorkspaceMode.SAAS) {\n            return Flux.empty();\n        }\n        return organizationService.findAll()\n                .map(organization -> new FindAuthConfig(organization.getId(), organization.getName(), organization.getHost(), organization.getToken()));\n    });\n}", "CodeBleu_score": 34.670506781225264}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode()     return Flux.defer({ ->\n        if (workspaceMode == WorkspaceMode.SAAS) {\n            return Flux.empty()\n        }\n\n        return Flux.fromIterable(organizationService.findAllOrganizations())\n                .map({ organization ->\n                    def organizationId = organization.getId()\n                    def organizationName = organization.getName()\n\n                    def authConfigs = authenticationService.findAllAuthenticationConfigurationsForOrganization(organizationId)\n\n                    def authConfigsAsFindAuthConfigs = authConfigs.collect({ authConfig ->\n                        def authConfigId = authConfig.getId()\n                        def authConfigName = authConfig.getName()\n\n                        def findAuthConfig = new FindAuthConfig()\n                        findAuthConfig.setOrganizationId(organizationId)\n                        findAuthConfig.setOrganizationName(organizationName)\n                        findAuthConfig.setAuthConfigId(authConfigId)\n                        findAuthConfig.setAuthConfigName(authConfigName)\n\n                        return findAuthConfig\n                    })\n\n                    return authConfigsAsFindAuthConfigs\n                })\n                .flatMap({ authConfigs ->\n                    return Flux.fromIterable(authConfigs)\n                })\n    })\n}", "CodeBleu_score": 23.40788006383513}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode()     return Flux.defer(() -> {\n        if (workspaceMode == WorkspaceMode.SAAS) {\n            return Flux.empty();\n        }\n        return findAllOrganizations()\n            .map(organization -> {\n                String organizationId = organization.getId();\n                return new FindAuthConfig(organizationId, organization.getDefaultBucketId());\n            });\n    });\n}", "CodeBleu_score": 34.58484468923679}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate)    return MongockSpring5.builder()\n        .setDriver(mongoTemplate.getDb().getMongoClient())\n        .setDatabaseName(mongoTemplate.getDb().getName())\n        .addChangeLogsScanPackage(\"com.example.demo.changelogs\")\n        .setSpringContext(springContext)\n        .setMongoTemplate(mongoTemplate)\n        .buildApplicationRunner();\n}", "CodeBleu_score": 32.11619047583404}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate)    MongoClient mongoClient = mongoTemplate.getMongoDbFactory().getMongoClient();\n    MongoDatabase db = mongoClient.getDatabase(mongoTemplate.getDb().getName());\n    MongockSpring5.SpringMongockBuilder springMongockBuilder = MongockSpring5.builder()\n            .setDriver(new SpringMongo3Driver(db, mongoClient))\n            .addChangeLogsScanPackage(\"com.example.demo.mongock\")\n            .setSpringContext(springContext);\n\n    return springMongockBuilder.buildApplicationRunner();\n}", "CodeBleu_score": 42.89582476317193}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate)    return MongockSpring5.builder()\n        .setDriver(SpringDataMongoV3Driver.withDefaultLock(mongoTemplate))\n        .addChangeLogsScanPackage(\"com.example.demo.migration\")\n        .setSpringContext(springContext)\n        .buildApplicationRunner();\n}\n", "CodeBleu_score": 24.129021064210217}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter)    ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n    reactiveMongoTemplate.setWriteConcern(WriteConcern.ACKNOWLEDGED);\n    reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n    return reactiveMongoTemplate;\n}\n", "CodeBleu_score": 68.07197568096733}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter)    ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n    reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n    return reactiveMongoTemplate;\n}", "CodeBleu_score": 73.04022279726988}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter)    ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n    reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n    return reactiveMongoTemplate;\n}\n", "CodeBleu_score": 73.04022279726988}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId)    return libraryQueryRepository.findTopByLibraryQueryIdOrderByCreatedAtDesc(libraryQueryId)\n        .flatMap(libraryQuery -> {\n            if (libraryQuery != null) {\n                return Mono.just(libraryQuery.getDsl());\n            }\n            return libraryQueryService.getLibraryQueryById(libraryQueryId)\n                .map(LibraryQuery::getDsl);\n        });\n}", "CodeBleu_score": 49.30429167159107}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId)    return Mono.just(libraryQueryId)\n        .flatMap(id -> {\n            // Retrieve the latest library query record\n            return getLatestLibraryQueryRecordByLibraryQueryId(id);\n        })\n        .flatMap(record -> {\n            // If a record was found, get the DSL from the record\n            if (record != null) {\n                return Mono.just(record.getDsl());\n            }\n            // Otherwise, get the DSL from the library query directly\n            return getDSLByLibraryQueryId(libraryQueryId);\n        });\n}\n", "CodeBleu_score": 46.52259852848913}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId)    return libraryQueryService.getLatestLibraryQuery(libraryQueryId)\n        .flatMap(libraryQuery -> getLiveDSL(libraryQuery.getId()))\n        .switchIfEmpty(getLiveDSL(libraryQueryId));\n}\n", "CodeBleu_score": 36.912312112070225}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext)    // Get the timeout duration.\n    Duration timeout = Utils.parseDuration(timeoutStr, \"timeout\");\n    // Create a new context with the timeout duration.\n    final QueryVisitorContext queryContext = new QueryVisitorContext(queryVisitorContext.getQueryExecutionStepInfo(), timeout);\n    // If the datasource type is remote, then defer the execution to the Node.js runtime.\n    if (datasource.getDatasourceConfiguration().getDatasourceType() == DatasourceType.REMOTE) {\n        return Mono.fromCallable(() -> {\n            try {\n                return executeRemoteQuery(datasource, queryConfig, requestParams, queryContext);\n            } catch (Exception e) {\n                throw Exceptions.propagate(e);\n            }\n        })\n                .subscribeOn(scheduler);\n    }\n    // Otherwise, execute the query locally.\n    return Mono.fromCallable(() -> {\n        try {\n            return executeLocalQuery(datasource, queryConfig, requestParams, queryContext);\n        } catch (Exception e) {\n            throw Exceptions.propagate(e);\n        }\n    })\n            .subscribeOn(scheduler);\n}", "CodeBleu_score": 41.09554203956838}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext)        final Duration timeoutDuration = Duration.ofMillis(Long.parseLong(timeoutStr));\n        final boolean isLocalDatasource = datasource.getDatasourceConfiguration().getAuthentication().getAuthenticationType() ==\n                AuthenticationDTO.AuthenticationType.NONE;\n        final boolean isQueryTimeout = queryConfig.get(\"isQueryTimeout\") == null ? false : (boolean) queryConfig.get(\"isQueryTimeout\");\n        final boolean isQueryTimeoutByAuth = queryConfig.get(\"isQueryTimeoutByAuth\") == null ? false : (boolean) queryConfig.get(\"isQueryTimeoutByAuth\");\n        final boolean isLocalhost = isLocalDatasource && isQueryTimeoutByAuth;\n        final boolean isQueryTimeoutByConfig = queryConfig.get(\"isQueryTimeoutByConfig\") == null ? false : (boolean) queryConfig.get(\"isQueryTimeoutByConfig\");\n        final boolean isQueryTimeoutByPlugin = isQueryTimeout && !isLocalhost && !isQueryTimeoutByConfig;\n        final boolean isQueryTimeoutByUser = isQueryTimeout && !isLocalhost && isQueryTimeoutByConfig;\n\n        if (isLocalDatasource) {\n            return executeLocalQuery(datasource, queryConfig, requestParams, timeoutDuration, queryVisitorContext)\n                    .timeout(timeoutDuration)\n                    .onErrorMap(TimeoutException.class, e -> {\n                        if (isQueryTimeoutByPlugin) {\n                            return new AppsmithPluginException(AppsmithPluginError.PLUGIN_QUERY_TIMEOUT_ERROR, \"Query timeout error\");\n                        } else if (isQueryTimeoutByUser) {\n                            return new AppsmithPluginException(AppsmithPluginError.PLUGIN_QUERY_TIMEOUT_ERROR,\n                                    \"Appsmith query plugin timeout error\");\n                        } else {\n                            return e;\n                        }\n                    })\n                    .onErrorResume(e -> {\n                        if (e instanceof AppsmithPluginException) {\n                            return Mono.error(e);\n                        }\n                        log.error(\"In the datasource query plugin, error in local query execution.\", e);\n                        return Mono.just(new QueryExecutionResult(null, null, null,", "CodeBleu_score": 38.94193335248969}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext)        // Set default timeout to 60 seconds\n        long timeout = 60;\n        try {\n            timeout = Long.parseLong(timeoutStr);\n        } catch (NumberFormatException e) {\n            log.warn(\"Invalid timeout string. Defaulting to 60 seconds.\", e);\n        }\n\n        // Defer the query execution based on the datasource type\n        if (datasource instanceof RemoteRestDatasource) {\n            return Mono.defer(() -> executeRestQuery(datasource, queryConfig, requestParams, queryVisitorContext))\n                    .timeout(Duration.ofSeconds(timeout))\n                    .onErrorMap(TimeoutException.class, e -> new AppsmithPluginException(\n                            AppsmithPluginError.PLUGIN_QUERY_TIMEOUT_ERROR,\n                            \"Query execution timed out. Please increase timeout.\"\n                    ));\n        } else {\n            return Mono.defer(() -> executeLocalQuery(datasource, queryConfig, requestParams, queryVisitorContext))\n                    .timeout(Duration.ofSeconds(timeout))\n                    .onErrorMap(TimeoutException.class, e -> new AppsmithPluginException(\n                            AppsmithPluginError.PLUGIN_QUERY_TIMEOUT_ERROR,\n                            \"Query execution timed out. Please increase timeout.\"\n                    ));\n        }\n    }\n", "CodeBleu_score": 44.44560361455934}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext)    return Mono.just(datasource)\n            .flatMap(datasource -> {\n                final QueryExecutor queryExecutor = queryExecutorRegistry.getQueryExecutor(datasource);\n                final QueryExecutionContext queryExecutionContext = queryExecutor.getExecutionContext(queryConfig, requestParams, queryVisitorContext);\n                return datasourceConnectionManager.getConnection(datasource)\n                        .flatMap(connection -> {\n                            return queryExecutor.execute(connection, queryExecutionContext)\n                                    .doFinally(signalType -> {\n                                        if (signalType.equals(SignalType.ON_ERROR)) {\n                                            datasourceConnectionManager.releaseConnection(datasource, connection);\n                                        }\n                                    });\n                        })\n                        .onErrorResume(error -> {\n                            return Mono.error(new AppsmithPluginException(\n                                    AppsmithPluginError.PLUGIN_ERROR,\n                                    error.getMessage()\n                            ));\n                        });\n            });\n}", "CodeBleu_score": 38.812149453629466}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext)    // Get the appropriate query executor for the datasource type\n    QueryExecutor queryExecutor = queryExecutorRegistry.getQueryExecutor(datasource.getDatasourceConfiguration());\n\n    // Build the query execution context\n    QueryExecutionContext queryExecutionContext = queryExecutor.getExecutionContext(queryConfig, requestParams, queryVisitorContext);\n\n    // Acquire a connection from the datasource connection pool\n    Mono<Connection> connectionMono = datasourceConnectionManager.getConnection(datasource);\n\n    // Execute the query using the connection and handle any errors that occur during execution\n    return connectionMono.flatMap(connection -> {\n        return queryExecutor.execute(connection, queryExecutionContext)\n                .onErrorResume(e -> {\n                    // Release the connection back to the pool on any errors\n                    return Mono.from(connection.close())\n                            .then(Mono.error(e));\n                })\n                .doFinally(signalType -> {\n                    // Release the connection back to the pool on completion\n                    connection.close().subscribe();\n                });\n    });\n}", "CodeBleu_score": 49.58617035873529}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext)\n        // Get the query executor for the datasource type.\n        QueryExecutor queryExecutor = queryExecutorRegistry.getQueryExecutor(datasource);\n\n        // Build the query execution context.\n        QueryExecutionContext queryExecutionContext = queryExecutor.getExecutionContextBuilder(datasource, queryConfig, requestParams)\n                .build();\n\n        // Acquire a connection from the datasource connection pool.\n        Mono<Connection> connectionMono = Mono.from(datasourceConnectionManager.getConnection(datasource));\n\n        // Execute the query using the connection and handle any errors that occur during execution.\n        return connectionMono.flatMap(connection -> {\n            Mono<QueryExecutionResult> resultMono = queryExecutor.execute(connection, queryExecutionContext, queryVisitorContext);\n            return resultMono.doFinally(signalType -> {\n                if (signalType == SignalType.CANCEL) {\n                    connection.cancel();\n                }\n                connection.close();\n            });\n        });\n    }", "CodeBleu_score": 46.03543117912777}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr)    if (timeoutStr == null || timeoutStr.trim().isEmpty()) {\n        return DEFAULT_QUERY_TIMEOUT_MS;\n    }\n\n    String[] timeoutStrParts = timeoutStr.split(\"\\\\s+\");\n    if (timeoutStrParts.length != 2) {\n        throw new IllegalArgumentException(\"Invalid timeout string: \" + timeoutStr);\n    }\n\n    int timeoutValue;\n    try {\n        timeoutValue = Integer.parseInt(timeoutStrParts[0]);\n    } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"Invalid timeout string: \" + timeoutStr, e);\n    }\n\n    String timeoutUnit = timeoutStrParts[1];\n    if (timeoutValue <= 0) {\n        throw new IllegalArgumentException(\"Invalid timeout string: \" + timeoutStr);\n    }\n\n    if (\"ms\".equalsIgnoreCase(timeoutUnit)) {\n        if (timeoutValue > MAX_QUERY_TIMEOUT_MS) {\n            throw new IllegalArgumentException(\"Invalid timeout string: \" + timeoutStr);\n        }\n        return timeoutValue;\n    } else if (\"s\".equalsIgnoreCase(timeoutUnit)) {\n        if (timeoutValue > MAX_QUERY_TIMEOUT_MS / 1000) {\n            throw new IllegalArgumentException(\"Invalid timeout string: \" + timeoutStr);\n        }\n        return timeoutValue * 1000;\n    } else if (\"m\".equalsIgnoreCase(timeoutUnit)) {\n        if (timeoutValue > MAX_QUERY_TIMEOUT_MS / 1000 / 60) {\n            throw new IllegalArgumentException(\"Invalid timeout string: \" + timeoutStr);\n        }\n        return timeoutValue * 1000 * 60;\n    } else if (\"h\".equalsIgnoreCase(timeoutUnit)) {\n        if (timeoutValue > MAX_QUERY_TIMEOUT_MS / 1000 / 60 / 60) {\n            throw new IllegalArgumentException(\"Invalid timeout string: \" + timeoutStr);\n        }\n        return timeoutValue * 1000 * 60 * 60;\n    } else {\n        throw new IllegalArgumentException(\"Invalid", "CodeBleu_score": 29.91709859499267}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr)    if (timeoutStr == null || timeoutStr.isEmpty()) {\n        return DEFAULT_QUERY_TIMEOUT_MS;\n    }\n\n    String[] timeoutParts = timeoutStr.split(\"\\\\s+\");\n    if (timeoutParts.length != 2) {\n        throw new IllegalArgumentException(\"Invalid timeout string: \" + timeoutStr);\n    }\n\n    int timeoutValue;\n    try {\n        timeoutValue = Integer.parseInt(timeoutParts[0]);\n    } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"Invalid timeout value: \" + timeoutParts[0]);\n    }\n\n    String timeoutUnit = timeoutParts[1].toLowerCase();\n    if (timeoutUnit.equals(\"ms\")) {\n        return timeoutValue;\n    } else if (timeoutUnit.equals(\"s\")) {\n        return timeoutValue * 1000;\n    } else if (timeoutUnit.equals(\"m\")) {\n        return timeoutValue * 60 * 1000;\n    } else if (timeoutUnit.equals(\"h\")) {\n        return timeoutValue * 60 * 60 * 1000;\n    } else {\n        throw new IllegalArgumentException(\"Invalid timeout unit: \" + timeoutParts[1]);\n    }\n}", "CodeBleu_score": 30.51589364408351}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr)    int timeoutMs = DEFAULT_QUERY_TIMEOUT_MS;\n    if (timeoutStr != null && !timeoutStr.isEmpty()) {\n        Matcher matcher = TIMEOUT_PATTERN.matcher(timeoutStr);\n        if (matcher.matches()) {\n            try {\n                int value = Integer.parseInt(matcher.group(1));\n                String unit = matcher.group(2);\n                if (unit.equals(\"ms\")) {\n                    timeoutMs = value;\n                } else if (unit.equals(\"s\")) {\n                    timeoutMs = value * 1000;\n                } else if (unit.equals(\"m\")) {\n                    timeoutMs = value * 1000 * 60;\n                } else if (unit.equals(\"h\")) {\n                    timeoutMs = value * 1000 * 60 * 60;\n                } else if (unit.equals(\"d\")) {\n                    timeoutMs = value * 1000 * 60 * 60 * 24;\n                } else {\n                    throw new IllegalArgumentException(\"Invalid timeout unit: \" + unit);\n                }\n            } catch (NumberFormatException e) {\n                throw new IllegalArgumentException(\"Invalid timeout value: \" + timeoutStr);\n            }\n        } else {\n            throw new IllegalArgumentException(\"Invalid timeout format: \" + timeoutStr);\n        }\n    }\n    if (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n        throw new IllegalArgumentException(\"Timeout value exceeds maximum allowed timeout: \" + timeoutStr);\n    }\n    return timeoutMs;\n}", "CodeBleu_score": 32.07683195620509}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId)    return application.getPages()\n            .flatMapMany(page -> Mono.justOrEmpty(page.getLayouts()))\n            .flatMap(layout -> Mono.justOrEmpty(layout.getLayoutOnLoadActions()))\n            .flatMap(action -> Mono.justOrEmpty(action.getPublishedAction()))\n            .flatMap(action -> Mono.justOrEmpty(action.getActionConfiguration()))\n            .flatMap(actionConfiguration -> Mono.justOrEmpty(actionConfiguration.getBody()))\n            .flatMap(datasourceId -> datasourceId.stream()\n                    .map(datasource -> datasourceService.findById(datasource, AclPermission.READ_DATASOURCES, false))\n                    .collect(Collectors.toList()))\n            .flatMap(datasourceMono -> Flux.concat(datasourceMono))\n            .collectList()\n            .flatMap(datasources -> {\n                if (datasources.isEmpty()) {\n                    return Mono.error(new AppsmithException(AppsmithError.NO_RESOURCE_FOUND, \"live query\", \"application\"));\n                }\n                return datasourceService.copyDatasource(datasources, currentOrganizationId, visitorId)\n                        .map(datasource -> Pair.of(datasource.getId(), datasource.getId()));\n            });\n}", "CodeBleu_score": 29.3591272260518}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId)\n    // Get all live queries in the application\n    Mono<List<NewQuery>> liveQueries = applicationPageService.getSavedQueries(application.getId(), AclPermission.READ_APPLICATIONS,\n            visitorId)\n            .map(newQueries -> newQueries.stream()\n                    .filter(query -> query.getEditMode() == EditMode.LIVE)\n                    .collect(Collectors.toList())\n            );\n\n    // Get all datasource IDs from the live queries\n    Mono<List<String>> datasourceIds = liveQueries\n            .map(queries -> queries.stream()\n                    .map(query -> query.getDatasource().getId())\n                    .collect(Collectors.toList())\n            );\n\n    // Copy each datasource to the current organization\n    Mono<List<Pair<String, String>>> copiedDatasourceIds = datasourceIds\n            .flatMap(ids -> Flux.fromIterable(ids)\n                    .flatMap(id -> datasourceService.findById(id, AclPermission.MANAGE_DATASOURCES)\n                            .flatMap(datasource -> datasourceService.copy(datasource, currentOrganizationId, visitorId))\n                            .map(copiedDatasource -> Pair.of(id, copiedDatasource.getId()))\n                    )\n                    .collectList()\n            );\n\n    return copiedDatasourceIds;\n}", "CodeBleu_score": 48.11622312750421}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId)        // Get the live queries from the given application\n        Mono<List<NewQuery>> queries = applicationPageService.getQueries(application.getId(), visitorId)\n                .flatMap(response -> {\n                    if (response.getData() == null) {\n                        return Mono.error(new AppsmithException(AppsmithError.NO_RESOURCE_FOUND, \"query\", \"application\", application.getId()));\n                    }\n                    return Mono.just(response.getData());\n                })\n                .map(queriesList -> {\n                    // Extract the datasource IDs from the queries\n                    List<String> datasourceIds = queriesList.stream()\n                            .map(query -> query.getPublishedView().getDatasource().getId())\n                            .collect(Collectors.toList());\n                    return datasourceIds;\n                })\n                .flatMapMany(Flux::fromIterable)\n                .distinct()\n                .collectList();\n\n        return queries\n                .flatMapMany(Flux::fromIterable)\n                .flatMap(datasourceId -> datasourceService.findById(datasourceId, READ_DATASOURCES))\n                .flatMap(datasource -> {\n                    // Copy the datasource to the current organization\n                    datasource.setOrganizationId(currentOrganizationId);\n                    return datasourceService.create(datasource);\n                })\n                .map(datasource -> {\n                    // Return the original and copied datasource IDs as a pair\n                    return Pair.of(datasource.getId(), datasource.getId());\n                })\n                .collectList();\n    }", "CodeBleu_score": 43.19109432431847}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId)    return getDatasource(datasourceId)\n        .flatMap(datasource -> {\n            if (datasource.getType().equals(DatasourceType.SYSTEM_STATIC)) {\n                return Mono.just(datasource.getId());\n            } else if (datasource.getType().equals(DatasourceType.LEGACY_QUICK_API) || datasource.getType().equals(DatasourceType.LEGACY_OPENBLOCKS)) {\n                return Mono.just(datasource.getId());\n            } else {\n                return createDatasource(organizationId, visitorId, datasource.getName(), datasource.getType(), datasource.getPageId(), datasource.getPluginId(), datasource.getPluginPackageName(), datasource.getDatasourceConfiguration());\n            }\n        });\n}\n", "CodeBleu_score": 50.083044519760975}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId)    return datasourceService.findById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.getType() == Datasource.Type.SYSTEM_STATIC) {\n                    return Mono.just(datasource.getId());\n                } else if (datasource.getType() == Datasource.Type.LEGACY_QUICK_REST) {\n                    return datasourceService.findByNameAndType(\n                            datasource.getName(),\n                            Datasource.Type.LEGACY_QUICK_REST_NEW,\n                            organizationId\n                    ).flatMap(newDatasource -> {\n                        if (newDatasource == null) {\n                            return Mono.error(new AppsmithException(AppsmithError.NO_RESOURCE_FOUND, \"datasource\", datasourceId));\n                        }\n                        return Mono.just(newDatasource.getId());\n                    });\n                } else if (datasource.getType() == Datasource.Type.LEGACY_OPENBLOCKS) {\n                    return datasourceService.findByNameAndType(\n                            datasource.getName(),\n                            Datasource.Type.LEGACY_OPENBLOCKS_NEW,\n                            organizationId\n                    ).flatMap(newDatasource -> {\n                        if (newDatasource == null) {\n                            return Mono.error(new AppsmithException(AppsmithError.NO_RESOURCE_FOUND, \"datasource\", datasourceId));\n                        }\n                        return Mono.just(newDatasource.getId());\n                    });\n                }\n                return datasourceService.findByNameAndOrganizationId(\n                        datasource.getName(),\n                        organizationId,\n                        AclPermission.MANAGE_DATASOURCES\n                ).flatMap(newDatasource -> {\n                    if (newDatasource == null) {\n                        return Mono.error(new AppsmithException(AppsmithError.NO_RESOURCE_FOUND, \"datasource\", datasourceId));", "CodeBleu_score": 48.85694056564961}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId)    return datasourceService.findById(datasourceId)\n        .flatMap(datasource -> {\n            if (datasource.getType() == Datasource.Type.Static) {\n                return Mono.just(datasourceId);\n            } else if (datasource.getType() == Datasource.Type.LegacyREST) {\n                return Mono.just(legacyRestApiId);\n            } else if (datasource.getType() == Datasource.Type.LegacyOPENBLOCKS) {\n                return Mono.just(legacyOpenblocksApiId);\n            } else {\n                return datasourceService.create(organizationId, visitorId, datasource.getType(), datasource.getName(), datasource.getConfiguration());\n            }\n        });\n}", "CodeBleu_score": 48.30522593291272}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user)    return filePart.content()\n        .flatMap(dataBuffer -> {\n            try {\n                // Get the file extension\n                String contentType = filePart.headers().getContentType().get().toString();\n                String extension = contentType.substring(contentType.indexOf(\"/\") + 1);\n\n                // Create a file name\n                String fileName = user.getUsername() + \"-\" + UUID.randomUUID().toString() + \".\" + extension;\n\n                // Create a file object\n                File file = new File(UPLOAD_DIRECTORY + fileName);\n\n                // Write the file to the file system\n                DataBufferUtils.write(dataBuffer, file).block();\n\n                // If the user has a previous avatar, remove it\n                if (user.getAvatar() != null) {\n                    File oldFile = new File(UPLOAD_DIRECTORY + user.getAvatar());\n                    oldFile.delete();\n                }\n\n                // Update the user's profile with the new avatar\n                user.setAvatar(fileName);\n                return userRepository.save(user)\n                    .then(Mono.just(true));\n            } catch (IOException e) {\n                return Mono.just(false);\n            }\n        });\n}", "CodeBleu_score": 39.20608257635524}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user)     return this.storageService.upload(filePart, user.getId())\n         .flatMap(avatar -> {\n             if (user.getAvatar() != null) {\n                 return this.storageService.delete(user.getAvatar())\n                     .thenReturn(avatar);\n             }\n             return Mono.just(avatar);\n         })\n         .flatMap(avatar -> {\n             user.setAvatar(avatar);\n             return this.userRepository.save(user);\n         })\n         .map(u -> true);\n }", "CodeBleu_score": 31.797130400555197}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user)    return filePart.content()\n        .map(dataBuffer -> {\n            byte[] data = new byte[dataBuffer.readableByteCount()];\n            dataBuffer.read(data);\n            return data;\n        })\n        .flatMap(data -> {\n            String filename = user.getUsername() + \"-\" + UUID.randomUUID().toString() + \".jpg\";\n            Blob blob = Blob.newBuilder(BucketName, filename)\n                .setContentType(\"image/jpeg\")\n                .build();\n            return storage.create(blob, data)\n                .flatMap(blob -> {\n                    if (user.getAvatar() != null) {\n                        return storage.delete(BlobId.of(BucketName, user.getAvatar()))\n                            .then(Mono.just(blob));\n                    } else {\n                        return Mono.just(blob);\n                    }\n                });\n        })\n        .flatMap(blob -> {\n            user.setAvatar(blob.getName());\n            return userRepository.save(user);\n        })\n        .hasElement();\n}", "CodeBleu_score": 38.02326711116336}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser)    return Mono.just(authUser)\n        .map(this::setName)\n        .map(this::setState)\n        .map(this::setEnabled)\n        .map(this::setAvatar)\n        .flatMap(this::setPassword)\n        .flatMap(this::setUserConnections)\n        .map(this::markAsNew)\n        .flatMap(this::createUser);\n}", "CodeBleu_score": 10.176022977940326}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser)    return Mono.just(authUser)\n        .map(authUser -> {\n            User user = new User();\n            user.setName(authUser.getName());\n            user.setState(authUser.getState());\n            user.setEnabled(authUser.isEnabled());\n            user.setAvatar(authUser.getAvatar());\n            if (authUser.getAuthSource().equals(AuthSource.EMAIL) && authUser.getAuthContext().containsKey(\"password\")) {\n                user.setPassword(encryptPassword((String) authUser.getAuthContext().get(\"password\")));\n            }\n            user.setConnections(authUser.getConnections());\n            user.setNew(true);\n            return user;\n        })\n        .flatMap(userRepository::save);\n}", "CodeBleu_score": 43.82388543315874}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser)    return Mono.just(authUser)\n        .map(au -> {\n            User user = new User();\n            user.setName(au.getUsername());\n            user.setState(UserState.ENABLED);\n            user.setEnabled(true);\n            user.setAvatarUrl(au.getAvatarUrl());\n            if (au.getAuthSource() == AuthSource.EMAIL && au.getAuthContext().containsKey(\"password\")) {\n                user.setPassword(passwordEncoder.encode(au.getAuthContext().get(\"password\")));\n            }\n            return user;\n        })\n        .flatMap(user -> {\n            user.setConnections(Collections.singletonList(new UserConnection(user.getId(), authUser.getAuthSource(), authUser.getAuthId())));\n            user.setNew(true);\n            return userRepository.save(user);\n        });\n}", "CodeBleu_score": 43.56272025425227}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email)    return source.findByEmail(email)\n        .switchIfEmpty(Mono.error(new EmailNotExistException()))\n        .flatMap(sourceUser -> {\n            user.getConnections().add(sourceUser.getId());\n            return userRepository.save(user);\n        })\n        .hasElement();\n}", "CodeBleu_score": 17.900902955486664}, {"code": "public Mono<Boolean> bindEmail(User user, String email)    return sourceService.findByEmail(email)\n            .flatMap(source -> {\n                user.addConnection(source);\n                return userRepository.save(user);\n            })\n            .map(user -> true)\n            .onErrorMap(DuplicateKeyException.class, error -> new EmailAlreadyBoundException());\n}", "CodeBleu_score": 18.875171449108894}, {"code": "public Mono<Boolean> bindEmail(User user, String email)    return source.getConnection(email)\n        .onErrorMap(DuplicateKeyException.class, e -> new EmailAlreadyBoundException(email))\n        .switchIfEmpty(Mono.error(new EmailNotFoundException(email)))\n        .flatMap(connection -> {\n            user.getConnections().add(connection);\n            return repository.save(user);\n        })\n        .map(u -> true);\n}", "CodeBleu_score": 23.917704856862283}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword)    return userRepository.findById(userId)\n        .flatMap(user -> {\n            if (passwordEncoder.matches(oldPassword, user.getPassword())) {\n                user.setPassword(passwordEncoder.encode(newPassword));\n                return userRepository.save(user).then(Mono.just(true));\n            }\n            return Mono.error(new Exception(\"Invalid password\"));\n        });\n}", "CodeBleu_score": 23.615819491761535}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword)    return userRepository.findById(userId)\n        .flatMap(user -> {\n            if (passwordEncoder.matches(oldPassword, user.getPassword())) {\n                user.setPassword(passwordEncoder.encode(newPassword));\n                return userRepository.save(user);\n            } else {\n                return Mono.error(new InvalidPasswordException());\n            }\n        })\n        .hasElement();\n}", "CodeBleu_score": 23.487716544550185}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword)    return userRepository.findById(userId)\n        .flatMap(user -> {\n            if (passwordEncoder.matches(oldPassword, user.getPassword())) {\n                user.setPassword(passwordEncoder.encode(newPassword));\n                return userRepository.save(user)\n                    .then(Mono.just(true));\n            } else {\n                return Mono.error(new InvalidPasswordException());\n            }\n        });\n}", "CodeBleu_score": 24.63126716344415}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale)\n    // Build a list of groups to retrieve\n    List<String> groupIds = new ArrayList<>();\n    if (orgMember.getAdmin()) {\n        // If the member is an admin, retrieve all groups\n        groupIds.add(Group.ALL_USERS_GROUP_ID);\n    } else {\n        // If the member is not an admin, only retrieve the groups they are a member of\n        groupIds.addAll(orgMember.getGroups());\n    }\n\n    // Retrieve the groups\n    return groupRepository.findAllById(groupIds)\n        // Filter out the \"all users\" group\n        .filter(group -> !group.getId().equals(Group.ALL_USERS_GROUP_ID))\n        // Map the groups to a list of maps containing group IDs and localized group names\n        .map(group -> {\n            Map<String, String> groupMap = new HashMap<>();\n            groupMap.put(\"id\", group.getId());\n            groupMap.put(\"name\", group.getName(locale));\n            return groupMap;\n        })\n        // Collect the list of maps\n        .collectList();\n}", "CodeBleu_score": 33.77800194552596}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale)    return groupService.getGroupsForMember(orgMember)\n            .filter(group -> !group.isAllUsersGroup())\n            .filter(group -> !withoutDynamicGroups || !group.isDynamic())\n            .map(group -> Map.of(\"id\", group.getId(), \"name\", group.getLocalizedName(locale)))\n            .collectList();\n}", "CodeBleu_score": 21.37617901252063}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale)    if (orgMember.getAdmin()) {\n        return groupService.getAllGroups(orgMember.getOrganizationId(), withoutDynamicGroups)\n            .map(groups -> groups.stream()\n                .filter(group -> !group.getId().equals(ALL_USERS_GROUP_ID))\n                .map(group -> {\n                    Map<String, String> groupMap = new HashMap<>();\n                    groupMap.put(\"id\", group.getId());\n                    groupMap.put(\"name\", group.getName());\n                    return groupMap;\n                })\n                .collect(Collectors.toList()));\n    }\n    return groupService.getGroupsForUser(userId, orgMember.getOrganizationId(), withoutDynamicGroups, locale)\n        .map(groups -> groups.stream()\n            .filter(group -> !group.getId().equals(ALL_USERS_GROUP_ID))\n            .map(group -> {\n                Map<String, String> groupMap = new HashMap<>();\n                groupMap.put(\"id\", group.getId());\n                groupMap.put(\"name\", group.getName());\n                return groupMap;\n            })\n            .collect(Collectors.toList()));\n}", "CodeBleu_score": 33.870938533276764}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId)    UserStatus userStatus = new UserStatus(userId, true);\n    return mongoUpsertHelper(userStatus, \"{'userId':'\" + userId + \"'}\");\n}\n", "CodeBleu_score": 26.728921539668193}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId)    UserStatus userStatus = new UserStatus();\n    userStatus.setUserId(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n\n    return mongoUpsertHelper(userStatus);\n}\n", "CodeBleu_score": 32.57578203087864}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId)    return mongoUpsertHelper(\n        mongoTemplate,\n        UserStatus.class,\n        new UserStatus(userId, true),\n        userId,\n        \"userId\"\n    );\n}\n", "CodeBleu_score": 25.02902164468598}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) \tif predicatePartition == nil {\n\t\tpanic(\"Partition predicate is nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"Value predicate is nil\")\n\t}\n\tvar wg sync.WaitGroup\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\twg.Add(1)\n\t\t\tgo func(p PartitionManager) {\n\t\t\t\tdefer wg.Done()\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t}(p)\n\t\t}\n\t}\n\twg.Wait()\n}", "CodeBleu_score": 38.467494786697586}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) \tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\tc.clearMatching(predicatePartition, predicateValue)\n}\n", "CodeBleu_score": 18.90812451717498}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) \tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition is nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue is nil\")\n\t}\n\n\tvar wg sync.WaitGroup\n\twg.Add(len(c.partitions))\n\tfor partitionName, partition := range c.partitions {\n\t\tif predicatePartition(partitionName, partition) {\n\t\t\tgo func(partition PartitionManager) {\n\t\t\t\tdefer wg.Done()\n\t\t\t\tpartition.ClearMatching(predicateValue)\n\t\t\t}(partition)\n\t\t}\n\t}\n\twg.Wait()\n}\n", "CodeBleu_score": 38.86259006695333}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\tavgWeightPerPartition := totalWeightQuantity / numPartitions\n\tmaxSizePerPartition := maxItemsTotal / numPartitions\n\n\tif avgWeightPerPartition > maxSizePerPartition {\n\t\treturn maxSizePerPartition\n\t}\n\n\treturn avgWeightPerPartition\n}\n", "CodeBleu_score": 38.466908389062105}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\tmaxSizePerPartition := (maxItemsTotal * averageWeightPerPartition) / totalWeightQuantity\n\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 38.03650557229171}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\tmaxSizePerPartition := (maxItemsTotal * averageWeightPerPartition) / totalWeightQuantity\n\treturn maxSizePerPartition\n}\n", "CodeBleu_score": 38.03650557229171}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap()    Map<String, Object> contributorMap = new HashMap<>();\n    ConnectionMetaData metaData = null;\n    try {\n        metaData = connection.getMetaData();\n    } catch (SQLException e) {\n        e.printStackTrace();\n    }\n    if (metaData != null) {\n        contributorMap.put(\"databaseProductName\", metaData.getDatabaseProductName());\n        contributorMap.put(\"databaseProductVersion\", metaData.getDatabaseProductVersion());\n    }\n    return contributorMap;\n}", "CodeBleu_score": 41.655310562994444}, {"code": "public Map<String, Object> contributorMap()    Map<String, Object> map = new HashMap<>();\n    DatabaseMetaData metaData = getDatabaseMetaData();\n    if (metaData != null) {\n        String productName = metaData.getDatabaseProductName();\n        String productVersion = metaData.getDatabaseProductVersion();\n        if (productName != null && productVersion != null) {\n            map.put(\"databaseProductName\", productName);\n            map.put(\"databaseProductVersion\", productVersion);\n        }\n    }\n    return map;\n}\n", "CodeBleu_score": 42.09917844115244}, {"code": "public Map<String, Object> contributorMap()    Map<String, Object> contributorMap = new HashMap<>();\n    DatabaseMetaData metaData = null;\n    try {\n        metaData = connection.getMetaData();\n    } catch (SQLException e) {\n        logger.error(\"Error while retrieving metadata\", e);\n    }\n    if (metaData != null) {\n        try {\n            contributorMap.put(\"databaseProductName\", metaData.getDatabaseProductName());\n            contributorMap.put(\"databaseProductVersion\", metaData.getDatabaseProductVersion());\n        } catch (SQLException e) {\n            logger.error(\"Error while retrieving metadata\", e);\n        }\n    }\n    return contributorMap;\n}\n", "CodeBleu_score": 42.01908798112082}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap)    Map<String, String> userSetting = configMap.get(\"user\");\n    if (userSetting == null) {\n        info.setRegistrationEnabled(false);\n        info.setEmailVerificationEnabled(false);\n    } else {\n        info.setRegistrationEnabled(Boolean.parseBoolean(userSetting.get(\"registrationEnabled\")));\n        info.setEmailVerificationEnabled(Boolean.parseBoolean(userSetting.get(\"emailVerificationEnabled\")));\n    }\n}\n", "CodeBleu_score": 41.33428688946742}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap)    UserSettings userSettings = configMap.getUserSettings();\n    if (userSettings == null) {\n        info.setUserRegistrationEnabled(false);\n        info.setUserEmailVerificationEnabled(false);\n    } else {\n        info.setUserRegistrationEnabled(userSettings.getRegistrationEnabled());\n        info.setUserEmailVerificationEnabled(userSettings.getEmailVerificationEnabled());\n    }\n}", "CodeBleu_score": 39.880972529129124}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap)    String userSettings = configMap.get(\"userSettings\");\n    if (userSettings == null) {\n        info.setRegistrationEnabled(false);\n        info.setEmailVerificationEnabled(false);\n    } else {\n        info.setRegistrationEnabled(true);\n        info.setEmailVerificationEnabled(true);\n    }\n}", "CodeBleu_score": 29.837316627766935}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart()    try {\n        ThreadGroup threadGroup = new ThreadGroup(\"RestartGroup\");\n        Thread thread = new Thread(threadGroup, \"RestartThread\", new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    Thread.sleep(2000);\n                    System.out.println(\"Restarting...\");\n                    Thread.currentThread().setContextClassLoader(Thread.currentThread().getContextClassLoader());\n                    Thread.currentThread().setContextClassLoader(getClass().getClassLoader());\n                    Thread.sleep(2000);\n                    System.out.println(\"Restarting...\");\n                    Thread.currentThread().setContextClassLoader(Thread.currentThread().getContextClassLoader());\n                    Thread.currentThread().setContextClassLoader(getClass().getClassLoader());\n                    Thread.sleep(2000);\n                    System.out.println(\"Restarting...\");\n                    Thread.currentThread().setContextClassLoader(Thread.currentThread().getContextClassLoader());\n                    Thread.currentThread().setContextClassLoader(getClass().getClassLoader());\n                    Thread.sleep(2000);\n                    System.out.println(\"Restarting...\");\n                    Thread.currentThread().setContextClassLoader(Thread.currentThread().getContextClassLoader());\n                    Thread.currentThread().setContextClassLoader(getClass().getClassLoader());\n                    Thread.sleep(2000);\n                    System.out.println(\"Restarting...\");\n                    Thread.currentThread().setContextClassLoader(Thread.currentThread().getContextClassLoader());\n                    Thread.currentThread().setContextClassLoader(getClass().getClassLoader());\n                    Thread.sleep(2000);\n                    System.out.println(\"Restarting...\");\n                    Thread.currentThread().setContextClassLoader(Thread.currentThread().getContextClassLoader());\n                    Thread.currentThread().setContextClassLoader(getClass().getClassLoader());\n                    Thread.sleep(2000);\n                    System.out.println(\"Restarting...\");\n                    Thread.currentThread().setContextClassLoader(Thread.currentThread().getContextClassLoader());\n                    Thread.currentThread().setContextClassLoader(getClass().getClassLoader());", "CodeBleu_score": 41.00824905017143}, {"code": "public Object restart()    try {\n        ThreadGroup tg = new ThreadGroup(\"restart\");\n        Thread t = new Thread(tg, \"restart\", new RestartThread(), 1000000);\n        t.setContextClassLoader(getClass().getClassLoader());\n        t.setDaemon(false);\n        t.start();\n        return \"Restarting...\";\n    } catch (Throwable t) {\n        return \"Restart failed: \" + t.getMessage();\n    }\n}\n", "CodeBleu_score": 46.480047875150134}, {"code": "public Object restart()    ThreadGroup threadGroup = new ThreadGroup(\"Restart\");\n    Thread thread = new Thread(threadGroup, \"Restart\", new Runnable() {\n        public void run() {\n            try {\n                ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n                Thread.currentThread().setContextClassLoader(getClass().getClassLoader());\n                Class<?> clazz = classLoader.loadClass(getClass().getName());\n                Method method = clazz.getMethod(\"main\", String[].class);\n                method.invoke(null, new Object[] { new String[] {} });\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    });\n    thread.setDaemon(false);\n    thread.start();\n    return \"Restarting\";\n}", "CodeBleu_score": 39.69167668469156}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer)    configurer.defaultCodecs().jackson2JsonDecoder(new ObjectMapper());\n    configurer.defaultCodecs().jackson2JsonEncoder(new ObjectMapper());\n}\n", "CodeBleu_score": 40.4233725148265}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer)  configurer.defaultCodecs().jackson2JsonEncoder(new ObjectMapper());\n  configurer.defaultCodecs().jackson2JsonDecoder(new ObjectMapper());\n }", "CodeBleu_score": 39.71983543987322}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer)    configurer.defaultCodecs().jackson2JsonEncoder(objectMapper);\n    configurer.defaultCodecs().jackson2JsonDecoder(objectMapper);\n}\n", "CodeBleu_score": 47.734492431559794}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection()    return RouterFunctions.route(\n        RequestPredicates.GET(\"/console/**\")\n            .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n            .and(RequestPredicates.not(RequestPredicates.webSocket())),\n        request -> {\n            return ServerResponse.ok()\n                .contentType(MediaType.TEXT_HTML)\n                .body(fromPath(Paths.get(\"src/main/resources/static/console/index.html\")));\n        }\n    );\n}", "CodeBleu_score": 25.630295621502476}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection()    return RouterFunctions.route(\n        RequestPredicates.GET(\"/console/**\")\n            .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n            .and(RequestPredicates.not(RequestPredicates.webSocket())),\n        request -> {\n            var path = request.path().value();\n            if (path.endsWith(\"/\")) {\n                path += \"index.html\";\n            }\n            if (!path.endsWith(\".html\")) {\n                path += \"/index.html\";\n            }\n            return ServerResponse.ok().contentType(MediaType.TEXT_HTML).bodyValue(new ClassPathResource(\"console/\" + path));\n        }\n    );\n}", "CodeBleu_score": 29.800395892254034}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection()    return RouterFunctions.route(\n        RequestPredicates.GET(\"/console/**\")\n            .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n            .and(RequestPredicates.not(RequestPredicates.webSocket())),\n        request -> {\n            String index = \"<html><head><title>Console</title></head><body><script>window.location.href = '/console/index.html';</script></body></html>\";\n            return ServerResponse.ok().contentType(MediaType.TEXT_HTML).body(index);\n        }\n    );\n}", "CodeBleu_score": 24.827285397419335}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect()    Predicate<ServerRequest> predicate = request -> request.method() == HttpMethod.GET\n            && request.uri().getPath().startsWith(\"/uc/\")\n            && !request.uri().getPath().startsWith(\"/uc/assets/\")\n            && request.headers().accept().contains(MediaType.TEXT_HTML)\n            && !request.headers().accept().contains(MediaType.TEXT_EVENT_STREAM);\n    Function<ServerRequest, ServerResponse> handler = request -> ServerResponse.temporaryRedirect(URI.create(\"/uc/index.html\")).build();\n    return RouterFunctions.route(predicate, handler);\n}", "CodeBleu_score": 37.644269784371005}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect()    Predicate<ServerRequest> ucIndexPredicate =\n        request -> request.method() == HttpMethod.GET\n            && request.path().startsWith(\"/uc/\")\n            && !request.path().startsWith(\"/uc/assets/\")\n            && request.headers().accept().stream()\n                .anyMatch(mediaType -> mediaType.includes(MediaType.TEXT_HTML))\n            && !request.headers().upgrade()\n                .map(upgrade -> upgrade.equalsIgnoreCase(\"websocket\"))\n                .orElse(false);\n\n    return route(ucIndexPredicate, ucIndexRequest -> {\n        String ucLocation = ucIndexRequest.headers().header(\"uc-location\").get(0);\n        String indexFilePath = ucLocation + \"/index.html\";\n        return ok().body(fromPath(indexFilePath));\n    });\n}", "CodeBleu_score": 36.51533092844924}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect()    return route(\n            GET(\"/uc/**\")\n                    .and(accept(MediaType.TEXT_HTML))\n                    .and(not(isWebSocket())),\n            request -> {\n                String location = request.headers().header(\"Location\").get(0);\n                String path = request.path();\n                String index = \"/index.html\";\n                String redirect = path.substring(0, path.length() - 1) + index;\n                return ServerResponse.permanentRedirect(URI.create(location + redirect)).build();\n            });\n}", "CodeBleu_score": 38.85676117248706}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository    new MapReactiveIndexedSessionRepository(new ConcurrentHashMap<>()) {\n        @Override\n        public void setDefaultMaxInactiveInterval(int defaultMaxInactiveInterval) {\n            super.setDefaultMaxInactiveInterval(defaultMaxInactiveInterval);\n        }\n    }.withDefaultMaxInactiveInterval(session.timeout)\n}", "CodeBleu_score": 22.439319266305734}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository    new MapReactiveSessionRepository(new ConcurrentHashMap<>()) {\n        @Override\n        public void setDefaultMaxInactiveInterval(int defaultMaxInactiveInterval) {\n            super.setDefaultMaxInactiveInterval(defaultMaxInactiveInterval);\n        }\n    }.withDefaultMaxInactiveInterval(sessionTimeout)\n}\n", "CodeBleu_score": 21.965607805565675}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository    new MapReactiveIndexedSessionRepository(new ConcurrentHashMap<>()) {\n        @Override\n        public void setDefaultMaxInactiveInterval(int defaultMaxInactiveInterval) {\n            super.setDefaultMaxInactiveInterval(defaultMaxInactiveInterval);\n        }\n    }.withDefaultMaxInactiveInterval(sessionTimeout)\n}", "CodeBleu_score": 22.42168448746524}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties)\n    DefaultUserDetailService userDetailsService = new DefaultUserDetailService();\n\n    userDetailsService.setUserService(userService);\n    userDetailsService.setRoleService(roleService);\n\n    // Configure two-factor authentication\n    if (haloProperties.getSecurity().isTwoFactorAuthenticationEnabled()) {\n        userDetailsService.setTwoFactorAuthenticationService(twoFactorAuthenticationService());\n    }\n\n    return userDetailsService;\n}\n", "CodeBleu_score": 35.66572116303778}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties)    DefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService)\n    if (haloProperties.getSecurity().getTwoFactor().isEnabled()) {\n        userDetailsService.setTwoFactorService(twoFactorService(userService, haloProperties))\n    }\n    return userDetailsService\n}\n", "CodeBleu_score": 43.41769492720054}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties)    DefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService);\n    userDetailsService.setEnableTwoFactorAuthentication(haloProperties.getSecurity().isTwoFactorAuthenticationEnabled());\n    return userDetailsService;\n}\n", "CodeBleu_score": 46.69679204293696}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner()    Comment.CommentOwner commentOwner = new Comment.CommentOwner();\n    commentOwner.setKind(\"email\");\n    commentOwner.setEmail(this.email != null ? this.email : \"\");\n    commentOwner.setDisplayName(this.displayName);\n    commentOwner.setAvatarUrl(this.avatarUrl);\n    commentOwner.setWebsiteUrl(this.websiteUrl);\n    return commentOwner;\n}", "CodeBleu_score": 34.74830078930833}, {"code": "public Comment.CommentOwner toCommentOwner()    Comment.CommentOwner commentOwner = new Comment.CommentOwner();\n    commentOwner.setKind(\"email\");\n    commentOwner.setEmail(this.getEmail() != null ? this.getEmail() : \"\");\n    commentOwner.setDisplayName(this.getDisplayName());\n    commentOwner.setAvatar(this.getAvatar());\n    commentOwner.setWebsite(this.getWebsite());\n    return commentOwner;\n}", "CodeBleu_score": 34.95105261120176}, {"code": "public Comment.CommentOwner toCommentOwner()    Comment.CommentOwner commentOwner = new Comment.CommentOwner();\n    commentOwner.setKind(\"email\");\n    commentOwner.setEmail(email == null ? \"\" : email);\n    commentOwner.setDisplayName(displayName);\n    commentOwner.setAvatar(new Comment.Avatar());\n    commentOwner.setWebsite(new Comment.Website());\n    return commentOwner;\n}", "CodeBleu_score": 36.56486170953963}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner)  if (commentOwner.kind == Comment.CommentOwner.Kind.EMAIL) {\n    User user = getUser(post.owner.name);\n    return user.email == commentOwner.email;\n  }\n  return post.owner.name == commentOwner.name;\n}\n", "CodeBleu_score": 18.661740703062968}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner)    if (commentOwner.getKind().equals(\"email\")) {\n        User user = getUser(post.getOwner());\n        return commentOwner.getName().equals(user.getEmail());\n    } else {\n        return commentOwner.getName().equals(post.getOwner());\n    }\n}\n", "CodeBleu_score": 28.58715748202719}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner)  if (commentOwner.kind == \"email\") {\n    User user = User.getUser(post.owner);\n    return commentOwner.name == user.email;\n  }\n  return commentOwner.name == post.owner;\n}\n", "CodeBleu_score": 16.10448995168885}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions()  // build a field query from the selectors\n  String fieldQuery = \"metadata.name=\" + fieldSelectors.get(\"metadata.name\");\n  fieldQuery += \",metadata.namespace=\" + fieldSelectors.get(\"metadata.namespace\");\n  fieldQuery += \",spec.type=\" + fieldSelectors.get(\"spec.type\");\n  fieldQuery += \",spec.clusterIP=\" + fieldSelectors.get(\"spec.clusterIP\");\n  fieldQuery += \",spec.externalIPs=\" + fieldSelectors.get(\"spec.externalIPs\");\n  fieldQuery += \",spec.loadBalancerIP=\" + fieldSelectors.get(\"spec.loadBalancerIP\");\n  fieldQuery += \",spec.externalName=\" + fieldSelectors.get(\"spec.externalName\");\n  fieldQuery += \",spec.externalTrafficPolicy=\" + fieldSelectors.get(\"spec.externalTrafficPolicy\");\n  fieldQuery += \",spec.healthCheckNodePort=\" + fieldSelectors.get(\"spec.healthCheckNodePort\");\n  fieldQuery += \",spec.publishNotReadyAddresses=\" + fieldSelectors.get(\"spec.publishNotReadyAddresses\");\n  fieldQuery += \",spec.sessionAffinity=\" + fieldSelectors.get(\"spec.sessionAffinity\");\n  fieldQuery += \",spec.loadBalancerSourceRanges=\" + fieldSelectors.get(\"spec.loadBalancerSourceRanges\");\n\n  // add conditions based on keyword and owner name, if provided\n  if (keyword != null) {\n    fieldQuery += \",metadata.name=\" + keyword;\n  }\n  if (ownerName != null) {\n    fieldQuery += \",metadata.ownerReferences.name=\" + ownerName;\n  }\n\n  // set the constructed field query in the ListOptions object and return it\n  return new ListOptionsBuilder().withFieldSelector(fieldQuery).build();\n}", "CodeBleu_score": 22.96505174909243}, {"code": "public ListOptions toListOptions()    ListOptions listOptions = new ListOptions();\n    listOptions.setFieldSelector(toFieldQuery());\n    if (keyword != null) {\n        listOptions.setLabelSelector(String.format(\"%s=%s\", \"keyword\", keyword));\n    }\n    if (ownerName != null) {\n        listOptions.setLabelSelector(String.format(\"%s=%s\", \"owner\", ownerName));\n    }\n    return listOptions;\n}\n", "CodeBleu_score": 16.667358900161425}, {"code": "public ListOptions toListOptions()    ListOptions listOptions = new ListOptions();\n    String fieldQuery = toFieldQuery(labelSelectors, fieldSelectors);\n    if (StringUtils.isNotEmpty(fieldQuery)) {\n        listOptions.setFieldSelector(fieldQuery);\n    }\n    if (StringUtils.isNotEmpty(keyword)) {\n        listOptions.setLabelSelector(String.format(\"app.kubernetes.io/name=%s\", keyword));\n    }\n    if (StringUtils.isNotEmpty(ownerName)) {\n        listOptions.setLabelSelector(String.format(\"app.kubernetes.io/managed-by=%s\", ownerName));\n    }\n    return listOptions;\n}", "CodeBleu_score": 27.243996387809315}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName)    return Mono.justOrEmpty(commentName)\n        .flatMap(comment -> counterStore.get(comment))\n        .map(count -> new CommentStats(commentName, count))\n        .defaultIfEmpty(new CommentStats(commentName, 0));\n}", "CodeBleu_score": 31.357988495123422}, {"code": "Mono<CommentStats> fetchStats(String commentName)    return Mono.justOrEmpty(commentName)\n        .flatMap(comment -> {\n            return Mono.justOrEmpty(commentCounter.get(comment))\n                .map(count -> {\n                    return new CommentStats(comment, count);\n                });\n        })\n        .switchIfEmpty(Mono.just(new CommentStats()));\n}", "CodeBleu_score": 36.9236398221663}, {"code": "Mono<CommentStats> fetchStats(String commentName)    return Mono.justOrEmpty(commentName)\n            .flatMap(commentName -> counterService.get(commentName))\n            .map(count -> new CommentStats(commentName, count))\n            .switchIfEmpty(Mono.just(new CommentStats(commentName, 0)));\n}\n", "CodeBleu_score": 33.26038140575865}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity)  Subscriber subscriber = new Subscriber(identity);\n  InterestReason reason = new InterestReason(InterestReason.REASON_REPLIED_TO, identity.getName());\n  subscriber.addInterestReason(reason);\n  NotificationCenter.subscribe(subscriber, true);\n}", "CodeBleu_score": 33.184654824861646}, {"code": "void subscribeReply(UserIdentity identity)    Subscriber subscriber = new Subscriber(identity);\n    InterestReason reason = new InterestReason(\"someone replied to you\",\n        new ReplyCondition(identity.getOwner()));\n    subscriber.addInterestReason(reason);\n    NotificationCenter.subscribe(subscriber);\n    subscriber.waitForSubscription();\n}", "CodeBleu_score": 36.53185025967846}, {"code": "void subscribeReply(UserIdentity identity)    Subscriber subscriber = new Subscriber(identity);\n    InterestReason reason = new InterestReason(InterestReasonType.REPLIED_TO, identity.getOwner());\n    subscriber.addInterestReason(reason);\n    NotificationCenter.subscribe(subscriber, true);\n}\n", "CodeBleu_score": 33.79701140772511}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment)    comment.setApproved(true);\n    comment.setApprovedDate(LocalDateTime.now());\n\n    return client.update(comment, comment.getId(), comment.getVersion())\n        .onErrorResume(OptimisticLockingFailureException.class, e -> {\n            log.info(\"Optimistic locking failure detected, retrying update\");\n            return approveComment(comment);\n        });\n}", "CodeBleu_score": 31.44455825398872}, {"code": "private Mono<Comment> approveComment(Comment comment)    comment.setApproved(true);\n    comment.setApprovedAt(Instant.now());\n\n    return client.update(comment, comment.getId(), comment.getVersion())\n        .onErrorResume(OptimisticLockingFailureException.class, e ->\n            approveComment(comment)\n        );\n}", "CodeBleu_score": 27.190134039981157}, {"code": "private Mono<Comment> approveComment(Comment comment)    return client.update(comment.getId(), comment, comment.getVersion(), (comment, serverComment) -> {\n        comment.setApproved(true);\n        comment.setApprovedDate(LocalDateTime.now());\n        return comment;\n    });\n}", "CodeBleu_score": 23.160839430938065}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction    if ($action instanceof MountableAction) {\n        $action->mount($this);\n    }\n\n    if ($action instanceof HasRecord && $this instanceof HasRecord) {\n        $action->setRecord($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 58.81363660761827}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction    if ($action instanceof MountableAction) {\n        $action->mount($this);\n    }\n\n    if ($action instanceof HasRecord && $this instanceof HasRecord) {\n        $action->setRecord($this->getRecord());\n    }\n\n    return $action;\n}\n", "CodeBleu_score": 58.81363660761827}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction    if ($action instanceof MountableAction) {\n        $action->mount($this);\n    }\n\n    if ($this instanceof HasRecord && $action instanceof HasRecord) {\n        $action->setRecord($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 62.380453004713644}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static    if (!empty($this->successRedirect)) {\n        $this->redirect($this->successRedirect);\n    }\n\n    return $this;\n}", "CodeBleu_score": 33.44776167674346}, {"code": "<?\npublic function dispatchSuccessRedirect(): static    $redirect = $this->getSuccessRedirect();\n    if (empty($redirect)) {\n        return $this;\n    }\n\n    $this->redirect($redirect);\n    return $this;\n}", "CodeBleu_score": 46.41761258114722}, {"code": "<?\npublic function dispatchSuccessRedirect(): static    if (!empty($this->success_redirect)) {\n        $this->redirect($this->success_redirect);\n    }\n\n    return $this;\n}\n", "CodeBleu_score": 33.09931284177674}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void    if (!$record || !method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagModel = $this->getTagModel();\n\n    $tags = $tagModel->whereIn('name', $state)->get();\n\n    $tagIds = $tags->pluck('id')->toArray();\n\n    $record->tags()->sync($tagIds);\n}\n", "CodeBleu_score": 25.458763027594976}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void    if (!$record || !method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagClass = $record->tags()->getRelated();\n\n    $tags = $tagClass::findOrCreate($state['tags'] ?? []);\n\n    $record->tags()->sync($tags->pluck('id'));\n}", "CodeBleu_score": 24.011885388939447}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void    if ($record === null || !method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagModel = $this->getTagModel();\n    $tags = $tagModel::findOrCreateMany($state['tags'] ?? []);\n\n    $record->tags()->sync($tags->pluck('id')->toArray());\n}", "CodeBleu_score": 22.4983803394147}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error \t// parse the repository path\n\tparts := strings.Split(repoPath, \"/\")\n\tif len(parts) != 2 {\n\t\treturn errors.New(\"invalid repository path\")\n\t}\n\t// create the scope for the pipeline\n\tscope := authz.CreateScope(parts[0], \"pipelines\", pipelineIdentifier)\n\t// create the resource for the pipeline\n\tresource := authz.CreateResource(parts[1], \"pipelines\", pipelineIdentifier)\n\t// perform the authorization check\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n", "CodeBleu_score": 41.68059629812977}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error \t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repoName, err := dissectRepositoryPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource for the pipeline.\n\tscope := authz.CreatePipelineScope(spacePath, repoName, pipelineIdentifier)\n\tresource := authz.CreatePipelineResource(spacePath, repoName, pipelineIdentifier)\n\n\t// Perform the authorization check.\n\terr = authorizer.Check(ctx, session, scope, resource, permission)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n", "CodeBleu_score": 53.04327387320844}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error \n\t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repoName, err := pathutil.ParseSpaceAndRepo(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Create a scope for the pipeline.\n\tscope := auth.Scope{\n\t\tType:         enum.Pipeline,\n\t\tSpacePath:    spacePath,\n\t\tPipelineName: pipelineIdentifier,\n\t}\n\n\t// Create a resource for the pipeline.\n\tresource := auth.Resource{\n\t\tType:         enum.Pipeline,\n\t\tSpacePath:    spacePath,\n\t\tPipelineName: pipelineIdentifier,\n\t}\n\n\t// Perform the authorization check.\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}\n", "CodeBleu_score": 64.04824721855684}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error\tparentSpace, err := store.GetSpaceByID(ctx, space.ParentSpaceID.String())\n\tif err != nil {\n\t\treturn err\n\t}\n\tscope, err := scope.Create(parentSpace)\n\tif err != nil {\n\t\treturn err\n\t}\n\tresource, err := resource.Create(parentSpace, space.Name)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 51.374474644227696}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error\tparentSpace, parentSpaceName, err := space.ParentSpace()\n\tif err != nil {\n\t\treturn err\n\t}\n\tscope, err := parentSpace.Scope()\n\tif err != nil {\n\t\treturn err\n\t}\n\tresource, err := parentSpace.Resource()\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 49.18028368132278}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error\t// Create a scope and resource for the parent space.\n\tscope := authz.ScopeFromSpace(space.ParentSpace)\n\tresource := authz.ResourceFromSpace(space.ParentSpace)\n\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 35.903168893182404}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error)\tif len(source) == 0 {\n\t\treturn json.Marshal(data)\n\t}\n\n\tvar payload json.RawMessage\n\tif err := json.Unmarshal(source, &payload); err != nil {\n\t\treturn nil, err\n\t}\n\n\tdec := json.NewDecoder(bytes.NewReader(payload))\n\tdec.DisallowUnknownFields()\n\tif err := dec.Decode(&data); err != nil {\n\t\treturn nil, err\n\t}\n\n\tsanitized, err := json.Marshal(data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn bytes.TrimRight(sanitized, \"\\n\"), nil\n}\n", "CodeBleu_score": 41.429256708506934}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error)\tif len(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\treturn source, nil\n\t}\n\n\tif err := json.Unmarshal(source, data); err != nil {\n\t\treturn nil, err\n\t}\n\n\tsanitized, err := json.Marshal(data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn sanitized, nil\n}", "CodeBleu_score": 34.04003151233654}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error)\tif len(source) == 0 {\n\t\tmarshaled, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn marshaled, nil\n\t}\n\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\tif err := decoder.Decode(&data); err != nil {\n\t\treturn nil, err\n\t}\n\n\tmarshaled, err := json.Marshal(data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn marshaled, nil\n}", "CodeBleu_score": 44.4040609506376}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error)\t// Validate repository reference.\n\trepoRef, err := c.validateRepoRef(repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch repository.\n\trepo, err := c.Store.GetRepositoryByName(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check access permissions.\n\tif err := c.Auth.CheckAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}\n", "CodeBleu_score": 50.739519239661625}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error)\t// Validate the repository reference.\n\tif repoRef == \"\" {\n\t\treturn nil, errors.New(\"repository reference is required\")\n\t}\n\n\t// Fetch the repository using the reference.\n\trepo, err := c.Repo.Get(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to get repository: %w\", err)\n\t}\n\n\t// Check the required permissions for the session on the repository.\n\tif !session.CheckAccess(repo, reqPermission) {\n\t\treturn nil, errors.New(\"failed to check access\")\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 56.0910412850612}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error)\t// Validate the repository reference.\n\tif err := c.validateRepoReference(repoRef); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch the repository.\n\trepo, err := c.Store.GetRepositoryByID(ctx, session.RepositoryID)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the session permissions on the repository.\n\tif err := c.checkSessionPermission(session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 41.093934121031054}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error\tsanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tsanitizers[enum.EmptyPayloadKind] = SanitizeEmptyPayload\n\tsanitizers[enum.RawPayloadKind] = SanitizeRawPayload\n\tsanitizers[enum.MarkdownPayloadKind] = SanitizeMarkdownPayload\n\tsanitizers[enum.PipelinePayloadKind] = SanitizePipelinePayload\n\n\treturn sanitizers\n}\n", "CodeBleu_score": 40.49824991454881}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error\tsanitizers := map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{}\n\n\tsanitizers[enum.EmptyPayloadKind] = func(in *ReportInput, s *auth.Session) error {\n\t\treturn nil\n\t}\n\n\tsanitizers[enum.RawPayloadKind] = func(in *ReportInput, s *auth.Session) error {\n\t\tif in.Raw == \"\" {\n\t\t\treturn fmt.Errorf(\"raw payload cannot be empty\")\n\t\t}\n\t\treturn nil\n\t}\n\n\tsanitizers[enum.MarkdownPayloadKind] = func(in *ReportInput, s *auth.Session) error {\n\t\tif in.Markdown == \"\" {\n\t\t\treturn fmt.Errorf(\"markdown payload cannot be empty\")\n\t\t}\n\t\treturn nil\n\t}\n\n\tsanitizers[enum.PipelinePayloadKind] = func(in *ReportInput, s *auth.Session) error {\n\t\tif in.Pipeline == \"\" {\n\t\t\treturn fmt.Errorf(\"pipeline payload cannot be empty\")\n\t\t}\n\t\treturn nil\n\t}\n\n\treturn sanitizers\n}\n", "CodeBleu_score": 33.31932086307094}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error\tm := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tm[enum.EmptyPayloadKind] = func(in *ReportInput, s *auth.Session) error {\n\t\treturn nil\n\t}\n\n\tm[enum.MarkdownPayloadKind] = func(in *ReportInput, s *auth.Session) error {\n\t\treturn nil\n\t}\n\n\tm[enum.RawPayloadKind] = func(in *ReportInput, s *auth.Session) error {\n\t\treturn nil\n\t}\n\n\tm[enum.PipelinePayloadKind] = func(in *ReportInput, s *auth.Session) error {\n\t\treturn nil\n\t}\n\n\treturn m\n}", "CodeBleu_score": 40.403696039347764}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)    self:set_on_render(on_render)\n    if not self.attached then\n        self.renderer:attach_buffer(self)\n        self.attached = true\n    end\n    return self", "CodeBleu_score": 51.096763194024234}, {"code": "function Buffer:attach_to_renderer(on_render)    if not self.renderer then\n        self.renderer = self.screen.renderer\n    end\n    self.renderer:attach_buffer(self)\n    self.state.on_render = on_render\n    return self", "CodeBleu_score": 49.48917021541097}, {"code": "function Buffer:attach_to_renderer(on_render)  self.state.on_render = on_render\n  if not self.state.attached_to_renderer then\n    self.state.attached_to_renderer = true\n    self.renderer:attach_buffer(self)\n  end\n  return self", "CodeBleu_score": 59.40322049312903}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)  if self.valid then\n    -- Set up a file watcher for the buffer.\n    local watcher = vim.loop.new_fs_event()\n    watcher:start(self.filename, {\n      interval = 100,\n      recursive = false,\n    }, function(err, filename)\n      if err then\n        vim.api.nvim_err_writeln('Error watching buffer: ' .. err)\n        return\n      end\n      -- If the buffer is valid, run the callback function.\n      if self.valid then\n        callback()\n      end\n    end)\n    -- Add the watcher to the buffer.\n    self.watchers[#self.watchers + 1] = watcher\n  end", "CodeBleu_score": 51.62027992274136}, {"code": "function Buffer:watch(callback)  if not self.valid then return end\n  if not callback then return end\n  local filename = self.filename\n  if not filename then return end\n  local handle = vim.loop.new_fs_event()\n  handle:start(filename, {}, vim.schedule_wrap(function()\n    if not self.valid then\n      handle:stop()\n      handle:close()\n      return\n    end\n    if not self.modifiable then\n      handle:stop()\n      handle:close()\n      return\n    end\n    local new_modified = self.modified\n    local new_modifiable = self.modifiable\n    local new_filename = self.filename\n    if new_modified ~= self.modified or new_modifiable ~= self.modifiable or new_filename ~= filename then\n      handle:stop()\n      handle:close()\n      return\n    end\n    local err = pcall(callback)\n    if not err then\n      log.error(\"Error in callback for file watcher: \" .. new_filename)\n    end\n  end))", "CodeBleu_score": 43.93889579665585}, {"code": "function Buffer:watch(callback)    if not self:is_valid() or not callback then\n        return\n    end\n\n    local filename = self.filename\n    local watcher = vim.loop.new_fs_event()\n    watcher:start(filename, {\n        interval = 1000,\n        recursive = false,\n    }, vim.schedule_wrap(function(err, fname)\n        if err then\n            log.error(\"Error watching buffer: \" .. err)\n            return\n        end\n\n        callback(self)\n    end))", "CodeBleu_score": 47.32003772362064}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()  if self.hex then\n    return self.hex\n  end\n\n  local spec = self:get_spec()\n  local attr = spec.fg and 'fg' or 'bg'\n  local color = vim.api.nvim_get_hl_by_name(spec.name, true)[attr]\n\n  if color then\n    self.hex = string.format('#%06x', color)\n  else\n    self.hex = 'NONE'\n  end\n\n  return self.hex", "CodeBleu_score": 55.80292799658254}, {"code": "function Color:to_hex()  if self.hex then return self.hex end\n\n  local spec = self:get_spec()\n  local attr = spec.fg and 'fg' or 'bg'\n  local hex = vim.fn.synIDattr(vim.fn.hlID(spec.name), attr, 'gui')\n\n  if hex then\n    self.hex = hex\n  else\n    local color = self:get_color()\n    if color then\n      self.hex = color.hex\n    end\n  end\n\n  return self.hex", "CodeBleu_score": 54.27460540957332}, {"code": "function Color:to_hex()  if self.hex then return self.hex end\n\n  local spec = self:get_spec()\n  local attr = spec.fg and 'fg' or 'bg'\n\n  local color = self.hl_id and vim.api.nvim_get_hl_by_id(self.hl_id, true)[attr] or spec[attr]\n  if color then\n    self.hex = string.format('#%06x', color)\n    return self.hex\n  else\n    return nil\n  end", "CodeBleu_score": 57.22596708534734}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\tlocal ns = self:get_namespace()\n\tlocal lines = buffer.lines\n\tlocal line_count = #lines\n\tlocal matches = {}\n\tfor i = 0, line_count do\n\t\tlocal line = lines[i]\n\t\tlocal s, e = line:find(pattern)\n\t\tif s and e then\n\t\t\tlocal match = {\n\t\t\t\ts = s,\n\t\t\t\te = e,\n\t\t\t\tline = i,\n\t\t\t}\n\t\t\ttable.insert(matches, match)\n\t\tend\n\tend\n\tfor _, match in ipairs(matches) do\n\t\tbuffer:add_highlight(ns, hl, match.line, match.s, match.e)\n\tend\n\treturn ns", "CodeBleu_score": 49.263717315393386}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)  local namespace = self:get_namespace()\n  local lines = buffer:get_lines(0, -1, false)\n  for i, line in ipairs(lines) do\n    local start_pos, end_pos = line:find(pattern)\n    if start_pos then\n      buffer:add_highlight(namespace, hl, i-1, start_pos-1, end_pos)\n    end\n  end\n  return namespace", "CodeBleu_score": 46.08117869725955}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)    local namespace = buffer.namespace or buffer._namespace\n    if not namespace then return end\n    local lines = buffer:get_lines(0, -1, false)\n    for i, line in ipairs(lines) do\n        local start_pos, end_pos = line:find(pattern)\n        if start_pos then\n            buffer.api.nvim_buf_add_highlight(buffer, namespace, hl, i-1, start_pos-1, end_pos)\n        end\n    end\n    return namespace", "CodeBleu_score": 43.048747795037166}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)    local id = string.format('%d:%d', row, col)\n    local opts = {\n        virt_text = { { text, hl } },\n        virt_text_pos = pos,\n        hl_mode = 'combine',\n        priority = priority,\n    }\n    vim.api.nvim_buf_set_extmark(buffer, self.namespace, row, col, opts)\n    return id", "CodeBleu_score": 65.82535502763005}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)  local id = buffer.id .. \":\" .. row .. \":\" .. col\n  vim.api.nvim_buf_set_extmark(buffer, self.namespace, id, row, col, {\n    virt_text = {{text, hl}},\n    virt_text_pos = pos,\n    priority = priority\n  })\n  return id", "CodeBleu_score": 57.179251364649694}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)    local id = row .. ':' .. col\n    local opts = {\n        virt_text = { { text, hl } },\n        virt_text_pos = pos,\n        hl_mode = 'combine',\n        priority = priority,\n    }\n    vim.api.nvim_buf_set_extmark(buffer, self.namespace, id, row - 1, col - 1, opts)\n    return id", "CodeBleu_score": 68.6197462632945}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)    local line = \"\"\n    for i = 1, #output do\n        local char = output:sub(i, i)\n        if char == \"\\n\" then\n            callback(line)\n            line = \"\"\n        else\n            line = line .. char\n        end\n    end\n    callback(line)", "CodeBleu_score": 46.9141009415601}, {"code": "function Spawn:parse_result(output, callback)    local line = \"\"\n    for i = 1, #output do\n        local c = output:sub(i, i)\n        if c == \"\\n\" then\n            callback(line)\n            line = \"\"\n        else\n            line = line .. c\n        end\n    end\n    if line ~= \"\" then\n        callback(line)\n    end", "CodeBleu_score": 46.0570708329338}, {"code": "function Spawn:parse_result(output, callback)    local line = \"\"\n    for i = 1, #output do\n        local char = output:sub(i, i)\n        if char == \"\\n\" then\n            callback(line)\n            line = \"\"\n        else\n            line = line .. char\n        end\n    end\n    callback(line)", "CodeBleu_score": 46.9141009415601}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)  local watcher = self.watchers[path]\n  if watcher then return watcher end\n\n  watcher = uv.new_fs_event()\n  watcher:start(path, {\n    recursive = true,\n    stat = true,\n  }, vim.schedule_wrap(handler))\n\n  self.watchers[path] = watcher\n  return watcher", "CodeBleu_score": 44.81948164635347}, {"code": "function Watcher:watch_file(path, handler)    local watcher = self.watchers[path]\n    if watcher then\n        return watcher\n    end\n\n    watcher = self.loop:new_fs_event()\n    watcher:start(path, {\n        on_changed = handler,\n        on_created = handler,\n        on_deleted = handler,\n        on_moved_from = handler,\n        on_moved_to = handler,\n        on_modified = handler,\n        on_renamed = handler,\n    }, 1000)\n    self.watchers[path] = watcher\n    return watcher", "CodeBleu_score": 39.580567402720376}, {"code": "function Watcher:watch_file(path, handler)    local watcher = self.watchers[path]\n    if watcher then\n        return watcher\n    end\n    watcher = FileWatcher:new(path, handler)\n    self.watchers[path] = watcher\n    return watcher", "CodeBleu_score": 39.98648819448041}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()    local buffer_lines = self.buffer:get_lines(0, -1, false)\n    local hunks, err = self.git_object:hunks(buffer_lines)\n    if err then return err end\n    self.hunks = hunks\n    self.buffer:clear_signs()\n    local sign_ids = {}\n    for _, hunk in ipairs(hunks) do\n        for _, line in ipairs(hunk.lines) do\n            local sign_id = self.buffer:place_sign(line, {\n                priority = 100,\n                text = line.type,\n            })\n            table.insert(sign_ids, sign_id)\n        end\n    end\n    self.sign_ids = sign_ids\n    return hunks", "CodeBleu_score": 39.915273585261744}, {"code": "function GitBuffer:live_hunks()    -- Get the buffer lines\n    local lines = self.buffer:get_lines(0, -1, false)\n\n    -- Calculate the hunks\n    local hunks = self.git:hunks(lines)\n\n    -- If there's an error, return it\n    if type(hunks) == \"string\" then\n        return hunks\n    end\n\n    -- Set up signs for each line in the hunks\n    local signs = {}\n    for _, hunk in ipairs(hunks) do\n        for i = hunk.start, hunk.vend do\n            -- Create the sign\n            local sign = {\n                id = \"GitGutter\" .. self.buffer.bufnr .. i,\n                name = \"GitGutter\" .. hunk.type,\n                lnum = i + 1,\n                priority = self.config.sign_priority[hunk.type]\n            }\n\n            -- Add the sign to the signs\n            signs[#signs + 1] = sign\n        end\n    end\n\n    -- Update the buffer's signs\n    self.buffer:update_signs(self.config.namespace, signs)\n\n    -- Return the hunks\n    return hunks", "CodeBleu_score": 40.77935696864137}, {"code": "function GitBuffer:live_hunks()    local bufnr = self.bufnr\n    local git_obj = self.git_obj\n    local lines = vim.api.nvim_buf_get_lines(bufnr, 0, -1, false)\n    local hunks, err = git_obj:run_diff(lines, {cached = true})\n    if err then return err end\n\n    self:update_signs(hunks)\n    return hunks", "CodeBleu_score": 20.116190213388357}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)    local temp_file = fs.tmpname()\n    local temp_file_handle = io.open(temp_file, \"w\")\n    temp_file_handle:write(patch)\n    temp_file_handle:close()\n    local success, err = self:stage_hunk_from_file(temp_file)\n    fs.remove(temp_file)\n    return success, err", "CodeBleu_score": 48.638884555017405}, {"code": "function GitObject:stage_hunk_from_patch(patch)  local temp_file = os.tmpname()\n  local file = io.open(temp_file, \"w\")\n  file:write(patch)\n  file:close()\n  local success, err = self:stage_hunk_from_file(temp_file)\n  os.remove(temp_file)\n  return success, err", "CodeBleu_score": 47.03318840713786}, {"code": "function GitObject:stage_hunk_from_patch(patch)    local tmp_file = os.tmpname()\n    local file = io.open(tmp_file, \"w\")\n    file:write(patch)\n    file:close()\n\n    local _, err = self.repo:command({\"apply\", \"--cached\", \"--unidiff-zero\", \"-\", tmp_file})\n    os.remove(tmp_file)\n    return err", "CodeBleu_score": 45.822540782902244}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier)    // Create a new OAuthRequest to access the access token endpoint\n    OAuthRequest request = new OAuthRequest(Verb.POST, api.getAccessTokenEndpoint());\n    // Set the OAuth consumer key and secret\n    request.addOAuthParameter(OAuthConstants.CONSUMER_KEY, api.getApiKey());\n    request.addOAuthParameter(OAuthConstants.CONSUMER_SECRET, api.getApiSecret());\n    // Set the OAuth token and token secret\n    request.addOAuthParameter(OAuthConstants.TOKEN, requestToken.getToken());\n    request.addOAuthParameter(OAuthConstants.TOKEN_SECRET, requestToken.getSecret());\n    // Set the OAuth verifier code\n    request.addOAuthParameter(OAuthConstants.VERIFIER, verifier.getValue());\n    // Set the OAuth callback, if available\n    if (callback != null) {\n        request.addOAuthParameter(OAuthConstants.CALLBACK, callback.toString());\n    }\n    // Set the OAuth signature method to HMAC-SHA1\n    request.addOAuthParameter(OAuthConstants.SIGNATURE_METHOD, OAuthConstants.HMAC_SHA1);\n    // Set the OAuth version\n    request.addOAuthParameter(OAuthConstants.VERSION, OAuthConstants.VERSION_1_0);\n    // Set the timestamp and nonce\n    request.addOAuthParameter(OAuthConstants.TIMESTAMP, api.getTimestampService().getTimestampInSeconds());\n    request.addOAuthParameter(OAuthConstants.NONCE, api.getTimestampService().getNonce());\n    // Sign the request\n    service.signRequest(request);\n    // Send the request\n    Response response = request.send();\n    // Get the access token from the response\n    return api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 54.30720717389265}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier)    OAuthRequest request = new OAuthRequest(Verb.POST, accessTokenEndpoint);\n    request.addBodyParameter(OAuthConstants.TOKEN, requestToken.getToken());\n    request.addBodyParameter(OAuthConstants.VERIFIER, verifier.getValue());\n    request.addBodyParameter(OAuthConstants.CONSUMER_KEY, consumerKey);\n    request.addBodyParameter(OAuthConstants.SIGNATURE_METHOD, \"HMAC-SHA1\");\n    request.addBodyParameter(OAuthConstants.TIMESTAMP, OAuthEncoder.encode(String.valueOf(System.currentTimeMillis() / 1000L)));\n    request.addBodyParameter(OAuthConstants.NONCE, OAuthEncoder.encode(UUID.randomUUID().toString()));\n    request.addBodyParameter(OAuthConstants.VERSION, \"1.0\");\n    request.addHeader(OAuthConstants.HEADER, oauthHeader);\n    Response response = request.send();\n    return accessTokenExtractor.extract(response.getBody());\n}", "CodeBleu_score": 47.64070294268619}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier)    OAuthRequest request = new OAuthRequest(Verb.POST, accessTokenEndpoint);\n    request.addBodyParameter(OAuthConstants.TOKEN, requestToken.getToken());\n    request.addBodyParameter(OAuthConstants.VERIFIER, verifier.getValue());\n    request.addBodyParameter(OAuthConstants.TIMESTAMP, OAuthEncoder.encode(String.valueOf(System.currentTimeMillis() / 1000)));\n    request.addBodyParameter(OAuthConstants.NONCE, OAuthEncoder.encode(UUID.randomUUID().toString()));\n    ServiceProvider serviceProvider = getServiceProvider();\n    request.addHeader(OAuthConstants.HEADER, serviceProvider.getAuthorizationHeader(getConsumer(), requestToken, verifier));\n    Response response = request.send();\n    return serviceProvider.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 51.652492277715325}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host)    CredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(\n            new AuthScope(host.getHostName(), host.getPort()),\n            new UsernamePasswordCredentials(this.username, this.password));\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n    context.setCredentialsProvider(credsProvider);\n    context.setAuthCache(authCache);\n    LOGGER.info(\"Added host to auth cache: \" + host.toURI());\n}", "CodeBleu_score": 55.276485058313}, {"code": "public void configureContext(HttpClientContext context, HttpHost host)    CredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(\n            new AuthScope(host.getHostName(), host.getPort()),\n            new UsernamePasswordCredentials(username, password));\n    context.setCredentialsProvider(credsProvider);\n    AuthCache authCache = new BasicAuthCache();\n    BasicScheme basicAuth = new BasicScheme();\n    authCache.put(host, basicAuth);\n    context.setAuthCache(authCache);\n    log.debug(\"Added host {} to authentication cache.\", host);\n}", "CodeBleu_score": 56.43425570540719}, {"code": "public void configureContext(HttpClientContext context, HttpHost host)    CredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(\n            new AuthScope(host.getHostName(), host.getPort()),\n            new UsernamePasswordCredentials(user, pass));\n    AuthCache authCache = new BasicAuthCache();\n    BasicScheme basicAuth = new BasicScheme();\n    authCache.put(host, basicAuth);\n    context.setCredentialsProvider(credsProvider);\n    context.setAuthCache(authCache);\n    log.debug(\"Added host to authentication cache: \" + host);\n}", "CodeBleu_score": 59.84146484386622}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size)    Jenkins jenkins = Jenkins.getInstance();\n    AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache is not configured\");\n    }\n    String key = cache.getKey(source);\n    cache.seed(key);\n    String url = String.format(\"%s/avatar/%s/%s\", jenkins.getRootUrl(), URLEncoder.encode(key, \"UTF-8\"), size);\n    return url;\n}", "CodeBleu_score": 44.82622419307872}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size)    Jenkins jenkins = Jenkins.getInstance();\n    AvatarCache avatarCache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (avatarCache == null) {\n        throw new IllegalStateException(\"AvatarCache is null\");\n    }\n    String key = source.getKey();\n    avatarCache.seed(key);\n    try {\n        String encodedKey = URLEncoder.encode(key, \"UTF-8\");\n        return jenkins.getRootUrl() + \"avatar/\" + encodedKey + \"/\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(e);\n    }\n}", "CodeBleu_score": 50.31060346061713}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size)    Jenkins jenkins = Jenkins.getInstance();\n    AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"No AvatarCache instance found.\");\n    }\n    String key = cache.generateKey(source);\n    cache.seed(key);\n    String encodedKey = null;\n    try {\n        encodedKey = URLEncoder.encode(key, \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding is unsupported.\");\n    }\n    return jenkins.getRootUrl() + \"avatar/\" + encodedKey + \"/\" + size;\n}", "CodeBleu_score": 52.229554985218016}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified)    this.source = source;\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n    if (image.getHeight() > 128 || image.getWidth() > 128) {\n        // Scale down the image to limit storage size\n        int width = image.getWidth() > 128 ? 128 : image.getWidth();\n        int height = image.getHeight() > 128 ? 128 : image.getHeight();\n        BufferedImage scaledImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n        Graphics2D g = scaledImage.createGraphics();\n        g.drawImage(image, 0, 0, width, height, null);\n        g.dispose();\n        this.image = scaledImage;\n    } else {\n        this.image = image;\n    }\n}\n", "CodeBleu_score": 60.294339791230136}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified)    this.source = source;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        BufferedImage scaledImage = new BufferedImage(128, 128, BufferedImage.TYPE_INT_ARGB);\n        Graphics2D g = scaledImage.createGraphics();\n        g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);\n        g.drawImage(image, 0, 0, 128, 128, null);\n        g.dispose();\n        this.image = scaledImage;\n    } else {\n        this.image = image;\n    }\n    if (lastModified < 0) {\n        this.lastModified = System.currentTimeMillis();\n    } else {\n        this.lastModified = lastModified;\n    }\n}\n", "CodeBleu_score": 48.082215341156164}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified)    this.source = source;\n    this.lastModified = lastModified;\n    if (image != null) {\n        int width = image.getWidth();\n        int height = image.getHeight();\n        if (width > 128 || height > 128) {\n            float scale = Math.min((float) 128 / width, (float) 128 / height);\n            int scaledWidth = Math.round(scale * width);\n            int scaledHeight = Math.round(scale * height);\n            BufferedImage scaledImage = new BufferedImage(scaledWidth, scaledHeight, BufferedImage.TYPE_INT_ARGB);\n            Graphics2D graphics = scaledImage.createGraphics();\n            graphics.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);\n            graphics.drawImage(image, 0, 0, scaledWidth, scaledHeight, null);\n            graphics.dispose();\n            this.image = scaledImage;\n        } else {\n            this.image = image;\n        }\n    }\n}", "CodeBleu_score": 42.468101096063926}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending()    if (future == null) {\n        return false;\n    }\n    try {\n        entry = future.get();\n        future = null;\n        image = entry.getImage();\n        lastModified = entry.getLastModified();\n        return false;\n    } catch (InterruptedException | ExecutionException e) {\n        return true;\n    }\n}", "CodeBleu_score": 40.724506411165656}, {"code": "private synchronized boolean pending()    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            entry = future.get();\n            image = entry.getImage();\n            lastModified = entry.getLastModified();\n            future = null;\n        } catch (Exception e) {\n            future = null;\n            return true;\n        }\n    }\n    return true;\n}", "CodeBleu_score": 51.10784661189744}, {"code": "private synchronized boolean pending()    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            Image image = future.get();\n            imageView.setImage(image);\n            lastModified = image.getLastModified();\n        } catch (InterruptedException | ExecutionException e) {\n            e.printStackTrace();\n        }\n        future = null;\n    }\n    return true;\n}", "CodeBleu_score": 50.62568155568074}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writeImage(baos, req, node);\n    baos.flush();\n    byte[] image = baos.toByteArray();\n    rsp.setContentType(\"image/png\");\n    // Expires very soon.\n    rsp.addHeader(\"Expires\", \"0\");\n    // Set the cache to private, proxies shouldn't cache it. RFC 2616, 14.9.1:\n    // \"What is prevented from being cached are the indicated headers ...\"\n    // RFC 2616, 14.9.1: \"private\" response directive: \"indicates that the\n    // response message is intended for a single user and MUST NOT be cached\n    // by a shared cache.\"\n    rsp.addHeader(\"Cache-Control\", \"max-age=0, private\");\n    rsp.setContentLength(image.length);\n    OutputStream os = rsp.getOutputStream();\n    os.write(image);\n    os.flush();\n}", "CodeBleu_score": 54.00885606420487}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException    rsp.setContentType(\"image/png\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    try {\n        ImageIO.write(generateImage(req, node), \"png\", baos);\n    } catch (InterruptedException e) {\n        throw new ServletException(e);\n    }\n    rsp.addHeader(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n    rsp.addHeader(\"Expires\", \"0\");\n    rsp.addHeader(\"Pragma\", \"no-cache\");\n    rsp.setContentLength(baos.size());\n    if (baos.size() < 1024) {\n        rsp.getOutputStream().write(baos.toByteArray());\n    } else {\n        baos.writeTo(rsp.getOutputStream());\n    }\n}", "CodeBleu_score": 42.14721803945021}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException    // TODO: implement this method\n}", "CodeBleu_score": 9.478136605751839}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator)    this.enableCache = enableCache;\n    this.teamCacheDuration = teamCacheDuration;\n    this.repositoriesCacheDuration = repositoriesCacheDuration;\n    this.owner = owner;\n    this.projectKey = projectKey;\n    this.repositoryName = repositoryName;\n    this.authenticator = authenticator;\n\n    if (enableCache) {\n        // Set up cache expiration for team and repositories\n        CacheConfig cacheConfig = CacheConfig.custom().setMaxCacheEntries(100).setExpireAfterWrite(teamCacheDuration,\n                        TimeUnit.SECONDS).build();\n        teamCache = CacheBuilder.from(cacheConfig).build();\n        cacheConfig = CacheConfig.custom().setMaxCacheEntries(100).setExpireAfterWrite(repositoriesCacheDuration,\n                        TimeUnit.SECONDS).build();\n        repositoriesCache = CacheBuilder.from(cacheConfig).build();\n    }\n\n    // Set up HTTP client with keep-alive strategy, connection manager, and retry handler\n    PoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager();\n    cm.setMaxTotal(200);\n    cm.setDefaultMaxPerRoute(20);\n\n    // Set up HTTP client with keep-alive strategy, connection manager, and retry handler\n    RequestConfig requestConfig = RequestConfig.custom().setSocketTimeout(5000).setConnectTimeout(5000)\n                    .setConnectionRequestTimeout(5000).build();\n\n    HttpClientBuilder clientBuilder = HttpClientBuilder.create().setDefaultRequestConfig(requestConfig)\n                    .setConnectionManager(cm).setKeepAliveStrategy(new DefaultConnectionKeepAliveStrategy())\n                    .setRetryHandler(new DefaultHttpRequestRetryHandler(3, true));\n\n    // Set up authentication if provided\n    if (authenticator != null) {\n        clientBuilder.setDefaultCredentialsProvider(authenticator.getCredentialsProvider());\n        authenticator.configureHttpClient(clientBuilder);\n    }\n\n    // Set up proxy if provided\n    if (authenticator != null && authenticator.getProxy() != null) {\n        clientBuilder.setProxy(authenticator.getProxy());", "CodeBleu_score": 43.03421283570333}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator)    this.enableCache = enableCache;\n    this.teamCacheDuration = teamCacheDuration;\n    this.repositoriesCacheDuration = repositoriesCacheDuration;\n    this.owner = owner;\n    this.projectKey = projectKey;\n    this.repositoryName = repositoryName;\n    this.authenticator = authenticator;\n\n    // Set up the HTTP client\n    PoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager();\n    cm.setMaxTotal(200);\n    cm.setDefaultMaxPerRoute(20);\n    RequestConfig requestConfig = RequestConfig.custom().setConnectTimeout(10 * 1000)\n            .setSocketTimeout(60 * 1000).build();\n    HttpClientBuilder clientBuilder = HttpClientBuilder.create().setDefaultRequestConfig(requestConfig)\n            .setConnectionManager(cm).setKeepAliveStrategy(new DefaultConnectionKeepAliveStrategy())\n            .setRetryHandler(new DefaultHttpRequestRetryHandler(3, true));\n\n    // Set up proxy if configured\n    if (authenticator != null) {\n        authenticator.configureHttpClient(clientBuilder);\n    }\n\n    this.httpClient = clientBuilder.build();\n}", "CodeBleu_score": 46.32175082072796}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator)    this.enableCache = enableCache;\n    this.teamCacheDuration = teamCacheDuration;\n    this.repositoriesCacheDuration = repositoriesCacheDuration;\n    this.owner = owner;\n    this.projectKey = projectKey;\n    this.repositoryName = repositoryName;\n\n    if (enableCache) {\n        this.teamCache = CacheBuilder.newBuilder().expireAfterWrite(teamCacheDuration, TimeUnit.MINUTES).build();\n        this.repositoriesCache = CacheBuilder.newBuilder().expireAfterWrite(repositoriesCacheDuration, TimeUnit.MINUTES).build();\n    }\n\n    // Set up proxy\n    HttpHost proxy = new HttpHost(proxyHost, proxyPort);\n    DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);\n\n    // Set up connection manager\n    PoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager();\n    cm.setMaxTotal(200);\n\n    // Set up retry handler\n    RequestConfig config = RequestConfig.custom().setConnectTimeout(5000).setConnectionRequestTimeout(5000)\n            .setSocketTimeout(5000).build();\n\n    // Set up client\n    httpClient = HttpClients.custom().setConnectionManager(cm).setDefaultRequestConfig(config)\n            .setRoutePlanner(routePlanner).build();\n\n    // Set up context\n    context = HttpClientContext.create();\n\n    // Set up authentication\n    if (authenticator != null) {\n        authenticator.configureHttpClient(httpClient, context);\n    }\n}", "CodeBleu_score": 48.75109639129391}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest)  def sourceBranch = pullRequest.sourceBranch\n  if (sourceBranch) {\n    def sourceBranchClosure = getCommitClosure(sourceBranch.rawNode)\n    if (sourceBranchClosure) {\n      sourceBranch.setClosure(sourceBranchClosure)\n    }\n  }\n\n  def destinationBranch = pullRequest.destinationBranch\n  if (destinationBranch) {\n    def destinationBranchClosure = getCommitClosure(destinationBranch.rawNode)\n    if (destinationBranchClosure) {\n      destinationBranch.setClosure(destinationBranchClosure)\n    }\n  }\n}\n", "CodeBleu_score": 27.679792296653865}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest)    // Get the source branch\n    BitbucketBranchValue sourceBranch = pullRequest.getSourceBranch()\n    // Get the destination branch\n    BitbucketBranchValue destinationBranch = pullRequest.getDestinationBranch()\n\n    // If the source branch exists, set up a closure for it\n    if (sourceBranch) {\n        sourceBranch.setCommitClosure(this.&getCommitClosure)\n    }\n\n    // If the destination branch exists, set up a closure for it\n    if (destinationBranch) {\n        destinationBranch.setCommitClosure(this.&getCommitClosure)\n    }\n}\n", "CodeBleu_score": 32.75671981753489}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest)  def sourceBranch = pullRequest.source.branch.name\n  def sourceBranchNode = getBranchNode(sourceBranch)\n  if (sourceBranchNode) {\n    def sourceBranchClosure = new CommitClosure(sourceBranchNode)\n    sourceBranchClosure.setup()\n  }\n\n  def destinationBranch = pullRequest.destination.branch.name\n  def destinationBranchNode = getBranchNode(destinationBranch)\n  if (destinationBranchNode) {\n    def destinationBranchClosure = new CommitClosure(destinationBranchNode)\n    destinationBranchClosure.setup()\n  }\n}\n", "CodeBleu_score": 28.586528176986604}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build)    JenkinsLocationConfiguration globalConfig = JenkinsLocationConfiguration.get();\n    if (globalConfig == null) {\n        throw new IllegalStateException(\"JenkinsLocationConfiguration is null. Cannot retrieve root URL.\");\n    }\n    String url = globalConfig.getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\"Jenkins URL is null. Cannot retrieve root URL.\");\n    }\n    return DisplayURLProvider.get().getRoot();\n}", "CodeBleu_score": 50.77373829933918}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build)    JenkinsLocationConfiguration globalConfig = JenkinsLocationConfiguration.get();\n    String rootUrl = globalConfig.getUrl();\n    if (rootUrl == null) {\n        throw new IllegalStateException(\"Jenkins root URL is not configured. Cannot generate absolute URL.\");\n    }\n    return DisplayURLProvider.get().getRoot();\n}\n", "CodeBleu_score": 54.35473849009228}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build)    JenkinsLocationConfiguration config = JenkinsLocationConfiguration.get();\n    URL jenkinsURL = config.getUrl();\n    if (config == null || jenkinsURL == null) {\n        throw new IllegalStateException(\"Jenkins URL is not configured\");\n    }\n    return DisplayURLProvider.get().getRoot();\n}", "CodeBleu_score": 56.794022874373496}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket)     try {\n        URI uri = new URI(url)\n        String host = uri.getHost()\n        if (host == null || host.isEmpty()) {\n            throw new IllegalStateException(\"The Jenkins URL is malformed. It does not contain a host.\")\n        }\n        if (host.equals(\"localhost\") || host.equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"The Jenkins URL must not contain \\\"localhost\\\" or \\\"unconfigured-jenkins-location\\\".\")\n        }\n        if (bitbucket.isCloud() && !host.contains(\".\")) {\n            throw new IllegalStateException(\"The Jenkins URL must be fully qualified. It must contain a dot ('.').\")\n        }\n        return url\n    } catch (URISyntaxException e) {\n        throw new IllegalStateException(\"The Jenkins URL is malformed. It is not a valid URL.\", e)\n    }\n}\n", "CodeBleu_score": 48.62067234780425}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket)     try {\n        def urlObj = new URL(url)\n        if (bitbucket.isBitbucketCloud()) {\n            if (!urlObj.getHost().contains(\".\")) {\n                throw new IllegalStateException(\"Bitbucket Cloud API clients must use a fully qualified domain name (FQDN) as the host. Please update your Jenkins URL to use a FQDN.\")\n            }\n        }\n        if (urlObj.getHost().equals(\"localhost\") || urlObj.getHost().equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"Jenkins URL cannot use 'localhost' or 'unconfigured-jenkins-location' as the host. Please update your Jenkins URL to use a valid hostname.\")\n        }\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"Jenkins URL is malformed. Please update your Jenkins URL to be a valid URL.\")\n    }\n}\n", "CodeBleu_score": 52.77888324283156}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket)     if (bitbucket instanceof BitbucketCloudApi) {\n        try {\n            URL parsedURL = new URL(url);\n            if (parsedURL.getHost().contains(\"localhost\") || parsedURL.getHost().contains(\"unconfigured-jenkins-location\")) {\n                throw new IllegalStateException(\"The Jenkins URL must not contain localhost or unconfigured-jenkins-location.\")\n            }\n            if (!parsedURL.getHost().contains(\".\")) {\n                throw new IllegalStateException(\"The Jenkins URL must be fully qualified.\")\n            }\n        } catch (MalformedURLException e) {\n            throw new IllegalStateException(\"The Jenkins URL is malformed.\")\n        }\n    }\n    return url\n}\n", "CodeBleu_score": 49.90779772546259}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException    BitbucketSCMContext context = new BitbucketSCMContext(source, build, listener);\n    if (context.isNotificationsDisabled()) {\n        listener.getLogger().println(\"Notifications are disabled, skipping\");\n        return;\n    }\n    SCMRevision revision = build.getAction(SCMRevisionAction.class).getRevision();\n    String revisionType = revision.getType();\n    listener.getLogger().println(\"Revision type: \" + revisionType);\n    String hash = revision.getHash();\n    listener.getLogger().println(\"Revision hash: \" + hash);\n    boolean shareBuildStatus = context.isShareBuildStatusBetweenBranchAndPR();\n    String buildKey = getBuildKey(context, revisionType, shareBuildStatus);\n    listener.getLogger().println(\"Build key: \" + buildKey);\n    BitbucketClient client = context.getBitbucketClient();\n    client.sendBuildStatusNotification(buildKey, hash, context.getBuildStatus());\n}\n", "CodeBleu_score": 30.702133963761902}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException    // Initialize the Bitbucket context\n    BitbucketSCMContext context = new BitbucketSCMContext(build, listener);\n\n    // Check if notifications are disabled\n    if (context.notificationsDisabled()) {\n        listener.getLogger().println(\"Bitbucket SCM: Notifications are disabled. Skipping notification.\");\n        return;\n    }\n\n    // Retrieve the SCM revision\n    SCMRevision revision = context.getRevision();\n    if (revision == null) {\n        listener.getLogger().println(\"Bitbucket SCM: Unable to retrieve the revision. Skipping notification.\");\n        return;\n    }\n\n    // Retrieve the hash\n    String hash = revision.getHash();\n    if (hash == null) {\n        listener.getLogger().println(\"Bitbucket SCM: Unable to retrieve the hash. Skipping notification.\");\n        return;\n    }\n\n    // Determine whether to share the build key between branch and PR\n    boolean shareBuildKey = context.shareBuildKey();\n\n    // Log the notification type\n    listener.getLogger().println(String.format(\"Bitbucket SCM: Sending %s notification.\", shareBuildKey ? \"branch and PR\" : \"branch\"));\n\n    // Construct the build key\n    String buildKey = shareBuildKey ? context.getBuildKey() : context.getBuildKey() + \"-\" + context.getBranchName();\n\n    // Initialize the Bitbucket client\n    BitbucketClient client = new BitbucketClient(context.getCredentialsId(), context.getBaseUrl(), context.getOwner(), context.getRepository(), context.getProjectName());\n\n    // Create and send the build status notification\n    client.sendBuildStatusNotification(hash, buildKey, context.getBuildState(), context.getBuildUrl(), context.getBuildName());\n}", "CodeBleu_score": 39.681393439943825}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException    BitbucketBuildStatusNotificationContext context = new BitbucketBuildStatusNotificationContext(source, build, listener);\n    if (!context.shouldNotify()) {\n        return;\n    }\n\n    SCMRevision revision = context.getRevision();\n    String hash = revision.getHash();\n    String revisionType = revision.getType();\n    listener.getLogger().println(\"Sending Bitbucket build status notification for \" + revisionType + \" \" + hash);\n\n    String buildKey = context.getBuildKey();\n    BitbucketClient client = context.getClient();\n    client.sendBuildStatusNotification(buildKey, context.getBuildState());\n}", "CodeBleu_score": 22.198744362021916}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR)    String buildKey = null\n    if (shareBuildKeyBetweenBranchAndPR) {\n        buildKey = build.getParent().getFullName() + \"_\" + branch\n    } else {\n        buildKey = build.getParent().getFullDisplayName()\n    }\n    return buildKey\n}\n", "CodeBleu_score": 43.26842884653419}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR)    String buildKey = build.getParent().getFullName()\n    if (shareBuildKeyBetweenBranchAndPR) {\n        buildKey = build.getParent().getParent().getFullName() + '/' + branch\n    }\n    return buildKey\n}\n", "CodeBleu_score": 40.36405452613327}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR)    String buildKey = null;\n    if (shareBuildKeyBetweenBranchAndPR) {\n        String jobName = build.getParent().getFullName();\n        String folderName = \"\";\n        if (jobName.contains(\"/\")) {\n            folderName = jobName.substring(0, jobName.lastIndexOf(\"/\"));\n        }\n        buildKey = folderName + \"/\" + branch;\n    } else {\n        buildKey = build.getParent().getFullName();\n    }\n    return buildKey;\n}\n", "CodeBleu_score": 56.99471560838687}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException    if (serverUrl == null) {\n        serverUrl = BitbucketScmHelper.getServerUrl(credentialsId, serverName)\n    }\n    if (traits == null) {\n        traits = [new BitbucketSCMSourceTrait(traitPattern)]\n        if (traitExclude) {\n            traits << new BitbucketSCMSourceTrait(traitExclude)\n        }\n        if (traitRegex) {\n            traits << new BitbucketSCMSourceTrait(traitRegex)\n        }\n        if (traitDiscoverDescription) {\n            traits << new BitbucketSCMSourceTrait(traitDiscoverDescription)\n        }\n        if (traitDiscoverChangeRequests) {\n            traits << new BitbucketSCMSourceTrait(traitDiscoverChangeRequests)\n        }\n        if (traitDiscoverPRFromOrigin) {\n            traits << new BitbucketSCMSourceTrait(traitDiscoverPRFromOrigin)\n        }\n        if (traitDiscoverPRFromForks) {\n            traits << new BitbucketSCMSourceTrait(traitDiscoverPRFromForks)\n        }\n        if (traitDiscoverPRFromForksStrict) {\n            traits << new BitbucketSCMSourceTrait(traitDiscoverPRFromForksStrict)\n        }\n        if (traitSkipNotifications) {\n            traits << new BitbucketSCMSourceTrait(traitSkipNotifications)\n        }\n        if (traitSkipPRs) {\n            traits << new BitbucketSCMSourceTrait(traitSkipPRs)\n        }\n        if (traitSkipBehind) {\n            traits << new BitbucketSCMSourceTrait(traitSkipBehind)\n        }\n        if (traitForkPRStrict) {\n            traits << new BitbucketSCMSourceTrait(traitForkPRStrict)\n        }\n        if (traitForkPRStrictUseMain) {\n            traits << new BitbucketSCMSourceTrait(traitForkPRStrictUseMain)", "CodeBleu_score": 29.968456072848344}, {"code": "private Object readResolve() throws ObjectStreamException    if (serverUrl == null) {\n        serverUrl = getBitbucketServer().getServerUrl()\n    }\n\n    if (traits == null) {\n        traits = [new BitbucketSCMSourceTrait(include: true, exclude: false), new ForkPullRequestDiscoveryTrait(strategyId: 1, trust: BitbucketSCMSourceContext.TrustPermissions.TRUST_PERMISSIONS_PR_AUTHOR)]\n        log.warning(\"\"\"\n            The BitbucketSCMNavigator object has been deserialized with a null traits list.\n            This is likely due to an upgrade from a version of the plugin prior to 2.2.0.\n            The traits list will be reconstructed to reflect the legacy behavior of the BitbucketSCMNavigator.\n            Please update your job configuration to remove the legacy traits and replace them with the new traits.\n            \"\"\")\n    }\n\n    return this\n}", "CodeBleu_score": 19.322029215726225}, {"code": "private Object readResolve() throws ObjectStreamException    if (serverUrl == null) {\n        serverUrl = BitbucketSCMSource.DescriptorImpl.getServerUrl(credentialsId)\n    }\n    if (traits == null) {\n        traits = [new BitbucketSCMSourceTrait(trait: 'com.cloudbees.jenkins.plugins.bitbucket.BranchDiscoveryTrait'), new BitbucketSCMSourceTrait(trait: 'com.cloudbees.jenkins.plugins.bitbucket.OriginPullRequestDiscoveryTrait'), new BitbucketSCMSourceTrait(trait: 'com.cloudbees.jenkins.plugins.bitbucket.ForkPullRequestDiscoveryTrait')]\n    }\n    return this\n}", "CodeBleu_score": 16.501390196204586}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch)    Repository repository = bitbucket.getRepository(name);\n    String message = isMatch ? \"Proposed: \" : \"Ignored: \";\n    echo(message + repository.getSlug());\n    if (isMatch) {\n        proposedCount++;\n    }\n}", "CodeBleu_score": 42.623838985716546}, {"code": "public void record(@NonNull String name, boolean isMatch)    def repository = bitbucket.getRepository(name)\n    if (isMatch) {\n        logger.info(\"Proposing ${repository.name} (${repository.slug})\")\n        proposedCount++\n    } else {\n        logger.info(\"Ignoring ${repository.name} (${repository.slug})\")\n    }\n}\n", "CodeBleu_score": 40.398429838829074}, {"code": "public void record(@NonNull String name, boolean isMatch)    BitbucketRepository repository = getRepository(name)\n    if (isMatch) {\n        logger.info(\"Repository ${repository.name} is proposed.\")\n        count++\n    } else {\n        logger.info(\"Repository ${repository.name} is ignored.\")\n    }\n}\n", "CodeBleu_score": 36.539745311170414}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException    listener.getLogger().println(\"Decorating revision to build: \" + rev.toString());\n    String remote = scm.getUserRemoteConfigs()[0].getUrl();\n    String branch = rev.getBranches().iterator().next().getName();\n    listener.getLogger().println(\"Checking if branch \" + branch + \" exists locally\");\n    try {\n        git.revParse(branch);\n        listener.getLogger().println(\"Branch \" + branch + \" exists locally\");\n        return rev;\n    } catch (GitException e) {\n        listener.getLogger().println(\"Branch \" + branch + \" doesn't exist locally\");\n    }\n    listener.getLogger().println(\"Checking if branch \" + branch + \" exists remotely\");\n    try {\n        git.lsRemote(remote, branch);\n        listener.getLogger().println(\"Branch \" + branch + \" exists remotely\");\n        return rev;\n    } catch (GitException e) {\n        listener.getLogger().println(\"Branch \" + branch + \" doesn't exist remotely\");\n    }\n    listener.getLogger().println(\"Checking if revision \" + rev.getSha1String() + \" exists locally\");\n    try {\n        git.revParse(rev.getSha1String());\n        listener.getLogger().println(\"Revision \" + rev.getSha1String() + \" exists locally\");\n        return rev;\n    } catch (GitException e) {\n        listener.getLogger().println(\"Revision \" + rev.getSha1String() + \" doesn't exist locally\");\n    }\n    listener.getLogger().println(\"Checking if revision \" + rev.getSha1String() + \" exists remotely\");\n    try {\n        git.lsRemote(remote, rev.getSha1String());\n        listener.getLogger().println(\"Revision \" + rev.getSha1String() + \" exists remotely\");\n        return rev;\n    } catch (GitException e) {\n        listener.getLogger().println(\"Revision \" + rev.getSha1String() + \" doesn't exist remotely\");\n    }\n    listener.getLogger().println(\"Fetching", "CodeBleu_score": 32.250598282269664}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException\n    listener.getLogger().println(\"Decorating revision to build: \" + rev);\n\n    // If the revision is a branch, check if it exists locally.\n    // If not, create a RefSpec for it.\n    if (rev instanceof Branch) {\n        Branch branch = (Branch) rev;\n        if (!git.getBranches().containsName(branch.getName())) {\n            listener.getLogger().println(\"Branch \" + branch.getName() + \" doesn't exist locally, creating RefSpec for it.\");\n            scm.getExtensions().add(new RefSpecsSCMExtension(null, new RefSpec(\"+refs/heads/\" + branch.getName() + \":refs/remotes/origin/\" + branch.getName())));\n        }\n    }\n\n    // If there are RefSpecs, fetch the missing commits.\n    if (!scm.getExtensions().isEmpty()) {\n        listener.getLogger().println(\"Fetching missing commits.\");\n        scm.getExtensions().add(new LocalBranchSCMExtension());\n        scm.getExtensions().add(new PreBuildMergeSCMExtension(null, null, null, null, null, null, null, null));\n        scm.getExtensions().add(new UserIdentitySCMExtension(build.getParent().getScm().getUserRemoteConfigs()[0].getCredentialsId()));\n        scm.getExtensions().add(new WipeWorkspaceSCMExtension());\n        scm.getExtensions().add(new CleanCheckoutSCMExtension());\n        scm.getExtensions().add(new CleanBeforeCheckoutSCMExtension());\n        scm.getExtensions().add(new CleanAfterCheckoutSCMExtension());\n        scm.getExtensions().add(new CleanUpSubmoduleWorkspaceSCMExtension());\n        scm.getExtensions().add(new PruneStaleBranchSCMExtension());\n        scm.getExtensions().add(new CloneOptionSCMExtension(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null", "CodeBleu_score": 22.956216908884574}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException    listener.getLogger().println(\"Starting to decorate revision to build\");\n    // Get the revision marked in the build\n    marked = scm.getRevision(build);\n\n    // If the revision is a branch, find the revision to build\n    if (rev.getBranches().size() > 0) {\n        listener.getLogger().println(\"Revision is a branch\");\n        rev = findRevisionToBuild(scm, build, git, listener, rev);\n    }\n\n    // If the revision is a tag, find the revision to build\n    if (rev.getBranches().size() == 0) {\n        listener.getLogger().println(\"Revision is a tag\");\n        rev = findRevisionToBuild(scm, build, git, listener, rev);\n    }\n\n    // If the revision is a hash, find the revision to build\n    if (rev.getHash().length() > 0) {\n        listener.getLogger().println(\"Revision is a hash\");\n        rev = findRevisionToBuild(scm, build, git, listener, rev);\n    }\n\n    // If there are refspecs, fetch them\n    if (scm.getExtensions().get(RefSpecsSCMExtension.class) != null && scm.getExtensions().get(RefSpecsSCMExtension.class).getRefSpecs().size() > 0) {\n        listener.getLogger().println(\"Fetching refspecs\");\n        fetchRefspecs(scm, build, git, listener);\n    }\n\n    listener.getLogger().println(\"Finished decorating revision to build\");\n    return rev;\n}\n", "CodeBleu_score": 26.417915038574}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks()    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue());\n        break;\n    }\n    return result;\n}", "CodeBleu_score": 63.529873072132915}, {"code": "public Map<String, BitbucketHref> getLinks()    if (links == null) {\n        return null;\n    }\n\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().get(0));\n    }\n\n    return result;\n}", "CodeBleu_score": 68.61864114769493}, {"code": "public Map<String, BitbucketHref> getLinks()    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> map = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        map.put(entry.getKey(), entry.getValue().get(0));\n    }\n    return map;\n}\n", "CodeBleu_score": 66.99333854348863}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[])    const resourceStates = await this.getSelectedResourceStates();\n    if (resourceStates.length === 0) {\n        return;\n    }\n    const resourcesByRepository = groupBy(resourceStates, (r) => r.resourceUri.toString());\n    for (const [, resources] of resourcesByRepository) {\n        const paths = resources.map((r) => this.getFilePath(r));\n        try {\n            await this.repository.add(paths);\n        } catch (err) {\n            this.logger.error(err);\n            window.showErrorMessage(`Unable to add: ${err.stderr}`);\n        }\n    }\n}\n", "CodeBleu_score": 49.93518311621218}, {"code": "public async execute(...resourceStates: SourceControlResourceState[])\tconst resourceStatesByRepository = groupBy(resourceStates, rs => rs.resourceUri.toString());\n\n\tfor (const [, resourceStates] of resourceStatesByRepository) {\n\t\tconst resources = resourceStates.map(rs => rs.resourceUri);\n\t\tconst uris = resources.map(r => r.toString());\n\t\tconst paths = resources.map(r => path.relative(r.fsPath, r.fsPath));\n\n\t\ttry {\n\t\t\tawait this.runByRepository(uris);\n\t\t} catch (err) {\n\t\t\tif (/Cancelled/i.test(err.message)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tLogger.error(err, 'AddCommand');\n\t\t\tvscode.window.showErrorMessage(`Unable to add ${paths.join(', ')}`);\n\t\t}\n\t}\n}", "CodeBleu_score": 46.797949304850306}, {"code": "public async execute(...resourceStates: SourceControlResourceState[])    // Display a message box to the user.\n    vscode.window.showInformationMessage('Executing add command');\n\n    // Get the selected resource states.\n    const selection = resourceStates;\n\n    // If there are no selected states, return.\n    if (selection.length === 0) {\n        return;\n    }\n\n    // Create a dictionary of resources by their repository root.\n    const resourcesByRepository: { [repositoryRoot: string]: SourceControlResourceState[] } = {};\n    selection.forEach(resourceState => {\n        const repositoryRoot = vscode.workspace.getWorkspaceFolder(resourceState.resourceUri).uri.fsPath;\n        let resources = resourcesByRepository[repositoryRoot];\n        if (!resources) {\n            resources = [];\n            resourcesByRepository[repositoryRoot] = resources;\n        }\n        resources.push(resourceState);\n    });\n\n    // Step through each repository with selected resources.\n    for (const repositoryRoot of Object.keys(resourcesByRepository)) {\n        const resources = resourcesByRepository[repositoryRoot];\n\n        // Get the relative paths for all resources within the repository.\n        const paths = resources.map(resource => resource.resourceUri.fsPath.substring(repositoryRoot.length + 1));\n\n        // Get the current repository.\n        const repository = this.getRepository(repositoryRoot);\n\n        // If the repository is not a Git repository, throw an error.\n        if (repository.type !== 'git') {\n            throw new Error('The current repository is not a Git repository.');\n        }\n\n        // Add the paths to the repository.\n        await repository.add(paths);\n    }\n}", "CodeBleu_score": 44.66029886311227}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates    if (this.resourceStates.length === 0 || !(this.resourceStates[0] instanceof Uri)) {\n        const scmResource = await this.getSCMResource();\n        if (scmResource) {\n            this.resourceStates.push(scmResource);\n        }\n    }\n\n    return this.resourceStates.filter(resource => resource instanceof Resource);\n}", "CodeBleu_score": 31.555418676737858}, {"code": "protected async getResourceStates    if (!this.resourceStates.length || !(this.resourceStates[0].resourceUri instanceof Uri)) {\n        const resource = await this.getSCMResource();\n        if (resource) {\n            this.resourceStates = [resource];\n        }\n    }\n    return this.resourceStates.filter((resourceState: ResourceState) => resourceState instanceof Resource);\n}\n", "CodeBleu_score": 34.261872763658964}, {"code": "protected async getResourceStates    // If the provided resource states are empty or if the first resource URI is not an instance of Uri,\n    // attempt to get a single SCM resource and update the resource states.\n    if (this.resourceStates.length === 0 || !(this.resourceStates[0].resourceUri instanceof Uri)) {\n        const resource = await this.getSCMResource();\n\n        if (resource) {\n            this.resourceStates.push(resource);\n        }\n    }\n\n    // Return the resource states that are instances of Resource.\n    return this.resourceStates.filter(resourceState => resourceState instanceof Resource);\n}\n", "CodeBleu_score": 33.777966008148994}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>    // If no URI is provided, use the active text editor URI\n    if (!uri) {\n      const editor = window.activeTextEditor;\n      if (!editor) {\n        return undefined;\n      }\n      uri = editor.document.uri;\n    }\n\n    // If the URI is in the \"svn\" scheme, convert it to a file URI\n    if (uri.scheme === \"svn\") {\n      uri = Uri.file(uri.fsPath);\n    }\n\n    // Get the source control manager and repository for the URI\n    const scm = this.getSCM(uri);\n    if (!scm) {\n      return undefined;\n    }\n    const repository = scm.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n\n    // Get the repository's resource for the URI\n    const resource = repository.provider.getResource(uri);\n    if (!resource) {\n      return undefined;\n    }\n\n    return resource;\n  }\n\n  /**\n   * This async function retrieves a source control management (SCM) provider for a given URI. If no URI is provided, it uses the URI of the active text editor. If the URI is in the \"svn\" scheme, it converts it to a file URI. For file URIs, it gets the source control manager and retrieves the repository for the URI, returning the corresponding provider. If no valid URI or repository is found, it returns undefined.\n   */\n  protected async getSCMProvider(uri?: Uri): Promise<SCMProvider | undefined> {\n    // If no URI is provided, use the active text editor URI\n    if (!uri) {\n      const editor = window.activeTextEditor;\n      if (!editor) {\n        return undefined;\n      }\n      uri = editor.document.uri;\n    }\n\n    // If the URI is in the \"svn\" scheme, convert it to a file URI\n    if (uri.scheme === \"svn\") {\n      uri = Uri.file(uri.fsPath);\n    }\n\n    // Get the source control manager and repository for the URI\n    const scm = this.getSCM(uri);\n    if (!scm) {\n      return undefined;", "CodeBleu_score": 53.42645908498085}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>    if (!uri) {\n      uri = window.activeTextEditor?.document.uri;\n    }\n    if (!uri) {\n      return undefined;\n    }\n    if (uri.scheme === \"svn\") {\n      uri = Uri.file(uri.path);\n    }\n    const scm = this.getSCM(uri);\n    if (!scm) {\n      return undefined;\n    }\n    const repository = scm.repositories.find((repository) => repository.provider.rootUri?.path === uri.path);\n    if (!repository) {\n      return undefined;\n    }\n    const resource = repository.provider.getOriginalResource(uri);\n    if (!resource) {\n      return undefined;\n    }\n    return resource;\n  }\n\n  /**\n   * This function gets the source control manager (SCM) for a given URI. If no URI is provided, it uses the URI of the active text editor. If no valid URI is found, it returns undefined.\n   */\n  protected getSCM(uri?: Uri): SourceControl | undefined {\n    if (!uri) {\n      uri = window.activeTextEditor?.document.uri;\n    }\n    if (!uri) {\n      return undefined;\n    }\n    const scm = scmProvider.get(uri);\n    if (!scm) {\n      return undefined;\n    }\n    return scm;\n  }\n\n  /**\n   * This function gets the source control manager (SCM) for a given URI. If no URI is provided, it uses the URI of the active text editor. If no valid URI is found, it returns undefined.\n   */\n  protected getSCMResourceGroup(uri?: Uri): SourceControlResourceGroup | undefined {\n    if (!uri) {\n      uri = window.activeTextEditor?.document.uri;\n    }\n    if (!uri) {\n      return undefined;\n    }\n    const scm = this.getSCM(uri);\n    if (!scm) {\n      return undefined;\n    }\n    const resourceGroup = scm.resourceGroups.find((resourceGroup) => resourceGroup.id === \"workingTree\");\n    if (!resourceGroup) {\n      return undefined;\n    }", "CodeBleu_score": 50.69809190547324}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>    if (!uri) {\n      const editor = window.activeTextEditor;\n      if (!editor) {\n        return undefined;\n      }\n      uri = editor.document.uri;\n    }\n\n    if (uri.scheme === 'svn') {\n      uri = uri.with({ scheme: 'file' });\n    }\n\n    const scm = this.getSCM(uri);\n    if (!scm) {\n      return undefined;\n    }\n\n    const repository = scm.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n\n    return repository.provider.getResource(uri);\n  }\n\n  /**\n   * This async function retrieves a source control management (SCM) resource for a given URI. If no URI is provided, it uses the URI of the active text editor. If the URI is in the \"svn\" scheme, it converts it to a file URI. For file URIs, it gets the source control manager and retrieves the repository for the URI, returning the corresponding resource. If no valid URI or repository is found, it returns undefined.\n   */\n  protected async getSCMResourceGroup(uri?: Uri): Promise<ResourceGroup | undefined> {\n    if (!uri) {\n      const editor = window.activeTextEditor;\n      if (!editor) {\n        return undefined;\n      }\n      uri = editor.document.uri;\n    }\n\n    if (uri.scheme === 'svn') {\n      uri = uri.with({ scheme: 'file' });\n    }\n\n    const scm = this.getSCM(uri);\n    if (!scm) {\n      return undefined;\n    }\n\n    const repository = scm.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n\n    return repository.provider.getResourceGroup(uri);\n  }\n\n  /**\n   * This async function retrieves a source control management (SCM) resource for a given URI. If no URI is provided, it uses the URI of the active text editor. If the URI is in the \"svn\" scheme, it converts it to a file URI. For file URIs, it gets the source control manager and retrieves the repository for the URI", "CodeBleu_score": 49.0832569453538}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange)    const remote = await this.getRemoteRepository(element);\n    if (remote) {\n      if (element.action === \"D\") {\n        vscode.commands.executeCommand(\"vscode.open\", vscode.Uri.parse(remote.url + \"/\" + element.path + \"?r=\" + element.revision));\n      } else if (element.action === \"A\") {\n        vscode.commands.executeCommand(\"vscode.open\", vscode.Uri.parse(remote.url + \"/\" + element.path + \"?r=\" + element.revision));\n      } else {\n        vscode.commands.executeCommand(\"vscode.diff\", vscode.Uri.parse(remote.url + \"/\" + element.path + \"?r=\" + element.revision), vscode.Uri.parse(remote.url + \"/\" + element.path + \"?r=\" + element.revision - 1));\n      }\n    }\n  }\n\n  /**\n   * This async function handles opening a diff command for a given SVN path change element. It retrieves the remote repository for the element. If the element is modified, it opens a diff between the old and new revisions. If the element is added, it opens the remote file at the new path and revision.\n   */\n  public async openDiffCmd(element: ISvnPathChange) {\n    const remote = await this.getRemoteRepository(element);\n    if (remote) {\n      if (element.action === \"D\") {\n        vscode.commands.executeCommand(\"vscode.open\", vscode.Uri.parse(remote.url + \"/\" + element.path + \"?r=\" + element.revision));\n      } else if (element.action === \"A\") {\n        vscode.commands.executeCommand(\"vscode.open\", vscode.Uri.parse(remote.url + \"/\" + element.path + \"?r=\" + element.revision));\n      } else {\n        vscode.commands.executeCommand(\"vscode.diff\", vscode.Uri.parse(remote.url + \"/\" + element.path + \"?r=\" + element.revision), vscode.Uri.parse(remote.url + \"/\" + element.path + \"?r=\"", "CodeBleu_score": 37.2441067886472}, {"code": " public async openDiffCmd(element: ISvnPathChange)    const repo = await this.getRemoteRepo(element.path);\n    if (!repo) {\n      return;\n    }\n    if (element.type === PathChangeType.Added) {\n      const uri = `${repo.url}/${element.path}?p=${element.revision}`;\n      vscode.commands.executeCommand('vscode.open', vscode.Uri.parse(uri));\n    } else if (element.type === PathChangeType.Modified) {\n      const oldUri = `${repo.url}/${element.path}?p=${element.oldRevision}`;\n      const newUri = `${repo.url}/${element.path}?p=${element.revision}`;\n      vscode.commands.executeCommand('vscode.diff', vscode.Uri.parse(oldUri), vscode.Uri.parse(newUri));\n    }\n  }\n\n  /**\n   * This async function handles opening a diff command for a given SVN path change element. It retrieves the remote repository for the element. If the element is modified, it opens a diff between the old and new revisions. If the element is added, it opens the remote file at the new path and revision.\n   */\n  public async openDiffCmd(element: ISvnPathChange) {\n    const repo = await this.getRemoteRepo(element.path);\n    if (!repo) {\n      return;\n    }\n    if (element.type === PathChangeType.Added) {\n      const uri = `${repo.url}/${element.path}?p=${element.revision}`;\n      vscode.commands.executeCommand('vscode.open', vscode.Uri.parse(uri));\n    } else if (element.type === PathChangeType.Modified) {\n      const oldUri = `${repo.url}/${element.path}?p=${element.oldRevision}`;\n      const newUri = `${repo.url}/${element.path}?p=${element.revision}`;\n      vscode.commands.executeCommand('vscode.diff', vscode.Uri.parse(oldUri), vscode.Uri.parse(newUri));\n    }\n  }\n\n  /**\n   * This", "CodeBleu_score": 42.78721514496123}, {"code": " public async openDiffCmd(element: ISvnPathChange)    try {\n        const repo = await this.getRemoteRepository(element);\n        if (!repo) {\n            return;\n        }\n        if (element.change === SvnChange.Add) {\n            await this.openRemoteFile(element, repo);\n        } else {\n            await this.openDiff(element, repo);\n        }\n    } catch (err) {\n        Logger.error(new Error(`openDiffCmd: ${err}`));\n    }\n}", "CodeBleu_score": 39.00110773930386}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem)  if (!navigator.clipboard) {\n    vscode.window.showErrorMessage('Copying to the clipboard is not supported in this browser.');\n    return;\n  }\n\n  let text: string;\n  if (what === 'commit') {\n    text = item.commit;\n  } else if (what === 'message') {\n    text = item.message;\n  } else {\n    throw new Error(`Unknown copy type: ${what}`);\n  }\n\n  await navigator.clipboard.writeText(text);\n}", "CodeBleu_score": 29.827892642549024}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem)    const clipboard = await import('clipboard');\n    if (!clipboard.isSupported()) {\n        throw new Error('Clipboard is not supported.');\n    }\n    if (what === 'revision') {\n        clipboard.writeSync(item.revision);\n    } else {\n        clipboard.writeSync(item.message);\n    }\n}", "CodeBleu_score": 31.126907767118173}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem)\tif (typeof navigator !== 'undefined' && typeof navigator.clipboard === 'undefined') {\n\t\tvscode.window.showErrorMessage('Copying to clipboard is not supported in this browser.');\n\t\treturn;\n\t}\n\n\tif (what === 'commit') {\n\t\tawait navigator.clipboard.writeText(item.hash);\n\t} else if (what === 'message') {\n\t\tawait navigator.clipboard.writeText(item.message);\n\t}\n}\n", "CodeBleu_score": 27.69633955013585}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException    List<GiteaConnectionFactory> factories = new ArrayList<>();\n    ServiceLoader.load(GiteaConnectionFactory.class).forEach(factories::add);\n    Collections.sort(factories, (a, b) -> Integer.compare(a.getPriority(), b.getPriority()));\n\n    for (GiteaConnectionFactory factory : factories) {\n        GiteaConnection connection = factory.open();\n        if (connection != null) {\n            return connection;\n        }\n    }\n\n    throw new IOException(\"No suitable GiteaConnectionFactory implementation found.\");\n}", "CodeBleu_score": 28.28776988788849}, {"code": "public GiteaConnection open() throws IOException, InterruptedException    List<GiteaConnectionFactory> factories = new ArrayList<>();\n    ServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class);\n    for (GiteaConnectionFactory factory : loader) {\n        factories.add(factory);\n    }\n    factories.sort(new Comparator<GiteaConnectionFactory>() {\n        @Override\n        public int compare(GiteaConnectionFactory o1, GiteaConnectionFactory o2) {\n            return o1.getPriority() - o2.getPriority();\n        }\n    });\n    for (GiteaConnectionFactory factory : factories) {\n        if (factory.canOpen(this)) {\n            return factory.open(this);\n        }\n    }\n    throw new IOException(\"No suitable GiteaConnectionFactory implementation found.\");\n}", "CodeBleu_score": 41.14703242524141}, {"code": "public GiteaConnection open() throws IOException, InterruptedException    List<GiteaConnectionFactory> factories = ServiceLoader.load(GiteaConnectionFactory.class).stream()\n        .sorted(Comparator.comparing(GiteaConnectionFactory::priority).reversed())\n        .collect(Collectors.toList());\n    for (GiteaConnectionFactory factory : factories) {\n        GiteaConnection connection = factory.open(this);\n        if (connection != null) {\n            return connection;\n        }\n    }\n    throw new IOException(\"No suitable Gitea connection factory found\");\n}", "CodeBleu_score": 35.79070009132279}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader()  def jenkins = Jenkins.getInstance()\n  if (jenkins != null) {\n    this.class.classLoader = jenkins.pluginManager.uberClassLoader\n  } else {\n    this.class.classLoader = this.class.classLoader\n  }\n  return this\n}\n", "CodeBleu_score": 37.541629800463184}, {"code": "public Gitea jenkinsPluginClassLoader()    Jenkins jenkins = Jenkins.getInstance()\n    if (jenkins == null) {\n        return this\n    }\n    ClassLoader classLoader = jenkins.getPluginManager().uberClassLoader\n    Thread.currentThread().setContextClassLoader(classLoader)\n    return this\n}", "CodeBleu_score": 48.11132970058081}, {"code": "public Gitea jenkinsPluginClassLoader()    Jenkins jenkins = Jenkins.getInstance();\n    ClassLoader classLoader = jenkins != null ? jenkins.getPluginManager().uberClassLoader : this.getClass().getClassLoader();\n    Gitea gitea = new Gitea(classLoader);\n    return gitea;\n}\n", "CodeBleu_score": 51.600097989555714}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl)     this.displayName = displayName;\n    this.serverUrl = serverUrl;\n    this.manageHooks = manageHooks;\n    this.credentialsId = credentialsId;\n    this.aliasUrl = aliasUrl;\n    this.displayName = displayName;\n    this.serverUrl = serverUrl;\n    this.manageHooks = manageHooks;\n    this.credentialsId = credentialsId;\n    this.aliasUrl = aliasUrl;\n    if (this.aliasUrl != null && !this.aliasUrl.isEmpty()) {\n        this.aliasUrl = this.aliasUrl.trim();\n        if (!this.aliasUrl.endsWith(\"/\")) {\n            this.aliasUrl += \"/\";\n        }\n    }\n    if (this.displayName == null || this.displayName.isEmpty()) {\n        this.displayName = this.serverUrl;\n    }\n    if (this.serverUrl.endsWith(\"/\")) {\n        this.serverUrl = this.serverUrl.substring(0, this.serverUrl.length() - 1);\n    }\n    if (this.credentialsId != null && !this.credentialsId.isEmpty()) {\n        this.manageHooks = true;\n    }\n}\n", "CodeBleu_score": 32.91558908592794}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl)     this.displayName = displayName\n    this.serverUrl = normalizeServerUrl(serverUrl)\n    this.manageHooks = manageHooks\n    this.credentialsId = credentialsId\n    this.aliasUrl = normalizeAliasUrl(aliasUrl)\n}\n", "CodeBleu_score": 27.917637043710435}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl)     this.displayName = displayName;\n    this.serverUrl = serverUrl;\n    this.manageHooks = manageHooks;\n    this.credentialsId = credentialsId;\n    this.aliasUrl = aliasUrl;\n}\n", "CodeBleu_score": 22.99690907468773}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl)    ListBoxModel items = new ListBoxModel();\n    try {\n        GiteaAuth giteaAuth = GiteaAuth.create(serverUrl);\n        if (giteaAuth != null) {\n            List<String> credentials = giteaAuth.getCredentials();\n            for (String credential : credentials) {\n                items.add(credential);\n            }\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return items;\n}", "CodeBleu_score": 37.57354215093902}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl)    ListBoxModel result = new ListBoxModel();\n\n    // Check if user has administrative permissions\n    if (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n        return result;\n    }\n\n    // Normalize server URL\n    serverUrl = normalizeServerUrl(serverUrl);\n\n    // Find all credentials that match the server URL\n    for (Credentials c : lookupCredentials(Credentials.class)) {\n        if (c instanceof StandardUsernamePasswordCredentials) {\n            StandardUsernamePasswordCredentials credential = (StandardUsernamePasswordCredentials) c;\n\n            // Check if the credential has the correct scope\n            if (serverUrl.equals(credential.getScope())) {\n                result.add(credential.getId(), credential.getId());\n            }\n        }\n    }\n\n    // Find all credentials that match the server URL and authentication token\n    for (Credentials c : lookupCredentials(GiteaAuth.class)) {\n        if (c instanceof GiteaAuth) {\n            GiteaAuth credential = (GiteaAuth) c;\n\n            // Check if the credential has the correct scope\n            if (serverUrl.equals(credential.getScope())) {\n                result.add(credential.getId(), credential.getId());\n            }\n        }\n    }\n\n    return result;\n}\n", "CodeBleu_score": 40.545449250766076}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl)    ListBoxModel result = new ListBoxModel();\n    if (serverUrl != null) {\n        serverUrl = serverUrl.trim();\n        if (!serverUrl.endsWith(\"/\")) {\n            serverUrl += \"/\";\n        }\n        if (Jenkins.getInstance().hasPermission(Jenkins.ADMINISTER)) {\n            result.add(serverUrl);\n            List<String> ids = CredentialsProvider.lookupCredentials(\n                StandardCredentials.class,\n                Jenkins.getInstance(),\n                ACL.SYSTEM,\n                Collections.<DomainRequirement>emptyList()\n            ).stream()\n                .filter(c -> c instanceof StandardUsernamePasswordCredentials)\n                .map(c -> c.getId())\n                .collect(Collectors.toList());\n            for (String id : ids) {\n                result.add(id, id);\n            }\n        }\n    }\n    return result;\n}", "CodeBleu_score": 43.380437254597865}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl)    if (serverUrl == null) {\n        return \"\";\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        String host = uri.getHost();\n        int port = uri.getPort();\n        String path = uri.getPath();\n        if (host == null) {\n            return \"\";\n        }\n        if (scheme == null) {\n            scheme = \"http\";\n        }\n        if (port == -1) {\n            port = scheme.equals(\"http\") ? 80 : 443;\n        }\n        if (path == null) {\n            path = \"\";\n        }\n        if (path.endsWith(\"/\")) {\n            path = path.substring(0, path.length() - 1);\n        }\n        return new URI(scheme, null, host, port, path, null, null).toString();\n    } catch (URISyntaxException e) {\n        return \"\";\n    }\n}", "CodeBleu_score": 41.832601733141345}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl)    if (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        if (uri.getHost() == null) {\n            throw new URISyntaxException(serverUrl, \"Hostname is missing\");\n        }\n        if (uri.getScheme() == null) {\n            throw new URISyntaxException(serverUrl, \"Scheme is missing\");\n        }\n        if (uri.getScheme().equalsIgnoreCase(\"http\")) {\n            if (uri.getPort() == 80) {\n                uri = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), -1, uri.getPath(), uri.getQuery(), uri.getFragment());\n            }\n        } else if (uri.getScheme().equalsIgnoreCase(\"https\")) {\n            if (uri.getPort() == 443) {\n                uri = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), -1, uri.getPath(), uri.getQuery(), uri.getFragment());\n            }\n        }\n        return uri.toString().toLowerCase(Locale.ENGLISH).replaceAll(\"/$\", \"\");\n    } catch (URISyntaxException e) {\n        return serverUrl.toLowerCase(Locale.ENGLISH).replaceAll(\"/$\", \"\");\n    }\n}", "CodeBleu_score": 40.1954240250004}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl)    if (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl.toLowerCase(Locale.ENGLISH));\n        if (uri.getHost() == null) {\n            throw new URISyntaxException(serverUrl, \"No hostname specified\");\n        }\n        if (uri.getScheme() == null) {\n            throw new URISyntaxException(serverUrl, \"No protocol specified\");\n        }\n        if (uri.getScheme().equals(\"http\") && uri.getPort() == 80) {\n            uri = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), -1, uri.getPath(), uri.getQuery(), uri.getFragment());\n        }\n        if (uri.getScheme().equals(\"https\") && uri.getPort() == 443) {\n            uri = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), -1, uri.getPath(), uri.getQuery(), uri.getFragment());\n        }\n        return uri.toString();\n    } catch (URISyntaxException e) {\n        return serverUrl;\n    }\n}", "CodeBleu_score": 39.51647743122817}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems()    ListBoxModel model = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        if (server.getDisplayName() != null && !server.getDisplayName().isEmpty()) {\n            model.add(server.getDisplayName(), server.getServerUrl());\n        } else {\n            model.add(server.getServerUrl());\n        }\n    }\n    return model;\n}\n", "CodeBleu_score": 41.432444743155585}, {"code": "public ListBoxModel getServerItems()    ListBoxModel model = new ListBoxModel();\n    for (GiteaServer server : GiteaServers.get().getServers()) {\n        model.add(server.getDisplayName(), server.getServerUrl());\n    }\n    return model;\n}\n", "CodeBleu_score": 32.69250144379649}, {"code": "public ListBoxModel getServerItems()    ListBoxModel model = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (displayName == null || displayName.trim().isEmpty()) {\n            model.add(server.getServerUrl());\n        } else {\n            model.add(displayName, server.getServerUrl());\n        }\n    }\n    return model;\n}\n", "CodeBleu_score": 48.573150298619545}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers)    Jenkins.get().checkPermission(CONFIGURE);\n    if (servers != null) {\n        Set<String> serverUrls = new HashSet<>();\n        for (GiteaServer server : servers) {\n            if (server != null) {\n                String serverUrl = server.getServerUrl();\n                if (serverUrl != null && !serverUrl.isEmpty()) {\n                    serverUrls.add(serverUrl);\n                }\n            }\n        }\n        this.servers = new ArrayList<>();\n        for (String serverUrl : serverUrls) {\n            this.servers.add(new GiteaServer(serverUrl));\n        }\n    }\n    save();\n}", "CodeBleu_score": 44.56138615927402}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers)    Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);\n\n    if (servers != null) {\n        Set<String> serverUrls = new HashSet<>();\n        for (GiteaServer server : servers) {\n            String serverUrl = server.getServerUrl();\n            if (!StringUtils.isBlank(serverUrl)) {\n                serverUrls.add(serverUrl);\n            }\n        }\n        this.servers.clear();\n        for (String serverUrl : serverUrls) {\n            this.servers.add(new GiteaServer(serverUrl));\n        }\n    }\n\n    save();\n}", "CodeBleu_score": 44.95856162182031}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers)    Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n    List<GiteaServer> newServers = new ArrayList<>();\n    for (GiteaServer server : servers) {\n        String serverUrl = server.getServerUrl();\n        if (StringUtils.isNotBlank(serverUrl)) {\n            if (!newServers.contains(server)) {\n                newServers.add(server);\n            }\n        }\n    }\n    this.servers = newServers;\n    save();\n}", "CodeBleu_score": 40.02215177210667}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl)    if (serverUrl == null) {\n        return false;\n    }\n    serverUrl = normalizeServerUrl(serverUrl);\n    if (serverUrl == null) {\n        return false;\n    }\n    boolean removed = false;\n    List<GiteaServer> newServers = new ArrayList<>();\n    for (GiteaServer server : getServers()) {\n        if (server.getServerUrl().equals(serverUrl)) {\n            removed = true;\n        } else {\n            newServers.add(server);\n        }\n    }\n    setServers(newServers);\n    return removed;\n}", "CodeBleu_score": 46.54797018634875}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl)    if (serverUrl == null) {\n        return false;\n    }\n    // normalize the server URL\n    serverUrl = normalizeServerUrl(serverUrl);\n    // check for and remove the matching server from the current list of servers\n    boolean removed = false;\n    for (GiteaServer server : servers) {\n        if (server.getServerUrl().equals(serverUrl)) {\n            servers.remove(server);\n            removed = true;\n            break;\n        }\n    }\n    // update the server list\n    updateServerList();\n    // return whether any server was removed\n    return removed;\n}", "CodeBleu_score": 35.42537493888672}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl)    if (serverUrl == null) {\n        return false;\n    }\n    String normalizedUrl = normalizeServerUrl(serverUrl);\n    boolean removed = false;\n    for (GiteaServer server : getServers()) {\n        if (server.getServerUrl().equals(normalizedUrl)) {\n            this.servers.remove(server);\n            removed = true;\n        }\n    }\n    if (removed) {\n        save();\n    }\n    return removed;\n}", "CodeBleu_score": 36.37100712332671}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation)    for (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n        if (!(element instanceof TypeElement)) {\n            error(\"Only classes can be annotated with @%s\", annotation.getSimpleName());\n            return;\n        }\n        TypeElement typeElement = (TypeElement) element;\n        ConfigElement configElement = new ConfigElement(typeElement.getQualifiedName().toString());\n        for (AnnotationMirror mirror : element.getAnnotationMirrors()) {\n            if (mirror.getAnnotationType().asElement().equals(annotation)) {\n                for (Map.Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : mirror.getElementValues().entrySet()) {\n                    String name = entry.getKey().getSimpleName().toString();\n                    Object value = entry.getValue().getValue();\n                    if (\"key\".equals(name)) {\n                        configElement.setKey(value.toString());\n                    } else if (\"defaultValue\".equals(name)) {\n                        configElement.setDefaultValue(value.toString());\n                    } else if (\"comment\".equals(name)) {\n                        configElement.setComment(value.toString());\n                    } else if (\"label\".equals(name)) {\n                        configElement.setLabel(value.toString());\n                    }\n                }\n            }\n        }\n        if (configElement.getKey() == null) {\n            error(\"No key specified for @%s %s\", annotation.getSimpleName(), typeElement.getQualifiedName());\n            return;\n        }\n        if (configElement.getDefaultValue() == null) {\n            error(\"No default value specified for @%s %s\", annotation.getSimpleName(), typeElement.getQualifiedName());\n            return;\n        }\n        if (configElement.getComment() == null) {\n            error(\"No comment specified for @%s %s\", annotation.getSimpleName(), typeElement.getQualifiedName());\n            return;\n        }\n        if (configElement.getLabel() == null) {\n            error(\"No label specified for @%s %s\", annotation.getSimpleName(), typeElement.getQualifiedName());\n            return;\n        }\n        config", "CodeBleu_score": 27.316983250927883}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation)    for (Element annotatedElement : roundEnv.getElementsAnnotatedWith(annotation)) {\n        // Check that the element is a field declaration\n        if (annotatedElement.getKind() != ElementKind.FIELD) {\n            error(annotatedElement, \"Only field declarations can be annotated with @%s\",\n                    annotation.getSimpleName().toString());\n            return;\n        }\n\n        // Check that the field is static\n        if (!annotatedElement.getModifiers().contains(Modifier.STATIC)) {\n            error(annotatedElement, \"Only static fields can be annotated with @%s\",\n                    annotation.getSimpleName().toString());\n            return;\n        }\n\n        // Retrieve the String value from the annotation\n        AnnotationMirror annotationMirror = getAnnotationMirror(annotatedElement, annotation);\n        AnnotationValue value = getAnnotationValue(annotationMirror, \"value\");\n        String key = (String) value.getValue();\n\n        // Retrieve the type of the field as a string\n        TypeMirror typeMirror = annotatedElement.asType();\n        String type = typeMirror.toString();\n\n        // Add a new ConfigElement to the set of descriptor elements\n        descriptorElements.add(new ConfigElement(key, type));\n    }\n}", "CodeBleu_score": 35.85442059766009}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation)    for (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n        if (element.getKind() != ElementKind.CLASS) {\n            throw new IllegalArgumentException(\"Only classes can be annotated with \" + annotation.getSimpleName());\n        }\n        TypeElement classElement = (TypeElement) element;\n        ConfigElement configElement = new ConfigElement(classElement.getQualifiedName().toString(), classElement.getSimpleName().toString());\n        Config config = classElement.getAnnotation(Config.class);\n        configElement.setName(config.name());\n        configElement.setDescription(config.description());\n        configElement.setDefaultValue(config.defaultValue());\n        configElement.setRequired(config.required());\n        configElement.setType(classElement.asType().toString());\n        configElement.setCategories(config.categories());\n        configElement.setDeprecated(config.deprecated());\n        configElement.setDeprecatedMessage(config.deprecatedMessage());\n        configElement.setDeprecatedSince(config.deprecatedSince());\n        configElement.setDeprecatedSinceFormat(config.deprecatedSinceFormat());\n        configElement.setDeprecatedAlternatives(config.deprecatedAlternatives());\n        configElement.setDeprecatedAlternativesMessage(config.deprecatedAlternativesMessage());\n        configElement.setDeprecatedAlternativesComment(config.deprecatedAlternativesComment());\n        configElement.setExcluded(config.excluded());\n        configElement.setExcludedMessage(config.excludedMessage());\n        configElement.setExcludedComment(config.excludedComment());\n        configElement.setExcludedAlternatives(config.excludedAlternatives());\n        configElement.setExcludedAlternativesMessage(config.excludedAlternativesMessage());\n        configElement.setExcludedAlternativesComment(config.excludedAlternativesComment());\n        configElement.setExcludedAlternativesComment(config.excludedAlternativesComment());\n        configElement.setExcludedAlternativesComment(config.excludedAlternativesComment());\n        configElement.setExcludedAlternativesComment(config.ex", "CodeBleu_score": 28.58736820135609}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass)     for (TypeElement annotation : annotations) {\n        if (annotationClass.getName().replace('$', '.').equals(annotation.getQualifiedName().toString())) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 46.28379332000447}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass)     for (TypeElement annotation : annotations) {\n        String annotationName = annotation.getQualifiedName().toString();\n        String targetName = annotationClass.getName();\n        if (annotationName.replace('$', '.').equals(targetName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 40.541815365189336}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass)     for (TypeElement annotation : annotations) {\n        String qualifiedName = annotation.getQualifiedName().toString();\n        String targetName = annotationClass.getName().replace('$', '.');\n        if (qualifiedName.equals(targetName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 40.70042941145906}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n        \"status\": [\"!=\", \"Canceled\"],\n    }\n\n    if for_approval:\n        filters[\"status\"] = [\"in\", [\"Open\", \"Approved\", \"Rejected\"]]\n        filters[\"approver\"] = approver_id\n        filters[\"employee\"] = [\"!=\", employee]\n    return filters", "CodeBleu_score": 22.85858788978335}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n    filters = {\n        \"employee\": employee,\n        \"status\": [\"!=\", \"Cancelled\"],\n    }\n\n    if for_approval:\n        filters.update({\n            \"status\": [\"in\", [\"Open\", \"Approved\", \"Rejected\"]],\n            \"docstatus\": 1,\n        })\n\n        if approver_id:\n            filters.update({\n                \"approver\": approver_id,\n            })\n        else:\n            filters.update({\n                \"approver\": [\"!=\", employee],\n            })\n    else:\n        filters.update({\n            \"owner\": employee,\n        })\n\n    return filters", "CodeBleu_score": 26.240262008397096}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n    filters = [\n        [\"employee\", \"=\", employee],\n        [\"docstatus\", \"!=\", 2],\n        [\"status\", \"in\", [\"Open\", \"Approved\", \"Rejected\"]],\n    ]\n    if for_approval:\n        filters.extend(\n            [\n                [\n                    \"status\",\n                    \"in\",\n                    [\"Open\", \"Approved\", \"Rejected\"],\n                ],\n                [\n                    \"workflow_state\",\n                    \"in\",\n                    [\"Pending Approval\", \"Approved\", \"Rejected\"],\n                ],\n            ]\n        )\n        if approver_id:\n            filters.append([\"approver\", \"=\", approver_id])\n    else:\n        filters.append([\"employee\", \"=\", employee])\n        filters.append([\"status\", \"!=\", \"Cancelled\"])\n\n    return filters", "CodeBleu_score": 23.046126148821614}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n    import frappe\n    from frappe.utils import getdate, add_days\n\n    today = getdate()\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n\n    for leave_detail in leave_details:\n        leave_type = leave_detail.leave_type\n        total_leaves_allocated = leave_detail.total_leaves_allocated\n        leaves_taken = leave_detail.leaves_taken\n        from_date = leave_detail.from_date\n        to_date = leave_detail.to_date\n        if from_date:\n            from_date = getdate(from_date)\n        if to_date:\n            to_date = getdate(to_date)\n\n        leave_balance_map[leave_type] = {}\n\n        if from_date and to_date and from_date <= today <= to_date:\n            leave_balance_map[leave_type][\"from_date\"] = from_date\n            leave_balance_map[leave_type][\"to_date\"] = to_date\n            leave_balance_map[leave_type][\"allocated_leaves\"] = total_leaves_allocated\n            leave_balance_map[leave_type][\"leaves_taken\"] = leaves_taken\n            leave_balance_map[leave_type][\"balance_leaves\"] = total_leaves_allocated - leaves_taken\n\n        elif from_date and from_date <= today:\n            leave_balance_map[leave_type][\"from_date\"] = from_date\n            leave_balance_map[leave_type][\"to_date\"] = None\n            leave_balance_map[leave_type][\"allocated_leaves\"] = total_leaves_allocated\n            leave_balance_map[leave_type][\"leaves_taken\"] = leaves_taken\n            leave_balance_map[leave_type][\"balance_leaves\"] = total_leaves_allocated - leaves_taken\n\n        elif to_date and to_", "CodeBleu_score": 28.616383272768953}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n    from datetime import datetime\n    from frappe.utils import getdate, add_days\n    import frappe\n\n    leave_balance_map = {}\n    today = getdate()\n    leave_details = get_leave_details(employee)\n    for leave_detail in leave_details:\n        leave_type = leave_detail.leave_type\n        if leave_type in leave_balance_map:\n            continue\n        leave_balance_map[leave_type] = {}\n        leave_balance_map[leave_type]['allocated'] = leave_detail.total_leaves_allocated\n        leave_balance_map[leave_type]['taken'] = leave_detail.total_leaves_taken\n        leave_balance_map[leave_type]['balance'] = leave_detail.total_leaves_allocated - leave_detail.total_leaves_taken\n        leave_balance_map[leave_type]['expiry_date'] = leave_detail.to_date\n\n    return leave_balance_map\n", "CodeBleu_score": 32.50602202618359}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n    import frappe\n    from frappe.utils import nowdate\n    from frappe.utils import getdate\n    from frappe.utils import add_to_date\n    from hrpro.api.leave_allocation import get_leave_details\n    leave_balance_map = {}\n    today = nowdate()\n    leave_types = frappe.get_all(\"Leave Type\")\n    leave_types = [leave_type.name for leave_type in leave_types]\n    leave_details = get_leave_details(employee)\n    for leave_type in leave_types:\n        leave_balance_map[leave_type] = {}\n        leave_balance_map[leave_type][\"allocated\"] = leave_details[leave_type][\"total_leaves_allocated\"]\n        leave_balance_map[leave_type][\"balance\"] = leave_details[leave_type][\"remaining_leaves\"]\n    return leave_balance_map\n", "CodeBleu_score": 38.22872900231388}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n    holiday_list = frappe.db.get_value(\"Employee\", employee, \"holiday_list\")\n    if not holiday_list:\n        return []\n\n    holidays = frappe.db.sql(\"\"\"\n        SELECT\n            hd.holiday_date,\n            hd.description\n        FROM `tabHoliday` h\n        INNER JOIN `tabHoliday List` hl ON hl.name = h.parent\n        INNER JOIN `tabHoliday Date` hd ON hd.parent = h.name\n        WHERE hl.name = %(holiday_list)s AND hd.weekly_off IS NULL\n        ORDER BY hd.holiday_date ASC\n    \"\"\", {\"holiday_list\": holiday_list}, as_dict=True)\n\n    for holiday in holidays:\n        holiday.description = frappe.utils.strip_html(holiday.description)\n\n    return holidays\n\n", "CodeBleu_score": 34.281421685173946}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n    holiday_list = frappe.db.get_value(\"Employee\", employee, \"holiday_list\")\n    if not holiday_list:\n        return []\n    holidays = frappe.db.sql(\n        \"\"\"\n            SELECT\n                hd.holiday_date,\n                hd.description\n            FROM `tabHoliday` h\n            LEFT JOIN `tabHoliday List` hl ON\n                hl.name = h.parent\n            LEFT JOIN `tabHoliday Date` hd ON\n                hd.parent = h.name\n            WHERE\n                hl.name = %(holiday_list)s\n                AND hd.weekly_off IS NULL\n            ORDER BY hd.holiday_date\n        \"\"\",\n        values={\"holiday_list\": holiday_list},\n        as_dict=1,\n    )\n    for holiday in holidays:\n        holiday.description = frappe.utils.sanitize_html(holiday.description)\n    return holidays", "CodeBleu_score": 31.736871266267713}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n    from frappe.utils import get_holiday_list_for_employee\n    from frappe.utils.user import get_user_fullname\n    from frappe.utils.html_utils import clean_html\n    from frappe.utils.data import get_datetime\n    from frappe.utils.dateutils import get_datetime_str\n    from frappe.utils.dateutils import get_datetime_str\n    from frappe.utils.dateutils import get_datetime_str\n    from frappe.utils.dateutils import get_datetime_str\n    from frappe.utils.dateutils import get_datetime_str\n    from frappe.utils.dateutils import get_datetime_str\n    from frappe.utils.dateutils import get_datetime_str\n    from frappe.utils.dateutils import get_datetime_str\n    from frappe.utils.dateutils import get_datetime_str\n    from frappe.utils.dateutils import get_datetime_str\n    from frappe.utils.dateutils import get_datetime_str\n    from frappe.utils.dateutils import get_datetime_str\n    from frappe.utils.dateutils import get_datetime_str\n    from frappe.utils.dateutils import get_datetime_str\n    from frappe.utils.dateutils import get_datetime_str\n    from frappe.utils.dateutils import get_datetime_str\n    from frappe.utils.dateutils import get_datetime_str\n    from frappe.utils.dateutils import get_datetime_str\n    from frappe.utils.dateutils import get_datetime_str\n    from frappe.utils.dateutils import get_datetime_str\n    from frappe.utils.dateutils import get_datetime_str\n    from frappe.utils.dateutils import get_datetime_str\n    from frappe.utils.dateutils import get_datetime_str\n    from frappe.utils.dateutils import get_datetime_str\n    from frappe.utils.dateutils import get_datetime_str\n    from frappe.utils.dateutils import get_datetime_str\n    from frappe.utils.dateutils import get_datetime_str\n    from frappe.utils.dateutils import get_datetime_str", "CodeBleu_score": 6.307573480539277}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\n    # Retrieve the HR Settings\n    hr_settings = frappe.get_doc(\"HR Settings\")\n\n    # Check if the HR Settings specify to send reminders and the frequency is set to \"Weekly\"\n    if hr_settings.send_reminders and hr_settings.frequency == \"Weekly\":\n\n        # Call the function to send the reminders\n        send_reminders(hr_settings.frequency)\n\n", "CodeBleu_score": 15.786715631752177}, {"code": "def send_reminders_in_advance_weekly()\n\n    # Import built-in modules\n    import datetime\n\n    # Import custom modules\n    from . import send_reminders_in_advance_weekly_helper\n\n    # Retrieve the HR settings\n    hr_settings = frappe.get_single(\"HR Settings\")\n\n    # If the HR settings specify to send reminders and the frequency is set to \"Weekly\"\n    if hr_settings.send_reminders and hr_settings.reminder_frequency == \"Weekly\":\n        # Call the helper function to send the reminders\n        send_reminders_in_advance_weekly_helper.send_reminders_in_advance_weekly_helper()\n\n", "CodeBleu_score": 26.877955608528126}, {"code": "def send_reminders_in_advance_weekly()\n    from frappe import db\n    from frappe.utils.user import get_system_managers\n    from one_fm.api.tasks import send_reminders_in_advance\n    from one_fm.api.tasks import get_holiday_list_reminder_settings\n\n    hr_settings = get_holiday_list_reminder_settings()\n    if hr_settings.send_reminders and hr_settings.frequency == \"Weekly\":\n        send_reminders_in_advance(hr_settings.advance_notification_days, hr_settings.advance_notification_date)\n\n    return True\n", "CodeBleu_score": 22.160716121643787}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\n    score = 0\n    for self_rating in self.self_ratings:\n        score += self_rating.rating * self_rating.percentage_weightage / 100 * 5\n    self.self_appraisal_score = round(score, 2)\n\n", "CodeBleu_score": 24.575656412150977}, {"code": "def calculate_self_appraisal_score(self)\n    score = 0\n    for self_rating in self.self_ratings:\n        score += self_rating.rating * self_rating.percentage_weightage / 100\n    self.self_appraisal_score = round(score, 2)\n\n", "CodeBleu_score": 23.523442887233536}, {"code": "def calculate_self_appraisal_score(self)\n\n    self_appraisal_score = 0\n    self_ratings = frappe.get_all('Employee Self Rating', filters={'employee': self.employee, 'docstatus': 1}, fields=['self_rating_score', 'self_rating_percentage'])\n\n    for self_rating in self_ratings:\n        self_appraisal_score += (self_rating.self_rating_score * self_rating.self_rating_percentage)\n\n    self.self_appraisal_score = round(self_appraisal_score, 2)\n\n", "CodeBleu_score": 21.741428388760596}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.calculate_final_score_based_on_formula:\n        formula = appraisal_cycle.final_score_calculation_formula\n        if formula:\n            formula = formula.replace(\"{\", \"\").replace(\"}\", \"\")\n            formula = formula.replace(\"total_score\", str(self.total_score))\n            formula = formula.replace(\"feedback_score\", str(self.feedback_score))\n            formula = formula.replace(\"self_appraisal_score\", str(self.self_appraisal_score))\n            formula = formula.replace(\"weighted_score\", str(self.weighted_score))\n            try:\n                final_score = eval(formula)\n            except Exception as e:\n                frappe.throw(\n                    f\"Error while calculating final score: {e}\",\n                    title=\"Calculation Error\",\n                )\n                return\n            if appraisal_cycle.final_score_precision:\n                self.final_score = round(final_score, appraisal_cycle.final_score_precision)\n            else:\n                self.final_score = final_score\n    else:\n        self.final_score = (\n            self.total_score + self.feedback_score + self.self_appraisal_score\n        ) / 3\n\n    if appraisal_cycle.final_score_precision:\n        self.final_score = round(self.final_score, appraisal_cycle.final_score_precision)\n\n    self.save()", "CodeBleu_score": 34.454012013982194}, {"code": "def calculate_final_score(self)\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.calculate_final_score_based_on_formula:\n        formula = appraisal_cycle.final_score_formula\n        if not formula:\n            frappe.throw(\"Please set the final score formula in the Appraisal Cycle\")\n        self.final_score = self.calculate_final_score_based_on_formula(formula)\n    else:\n        total_score = self.total_score or 0\n        feedback_score = self.feedback_score or 0\n        self_appraisal_score = self.self_appraisal_score or 0\n        self.final_score = (total_score + feedback_score + self_appraisal_score) / 3\n    self.final_score = round(self.final_score, appraisal_cycle.final_score_precision)\n", "CodeBleu_score": 30.128283349967806}, {"code": "def calculate_final_score(self)\n\n    # Get the appraisal cycle document\n    appraisal_cycle = frappe.get_doc('Appraisal Cycle', self.appraisal_cycle)\n\n    # Check if the final score should be calculated based on a formula\n    if appraisal_cycle.final_score_formula:\n        # Get the necessary data\n        total_score = self.total_score\n        feedback_score = self.feedback_score\n        self_appraisal_score = self.self_appraisal_score\n        self_appraisal_weight = appraisal_cycle.self_appraisal_weight\n        feedback_weight = appraisal_cycle.feedback_weight\n        total_score_weight = appraisal_cycle.total_score_weight\n\n        # Sanitize the formula\n        formula = appraisal_cycle.final_score_formula\n        formula = formula.replace('total_score', str(total_score))\n        formula = formula.replace('feedback_score', str(feedback_score))\n        formula = formula.replace('self_appraisal_score', str(self_appraisal_score))\n        formula = formula.replace('self_appraisal_weight', str(self_appraisal_weight))\n        formula = formula.replace('feedback_weight', str(feedback_weight))\n        formula = formula.replace('total_score_weight', str(total_score_weight))\n\n        # Evaluate the formula\n        final_score = eval(formula)\n    else:\n        # Calculate the final score as the average of the total score, average feedback score, and self-appraisal score\n        final_score = (self.total_score + self.feedback_score + self.self_appraisal_score) / 3\n\n    # Set the final score with the appropriate precision\n    self.final_score = round(final_score, appraisal_cycle.final_score_precision)\n\n    # Set the final score as the average of the total score, average feedback score, and self-appraisal score\n    self.final_score = (self.total_score + self.feedback_score + self.self_", "CodeBleu_score": 34.73012633639233}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n    if getdate(self.attendance_date) > getdate(nowdate()):\n        if self.status == \"On Leave\" and not frappe.db.exists(\n            \"Leave Application\",\n            {\n                \"employee\": self.employee,\n                \"from_date\": (\"<=\", self.attendance_date),\n                \"to_date\": (\">=\", self.attendance_date),\n                \"docstatus\": 1,\n            },\n        ):\n            return\n        frappe.throw(\n            _(\n                \"Attendance Date cannot be a future date. Please check the Employee's date of joining or the Leave Application.\"\n            )\n        )\n    if getdate(self.attendance_date) < getdate(\n        frappe.db.get_value(\"Employee\", self.employee, \"date_of_joining\")\n    ):\n        frappe.throw(\n            _(\n                \"Attendance Date cannot be before the Employee's date of joining. Please check the Employee's date of joining.\"\n            )\n        )\n\n", "CodeBleu_score": 35.45695392649028}, {"code": "def validate_attendance_date(self)\n    if getdate(self.attendance_date) > getdate(nowdate()):\n        if self.status != \"On Leave\" or frappe.db.get_value(\"Leave Application\", {\"employee\": self.employee, \"employee_name\": self.employee_name, \"from_date\": (\"<=\", self.attendance_date), \"to_date\": (\">=\", self.attendance_date), \"docstatus\": 1, \"status\": (\"in\", [\"Open\", \"Approved\"])}, \"name\"):\n            frappe.throw(_(\"Attendance date cannot be future date\"))\n\n    if getdate(self.attendance_date) < getdate(self.employee_doj):\n        frappe.throw(_(\"Attendance date cannot be before employee's date of joining\"))\n\n", "CodeBleu_score": 32.6057455560511}, {"code": "def validate_attendance_date(self)\n\n    if self.status == \"Present\" and self.attendance_date > getdate(nowdate()):\n        frappe.throw(_(\"Attendance cannot be marked for future dates unless the status is 'On Leave'\"))\n\n    if self.status == \"Present\" and self.attendance_date < self.employee.date_of_joining:\n        frappe.throw(_(\"Attendance cannot be marked before the employee's date of joining\"))\n\n    if self.status == \"On Leave\" and not self.leave_application:\n        frappe.throw(_(\"Leave Application is mandatory for On Leave\"))\n\n    if self.status == \"On Leave\" and self.leave_application:\n        if self.leave_application.docstatus != 1:\n            frappe.throw(_(\"Leave Application must be submitted\"))\n        elif self.leave_application.status != \"Approved\":\n            frappe.throw(_(\"Leave Application must be approved\"))\n        elif self.leave_application.from_date > self.attendance_date:\n            frappe.throw(_(\"Attendance Date cannot be before Leave Application From Date\"))\n        elif self.leave_application.to_date < self.attendance_date:\n            frappe.throw(_(\"Attendance Date cannot be after Leave Application To Date\"))\n\n", "CodeBleu_score": 30.125139379108397}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n    if self.employee:\n        attendance_records = frappe.get_all(\"Attendance\", filters={\"employee\": self.employee, \"attendance_date\": self.attendance_date}, fields=[\"name\"])\n        if len(attendance_records) > 1:\n            frappe.throw(\"Duplicate Attendance Record Found for Employee {0} on {1}<br><a href='/desk#Form/Attendance/{2}'>View</a>\".format(self.employee, self.attendance_date, attendance_records[1][\"name\"]))", "CodeBleu_score": 33.97314673637767}, {"code": "def validate_duplicate_record(self)\n    attendance_record = frappe.db.get_value(\"Attendance\", {\"employee\": self.employee, \"attendance_date\": self.attendance_date}, \"*\")\n    if attendance_record:\n        frappe.throw(\"Attendance record for employee {} on {} already exists at <a href='/desk#Form/Attendance/{}'>{}</a>\".format(self.employee, self.attendance_date, attendance_record.name, attendance_record.name))\n", "CodeBleu_score": 27.98860524458454}, {"code": "def validate_duplicate_record(self)\n    attendance_record = frappe.get_all(\"Attendance\", filters={\"employee\": self.employee, \"attendance_date\": self.attendance_date}, fields=[\"name\"])\n    if attendance_record:\n        frappe.throw(f\"Attendance record already exists for {self.employee} on {self.attendance_date}. Please check <a href='/app/attendance/{attendance_record[0].name}'>this record</a>\")\n", "CodeBleu_score": 23.609433230012222}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\n    # Get the current date\n    today = datetime.date.today()\n\n    # Get the message details\n    message_details = self.get_message_details()\n\n    # Get the email addresses of users in the specified group\n    email_addresses = self.get_email_addresses()\n\n    # Send the email\n    self.send_email(email_addresses, message_details)\n\n    # Update the status to \"Sent\"\n    self.update_status(\"Sent\")", "CodeBleu_score": 15.144317018687545}, {"code": "def send_summary(self)\n    # Get all messages that are not sent\n    messages = self.get_messages(status=\"Unsent\")\n    # Get the email addresses of the users in the specified group\n    group_emails = self.get_group_emails(self.group)\n    # Get the subject of the message\n    subject = messages[0][\"subject\"]\n    # Get the message body\n    body = self.get_message_body(messages)\n    # Send the email\n    self.send_email(subject, body, group_emails)\n    # Update the status of the messages to \"Sent\"\n    self.update_status(messages, \"Sent\")\n", "CodeBleu_score": 19.627554045447635}, {"code": "def send_summary(self)\n\n    # Retrieve all messages with status \"Pending\"\n    messages = self.db.query(self.Message).filter_by(status=\"Pending\").all()\n\n    # If there are no messages, exit the function\n    if len(messages) == 0:\n        return\n\n    # Get the email addresses of users in the specified group\n    group = self.db.query(self.Group).filter_by(name=\"Daily Summary\").one()\n    emails = [user.email for user in group.users]\n\n    # Send an email with the summary\n    self.send_email(\n        emails,\n        \"Daily Summary\",\n        self.render_template(\"summary.html\", messages=messages),\n    )\n\n    # Update the status of all messages to \"Sent\"\n    for message in messages:\n        message.status = \"Sent\"\n\n    # Commit changes to the database\n    self.db.commit()", "CodeBleu_score": 38.0610573403946}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n    from frappe.utils import get_link_to_form\n\n    job_applicant = self.job_applicant\n    interview_round = self.interview_round\n    job_opening = self.job_opening\n\n    duplicate_interview = frappe.db.get_value(\n        \"Interview\",\n        {\n            \"job_applicant\": job_applicant,\n            \"interview_round\": interview_round,\n            \"job_opening\": job_opening,\n        },\n    )\n\n    if duplicate_interview:\n        if duplicate_interview != self.name:\n            existing_interview = get_link_to_form(\n                \"Interview\", duplicate_interview, {\"doctype\": \"Job Applicant\"}\n            )\n            job_applicant_link = get_link_to_form(\n                \"Job Applicant\", job_applicant, {\"doctype\": \"Job Applicant\"}\n            )\n            frappe.throw(\n                f\"Job Applicant {job_applicant_link} has already been scheduled for Interview Round {interview_round} in {job_opening}.\\\n                Please check the existing Interview Record {existing_interview}.\"\n            )", "CodeBleu_score": 35.87661117092401}, {"code": "def validate_duplicate_interview(self)\n\n    job_applicant = frappe.get_doc(\"Job Applicant\", self.job_applicant)\n\n    if job_applicant.status == \"Rejected\":\n        return\n\n    if self.interview_round:\n        duplicate_interview = frappe.db.sql(\n            \"\"\"\n                SELECT name, interview_round, job_applicant, job_opening, designation, employee\n                FROM `tabInterview Schedule`\n                WHERE job_applicant = %(job_applicant)s\n                    AND interview_round = %(interview_round)s\n                    AND name != %(name)s\n                    AND docstatus = 1\n            \"\"\",\n            {\n                \"job_applicant\": self.job_applicant,\n                \"interview_round\": self.interview_round,\n                \"name\": self.name,\n            },\n        )\n\n        if duplicate_interview:\n            frappe.throw(\n                frappe._(\n                    \"Job Applicant {0} has already been scheduled for Interview Round {1} in {2}. <br><br> <a href='/desk#Form/Interview Schedule/{3}'>View Existing Interview Record</a>\".format(\n                        frappe.bold(job_applicant.applicant_name),\n                        frappe.bold(self.interview_round),\n                        frappe.bold(self.designation),\n                        frappe.bold(duplicate_interview[0][0]),\n                    )\n                )\n            )\n\n", "CodeBleu_score": 41.41984992399581}, {"code": "def validate_duplicate_interview(self)\n    from frappe.model.rename_doc import get_link_fields\n    from frappe.model.meta import get_meta\n    from frappe.utils.data import nowdate\n    from frappe.utils import get_link_to_form\n\n    # get the link fields for the interview round doctype\n    link_fields = get_link_fields(self.doctype)\n\n    # get the link fields for the job applicant doctype\n    link_fields_job_applicant = get_link_fields(\"Job Applicant\")\n\n    # get the meta for the interview round doctype\n    meta = get_meta(self.doctype)\n\n    # get the meta for the job applicant doctype\n    meta_job_applicant = get_meta(\"Job Applicant\")\n\n    # get the interview round's parent job applicant\n    job_applicant = frappe.get_doc(\"Job Applicant\", self.job_applicant)\n\n    # get the interview round's parent job applicant's email\n    email = job_applicant.email_id\n\n    # get the interview round's parent job applicant's first name\n    first_name = job_applicant.first_name\n\n    # get the interview round's parent job applicant's last name\n    last_name = job_applicant.last_name\n\n    # get the interview round's parent job applicant's full name\n    full_name = job_applicant.get_fullname()\n\n    # get the interview round's parent job applicant's job title\n    job_title = job_applicant.job_title\n\n    # get the interview round's parent job applicant's status\n    status = job_applicant.status\n\n    # get the interview round's parent job applicant's job openings\n    job_openings = job_applicant.job_openings\n\n    # get the interview round's parent job applicant's expected salary\n    expected_salary = job_applicant.expected_salary\n\n    # get the interview round's parent job applicant", "CodeBleu_score": 34.35853295403879}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n    total = 0\n    count = 0\n    for assessment in self.assessments:\n        if assessment.rating:\n            total += assessment.rating\n            count += 1\n    if count > 0:\n        self.average_rating = total / count\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 24.825576851027407}, {"code": "def calculate_average_rating(self)\n    total = 0\n    count = 0\n    for assessment in self.assessments:\n        if assessment.rating:\n            total += assessment.rating\n            count += 1\n    if count == 0:\n        self.average_rating = 0\n    else:\n        self.average_rating = total / count", "CodeBleu_score": 24.779897799571124}, {"code": "def calculate_average_rating(self)\n\n    total = 0\n    count = 0\n\n    for assessment in self.skill_assessments:\n        if assessment.rating:\n            total += assessment.rating\n            count += 1\n\n    if count:\n        self.average_rating = total / count\n    else:\n        self.average_rating = 0", "CodeBleu_score": 27.06878093971114}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    if doc.interviewers:\n        interview.interviewers = doc.interviewers\n    return interview\n", "CodeBleu_score": 37.686884207840514}, {"code": "def create_interview(doc):\n\n    interview_doc = frappe.get_doc({\n        'doctype': 'Interview',\n        'interview_round': doc.interview_round,\n        'designation': doc.designation,\n        'interviewers': doc.interviewers\n    })\n    interview_doc.insert(ignore_permissions=True)\n    return interview_doc\n\n", "CodeBleu_score": 29.42182576416309}, {"code": "def create_interview(doc):\n    if isinstance(doc, str):\n        interview = frappe.get_doc({\n            \"doctype\": \"Interview\",\n            \"interview_round\": doc,\n            \"designation\": doc\n        })\n    else:\n        interview = frappe.get_doc({\n            \"doctype\": \"Interview\",\n            \"interview_round\": doc.get(\"interview_round\"),\n            \"designation\": doc.get(\"designation\")\n        })\n        if doc.get(\"interviewers\"):\n            interview.extend(\"interviewers\", doc.get(\"interviewers\"))\n    interview.insert()\n    return interview\n", "CodeBleu_score": 35.09949245886613}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\n    # Set up the query\n    query = \"\"\"\n        SELECT\n            [Job Offer].name\n        FROM\n            [Job Offer]\n        WHERE\n            [Job Offer].designation = @0\n        AND\n            [Job Offer].company = @1\n        AND\n            [Job Offer].document_status = 1\n        AND\n            [Job Offer].date >= @2\n        AND\n            [Job Offer].date <= @3\n    \"\"\"\n\n    # Execute the query\n    job_offers = frappe.db.sql(query, (self.designation, self.company, from_date, to_date))\n\n    # Return the list of job offers\n    return job_offers", "CodeBleu_score": 33.43219609284409}, {"code": "def get_job_offer(self, from_date, to_date)\n    job_offers = frappe.get_all(\"Job Offer\", filters={\"company\": self.company, \"designation\": self.designation, \"document_status\": 1, \"creation\": [\"between\", [from_date, to_date]]}, fields=[\"name\"])\n    return job_offers\n\n", "CodeBleu_score": 57.859594012528646}, {"code": "def get_job_offer(self, from_date, to_date)\n    job_offers = frappe.db.sql(\"\"\"SELECT name FROM `tabJob Offer` WHERE designation = %(designation)s AND company = %(company)s AND date_of_creation BETWEEN %(from_date)s AND %(to_date)s AND docstatus = 1\"\"\", {'designation': self.designation, 'company': self.company, 'from_date': from_date, 'to_date': to_date}, as_dict=True)\n    return job_offers\n", "CodeBleu_score": 44.823881416066705}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n    if company and department:\n        job_offers = frappe.get_all(\"Job Offer\",\n                                    filters={\n                                        \"docstatus\": 1,\n                                        \"company\": company,\n                                        \"department\": department\n                                    },\n                                    fields=[\"name\"])\n    elif company:\n        job_offers = frappe.get_all(\"Job Offer\",\n                                    filters={\n                                        \"docstatus\": 1,\n                                        \"company\": company\n                                    },\n                                    fields=[\"name\"])\n    elif department:\n        job_offers = frappe.get_all(\"Job Offer\",\n                                    filters={\n                                        \"docstatus\": 1,\n                                        \"department\": department\n                                    },\n                                    fields=[\"name\"])\n    else:\n        job_offers = frappe.get_all(\"Job Offer\",\n                                    filters={\n                                        \"docstatus\": 1\n                                    },\n                                    fields=[\"name\"])\n\n    total_offers = len(job_offers)\n    accepted_offers = len(\n        frappe.get_all(\"Job Offer\",\n                       filters={\n                           \"docstatus\": 1,\n                           \"status\": \"Accepted\"\n                       },\n                       fields=[\"name\"]))\n\n    if total_offers == 0:\n        return 0\n    else:\n        return accepted_offers / total_offers * 100", "CodeBleu_score": 27.3818777160059}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n    from frappe.utils import nowdate\n    today = nowdate()\n    job_offers = frappe.get_all(\"Job Offer\", filters={\"docstatus\": 1, \"offer_date\": [\"<=\", today]}, fields=[\"name\"])\n    accepted_job_offers = frappe.get_all(\"Job Offer\", filters={\"docstatus\": 1, \"offer_date\": [\"<=\", today], \"offer_accepted\": 1}, fields=[\"name\"])\n    if company:\n        job_offers = frappe.get_all(\"Job Offer\", filters={\"docstatus\": 1, \"offer_date\": [\"<=\", today], \"company\": company}, fields=[\"name\"])\n        accepted_job_offers = frappe.get_all(\"Job Offer\", filters={\"docstatus\": 1, \"offer_date\": [\"<=\", today], \"offer_accepted\": 1, \"company\": company}, fields=[\"name\"])\n    if department:\n        job_offers = frappe.get_all(\"Job Offer\", filters={\"docstatus\": 1, \"offer_date\": [\"<=\", today], \"department\": department}, fields=[\"name\"])\n        accepted_job_offers = frappe.get_all(\"Job Offer\", filters={\"docstatus\": 1, \"offer_date\": [\"<=\", today], \"offer_accepted\": 1, \"department\": department}, fields=[\"name\"])\n    if company and department:\n        job_offers = frappe.get_all(\"Job Offer\", filters={\"docstatus\": 1, \"offer_date\": [\"<=\", today], \"company\": company, \"department\": department}, fields=[\"name\"])\n        accepted_job_offers = frappe.get_all(\"Job Offer\", filters={\"docstatus\": 1, \"offer_date\": [\"<=\", today], \"offer_accepted\": 1, \"company\": company, \"department\": department}, fields=[\"name\"])\n    if len(job_offers) > 0:\n        offer_acceptance_rate = len(accepted_job_offers)", "CodeBleu_score": 26.358898703048578}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n    from frappe.utils import nowdate\n    from frappe.utils import getdate\n    from frappe.utils import add_days\n    from frappe.utils import add_months\n    from frappe.utils import get_last_day\n    from frappe.utils import get_first_day\n\n    if company:\n        job_offers = frappe.get_all(\"Job Offer\", filters={\"docstatus\": 1, \"company\": company})\n    elif department:\n        job_offers = frappe.get_all(\"Job Offer\", filters={\"docstatus\": 1, \"department\": department})\n    else:\n        job_offers = frappe.get_all(\"Job Offer\", filters={\"docstatus\": 1})\n\n    accepted_offers = frappe.get_all(\"Job Offer\", filters={\"docstatus\": 1, \"offer_accepted\": 1})\n\n    if len(job_offers) == 0:\n        return 0\n    else:\n        return round(len(accepted_offers) / len(job_offers) * 100, 2)\n\n", "CodeBleu_score": 30.142462546118903}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto)    final Result<Employer> result = employerService.register(employerForRegisterDto);\n    if (result.isFailure()) {\n        return ResponseEntity.badRequest().body(result);\n    }\n    return ResponseEntity.ok(result);\n}\n", "CodeBleu_score": 55.10919398271555}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto)    final Result<Employer> result = this.employerService.register(employerForRegisterDto);\n    if (result.isFailure()) {\n        return ResponseEntity.badRequest().body(result);\n    }\n    return ResponseEntity.ok(result);\n}", "CodeBleu_score": 52.3536624956744}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto)    final Result<Employer> result = employerService.register(employerForRegisterDto);\n    if (result.isFailure()) {\n        return ResponseEntity.badRequest().body(result);\n    }\n    return ResponseEntity.ok(result);\n}\n", "CodeBleu_score": 55.10919398271555}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto)     // Retrieve the company staff record by ID.\n    CompanyStaff companyStaff = companyStaffService.findById(companyStaffForUpdateDto.getId());\n    // Return an error result if the company staff record was not found.\n    if (companyStaff == null) {\n        return Result.error(\"Company staff not found.\");\n    }\n    // Check the business rules.\n    if (!companyStaff.getPassword().equals(companyStaffForUpdateDto.getPassword())) {\n        return Result.error(\"Incorrect password.\");\n    }\n    // Update the company staff record.\n    companyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n    companyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n    // Save the changes.\n    companyStaffService.save(companyStaff);\n    // Return a success result.\n    return Result.success(\"Company staff updated.\");\n}\n", "CodeBleu_score": 40.04875311976257}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto)     // Retrieve the staff record by ID\n    CompanyStaff companyStaff = companyStaffRepository.findById(companyStaffForUpdateDto.getId());\n\n    // Check if the record exists\n    if (companyStaff == null) {\n        // Return an error result\n        return Result.error(\"Staff not found\");\n    }\n\n    // Check business rules\n    if (companyStaffForUpdateDto.getPassword() != null && !companyStaffForUpdateDto.getPassword().equals(companyStaff.getPassword())) {\n        // Return a failure result\n        return Result.failure(\"Invalid password\");\n    }\n\n    // Update the staff's first and last names\n    companyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n    companyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\n    // Save the changes\n    companyStaffRepository.save(companyStaff);\n\n    // Return a success result\n    return Result.success(\"Staff updated\");\n}", "CodeBleu_score": 40.039142491297916}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto)     final CompanyStaff companyStaff = companyStaffRepository.findById(companyStaffForUpdateDto.getId());\n    if (companyStaff == null) {\n        return Result.failure(new CompanyStaffNotFoundFailure());\n    }\n    if (!companyStaff.getPassword().equals(companyStaffForUpdateDto.getPassword())) {\n        return Result.failure(new PasswordMismatchFailure());\n    }\n    companyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n    companyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n    companyStaffRepository.save(companyStaff);\n    return Result.success();\n}\n", "CodeBleu_score": 37.83532027890673}]}
