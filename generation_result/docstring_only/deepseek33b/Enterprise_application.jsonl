{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n    attachment_ids = args.get('attachment_ids', [])\n    if not attachment_ids:\n        return request.not_found()\n    attachment_ids = [int(attachment_id) for attachment_id in attachment_ids]\n    attachments = request.env['ir.attachment'].browse(attachment_ids)\n    if not attachments.check_access_rights('read', raise_exception=False):\n        return request.not_found()\n    for attachment in attachments:\n        if not attachment.check_access_rule('read'):\n            return request.not_found()\n    zip_filename = 'attachments.zip'\n    zip_content = io.BytesIO()\n    with zipfile.ZipFile(zip_content, 'w', zipfile.ZIP_DEFLATED) as zip_file:\n        for attachment in attachments:\n            zip_file.writestr(attachment.name, attachment.raw)\n    zip_content.seek(0)\n    headers = [('Content-Type', 'application/zip'), ('Content-Disposition', content_disposition(zip_filename))]\n    return request.make_response(zip_content, headers=headers)", "CodeBleu_score": 36.38674377551281}, {"code": "def export_zip_documents(self, **args)\n    attachment_ids = args.get('attachment_ids')\n    if not attachment_ids:\n        return request.not_found()\n\n    # Check read access rights\n    attachments = request.env['ir.attachment'].sudo().browse(attachment_ids)\n    attachments.check_access_rights('read')\n    attachments.check_access_rule('read')\n\n    # Prepare zip file\n    zip_filename = 'attachments.zip'\n    zip_buffer = io.BytesIO()\n    with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:\n        for attachment in attachments:\n            zip_file.writestr(attachment.name, attachment.datas)\n\n    # Prepare HTTP headers for zip file\n    headers = [\n        ('Content-Type', 'application/zip'),\n        ('Content-Disposition', content_disposition(zip_filename)),\n        ('Content-Length', len(zip_buffer.getvalue())),\n    ]\n\n    return request.make_response(zip_buffer.getvalue(), headers=headers)", "CodeBleu_score": 38.07608638464085}, {"code": "def export_zip_documents(self, **args)\n    attachment_ids = [int(attachment_id) for attachment_id in args.get('attachment_ids', [])]\n    attachments = self.env['ir.attachment'].browse(attachment_ids)\n    for attachment in attachments:\n        if not attachment.check_access_rights('read', raise_exception=False):\n            raise AccessError(_(\"The user does not have access to the document %s.\") % attachment.name)\n        attachment.check_access_rule('read')\n    zip_filename = args.get('zip_filename', 'attachments.zip')\n    zip_filename = sanitize_filename(zip_filename)\n    zip_file = io.BytesIO()\n    with zipfile.ZipFile(zip_file, 'w', zipfile.ZIP_DEFLATED) as zip_writer:\n        for attachment in attachments:\n            zip_writer.writestr(attachment.name, attachment.raw)\n    zip_file.seek(0)\n    headers = [\n        ('Content-Type', 'application/octet-stream'),\n        ('Content-Disposition', content_disposition(zip_filename)),\n    ]\n    return request.make_response(zip_file.read(), headers=headers)\n", "CodeBleu_score": 33.45979558582401}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n    values = super()._prepare_home_portal_values(counters)\n    if 'account.move' in self.env.user.has_group('base.group_user'):\n        account_moves = self.env['account.move'].search([])\n        invoice_count = len(account_moves.filtered(lambda move: move.move_type == 'out_invoice'))\n        bill_count = len(account_moves.filtered(lambda move: move.move_type == 'in_invoice'))\n        values.update({\n            'invoice_count': invoice_count,\n            'bill_count': bill_count,\n        })\n    return values", "CodeBleu_score": 35.32368820376812}, {"code": "def _prepare_home_portal_values(self, counters)\n    values = super()._prepare_home_portal_values(counters)\n    if \"invoice_count\" in counters:\n        invoice_count = 0\n        if self.user_has_groups(\"account.group_account_invoice\"):\n            invoice_count = self.env[\"account.move\"].search_count(\n                [\n                    (\"move_type\", \"in\", (\"out_invoice\", \"out_refund\")),\n                    (\"partner_id\", \"child_of\", self.env.user.partner_id.commercial_partner_id.id),\n                    (\"state\", \"not in\", (\"cancel\", \"draft\")),\n                ]\n            )\n        values[\"invoice_count\"] = invoice_count\n    if \"bill_count\" in counters:\n        bill_count = 0\n        if self.user_has_groups(\"account.group_account_invoice\"):\n            bill_count = self.env[\"account.move\"].search_count(\n                [\n                    (\"move_type\", \"in\", (\"in_invoice\", \"in_refund\")),\n                    (\"partner_id\", \"child_of\", self.env.user.partner_id.commercial_partner_id.id),\n                    (\"state\", \"not in\", (\"cancel\", \"draft\")),\n                ]\n            )\n        values[\"bill_count\"] = bill_count\n    return values", "CodeBleu_score": 44.330453791214644}, {"code": "def _prepare_home_portal_values(self, counters)\n    values = super()._prepare_home_portal_values(counters)\n    if \"invoice_count\" in counters:\n        invoice_count = (\n            self.env[\"account.move\"]\n            .search_count([(\"state\", \"not in\", (\"cancel\", \"draft\"))])\n            if self.user_has_groups(\"account.group_account_invoice\")\n            else 0\n        )\n        values[\"invoice_count\"] = invoice_count\n    if \"bill_count\" in counters:\n        bill_count = (\n            self.env[\"account.move\"]\n            .search_count([(\"state\", \"not in\", (\"cancel\", \"draft\"))])\n            if self.user_has_groups(\"account.group_account_invoice\")\n            else 0\n        )\n        values[\"bill_count\"] = bill_count\n    return values", "CodeBleu_score": 47.323728898022296}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n    if not self._uid:\n        return request.redirect('/my/home')\n\n    # Prepare the values needed for displaying invoices, including pagination and sorting/filtering options\n    values = self._prepare_portal_layout_values()\n    Invoices = request.env['account.move']\n    domain = [('partner_id', '=', request.env.user.partner_id.id), ('move_type', 'in', ('out_invoice', 'out_refund'))]\n\n    # Retrieve the relevant invoices based on the provided parameters\n    searchbar_sortings = {\n        'date': {'label': _('Invoice Date'), 'order': 'date desc'},\n        'duedate': {'label': _('Due Date'), 'order': 'date_due desc'},\n        'name': {'label': _('Reference'), 'order': 'name desc'},\n        'state': {'label': _('Status'), 'order': 'state'},\n    }\n    if date_begin and date_end:\n        domain += [('date', '>', date_begin), ('date', '<=', date_end)]\n    if sortby:\n        order = searchbar_sortings[sortby]['order']\n        values['sortby'] = sortby\n    else:\n        order = searchbar_sortings['date']['order']\n    if filterby:\n        domain += [('state', 'in', filterby)]\n        values['filterby'] = filterby\n\n    # Update the session history with the latest invoice IDs\n    invoices = Invoices.search(domain, order=order)\n    request.session['my_invoices_history'] = invoices.ids[:100]\n\n    # Render the invoices page with the prepared values\n    values.update({\n        'invoices': invoices,\n        'page_name': 'invoice',\n        'pager': portal_pager,\n        'default_url': '/my/invoices',\n        'searchbar_sortings': searchbar_sortings,\n        'sortby': sortby,\n        'filterby': filterby,\n    })", "CodeBleu_score": 43.059038501882384}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n    values = self._prepare_portal_layout_values()\n    Invoices = request.env['account.move']\n    domain = [('partner_id', '=', request.env.user.partner_id.id)]\n\n    searchbar_sortings = {\n        'date': {'label': _('Invoice Date'), 'order': 'date desc'},\n        'duedate': {'label': _('Due Date'), 'order': 'date_due desc'},\n        'name': {'label': _('Reference'), 'order': 'name desc'},\n        'state': {'label': _('Status'), 'order': 'state'},\n    }\n    # default sort by order\n    if not sortby:\n        sortby = 'date'\n    sort_order = searchbar_sortings[sortby]['order']\n\n    searchbar_filters = {\n        'all': {'label': _('All'), 'domain': []},\n        'open': {'label': _('Open'), 'domain': [('state', '=', 'posted')]},\n        'paid': {'label': _('Paid'), 'domain': [('payment_state', '=', 'paid')]},\n        'posted': {'label': _('Posted'), 'domain': [('state', '=', 'posted')]},\n        'cancelled': {'label': _('Cancelled'), 'domain': [('state', '=', 'cancel')]},\n    }\n    # default filter by value\n    if not filterby:\n        filterby = 'all'\n    domain += searchbar_filters[filterby]['domain']\n\n    # count for pager\n    invoice_count = Invoices.search_count(domain)\n    # make pager\n    pager = portal_pager(\n        url=\"/my/invoices\",\n        url_args={'sortby': sortby, 'filterby': filterby},\n        total=invoice_count,\n        page=page,\n        step=self._items_per_page\n    )\n\n    # content according to pager and archive selected\n    invoices = Invoices.search(domain, order=sort_order, limit", "CodeBleu_score": 33.337866104253656}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n    values = self._prepare_portal_layout_values()\n    Invoice = request.env[\"account.move\"]\n    domain = [(\"invoice_partner_id\", \"=\", request.env.user.partner_id.id)]\n    searchbar_sortings = {\n        \"date\": {\"label\": _(\"Invoice Date\"), \"order\": \"date desc\"},\n        \"duedate\": {\"label\": _(\"Due Date\"), \"order\": \"date_due desc\"},\n        \"name\": {\"label\": _(\"Reference\"), \"order\": \"name desc\"},\n        \"state\": {\"label\": _(\"Status\"), \"order\": \"state\"},\n    }\n    searchbar_filters = {\n        \"all\": {\"label\": _(\"All\"), \"domain\": []},\n        \"open\": {\"label\": _(\"Open\"), \"domain\": [(\"state\", \"=\", \"posted\")]},\n        \"paid\": {\"label\": _(\"Paid\"), \"domain\": [(\"payment_state\", \"=\", \"paid\")]},\n        \"posted\": {\"label\": _(\"Posted\"), \"domain\": [(\"state\", \"=\", \"posted\")]},\n        \"cancel\": {\"label\": _(\"Cancelled\"), \"domain\": [(\"state\", \"=\", \"cancel\")]},\n    }\n    # default sort by order\n    if not sortby:\n        sortby = \"date\"\n    order = searchbar_sortings[sortby][\"order\"]\n    # default filter by value\n    if not filterby:\n        filterby = \"all\"\n    domain += searchbar_filters[filterby][\"domain\"]\n    # count for pager\n    invoice_count = Invoice.search_count(domain)\n    # pager\n    pager = portal_pager(\n        url=\"/my/invoices\",\n        url_args={\"sortby\": sortby, \"filterby\": filterby},\n        total=invoice_count,\n        page=page,\n        step=self._items_per_page,\n    )\n    # content according to pager and archive selected\n    invoices = Invoice.search(\n        domain, order=order, limit=self._items_per_page, offset=p", "CodeBleu_score": 32.69523927007986}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n    try:\n        invoice_sudo = self._document_check_access('account.move', invoice_id, access_token=access_token)\n    except (AccessError, MissingError):\n        return request.redirect('/my')\n\n    if report_type in ('html', 'pdf', 'text'):\n        return self._show_report(model=invoice_sudo, report_type=report_type, report_ref='account.action_report_invoice', download=download)\n\n    values = self._invoice_get_page_view_values(invoice_sudo, access_token, **kw)\n    if download:\n        values['attachments'] = self._get_attachments_to_download(invoice_sudo, access_token)\n        values['show_attachments'] = not values['attachments']\n        values['attachments_count'] = len(values['attachments'])\n    return request.render(\"account.portal_invoice_page\", values)", "CodeBleu_score": 38.18776436379477}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n    try:\n        invoice_sudo = self._document_check_access('account.move', invoice_id, access_token=access_token)\n\n        if report_type in ('html', 'pdf', 'text'):\n            return self._show_report(model=invoice_sudo, report_type=report_type, report_ref='account.account_invoices', download=download)\n\n        if not invoice_sudo:\n            return request.redirect('/my')\n\n        if download:\n            if invoice_sudo.attachment_ids:\n                if len(invoice_sudo.attachment_ids) == 1:\n                    return request.redirect(url_for('portal.portal_download_file', attachment_id=invoice_sudo.attachment_ids[0].id, access_token=access_token))\n                else:\n                    return self._show_report(model=invoice_sudo, report_type='zip', report_ref='account.report_invoice_attachments', download=True)\n            else:\n                return request.redirect('/my')\n\n        values = self._invoice_get_page_view_values(invoice_sudo, access_token, **kw)\n        return request.render(\"portal.portal_invoice_page\", values)\n    except AccessError:\n        return request.redirect('/my')", "CodeBleu_score": 44.335916798935585}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n    try:\n        invoice_sudo = self._document_check_access('account.move', invoice_id, access_token=access_token)\n    except (AccessError, MissingError):\n        return request.redirect('/my')\n\n    if report_type in ('html', 'pdf', 'text'):\n        return self._show_report(model=invoice_sudo, report_type=report_type, report_ref='account.account_invoices', download=download)\n\n    if download:\n        return self._portal_get_attachment(invoice_sudo)\n\n    values = self._invoice_get_page_view_values(invoice_sudo, access_token, **kw)\n    return request.render(\"account.portal_invoice_page\", values)\n\n", "CodeBleu_score": 35.21372996026872}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n    domain = [('company_id', '=', self.company_id.id)]\n    if self.company_id.account_sale_tax_id:\n        product_templates = self.env['product.template'].search(domain)\n        product_templates.write({'taxes_id': [(6, 0, self.company_id.account_sale_tax_id.ids)]})\n    if self.company_id.account_purchase_tax_id:\n        product_templates = self.env['product.template'].search(domain)\n        product_templates.write({'supplier_taxes_id': [(6, 0, self.company_id.account_purchase_tax_id.ids)]})\n", "CodeBleu_score": 29.552303218832364}, {"code": "def _get_demo_data_products(self, company=False)\n    if not company:\n        company = self.env.user.company_id\n    domain = [('company_id', '=', company.id)]\n    products = self.env['product.template'].search(domain)\n    if company.account_sale_tax_id:\n        products.write({'taxes_id': [(6, 0, company.account_sale_tax_id.ids)]})\n    if company.account_purchase_tax_id:\n        products.write({'supplier_taxes_id': [(6, 0, company.account_purchase_tax_id.ids)]})\n    return products\n\n", "CodeBleu_score": 30.85645601394051}, {"code": "def _get_demo_data_products(self, company=False)\n    # Get the company's domain\n    domain = self.env.company.compute_domain()\n\n    # Search for product templates based on the company's domain\n    product_templates = self.env['product.template'].search(domain)\n\n    # Update the sale taxes for the product templates if the company's account_sale_tax_id is set\n    if self.env.company.account_sale_tax_id:\n        product_templates.write({\n            'taxes_id': [(6, 0, self.env.company.account_sale_tax_id.ids)],\n        })\n\n    # Update the purchase taxes for the product templates if the company's account_purchase_tax_id is set\n    if self.env.company.account_purchase_tax_id:\n        product_templates.write({\n            'supplier_taxes_id': [(6, 0, self.env.company.account_purchase_tax_id.ids)],\n        })\n\n    # Return the product templates\n    return product_templates\n\n", "CodeBleu_score": 26.247318989214513}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\n    account_ref = f\"{xml_id}_{company.id}\"\n    account = self.env[\"ir.model.data\"].xmlid_to_res_id(account_ref)\n    if not account:\n        domain = [(\"deprecated\", \"=\", False)]\n        if account_type:\n            domain += [(\"user_type_id.type\", \"=\", account_type)]\n        domain += self._get_account_domain(company.id)\n        account = self.env[\"account.account\"].search(domain, limit=1)\n    return account\n\n", "CodeBleu_score": 36.591188995028595}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n    account = self.env['ir.model.data'].xmlid_to_res_id(xml_id, raise_if_not_found=False)\n    if account:\n        return self.env['account.account'].browse(account)\n    domain = [('deprecated', '=', False), ('company_id', '=', company.id)]\n    if account_type:\n        domain += [('user_type_id', '=', account_type.id)]\n    account = self.env['account.account'].search(domain, limit=1)\n    return account\n\n", "CodeBleu_score": 41.44086289646688}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n    account = self.env[\"account.account\"].search([(\"company_id\", \"=\", company.id), (\"code\", \"=\", xml_id)])\n    if not account:\n        account = self.env[\"account.account\"].search([(\"company_id\", \"=\", company.id), (\"user_type_id.type\", \"=\", account_type)], limit=1)\n    if not account:\n        account = self.env[\"account.account\"].search([(\"company_id\", \"=\", company.id)], limit=1)\n    return account\n\n", "CodeBleu_score": 43.73076683990799}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n    for company in self:\n        accounts = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.type', '=', 'current_year_earnings')])\n        if len(accounts) > 1:\n            raise ValidationError(_('There can only be one account of type \"Current Year Earnings\" per company.'))", "CodeBleu_score": 33.697673592866614}, {"code": "def _check_account_type_unique_current_year_earning(self)\n    for company in self:\n        accounts = self.search([\n            ('company_id', '=', company.id),\n            ('account_type', '=', 'Current Year Earnings')\n        ])\n        if len(accounts) > 1:\n            raise ValidationError(_('There can only be one account with the \"Current Year Earnings\" type for each company.'))\n\n", "CodeBleu_score": 31.780592004782417}, {"code": "def _check_account_type_unique_current_year_earning(self)\n    for company in self:\n        accounts = self.search([('company_id', '=', company.id), ('account_type', '=', 'current_year_earnings')])\n        if len(accounts) > 1:\n            raise ValidationError(_('There can only be one account with \"Current Year Earnings\" type for each company.'))", "CodeBleu_score": 33.44624119740573}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n    if name:\n        # Be sure name_search is symetric to name_get\n        name = name.split(' / ')[-1]\n        args = [('name', operator, name)] + list(domain or [])\n    else:\n        # search on partner_id\n        args = [('partner_id', '=', self._context.get('partner_id', False))]\n        if self._context.get('account_analytic_default_account_id'):\n            args += [('id', '=', self._context.get('account_analytic_default_account_id'))]\n        else:\n            args += [('user_id', '=', self.env.uid)]\n    accounts = self.search(args, limit=limit, order=order)\n    return accounts.name_get()", "CodeBleu_score": 38.74008775317124}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n    if not name:\n        if self._context.get('partner_id'):\n            domain = [('partner_id', '=', self._context['partner_id'])]\n        if self._context.get('company_id'):\n            domain = [('company_id', '=', self._context['company_id'])]\n        if self._context.get('partner_frequent_account_ids'):\n            ids = self._context['partner_frequent_account_ids']\n            domain = [('id', 'in', ids)]\n        if self._context.get('partner_show_all_accounts'):\n            domain = []\n        if self._context.get('partner_account_show_in_report'):\n            domain = [('partner_show_on_report', '=', True)]\n        if self._context.get('partner_account_show_archived'):\n            domain = domain + [('active', '=', True)]\n        if self._context.get('partner_account_show_active'):\n            domain = domain + [('active', '=', True)]\n        if self._context.get('partner_account_show_non_active'):\n            domain = domain + [('active', '=', False)]\n        if self._context.get('partner_account_show_non_active_if_due'):\n            domain = domain + [('active', '=', False)]\n        if self._context.get('partner_account_show_non_active_if_overdue'):\n            domain = domain + [('active', '=', False)]\n        if self._context.get('partner_account_show_non_active_if_due_or_overdue'):\n            domain = domain + [('active', '=', False)]\n        if self._context.get('partner_account_show_non_active_if_due_or_overdue'):\n            domain = domain + [('active', '=', False)]\n        if self._context.get('partner_account_show_non_active_if_due_or_overdue'):\n            domain =", "CodeBleu_score": 32.40558941159017}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n    if not name and self._context.get('partner_frequency_ids'):\n        return self._search([('id', 'in', self._context.get('partner_frequency_ids'))], limit=limit, access_rights_uid=name_get_uid)\n    return super(AccountAccount, self)._name_search(name=name, domain=domain, operator=operator, limit=limit, order=order)\n\n", "CodeBleu_score": 22.687613672969594}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\n    def _copy_translations(self, new, excluded=()):\n        \"\"\"The function _copy_translations is a helper function that performs the actual copying of translations from the current record to a new one. It excludes the specified fields and always excludes the 'name' field.\"\"\"\n        for name in self.fields.keys():\n            if name in excluded or name == \"name\":\n                continue\n            new[name] = self[name]\n\n    def _update_name_cache(self, new):\n        \"\"\"The function _update_name_cache updates the translations for the name field in the cache to reflect the new name format.\"\"\"\n        new_name = self.env[\"ir.translation\"]._debrand(new.name)\n        self.env[\"ir.translation\"].merge_translations(\n            self.env.cr,\n            \"model\",\n            \"model_%s\" % self._name,\n            \"name\",\n            new_name,\n            \"en_US\",\n        )\n\n    _copy_translations(self, new, excluded)\n    _update_name_cache(self, new)", "CodeBleu_score": 30.537316812883773}, {"code": "def copy_translations(self, new, excluded=())\n    new.write(self._fields, self._cache)\n    if not excluded:\n        excluded = ()\n    excluded += (\"name\",)\n    for name in self._fields:\n        if name not in excluded:\n            translation = self._translations.get(name)\n            if translation:\n                new._translations[name] = translation.copy()\n    if new._fields.get(\"name\"):\n        new._update_name_cache()\n\n", "CodeBleu_score": 37.34908018050132}, {"code": "def copy_translations(self, new, excluded=())\n    if not self.env.context.get('skip_translation_copy'):\n        for name in self.translated_field_names() - excluded:\n            if name != 'name':\n                self.env['ir.translation'].create(self._get_translation_values(new, name))\n            elif new._trans_lang_get() and new.name:\n                self.env['ir.translation'].create(self._get_translation_values(new, 'name'))\n                self.env['ir.translation'].create(self._get_translation_values(new, 'name', new.name))", "CodeBleu_score": 25.838600848945337}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n    self.ensure_one()\n    action = self.env.ref(\"account.action_move_out_invoice_type\").read()[0]\n    lines = self.env[\"account.move.line\"].search([\n        (\"sale_line_ids\", \"in\", self.order_line.ids),\n        (\"move_id.type\", \"in\", (\"out_invoice\", \"out_refund\")),\n        (\"move_id.state\", \"not in\", (\"draft\", \"cancel\")),\n        (\"move_id.invoice_payment_state\", \"in\", (\"paid\", \"in_payment\")),\n        (\"exclude_from_invoice_tab\", \"=\", False),\n    ])\n    # choose the view_mode accordingly\n    if len(lines) > 1:\n        action[\"domain\"] = [(\"id\", \"in\", lines.move_id.ids)]\n    elif lines:\n        form_view = [(self.env.ref(\"account.view_move_form\").id, \"form\")]\n        if \"views\" in action:\n            action[\"views\"] = form_view + [(state, view) for state, view in action[\"views\"] if view != \"form\"]\n        else:\n            action[\"views\"] = form_view\n        action[\"res_id\"] = lines.move_id.id\n    else:\n        action = {\"type\": \"ir.actions.act_window_close\"}\n\n    if self.env.context.get(\"show_sale\"):\n        action[\"context\"] = dict(\n            self.env.context,\n            search_default_invoice_id=self.id,\n            default_invoice_id=self.id,\n            default_sale_order_id=self.id,\n            search_default_sale_order_id=self.id,\n        )\n    else:\n        action[\"context\"] = dict(\n            self.env.context,\n            default_type=\"in_invoice\",\n            default_sale_order_id=self.id,\n            default_sale_order_ids=self.ids,\n            default_origin=self.name,\n            default_reference", "CodeBleu_score": 39.157248779774214}, {"code": "def action_view_invoice(self)\n    action = self.action_view_invoice()\n    if action[\"context\"] is None:\n        action[\"context\"] = {}\n    action[\"context\"].update(\n        {\"search_default_invoice\": 1, \"default_journal_id\": self.journal_id.id}\n    )\n    if self.analytic_account_id:\n        action[\"context\"].update(\n            {\n                \"default_analytic_account_id\": self.analytic_account_id.id,\n                \"default_analytic_tag_ids\": [(6, 0, self.analytic_tag_ids.ids)],\n            }\n        )\n    action[\"context\"].update(\n        {\n            \"search_default_journal_id\": self.journal_id.id,\n            \"default_invoice_date\": self.date_order[:10],\n            \"default_partner_id\": self.partner_id.id,\n        }\n    )\n    domain = [\n        \"&\",\n        \"&\",\n        (\"move_type\", \"=\", \"out_invoice\"),\n        (\"state\", \"not in\", (\"draft\", \"cancel\")),\n        (\"invoice_payment_state\", \"not in\", (\"paid\", \"in_payment\")),\n        \"|\",\n        (\"partner_id\", \"=\", self.partner_id.id),\n        (\"partner_id.commercial_partner_id\", \"=\", self.partner_id.id),\n    ]\n    domain += self._get_sale_type_domain()\n    if self.analytic_account_id:\n        domain += [\n            \"|\",\n            (\"analytic_account_id\", \"=\", self.analytic_account_id.id),\n            (\"analytic_tag_ids\", \"in\", self.analytic_tag_ids.ids),\n        ]\n    invoices = self.env[\"account.move\"].search(domain)\n    action[\"context\"].update({\"search_default_sale_order_id\": self.id})\n    if len(invoices) == 1:\n        action[\"views\"] = [(self", "CodeBleu_score": 33.01386443220894}, {"code": "def action_view_invoice(self)\n    self.ensure_one()\n    lines = self.env[\"account.move.line\"].search([\n        (\"sale_line_ids\", \"in\", self.order_line.ids),\n        (\"account_id.user_type_id.type\", \"in\", (\"receivable\", \"payable\")),\n        (\"move_id.state\", \"=\", \"posted\"),\n        (\"move_id.move_type\", \"in\", (\"out_invoice\", \"out_refund\")),\n        (\"move_id.analytic_account_id\", \"=\", self.analytic_account_id.id),\n    ])\n    if self.analytic_account_id:\n        lines = lines.filtered(lambda x: x.move_id.analytic_account_id == self.analytic_account_id)\n    move_ids = lines.mapped(\"move_id\").ids\n    action = self.env.ref(\"account.action_move_out_invoice_type\").read()[0]\n    action[\"context\"] = {\n        \"default_type\": \"out_invoice\",\n        \"default_invoice_origin\": self.name,\n        \"default_invoice_payment_term_id\": self.payment_term_id.id,\n        \"default_invoice_partner_id\": self.partner_id.id,\n        \"default_invoice_user_id\": self.user_id.id,\n        \"default_sale_order_id\": self.id,\n    }\n    action[\"domain\"] = [(\"id\", \"in\", move_ids)]\n    return action", "CodeBleu_score": 39.608493232858024}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n    self.ensure_one()\n    action = self.env[\"ir.actions.actions\"]._for_xml_id(\n        \"account.action_move_in_invoice_type\"\n    )\n    action[\"context\"] = {\n        \"default_move_type\": \"in_invoice\",\n        \"search_default_to_purchase\": 1,\n        \"search_default_purchase_id\": self.id,\n        \"default_purchase_id\": self.id,\n        \"default_company_id\": self.company_id.id,\n        \"default_type\": \"in_invoice\",\n    }\n    move_ids = self.env[\"account.move.line\"].search(\n        [(\"purchase_id\", \"=\", self.id), (\"move_id.move_type\", \"=\", \"in_invoice\")]\n    ).mapped(\"move_id\")\n    if len(move_ids) == 1:\n        action[\"views\"] = [(self.env.ref(\"account.view_move_form\").id, \"form\")]\n        action[\"res_id\"] = move_ids.id\n    return action", "CodeBleu_score": 35.65557809165944}, {"code": "def action_view_vendor_bill(self)\n    self.ensure_one()\n    action = self.env[\"ir.actions.actions\"]._for_xml_id(\n        \"account.action_move_in_invoice_type\"\n    )\n    action[\"context\"] = {\n        \"default_move_type\": \"in_invoice\",\n        \"create\": False,\n        \"show_vendor_bills\": True,\n        \"search_default_purchase_order_id\": self.id,\n    }\n    return action", "CodeBleu_score": 14.332733832565548}, {"code": "def action_view_vendor_bill(self)\n    self.ensure_one()\n    move_lines = self.env['account.move.line'].search([\n        ('purchase_id', '=', self.id),\n        ('move_id.move_type', '=', 'in_invoice'),\n    ])\n    move_ids = move_lines.mapped('move_id').ids\n    action = {\n        'type': 'ir.actions.act_window',\n        'views': [(self.env.ref('account.view_move_tree').id, 'tree'), (self.env.ref('account.view_move_form').id, 'form')],\n        'view_mode': 'tree,form',\n        'name': _('Vendor Bills'),\n        'res_model': 'account.move',\n        'domain': [('id', 'in', move_ids)],\n        'context': {\n            'create': False,\n            'default_move_type': 'in_invoice',\n        }\n    }\n    return action", "CodeBleu_score": 39.727380108097975}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n    if self and values.get('attachment_ids'):\n        values.pop('attachment_ids')\n    if self:\n        with self.env.cr.savepoint():\n            result = super(MailThread, self).write(values)\n    else:\n        result = True\n    return result", "CodeBleu_score": 44.50791975391641}, {"code": "def write(self, values)\n    if self:\n        if \"attachment_ids\" in values:\n            with self.env.cr.savepoint():\n                for record in self:\n                    record.message_post(attachment_ids=values.pop(\"attachment_ids\"))\n        return super(MailThread, self).write(values)\n\n", "CodeBleu_score": 30.73924778227678}, {"code": "def write(self, values)\n    if self and self[0]._name == \"project.task\":\n        if len(self) > 1 and \"attachment_ids\" in values:\n            values.pop(\"attachment_ids\")\n        with api.Environment.manage():\n            with registry(self._cr.dbname).cursor() as new_cr:\n                super(Task, self).write(values)\n                return True\n    return super(Task, self).write(values)", "CodeBleu_score": 32.06992216854276}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n    if self.company_id.create_bank_account_from_iban:\n        return self.env[\"res.partner.bank\"].browse()\n    bank_account = self.env[\"res.partner.bank\"].search(\n        [\n            (\"sanitized_acc_number\", \"=\", self.sanitized_acc_number),\n            (\"partner_id\", \"=\", self.partner_id.id),\n            (\"company_id\", \"=\", self.company_id.id),\n        ],\n        limit=1,\n    )\n    if not bank_account:\n        bank_account = self.env[\"res.partner.bank\"].create(\n            {\n                \"acc_number\": self.acc_number,\n                \"partner_id\": self.partner_id.id,\n                \"company_id\": self.company_id.id,\n            }\n        )\n    return bank_account\n\n", "CodeBleu_score": 51.010025862597665}, {"code": "def _find_or_create_bank_account(self)\n    if not self.env.context.get('active_model') or not self.env.context.get('active_id'):\n        return self.env['account.bank.account'].browse()\n\n    if self.env.context.get('active_model') == 'res.partner':\n        partner_id = self.env.context.get('active_id')\n    else:\n        partner_id = self.env.context.get('active_model') == 'account.payment' and self.env.context.get('active_id') and self.env['account.payment'].browse(self.env.context.get('active_id')).partner_id.id\n\n    if not partner_id:\n        return self.env['account.bank.account'].browse()\n\n    bank_account = self.env['account.bank.account'].search([\n        ('partner_id', '=', partner_id),\n        ('company_id', '=', self.env.company.id)\n    ], limit=1)\n\n    if not bank_account and not self.env['res.config.settings'].sudo().get_param('account_bank_statement_import.skip_bank_account_creation'):\n        bank_account = self.env['account.bank.account'].create({\n            'partner_id': partner_id,\n            'acc_number': '0000',\n            'company_id': self.env.company.id,\n        })\n\n    return bank_account", "CodeBleu_score": 45.30630794861479}, {"code": "def _find_or_create_bank_account(self)\n    bank_account = self.env['res.partner.bank'].browse(self._context.get('active_id'))\n    if self.env['res.company']._check_create_bank_account_from_iban():\n        return bank_account\n    if bank_account.acc_number:\n        domain = [('acc_number', '=', bank_account.acc_number), ('partner_id', '=', bank_account.partner_id.id)]\n        existing_bank_accounts = self.env['res.partner.bank'].search(domain)\n        if existing_bank_accounts:\n            return existing_bank_accounts[0]\n    return bank_account.with_context(default_partner_id=bank_account.partner_id.id)", "CodeBleu_score": 36.46239250509267}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n    self.ensure_one()\n    context = self._context.copy()\n    context.update({'date': self.date})\n    if currency:\n        context.update({'currency_id': currency.id})\n    if amount_currency:\n        context.update({'amount_currency': amount_currency})\n    if self.currency_id:\n        context.update({'currency_id': self.currency_id.id})\n    if self.amount_currency:\n        context.update({'amount_currency': self.amount_currency})\n    if self.currency_id and self.currency_id.is_zero(self.amount_currency):\n        self.amount_currency = self.currency_id.round(self.amount)\n    if self.currency_id and self.currency_id.is_zero(self.amount):\n        self.amount = self.currency_id.round(self.amount_currency)\n    if self.currency_id and self.currency_id != self.company_id.currency_id:\n        balance = self.currency_id._convert(balance, self.company_id.currency_id, self.company_id, self.date or fields.Date.context_today(self))\n    if self.currency_id and self.currency_id != self.company_id.currency_id:\n        amount = self.currency_id._convert(self.amount, self.company_id.currency_id, self.company_id, self.date or fields.Date.context_today(self))\n    else:\n        amount = self.amount\n    if self.currency_id and self.currency_id != self.company_id.currency_id:\n        journal_amount = self.currency_id._convert(self.amount, self.company_id.currency_id, self.company_id, self.date or fields.Date.context_today(self))\n    else:\n        journal_amount = self.amount\n    if self.currency_id and self.currency_id != self.company_id.currency_id:\n        company_amount = self.currency_id._convert(self.amount, self.company_id.currency_id,", "CodeBleu_score": 27.589116715305806}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n    self.ensure_one()\n    account_move = self.move_id\n    account_move_lines = self.move_id.line_ids\n    debit_line_ids = account_move_lines.filtered(lambda line: line.account_id.account_type in ('asset_receivable', 'liability_payable'))\n    credit_line_ids = account_move_lines.filtered(lambda line: line.account_id.account_type in ('asset_credit', 'liability_receivable'))\n    debit_line = debit_line_ids and debit_line_ids[0]\n    credit_line = credit_line_ids and credit_line_ids[0]\n    currency_id = currency\n    if currency_id != debit_line.currency_id:\n        balance = debit_line.currency_id._convert(balance, currency_id, account_move.company_id, debit_line.date)\n    if currency_id != credit_line.currency_id:\n        balance = credit_line.currency_id._convert(balance, currency_id, account_move.company_id, credit_line.date)\n    if debit_line.currency_id == credit_line.currency_id:\n        if debit_line.currency_id == currency_id:\n            amount_currency = balance\n        else:\n            amount_currency = debit_line.currency_id._convert(balance, debit_line.currency_id, account_move.company_id, debit_line.date)\n    else:\n        amount_currency = debit_line.currency_id._convert(balance, debit_line.currency_id, account_move.company_id, debit_line.date)\n    if debit_line.currency_id == currency_id:\n        transaction_amount = balance\n    else:\n        transaction_amount = debit_line.currency_id._convert(balance, currency_id, account_move.company_id, debit_line.date)\n    if credit_line.currency_id == currency_id:\n        journal_amount = balance\n    else:", "CodeBleu_score": 24.648263214703935}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\n    if self._context.get('force_rate'):\n        rate = self._context.get('force_rate')\n    else:\n        rate = currency.rate\n\n    if currency == self.company_currency:\n        if self.currency_id == self.company_currency:\n            amount_currency = self.amount_currency\n        else:\n            amount_currency = self.amount_currency * rate\n    else:\n        amount_currency = self.amount_currency * rate\n\n    if self.currency_id == self.company_currency:\n        balance = self.amount_currency\n    else:\n        balance = self.amount_currency * rate\n\n    return {\n        'amount_currency': amount_currency,\n        'balance': balance,\n    }\n\n", "CodeBleu_score": 13.674290058056298}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n    for journal in self:\n        journal.outbound_payment_method_line_ids = [(5, 0, 0)]\n        if journal.type in ('bank', 'cash'):\n            outbound_payment_methods = self.env['account.payment.method'].search([('payment_type', '=', 'outbound')])\n            for method in outbound_payment_methods:\n                journal.outbound_payment_method_line_ids = [(0, 0, {\n                    'payment_method_id': method.id,\n                    'force_unique_import_code': method.code == 'manual',\n                    'show_in_payment_method_selection_screen': True,\n                })]", "CodeBleu_score": 42.1286616266935}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n    for journal in self:\n        journal.outbound_payment_method_line_ids = [(5, 0, 0)]\n        if journal.type in (\"bank\", \"cash\"):\n            for method in self.env[\"account.payment.method\"].search(\n                [(\"payment_type\", \"=\", \"outbound\")]\n            ):\n                journal.outbound_payment_method_line_ids = [\n                    (0, 0, {\"payment_method_id\": method.id})\n                ]", "CodeBleu_score": 39.98459999503273}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n    for journal in self:\n        journal.outbound_payment_method_line_ids = [(5, 0, 0)]\n        if journal.type in ('bank', 'cash'):\n            outbound_payment_methods = journal._get_outbound_payment_methods()\n            for payment_method in outbound_payment_methods:\n                journal.outbound_payment_method_line_ids = [(0, 0, {\n                    'payment_method_id': payment_method.id,\n                    'journal_id': journal.id,\n                })]", "CodeBleu_score": 48.45436324746003}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n    if self.date:\n        return\n    if self.invoice_date:\n        if self.move_type not in (\"out_invoice\", \"out_refund\", \"in_invoice\", \"in_refund\"):\n            return\n        if self.tax_report_country_id:\n            if self.tax_report_country_id.l10n_de_datev_code == \"00\":\n                date = self.invoice_date\n            else:\n                date = self.invoice_date + timedelta(days=1)\n        else:\n            date = self.invoice_date\n    else:\n        date = fields.Date.context_today(self)\n    if date != self.date:\n        self.date = date\n        self._recompute_dynamic_lines(recompute_all_taxes=True)", "CodeBleu_score": 31.357031617574172}, {"code": "def _compute_date(self)\n    if self.move_type not in (\"out_invoice\", \"out_refund\", \"in_invoice\", \"in_refund\"):\n        return super()._compute_date()\n    for move in self:\n        if not move.invoice_date and not move.date:\n            move.date = fields.Date.today()\n        elif move.invoice_date and move.invoice_date != move.date:\n            if move.tax_report_country_id and move.tax_report_country_id.code == \"PT\":\n                if move.move_type in (\"out_invoice\", \"out_refund\"):\n                    move.date = move.invoice_date - relativedelta(days=1)\n                else:\n                    move.date = move.invoice_date + relativedelta(days=1)\n            else:\n                move.date = move.invoice_date\n        if move.date != move.date:\n            move.date = move.date\n            move._fields_sync([\"date\"])\n            move._recompute_dynamic_lines(recompute_all_taxes=True)\n            move._recompute_tax_lines(recompute_tax_base_amount=True)\n            move._recompute_payment_terms_lines()\n            move._recompute_tax_totals()\n            move._recompute_amount_fields()\n            move._recompute_sale_order_lines()\n            move._recompute_invoice_lines()\n            move._recompute_payments_widget()\n            move._recompute_tax_totals_json()\n            move._recompute_amount_by_group()\n            move._recompute_dynamic_lines(recompute_all_taxes=True)\n            move._recompute_tax_lines(recompute_tax_base_amount=True)\n            move._recompute_payment_terms_lines()\n            move._recompute_tax_totals()\n            move._recompute_amount_fields()\n            move._recompute_sale_order_lines()\n            move._recompute_invoice_lines()\n            move._recompute_payments_widget()", "CodeBleu_score": 26.225502138594326}, {"code": "def _compute_date(self)\n    if self.invoice_date:\n        if self.is_sale_document():\n            self.date = self.invoice_date\n        else:\n            self.date = self._get_accounting_date()\n    elif not self.date:\n        self.date = fields.Date.today()\n\n    if self.date != self._origin.date:\n        self._origin.date = self.date\n        self.env.add_to_compute(self._fields['date'], self._origin)\n        self.env.add_to_compute(self._fields['move_type'], self._origin)", "CodeBleu_score": 27.945604673919167}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n    if self.move_type in ('out_invoice', 'out_refund'):\n        if self.partner_id.property_payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.property_payment_term_id.id\n        else:\n            self.invoice_payment_term_id = False\n    elif self.move_type in ('in_invoice', 'in_refund'):\n        if self.partner_id.property_supplier_payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.property_supplier_payment_term_id.id\n        else:\n            self.invoice_payment_term_id = False\n\n", "CodeBleu_score": 33.42919511193233}, {"code": "def _compute_invoice_payment_term_id(self)\n    for move in self:\n        if move.move_type in (\"out_invoice\", \"out_refund\"):\n            if move.partner_id.property_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_payment_term_id.id\n            else:\n                move.invoice_payment_term_id = False\n        elif move.move_type in (\"in_invoice\", \"in_refund\"):\n            if move.partner_id.property_supplier_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id.id\n            else:\n                move.invoice_payment_term_id = False\n        else:\n            move.invoice_payment_term_id = False\n", "CodeBleu_score": 40.058051009792536}, {"code": "def _compute_invoice_payment_term_id(self)\n    invoice_payment_term_id = False\n    if self.move_type in ['out_invoice', 'out_refund']:\n        invoice_payment_term_id = self.partner_id.property_payment_term_id.id\n    elif self.move_type in ['in_invoice', 'in_refund']:\n        invoice_payment_term_id = self.partner_id.property_supplier_payment_term_id.id\n    self.invoice_payment_term_id = invoice_payment_term_id", "CodeBleu_score": 26.660365942736824}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)    for tax in self:\n        tax_group = self.env['account.tax.group'].search([\n            ('country_id', '=', tax.company_id.account_fiscal_country_id.id),\n            ('company_id', '=', tax.company_id.id),\n        ], limit=1)\n        if not tax_group:\n            tax_group = self.env['account.tax.group'].search([\n                ('country_id', '=', False),\n                ('company_id', '=', tax.company_id.id),\n            ], limit=1)\n        tax.tax_group_id = tax_group", "CodeBleu_score": 28.7782202625236}, {"code": " def _compute_tax_group_id(self)    for tax in self:\n        tax_groups = self.env['account.tax.group'].search([('company_id', '=', tax.company_id.id)])\n        tax_groups_by_country = tax_groups.filtered(lambda g: g.country_id == tax.country_id)\n        tax_groups_by_company = tax_groups.filtered(lambda g: g.country_id == False)\n        tax_groups_by_country_and_company = tax_groups_by_country.filtered(lambda g: g.company_id == tax.company_id)\n        if tax_groups_by_country_and_company:\n            tax.tax_group_id = tax_groups_by_country_and_company[0].id\n        elif tax_groups_by_company:\n            tax.tax_group_id = tax_groups_by_company[0].id\n        else:\n            tax.tax_group_id = tax_groups[0].id if tax_groups else False", "CodeBleu_score": 32.88660480755558}, {"code": " def _compute_tax_group_id(self)    for tax_group in self:\n        taxes = self.env['account.tax'].search([('company_id', '=', tax_group.company_id.id)])\n        tax_groups = self.env['account.tax.group'].search([('company_id', '=', tax_group.company_id.id)])\n        tax_groups_dict = {}\n        for tax in taxes:\n            if tax.country_id:\n                key = (tax.country_id, tax.company_id)\n            else:\n                key = (None, tax.company_id)\n            tax_groups_dict.setdefault(key, []).append(tax)\n        for key, tax_list in tax_groups_dict.items():\n            country, company = key\n            if country:\n                tax_group = tax_groups.filtered(lambda tg: tg.country_id == country and tg.company_id == company)\n            else:\n                tax_group = tax_groups.filtered(lambda tg: not tg.country_id and tg.company_id == company)\n            if tax_group:\n                for tax in tax_list:\n                    tax.tax_group_id = tax_group\n            else:\n                for tax in tax_list:\n                    tax.tax_group_id = None", "CodeBleu_score": 31.90481674231474}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n    self.session.get(url, verify=False)\n    self.session.cookies.get_dict()\n    data = {\n        'login': login,\n        'password': password,\n        'db': db,\n    }\n    if force:\n        data['force'] = '1'\n    with open(module_file, 'rb') as f:\n        res = self.session.post(url + '/base_import_module/login_upload', files={'mod_file': f}, data=data, verify=False)\n    if res.text == 'No Module named base_import_module.models':\n        raise Exception('The server does not have the required module installed or is outdated.')\n    return res.text", "CodeBleu_score": 53.95582463492647}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n    self.session.get(url)\n    self.session.cookies.get_dict()\n    payload = {\n        \"login\": login,\n        \"password\": password,\n        \"db\": db,\n        \"force\": force,\n    }\n    with open(module_file, \"rb\") as f:\n        data = f.read()\n    payload[\"data\"] = base64.b64encode(data)\n    payload[\"data_fname\"] = os.path.basename(module_file)\n    r = self.session.post(\n        f\"{url}/base_import_module/login_upload\",\n        data=payload,\n        headers={\"Content-Type\": \"application/json\"},\n    )\n    if r.status_code == 200:\n        return r.text\n    raise Exception(r.text)\n\n", "CodeBleu_score": 46.52605540358447}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n    self.session.get(url)\n    self.session.cookies.get_dict()\n    data = {\n        \"login\": login,\n        \"password\": password,\n        \"db\": db,\n    }\n    if force:\n        data[\"force\"] = \"1\"\n    with open(module_file, \"rb\") as f:\n        res = self.session.post(\n            url + \"/base_import_module/login_upload\", data=data, files={\"mod_file\": f}\n        )\n    if \"Module not found\" in res.text:\n        raise Exception(\"Module not found on server\")\n    if \"Outdated module version\" in res.text:\n        raise Exception(\"Outdated module version on server\")\n    return res.text\n\n", "CodeBleu_score": 44.938775785294524}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n    db_name = config['db_name']\n    overwrite = config['overwrite']\n    registry = Registry(db_name)\n    with registry.cursor() as cr:\n        importer = TranslationImporter(cr, 'path/to/translation/files', overwrite=overwrite)\n        importer.load_translation()\n        importer.save_translation()", "CodeBleu_score": 31.384628481637765}, {"code": "def import_translation()\n    db_name = config[\"db_name\"]\n    overwrite = config[\"overwrite\"]\n    registry = Registry(db_name)\n    with registry.cursor() as cr:\n        importer = TranslationImporter(cr, \"path/to/translations\", overwrite=overwrite)\n        importer.load_module_terms([\"base\"], [\"en_US\"])\n        importer.save(\"en_US\")\n\n", "CodeBleu_score": 29.97872061816108}, {"code": "def import_translation()\n\n    db_name = config[\"db_name\"]\n    overwrite = config.get(\"overwrite\", False)\n\n    registry = Registry(db_name)\n    with registry.cursor() as cr:\n        importer = TranslationImporter(cr, \"path/to/translations\", overwrite=overwrite)\n        importer.load_module_terms([\"base\"], [\"en_US\"])\n        importer.import_file(\"path/to/translations/en_US.csv\")\n\n", "CodeBleu_score": 30.87575572236645}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n    child = Node(name, info)\n    child.depth = self.depth + 1\n    if child not in self.children:\n        self.children.append(child)\n        child.parent = self\n        if self.parent:\n            child.parent_name = self.parent.name\n            child.parent_info = self.parent.info\n            child.parent_depth = self.parent.depth\n        if self.name:\n            child.parent_name = self.name\n        if self.info:\n            child.parent_info = self.info\n        if self.depth:\n            child.parent_depth = self.depth\n        self.children.sort(key=lambda x: x.name)\n    return child\n\n", "CodeBleu_score": 37.40013392435718}, {"code": "def add_child(self, name, info)\n    child = Node(name, info)\n    child.depth = self.depth + 1\n    if child not in self.children:\n        self.children.append(child)\n        if self.parent is not None:\n            if self.parent.parent is not None:\n                child.parent_name = self.parent.parent.name\n            child.parent_name = self.parent.name\n            child.parent_type = self.parent.type\n            child.parent_info = self.parent.info\n            child.parent_depth = self.parent.depth\n            child.parent_children = self.parent.children\n            child.parent_parent = self.parent.parent\n            child.parent_parent_name = self.parent.parent_name\n            child.parent_parent_type = self.parent.parent_type\n            child.parent_parent_info = self.parent.parent_info\n            child.parent_parent_depth = self.parent.parent_depth\n            child.parent_parent_children = self.parent.parent_children\n            child.parent_parent_parent = self.parent.parent_parent\n            child.parent_parent_parent_name = self.parent.parent_parent_name\n            child.parent_parent_parent_type = self.parent.parent_parent_type\n            child.parent_parent_parent_info = self.parent.parent_parent_info\n            child.parent_parent_parent_depth = self.parent.parent_parent_depth\n            child.parent_parent_parent_children = self.parent.parent_parent_parent_children\n            child.parent_parent_parent_parent = self.parent.parent_parent_parent_parent\n            child.parent_parent_parent_parent_name = self.parent.parent_parent_parent_parent_name\n            child.parent_parent_parent_parent_type = self.parent.parent_parent_parent_parent_type\n            child.parent_parent_parent_parent_info = self.parent.parent_parent_parent_parent_info\n            child.parent_parent_parent_parent_depth = self.parent.parent_parent_parent_parent_depth\n            child.parent_parent_parent_parent_children = self.", "CodeBleu_score": 28.36677736950063}, {"code": "def add_child(self, name, info)\n    new_node = Node(name, info)\n    new_node.depth = self.depth + 1\n    if new_node not in self.children:\n        self.children.append(new_node)\n        if self.parent:\n            new_node.parent = self.parent\n            new_node.parent_name = self.parent.name\n            new_node.parent_info = self.parent.info\n        if self.parent_name:\n            new_node.grandparent_name = self.parent_name\n            new_node.grandparent_info = self.parent_info\n        if self.grandparent_name:\n            new_node.great_grandparent_name = self.grandparent_name\n            new_node.great_grandparent_info = self.grandparent_info\n        if self.great_grandparent_name:\n            new_node.great_great_grandparent_name = self.great_grandparent_name\n            new_node.great_great_grandparent_info = self.great_grandparent_info\n        self.children.sort(key=lambda x: x.name)\n    return new_node\n", "CodeBleu_score": 34.93643747241226}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n    result = [[\"Date\", \"Balance\"]] + [[date, 0] for date in dates]\n    root_type = account.root_type\n    for entry in gl_entries:\n        for i, date in enumerate(dates):\n            if entry.posting_date <= date:\n                result[i + 1][1] += entry.amount\n    if root_type not in [\"Asset\", \"Expense\"]:\n        for i in range(1, len(result)):\n            result[i][1] = -result[i][1]\n    if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n        for i in range(2, len(result)):\n            result[i][1] += result[i - 1][1]\n    return result\n\n", "CodeBleu_score": 34.902487416424336}, {"code": "def build_result(account, dates, gl_entries)\n    result = {\n        \"account\": account.name,\n        \"root_type\": account.root_type,\n        \"currency\": frappe.db.get_value(\"Account\", account, \"account_currency\"),\n    }\n    for date in dates:\n        result[date] = 0\n\n    if result[\"root_type\"] not in [\"Asset\", \"Expense\"]:\n        for key, value in result.items():\n            if key not in [\"account\", \"root_type\", \"currency\"]:\n                result[key] = -value\n\n    for entry in gl_entries:\n        for date in dates:\n            if getdate(entry.posting_date) <= getdate(date):\n                result[date] += flt(entry.debit) - flt(entry.credit)\n\n    if result[\"root_type\"] in [\"Asset\", \"Liability\", \"Equity\"]:\n        balance = 0\n        for date in dates:\n            balance += result[date]\n            result[date] = balance\n\n    return result\n\n", "CodeBleu_score": 27.406036686204065}, {"code": "def build_result(account, dates, gl_entries)\n\n    # Initialize the result with the dates and zeros for balances\n    result = {date: 0 for date in dates}\n\n    # Determine the account's root type\n    root_type = account.root_type\n\n    # Iterate through the entries, updating the balance for each date\n    for entry in gl_entries:\n        if entry.account == account:\n            for date in dates:\n                if date >= entry.posting_date:\n                    result[date] += entry.amount\n\n    # If the root type is not \"Asset\" or \"Expense,\" negate the balances\n    if root_type not in [\"Asset\", \"Expense\"]:\n        result = {date: -balance for date, balance in result.items()}\n\n    # For \"Asset,\" \"Liability,\" and \"Equity\" accounts, accumulate the balance over time\n    if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n        accumulated_balance = 0\n        for date in dates:\n            accumulated_balance += result[date]\n            result[date] = accumulated_balance\n\n    return result\n", "CodeBleu_score": 27.920184481803194}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n    if self.account_type in ['Receivable', 'Payable']:\n        if self.account_type != self.get_original('account_type'):\n            if self.general_ledger_entries:\n                frappe.msgprint(_(\"Warning: The account type for this account has been changed from Receivable/Payable to a non-receivable/payable type. This may cause issues in the Accounts report. Please check the general ledger entries for this account.\"))\n                self.add_comment(\"Label\", \"Account type changed from Receivable/Payable to non-receivable/payable\")\n", "CodeBleu_score": 23.657823090597436}, {"code": "def validate_receivable_payable_account_type(self)\n\n    # Get the current account type\n    current_account_type = self.account_type\n\n    # Get the account type before the save operation\n    old_account_type = self.get_doc_before_save().account_type\n\n    # Check if the account type has changed\n    if current_account_type != old_account_type:\n        # Check if the account type is changing from \"Receivable\" or \"Payable\" to a non-receivable/payable type\n        if (old_account_type == \"Receivable\" or old_account_type == \"Payable\") and (current_account_type != \"Receivable\" and current_account_type != \"Payable\"):\n            # Check if there are existing general ledger entries for the account\n            if frappe.db.exists(\"GL Entry\", {\"account\": self.name}):\n                # Generate a warning message\n                frappe.msgprint(\n                    \"Account type has been changed from Receivable/Payable to a non-receivable/payable type. Please check the 'Accounts' report for potential issues.\",\n                    title=\"Warning\",\n                    indicator=\"orange\",\n                )\n\n                # Add a comment to the account record\n                self.add_comment(\n                    \"Warning\",\n                    \"Account type has been changed from Receivable/Payable to a non-receivable/payable type. Please check the 'Accounts' report for potential issues.\",\n                )\n\n", "CodeBleu_score": 23.47867928628714}, {"code": "def validate_receivable_payable_account_type(self)\n    if (\n        self.account_type in [\"Receivable\", \"Payable\"]\n        and self.account_type != self.get_doc_before_save().account_type\n    ):\n        gl_entries = frappe.db.get_all(\n            \"GL Entry\",\n            filters={\"account\": self.name},\n            fields=[\"account\", \"posting_date\", \"voucher_type\", \"voucher_no\"],\n            order_by=\"posting_date\",\n        )\n\n        if gl_entries:\n            message = (\n                \"Account type change from Receivable/Payable to non-receivable/payable type detected for account {}. \"\n                \"Please check the Accounts report and GL Entries for potential issues.\".format(self.name)\n            )\n            self.add_comment(text=message)\n\n            # Create a warning log\n            frappe.log_error(\n                title=\"Account Type Change Warning\",\n                message=message,\n            )\n", "CodeBleu_score": 37.45501434084124}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n    # Check if the account currency has been explicitly specified\n    if self.currency_id:\n        # Mark the currency as explicitly specified\n        self.currency_explicitly_specified = True\n    else:\n        # Assign the company's default currency if none is provided\n        self.currency_id = self.company_id.currency_id.id\n\n    # Check for existing general ledger entries with a different currency\n    if self.general_ledger_ids.filtered(lambda l: l.currency_id != self.currency_id):\n        # Raise an error if the account currency differs from the ledger entries' currency\n        raise ValidationError(\n            _(\n                \"You cannot change the account currency if there are already journal entries in this account that are not in the same currency.\"\n            )\n        )", "CodeBleu_score": 30.372645847594903}, {"code": "def validate_account_currency(self)\n    if not self.currency_id:\n        self.currency_id = self.company_id.currency_id\n    self.currency_explicitly_set = True\n    if self.general_ledger_entry_ids.filtered(lambda l: l.currency_id != self.currency_id):\n        raise UserError(_(\"You cannot change the currency of an account that has already been used in general ledger entries.\"))\n\n", "CodeBleu_score": 24.125315646737253}, {"code": "def validate_account_currency(self)\n    if self.currency_id:\n        self.currency_explicitly_set = True\n    else:\n        self.currency_explicitly_set = False\n        self.currency_id = self.company_id.currency_id\n    if self.general_ledger_entry_ids:\n        if self.currency_id != self.general_ledger_entry_ids[0].currency_id:\n            raise UserError(_('The account currency and the general ledger entries currency must be the same.'))", "CodeBleu_score": 25.90150609153629}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n    merged_entries = {}\n    for entry in entries:\n        key = tuple(entry[dimension] for dimension in accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \"debit\": 0,\n                \"credit\": 0,\n                \"debit_in_account_currency\": 0,\n                \"credit_in_account_currency\": 0,\n            }\n        merged_entries[key][\"debit\"] += entry[\"debit\"]\n        merged_entries[key][\"credit\"] += entry[\"credit\"]\n        merged_entries[key][\"debit_in_account_currency\"] += entry[\n            \"debit_in_account_currency\"\n        ]\n        merged_entries[key][\"credit_in_account_currency\"] += entry[\n            \"credit_in_account_currency\"\n        ]\n    return merged_entries\n\n", "CodeBleu_score": 43.075715251307216}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n    merged_entries = {}\n    for entry in entries:\n        key = tuple(entry.get(dimension) for dimension in accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \"debit\": entry.debit,\n                \"credit\": entry.credit,\n                \"debit_in_account_currency\": entry.debit_in_account_currency,\n                \"credit_in_account_currency\": entry.credit_in_account_currency,\n            }\n        else:\n            merged_entries[key][\"debit\"] += entry.debit\n            merged_entries[key][\"credit\"] += entry.credit\n            merged_entries[key][\n                \"debit_in_account_currency\"\n            ] += entry.debit_in_account_currency\n            merged_entries[key][\n                \"credit_in_account_currency\"\n            ] += entry.credit_in_account_currency\n    return merged_entries\n\n", "CodeBleu_score": 36.2138760076781}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\n    # Initialize an empty dictionary to store the aggregated entries\n    aggregated_entries = {}\n\n    # Iterate through each entry in the list of entries\n    for entry in entries:\n        # Generate a unique key based on the accounting dimensions\n        key = tuple([entry.get(dimension) for dimension in accounting_dimensions])\n\n        # Check if the key already exists in the aggregated entries dictionary\n        if key in aggregated_entries:\n            # If the key exists, update the debit, credit, and their respective amounts in account currency\n            aggregated_entries[key][\"debit\"] += entry.debit\n            aggregated_entries[key][\"credit\"] += entry.credit\n            aggregated_entries[key][\"debit_in_account_currency\"] += entry.debit_in_account_currency\n            aggregated_entries[key][\"credit_in_account_currency\"] += entry.credit_in_account_currency\n        else:\n            # If the key does not exist, create a new entry in the aggregated entries dictionary\n            aggregated_entries[key] = {\n                \"debit\": entry.debit,\n                \"credit\": entry.credit,\n                \"debit_in_account_currency\": entry.debit_in_account_currency,\n                \"credit_in_account_currency\": entry.credit_in_account_currency,\n                \"accounting_dimensions\": {dimension: entry.get(dimension) for dimension in accounting_dimensions},\n            }\n\n    # Return the dictionary containing the aggregated entries\n    return aggregated_entries\n", "CodeBleu_score": 31.075808803413857}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n    if self.transaction_type == \"Supplier Payment\":\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.hold_type == \"Hold Till Date\" and supplier.on_hold_till_date < self.posting_date:\n            frappe.throw(\n                \"The supplier is on hold till {0}. Please set the release date before proceeding with the transaction.\".format(\n                    supplier.on_hold_till_date\n                )\n            )\n        elif supplier.hold_type == \"Hold Indefinitely\":\n            frappe.throw(\n                \"The supplier is on hold indefinitely. Please set the release date before proceeding with the transaction.\"\n            )\n    elif self.transaction_type == \"Buying Invoice\":\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.hold_type == \"Hold Till Date\" and supplier.on_hold_till_date < self.posting_date:\n            frappe.throw(\n                \"The supplier is on hold till {0}. Please set the release date before proceeding with the transaction.\".format(\n                    supplier.on_hold_till_date\n                )\n            )\n        elif supplier.hold_type == \"Hold Indefinitely\":\n            frappe.throw(\n                \"The supplier is on hold indefinitely. Please set the release date before proceeding with the transaction.\"\n            )\n\n", "CodeBleu_score": 25.213811766807925}, {"code": "def ensure_supplier_is_not_blocked(self)\n    if self.doctype in [\"Payment Entry\", \"Journal Entry\"]:\n        supplier = frappe.get_doc(\"Supplier\", self.party)\n    else:\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n\n    if supplier.on_hold:\n        if supplier.hold_type == \"All Transactions\" or (\n            supplier.hold_type == \"Buying\" and self.doctype == \"Purchase Invoice\"\n        ):\n            if supplier.release_date:\n                if getdate(supplier.release_date) >= getdate(today()):\n                    frappe.throw(\n                        \"This transaction cannot be processed until {}\".format(\n                            supplier.release_date\n                        )\n                    )\n            else:\n                frappe.throw(\n                    \"This supplier is on hold. Please contact your Accounts Manager for more information.\"\n                )\n        else:\n            frappe.throw(\n                \"This transaction cannot be processed until {} is released\".format(\n                    supplier.supplier_name\n                )\n            )", "CodeBleu_score": 27.927379133814267}, {"code": "def ensure_supplier_is_not_blocked(self)\n    if self.doctype in (\"Payment Entry\", \"Journal Entry\"):\n        supplier = frappe.get_doc(\"Supplier\", self.party)\n    else:\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n\n    if supplier.on_hold and supplier.hold_type == self.doctype:\n        if self.doctype == \"Payment Entry\":\n            release_date = supplier.release_date\n        else:\n            release_date = supplier.buying_invoice_release_date\n\n        if getdate(self.posting_date) <= getdate(release_date):\n            frappe.throw(\n                _(\n                    \"Cannot proceed with this transaction as supplier is on hold since {}\"\n                ).format(getdate(release_date))\n            )\n\n    return supplier", "CodeBleu_score": 32.09536503754159}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\n    repost_doctypes = self.get_repost_doctypes()\n    if not repost_doctypes:\n        return\n\n    for doctype in repost_doctypes:\n        voucher_type = self.voucher_type\n        voucher_no = self.voucher_no\n\n        if doctype == \"Sales Invoice\":\n            rows = frappe.db.get_all(\n                \"Sales Invoice Item\",\n                filters={\n                    \"voucher_type\": voucher_type,\n                    \"voucher_no\": voucher_no,\n                },\n                fields=[\"name\", \"parent\", \"voucher_type\", \"voucher_no\"],\n            )\n        elif doctype == \"Purchase Invoice\":\n            rows = frappe.db.get_all(\n                \"Purchase Invoice Item\",\n                filters={\n                    \"voucher_type\": voucher_type,\n                    \"voucher_no\": voucher_no,\n                },\n                fields=[\"name\", \"parent\", \"voucher_type\", \"voucher_no\"],\n            )\n        elif doctype == \"Journal Entry\":\n            rows = frappe.db.get_all(\n                \"Journal Entry Account\",\n                filters={\n                    \"voucher_type\": voucher_type,\n                    \"voucher_no\": voucher_no,\n                },\n                fields=[\"name\", \"parent\", \"voucher_type\", \"voucher_no\"],\n            )\n        elif doctype == \"Payment Entry\":\n            rows = frappe.db.get_all(\n                \"Payment Entry Reference\",\n                filters={\n                    \"reference_doctype\": voucher_type,\n                    \"reference_name\": voucher_no,\n                },\n                fields=[\n                    \"name\",\n                    \"parent\",\n                    \"reference_doctype\",\n                    \"reference_name\",\n                ],\n            )\n        elif doctype == \"Delivery Note\":\n            rows = frappe.db.get", "CodeBleu_score": 18.79951942508495}, {"code": "def _remove_references_in_repost_doctypes(self)\n    repost_doctypes = [\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Receipt\",\n        \"Delivery Note\",\n        \"Sales Order\",\n        \"Purchase Order\",\n        \"Quotation\",\n    ]\n\n    for repost_doctype in repost_doctypes:\n        rows = frappe.get_all(\n            repost_doctype,\n            filters={\n                \"voucher_type\": self.doctype,\n                \"voucher_no\": self.name,\n            },\n            fields=[\"name\", \"parent\", \"parenttype\"],\n        )\n\n        if rows:\n            row_map = {}\n            for row in rows:\n                if row.parenttype not in row_map:\n                    row_map[row.parenttype] = {}\n\n                if row.parent not in row_map[row.parenttype]:\n                    row_map[row.parenttype][row.parent] = []\n\n                row_map[row.parenttype][row.parent].append(row.name)\n\n            for parenttype, parents in row_map.items():\n                for parent, rows in parents.items():\n                    parent_doc = frappe.get_doc(parenttype, parent)\n                    if parent_doc.doctype == \"Sales Invoice\":\n                        parent_doc.repost_vouchers = [\n                            row for row in parent_doc.repost_vouchers if row.voucher_no != self.name\n                        ]\n                    else:\n                        parent_doc.vouchers = [\n                            row for row in parent_doc.vouchers if row.voucher_no != self.name\n                        ]\n                    parent_doc.flags.ignore_validate_update_after_submit = True\n                    parent_doc.flags.ignore_links = True\n                    parent_doc.save()\n", "CodeBleu_score": 27.20546536816668}, {"code": "def _remove_references_in_repost_doctypes(self)\n    from frappe.model.document import Document\n    from frappe.model.naming import make_autoname\n    from frappe.model.utils.rename_doc import rename_doc\n    from frappe.utils import nowdate\n    from frappe.utils.data import get_link_to_form\n    from frappe.utils.data import get_datetime\n    from frappe.utils.data import get_datetime_str\n    from frappe.utils.data import get_timestamp\n    from frappe.utils.data import get_datetime_str\n    from frappe.utils.data import get_datetime\n    from frappe.utils.data import get_datetime_str\n    from frappe.utils.data import get_timestamp\n    from frappe.utils.data import get_datetime_str\n    from frappe.utils.data import get_datetime\n    from frappe.utils.data import get_datetime_str\n    from frappe.utils.data import get_timestamp\n    from frappe.utils.data import get_datetime_str\n    from frappe.utils.data import get_datetime\n    from frappe.utils.data import get_datetime_str\n    from frappe.utils.data import get_timestamp\n    from frappe.utils.data import get_datetime_str\n    from frappe.utils.data import get_datetime\n    from frappe.utils.data import get_datetime_str\n    from frappe.utils.data import get_timestamp\n    from frappe.utils.data import get_datetime_str\n    from frappe.utils.data import get_datetime\n    from frappe.utils.data import get_datetime_str\n    from frappe.utils.data import get_timestamp\n    from frappe.utils.data import get_datetime_str\n    from frappe.utils.data import get_datetime\n    from frappe.utils.data import get_datetime_str\n    from frappe.utils.data import get_timestamp\n    from frappe.utils.data import get_datetime_str\n    from frappe.utils.data import get_datetime", "CodeBleu_score": 4.673184155466961}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n    try:\n        self.authenticate_client()\n        query_params = {\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n        }\n        if account_id:\n            query_params[\"account_id\"] = account_id\n        transactions = []\n        total_transactions = 1\n        while len(transactions) < total_transactions:\n            response = self.client.Transactions.get(self.access_token, **query_params)\n            total_transactions = response[\"total_transactions\"]\n            transactions += response[\"transactions\"]\n        return transactions\n    except plaid.errors.PlaidError as e:\n        if e.code == \"PRODUCT_NOT_READY\":\n            raise PlaidProductNotReadyError(\n                \"Plaid product not ready. Please try again later.\"\n            )\n        elif e.code == \"ITEM_LOGIN_REQUIRED\":\n            raise PlaidItemLoginRequiredError(\n                \"Plaid item login required. Please log in to your account and try again.\"\n            )\n        else:\n            raise\n    except Exception as e:\n        logger.error(f\"Error fetching transactions: {e}\")\n        raise\n\n", "CodeBleu_score": 32.564851539611}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n    try:\n        self.authenticate_client()\n        query_params = {\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n            \"account_id\": account_id,\n            \"count\": 100,\n            \"offset\": 0,\n        }\n        transactions = []\n        while True:\n            response = self.client.Transactions.get(self.access_token, **query_params)\n            transactions.extend(response[\"transactions\"])\n            if len(transactions) < response[\"total_transactions\"]:\n                query_params[\"offset\"] += 100\n            else:\n                break\n        return transactions\n    except plaid.errors.PlaidError as e:\n        if e.code == \"PRODUCT_NOT_READY\":\n            raise PlaidProductNotReadyError(e.message)\n        elif e.code == \"PRODUCTS_NOT_SUPPORTED\":\n            raise PlaidProductsNotSupportedError(e.message)\n        else:\n            raise e\n    except Exception as e:\n        logger.error(f\"Error fetching transactions: {e}\")\n        raise e\n\n", "CodeBleu_score": 35.785058456491996}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n    try:\n        self.authenticate_client()\n        query_params = {\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n            \"account_id\": account_id\n        }\n        transactions = self.client.Transactions.get(self.access_token, **query_params)\n        if transactions[\"total_transactions\"] < transactions[\"total_transactions\"]:\n            while transactions[\"total_transactions\"] < transactions[\"total_transactions\"]:\n                query_params[\"offset\"] = transactions[\"total_transactions\"]\n                transactions[\"transactions\"].extend(self.client.Transactions.get(self.access_token, **query_params)[\"transactions\"])\n        return transactions\n    except plaid.errors.PlaidError as e:\n        raise e\n    except Exception as e:\n        logging.error(e)\n        raise e\n\n", "CodeBleu_score": 38.31442506255592}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n    import json\n    import logging\n    from models import Bank\n    from plaid_connector import PlaidConnector\n\n    try:\n        # Parse the response\n        response_json = json.loads(response)\n        access_token = response_json[\"access_token\"]\n        item_id = response_json[\"item_id\"]\n\n        # Get the access token using the PlaidConnector\n        plaid_connector = PlaidConnector()\n        access_token = plaid_connector.get_access_token(item_id)\n\n        # Check if the bank already exists\n        existing_bank = Bank.query.filter_by(access_token=access_token).first()\n\n        if existing_bank:\n            # Update the access token for the existing bank record\n            existing_bank.access_token = access_token\n            db.session.commit()\n        else:\n            # Create and insert a new bank record\n            new_bank = Bank(access_token=access_token, token=token)\n            db.session.add(new_bank)\n            db.session.commit()\n    except Exception as e:\n        logging.error(f\"Error adding institution: {str(e)}\")\n\n", "CodeBleu_score": 39.885985417533796}, {"code": "def add_institution(token, response)\n    try:\n        # Parse the response\n        public_token = response[\"public_token\"]\n        institution_id = response[\"metadata\"][\"institution\"][\"institution_id\"]\n        institution_name = response[\"metadata\"][\"institution\"][\"name\"]\n\n        # Retrieve an access token using the PlaidConnector\n        access_token = PlaidConnector.exchange_public_token(public_token)\n\n        # Check if the bank already exists in the database\n        bank = Bank.query.filter_by(institution_id=institution_id).first()\n        if bank:\n            # Update the access token for the existing bank record\n            bank.access_token = access_token\n        else:\n            # Create a new bank record\n            bank = Bank(\n                institution_id=institution_id,\n                institution_name=institution_name,\n                access_token=access_token,\n            )\n            db.session.add(bank)\n\n        # Save the bank record\n        db.session.commit()\n    except Exception as e:\n        # Log any errors that occur during the process\n        logger.error(f\"Error adding institution: {e}\")\n\n", "CodeBleu_score": 38.841225064140986}, {"code": "def add_institution(token, response)\n    import json\n    import os\n    from plaid.model.institutions_get_by_id_request import InstitutionsGetByIdRequest\n    from plaid.model.institutions_get_by_id_response import InstitutionsGetByIdResponse\n    from plaid.model.item_public_token_exchange_request import ItemPublicTokenExchangeRequest\n    from plaid.model.item_public_token_exchange_response import ItemPublicTokenExchangeResponse\n    from plaid.model.products import Products\n    from plaid.model.institution_status import InstitutionStatus\n    from plaid.model.country_code import CountryCode\n    from plaid.model.link_token_create_request import LinkTokenCreateRequest\n    from plaid.model.link_token_create_response import LinkTokenCreateResponse\n    from plaid.model.link_token_create_request_user import LinkTokenCreateRequestUser\n    from plaid.model.link_token_create_request_update import LinkTokenCreateRequestUpdate\n    from plaid.model.item_public_token_create_request import ItemPublicTokenCreateRequest\n    from plaid.model.item_public_token_create_response import ItemPublicTokenCreateResponse\n    from plaid.model.country_code import CountryCode\n    from plaid.model.link_token_create_request_user import LinkTokenCreateRequestUser\n    from plaid.model.link_token_create_request_update import LinkTokenCreateRequestUpdate\n    from plaid.model.link_token_create_request_account_filters import LinkTokenCreateRequestAccountFilters\n    from plaid.model.link_token_create_request_transfer import LinkTokenCreateRequestTransfer\n    from plaid.model.link_token_create_request_deposit_switch import LinkTokenCreateRequestDepositSwitch\n    from plaid.model.link_token_create_request_payment_initiation import LinkTokenCreateRequestPaymentInitiation\n    from plaid.model.link_token_create_request_income_verification import LinkTokenCreateRequestIncomeVerification\n    from plaid.model.link_token_create_request_ach import LinkTokenCreateRequestAch", "CodeBleu_score": 6.524573827053643}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n    try:\n        last_integration_date = bank_account.last_integration_date\n        start_date = last_integration_date.strftime('%Y-%m-%d')\n        end_date = datetime.now().strftime('%Y-%m-%d')\n        transactions = bank.get_transactions(\n            bank_account.account_number, start_date, end_date)\n        new_transactions = 0\n        for transaction in transactions:\n            if transaction.date > last_integration_date:\n                BankTransaction.objects.create(\n                    bank_account=bank_account,\n                    amount=transaction.amount,\n                    date=transaction.date,\n                    description=transaction.description,\n                    type=transaction.type,\n                    balance=transaction.balance\n                )\n                new_transactions += 1\n        if new_transactions > 0:\n            bank_account.last_integration_date = transactions[-1].date\n            bank_account.save()\n        logging.info(f\"Synced {new_transactions} new transactions for {bank_account}\")\n    except Exception as e:\n        logging.error(f\"Error syncing transactions for {bank_account}: {e}\")\n\n", "CodeBleu_score": 31.252984636972215}, {"code": "def sync_transactions(bank, bank_account)\n    try:\n        bank_integration_settings = BankIntegrationSettings.objects.get(\n            bank=bank, bank_account=bank_account\n        )\n        start_date = bank_integration_settings.last_integration_date\n        end_date = datetime.now()\n        transactions = bank.get_transactions(bank_account, start_date, end_date)\n        new_transactions = []\n        for transaction in transactions:\n            if transaction.date > start_date:\n                new_transactions.append(transaction)\n        if new_transactions:\n            BankTransaction.objects.bulk_create(new_transactions)\n            logger.info(\n                f\"Added {len(new_transactions)} new transactions for {bank_account}.\"\n            )\n            bank_integration_settings.last_integration_date = min(\n                [transaction.date for transaction in new_transactions]\n            )\n            bank_integration_settings.save()\n        else:\n            logger.info(f\"No new transactions found for {bank_account}.\")\n    except Exception as e:\n        logger.error(f\"Error syncing transactions for {bank_account}: {e}\")\n\n", "CodeBleu_score": 30.94567101002552}, {"code": "def sync_transactions(bank, bank_account)\n    try:\n        bank_account.refresh_from_db()\n        start_date = bank_account.last_integration_date\n        end_date = datetime.now()\n        transactions = bank.get_transactions(\n            bank_account.bank_account_id, start_date, end_date\n        )\n        new_transactions = []\n        for transaction in transactions:\n            new_transactions.append(\n                BankTransaction(\n                    bank_account=bank_account,\n                    date=transaction[\"date\"],\n                    amount=transaction[\"amount\"],\n                    description=transaction[\"description\"],\n                    currency=transaction[\"currency\"],\n                )\n            )\n        BankTransaction.objects.bulk_create(new_transactions)\n        bank_account.last_integration_date = transactions[-1][\"date\"]\n        bank_account.save()\n        logger.info(f\"{len(new_transactions)} new transactions added.\")\n    except Exception as e:\n        logger.error(f\"Error syncing transactions: {e}\")", "CodeBleu_score": 32.70260879349481}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n    try:\n        q = self.quickbooks_client.get_collection_resource(entity)\n        total_count = q.count()\n        if total_count == 0:\n            self.logger.info(f\"No {entity} found.\")\n            return\n        self.logger.info(f\"Total {entity} count: {total_count}\")\n        for i in range(0, total_count, 1000):\n            entities = q.filter(start_position=i, max_results=1000)\n            for entity in entities:\n                entity_dict = entity.to_dict()\n                self._preprocess_and_save_entity(entity_dict, entity)\n    except Exception as e:\n        self.logger.error(f\"Error while migrating {entity}: {e}\")\n        self.logger.error(f\"Response text: {e.response.text}\")", "CodeBleu_score": 27.725264326429038}, {"code": "def _migrate_entries(self, entity)\n\n    try:\n        query = f\"SELECT * FROM {entity} STARTPOSITION {self.start_position} MAXRESULTS 1000\"\n        response = self.client.get(query)\n        total_count = int(response[\"QueryResponse\"][entity][\"@totalCount\"])\n        total_retrieved = 0\n        total_saved = 0\n\n        while total_retrieved < total_count:\n            entries = response[\"QueryResponse\"][entity]\n            if isinstance(entries, dict):\n                entries = [entries]\n\n            for entry in entries:\n                entry = self._preprocess_entry(entry, entity)\n                self.save_entry(entry, entity)\n                total_saved += 1\n\n            if total_retrieved + 1000 < total_count:\n                self.start_position += 1000\n            else:\n                self.start_position = total_count\n\n            total_retrieved += 1000\n            response = self.client.get(query)\n\n        self.logger.info(\n            f\"Total {entity} retrieved: {total_retrieved}, Total {entity} saved: {total_saved}\"\n        )\n\n    except Exception as e:\n        self.logger.error(f\"Error while migrating {entity}: {e}\")\n        self.logger.error(f\"Response text: {response.text}\")\n", "CodeBleu_score": 36.47739824601173}, {"code": "def _migrate_entries(self, entity)\n    query = f\"SELECT * FROM {entity}\"\n    total_count = self._get_total_count(query)\n    start_position = 1\n    while start_position <= total_count:\n        try:\n            response = self._make_request(\n                method=\"GET\",\n                endpoint=\"query\",\n                params={\n                    \"query\": query,\n                    \"minorversion\": 64,\n                    \"startPosition\": start_position,\n                },\n            )\n            response_json = response.json()\n            if response_json.get(\"QueryResponse\", {}).get(\"totalCount\", 0) == 0:\n                break\n            entries = response_json[\"QueryResponse\"][\"Item\"]\n            if isinstance(entries, dict):\n                entries = [entries]\n            for entry in entries:\n                self._preprocess_and_save_entry(entry, entity)\n            start_position += 1000\n        except Exception as e:\n            self.logger.error(f\"Error while migrating {entity}: {e}\")\n            self.logger.error(f\"Response text: {response.text}\")\n\n", "CodeBleu_score": 29.355163373902492}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n    if invoice.get('DocNumber') is None:\n        invoice['DocNumber'] = self._get_next_invoice_number()\n    if invoice.get('TxnDate') is None:\n        invoice['TxnDate'] = self._get_current_date()\n\n    if invoice.get('LinkedTxn'):\n        for txn in invoice['LinkedTxn']:\n            if txn.get('TxnType') in ['StatementCharge', 'ReimburseCharge']:\n                self._save_journal_entry(invoice)\n                return\n\n    self._save_sales_invoice(invoice)\n\n", "CodeBleu_score": 30.220030333752867}, {"code": "def _save_invoice(self, invoice)\n\n    # Check if the invoice has a QuickBooks ID\n    if not invoice.quickbooks_id:\n        # Generate a QuickBooks ID for the invoice\n        invoice.quickbooks_id = self._generate_quickbooks_id()\n\n    # Check if the invoice has any linked transactions\n    if invoice.linked_transactions:\n        # Check if any of the linked transactions are of type \"StatementCharge\" or \"ReimburseCharge\"\n        if any(\n            t.transaction_type in [\"StatementCharge\", \"ReimburseCharge\"]\n            for t in invoice.linked_transactions\n        ):\n            # Save the invoice as a journal entry\n            self._save_journal_entry(invoice)\n        else:\n            # Save the invoice as a sales invoice\n            self._save_sales_invoice(invoice)\n    else:\n        # Save the invoice as a sales invoice\n        self._save_sales_invoice(invoice)\n\n", "CodeBleu_score": 28.717855307973128}, {"code": "def _save_invoice(self, invoice)\n    # Check if the invoice has a QuickBooks ID\n    if not invoice.get('qbo_id'):\n        # Generate a QuickBooks ID for the invoice\n        invoice['qbo_id'] = self._generate_id()\n\n    # Check if the invoice has linked transactions\n    if 'linked_transactions' in invoice:\n        # Check if any linked transactions are of type \"StatementCharge\" or \"ReimburseCharge\"\n        for transaction in invoice['linked_transactions']:\n            if transaction['txn_type'] in ['StatementCharge', 'ReimburseCharge']:\n                # Save the invoice as a journal entry\n                self._save_journal_entry(invoice)\n                return\n\n    # Save the invoice as a sales invoice\n    self._save_sales_invoice(invoice)\n", "CodeBleu_score": 33.2203099734226}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n    schedule_list = []\n    visit_interval = (end_date - start_date).days // no_of_visit\n    for i in range(no_of_visit):\n        visit_date = start_date + timedelta(days=visit_interval * i)\n        while visit_date.weekday() in [5, 6] or visit_date in self.holidays:\n            visit_date += timedelta(days=1)\n        schedule_list.append(visit_date)\n    return schedule_list\n", "CodeBleu_score": 25.77521647586473}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n    # Calculate the interval between visits\n    interval = (end_date - start_date).days / (no_of_visit - 1)\n    # Initialize the schedule list with the start date\n    schedule = [start_date]\n    # Iterate to create the schedule\n    for i in range(1, no_of_visit):\n        # Calculate the next visit date\n        next_date = start_date + timedelta(days=i * interval)\n        # Check if the next visit date is a holiday\n        if next_date.weekday() in [5, 6] or next_date in self.holidays:\n            # If it is a holiday, adjust the date to the next business day\n            next_date = self.adjust_date(next_date)\n        # Add the next visit date to the schedule\n        schedule.append(next_date)\n    # Return the final schedule list\n    return schedule\n", "CodeBleu_score": 22.762860284492596}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\n    # Calculate the interval between visits\n    interval = (end_date - start_date).days / (no_of_visit - 1)\n\n    # Initialize the list of schedule dates\n    schedule_list = []\n\n    # Iterate to create the schedule\n    for i in range(no_of_visit):\n        # Calculate the scheduled date for this visit\n        scheduled_date = start_date + timedelta(days=i * interval)\n\n        # Adjust the scheduled date to avoid holidays\n        while scheduled_date in self.holidays:\n            scheduled_date += timedelta(days=1)\n\n        # Add the scheduled date to the list\n        schedule_list.append(scheduled_date)\n\n    # Return the list of schedule dates\n    return schedule_list\n\n", "CodeBleu_score": 23.47375027856821}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = [])      $message = 'Action completed successfully';\n      $method = request()->method();\n      $bulk_url = url()->current() . '/bulk';\n      $html = view('components.' . $view, $data)->render();\n\n      if ($method === 'GET') {\n         return response()->json([\n            'success' => true,\n            'message' => $message,\n            'data' => [\n               'title' => 'Action',\n               'path' => $bulk_url,\n               'handle' => 'bulk',\n               'html' => $html\n            ]\n         ]);\n      }\n\n      return response()->json([\n         'success' => true,\n         'message' => $message,\n         'data' => []\n      ]);\n   }\n\n   /**\n    * This function handles bulk actions for a given model. It retrieves the selected IDs from the request, performs the bulk action using the specified method, and returns a JSON response with success status, message, and data.\n    */\n   public function bulk($model, $method) {\n      $ids = request()->get('ids');\n\n      $model::whereIn('id', $ids)->$method();\n\n      return response()->json([\n         'success' => true,\n         'message' => 'Action completed successfully',\n         'data' => []\n      ]);\n   }\n}", "CodeBleu_score": 39.42491730518044}, {"code": "<?\n   public function response($view, $data = [])        $data['title'] = trans('core/base::notices.confirmation');\n        $data['path'] = ($this->request->has('path')) ? $this->request->input('path') : $this->request->url();\n        $data['handle'] = ($this->request->has('handle')) ? $this->request->input('handle') : '';\n\n        if ($this->request->has('bulk_action')) {\n            $data['bulk_action'] = $this->request->input('bulk_action');\n            $data['bulk_action_url'] = $this->request->url() . '?bulk_action=' . $this->request->input('bulk_action');\n        }\n\n        $response = [\n            'success' => true,\n            'data' => $data,\n            'html' => view($view, $data)->render(),\n        ];\n\n        if ($this->request->has('_editable')) {\n            $response['is_editable'] = true;\n        }\n\n        if ($this->request->has('message')) {\n            $response['message'] = $this->request->input('message');\n        }\n\n        return $response;\n    }", "CodeBleu_score": 43.0729379658146}, {"code": "<?\n   public function response($view, $data = [])      $data['title'] = $this->title;\n      $data['path'] = $this->path;\n      $data['handle'] = $this->handle;\n      $data['view'] = $view;\n\n      $response = [\n         'success' => true,\n         'message' => 'Success',\n         'data' => $data,\n         'html' => view('admin.partials.modals.content', $data)->render()\n      ];\n\n      return response()->json($response);\n   }\n\n   /**\n    * This function returns a JSON response with a success status, message, and data.\n    */\n   public function successResponse($message, $data = []) {\n      $response = [\n         'success' => true,\n         'message' => $message,\n         'data' => $data\n      ];\n\n      return response()->json($response);\n   }\n\n   /**\n    * This function returns a JSON response with an error status, message, and data.\n    */\n   public function errorResponse($message, $data = []) {\n      $response = [\n         'success' => false,\n         'message' => $message,\n         'data' => $data\n      ];\n\n      return response()->json($response);\n   }\n\n   /**\n    * This function returns a JSON response with an error status, message, and data.\n    */\n   public function redirectResponse($route, $message, $data = []) {\n      $response = [\n         'success' => true,\n         'message' => $message,\n         'data' => $data,\n         'redirect' => route($route)\n      ];\n\n      return response()->json($response);\n   }\n}", "CodeBleu_score": 38.38182337707503}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request)    $contacts = $request->get('contacts');\n\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (\\Exception $e) {\n            return $this->errorResponse($e->getMessage());\n        }\n    }\n\n    return $this->successResponse();\n}", "CodeBleu_score": 65.18165151255265}, {"code": "<?\npublic function deleteContacts($request)    try {\n        $contacts = $request->contacts;\n        foreach ($contacts as $contact) {\n            $this->dispatch(new DeleteContact($contact));\n        }\n    } catch (Exception $e) {\n        return back()->withErrors(['error' => 'Error deleting contacts']);\n    }\n}", "CodeBleu_score": 47.60526467374013}, {"code": "<?\npublic function deleteContacts($request)    // Get the selected contacts from the request\n    $selectedContacts = $request->input('selected_contacts');\n\n    // Iterate through the selected contacts\n    foreach ($selectedContacts as $contactId) {\n        try {\n            // Attempt to dispatch a delete operation for the contact\n            dispatch(new DeleteContactJob($contactId));\n        } catch (\\Exception $e) {\n            // If an exception occurs, display an error message\n            return redirect()->back()->with('error', 'Failed to delete contact.');\n        }\n    }\n\n    // If all contacts were successfully deleted, redirect back with a success message\n    return redirect()->back()->with('success', 'Contacts deleted successfully.');\n}", "CodeBleu_score": 44.57617277280627}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request)    $transactions = Transaction::whereIn('id', $request->transactions)->get();\n\n    foreach ($transactions as $transaction) {\n        try {\n            $this->dispatch(new DeleteTransactionJob($transaction));\n        } catch (\\Exception $e) {\n            flash()->error(__('There was an error while deleting the transaction.'));\n        }\n    }\n}", "CodeBleu_score": 61.9686363508759}, {"code": "<?\npublic function deleteTransactions($request)    $transactions = Transaction::whereIn('id', $request->transactions)->get();\n\n    foreach ($transactions as $transaction) {\n        try {\n            dispatch(new DeleteTransaction($transaction));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error();\n        }\n    }\n}", "CodeBleu_score": 65.42819237919562}, {"code": "<?\npublic function deleteTransactions($request)    $transactions = $this->getTransactions($request);\n\n    foreach ($transactions as $transaction) {\n        try {\n            dispatch(new DeleteTransactionJob($transaction));\n        } catch (\\Exception $e) {\n            flash()->error('Failed to delete transaction.');\n        }\n    }\n}\n", "CodeBleu_score": 59.494303510886816}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator)    $validator->after(function ($validator) {\n        if (!class_exists($this->requestClass) || !is_subclass_of($this->requestClass, FormRequest::class)) {\n            return;\n        }\n\n        $request = app($this->requestClass);\n\n        foreach ($this->data as $index => $data) {\n            $request->prepareForValidation();\n            $request->merge($data);\n\n            try {\n                $request->validate($request->rules());\n            } catch (ValidationException $e) {\n                $validator->errors()->add(\"data.$index\", $e->validator->errors()->toArray());\n                throw $e;\n            }\n        }\n    });\n}\n", "CodeBleu_score": 36.69353837473671}, {"code": "<?\npublic function withValidator($validator)    $validator->after(function ($validator) {\n        $requestClass = 'App\\\\Http\\\\Requests\\\\' . class_basename($this) . 'Request';\n\n        if (!class_exists($requestClass) || !is_subclass_of($requestClass, FormRequest::class)) {\n            return;\n        }\n\n        foreach ($this->data as $key => $row) {\n            $request = resolve($requestClass);\n            $rules = $request->prepareForValidation()->rules();\n\n            try {\n                $validator->make($row, $rules)->validate();\n            } catch (ValidationException $e) {\n                foreach ($e->errors() as $field => $messages) {\n                    foreach ($messages as $message) {\n                        $validator->errors()->add(\"data.{$key}.{$field}\", $message);\n                    }\n                }\n            }\n        }\n    });\n}", "CodeBleu_score": 45.238310255448276}, {"code": "<?\npublic function withValidator($validator)    $validator->after(function ($validator) {\n        $requestClass = 'App\\\\Http\\\\Requests\\\\' . class_basename($this) . 'Request';\n\n        if (!class_exists($requestClass) || !is_subclass_of($requestClass, FormRequest::class)) {\n            return;\n        }\n\n        $request = app($requestClass);\n\n        foreach ($this->data as $data) {\n            $request->prepareForValidation($data);\n\n            $validatorInstance = Validator::make($data, $request->rules(), $request->messages(), $request->attributes());\n\n            try {\n                $validatorInstance->validate();\n            } catch (ValidationException $e) {\n                $validator->errors()->merge($e->validator->errors());\n                throw $e;\n            }\n        }\n    });\n}", "CodeBleu_score": 45.80248790841963}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void    $this->bootUpdateModel(...$arguments);\n    $this->bootUpdateRequest(...$arguments);\n}\n", "CodeBleu_score": 9.853744634636394}, {"code": "<?\npublic function bootUpdate(...$arguments): void    if ($this instanceof ShouldUpdate) {\n        if (isset($arguments[0]) && $arguments[0] instanceof Model) {\n            $this->model = $arguments[0];\n        }\n        if (isset($arguments[1]) && $arguments[1] instanceof Request) {\n            $this->request = $arguments[1];\n        }\n    }\n}\n", "CodeBleu_score": 54.42353596268708}, {"code": "<?\npublic function bootUpdate(...$arguments): void    if ($this->implementsShouldUpdate()) {\n        $this->setModel($arguments[0]);\n        $this->setRequest($arguments[1]);\n    }\n}\n", "CodeBleu_score": 18.353324109750595}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name')    // Apply search and sorting to the query\n    $query->search()->sort($sort);\n\n    // Check if the request expects a JSON response and is not an API request\n    if (request()->expectsJson() && !request()->is('api/*')) {\n        // Return all records\n        return $query->get();\n    }\n\n    // Paginate the results based on a limit from the request or a default setting\n    return $query->paginate(request('perPage', 10));\n}\n", "CodeBleu_score": 30.02398764032036}, {"code": "<?\n public function scopeCollect($query, $sort = 'name')    $sort = request('sort', $sort);\n\n    if (request()->expectsJson()) {\n        return $query->get();\n    }\n\n    return $query->search()->sort($sort)->paginate(request('limit', 10));\n}\n", "CodeBleu_score": 30.64892657417633}, {"code": "<?\n public function scopeCollect($query, $sort = 'name')    $query->search()->sort($sort);\n    if (request()->wantsJson() && !request()->is('api/*')) {\n        return $query->get();\n    }\n    return $query->paginate(request()->get('per_page', 10000));\n}\n", "CodeBleu_score": 28.242277232593977}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model)    $openAmount = 0;\n    $overdueAmount = 0;\n\n    if ($model->status == 'paid') {\n        return [$openAmount, $overdueAmount];\n    }\n\n    if ($model->status == 'partial') {\n        foreach ($model->transactions as $transaction) {\n            $openAmount += $transaction->amount;\n        }\n    }\n\n    if ($model->due_date < date('Y-m-d')) {\n        $overdueAmount = $openAmount;\n        $openAmount = 0;\n    }\n\n    return [$openAmount, $overdueAmount];\n}\n", "CodeBleu_score": 44.555559111503584}, {"code": "<?\npublic function calculateDocumentTotals($model)    $open_amount = 0;\n    $overdue_amount = 0;\n\n    if ($model->status == 'paid') {\n        return [\n            'open_amount' => 0,\n            'overdue_amount' => 0,\n        ];\n    }\n\n    if ($model->status == 'partial') {\n        $payments = Transaction::where('type', 'income')\n            ->where('account_id', $model->id)\n            ->get();\n\n        foreach ($payments as $payment) {\n            $open_amount += $payment->getAmountConvertedToDefault();\n        }\n    }\n\n    if ($model->due_at > $model->paid_at) {\n        $open_amount = $model->getAmountConvertedToDefault();\n    } else {\n        $overdue_amount = $model->getAmountConvertedToDefault();\n    }\n\n    return [\n        'open_amount' => $open_amount,\n        'overdue_amount' => $overdue_amount,\n    ];\n}", "CodeBleu_score": 51.89220635643355}, {"code": "<?\npublic function calculateDocumentTotals($model)    $open_amount = 0;\n    $overdue_amount = 0;\n\n    if ($model->status == 'paid') {\n        return [\n            'open_amount' => $open_amount,\n            'overdue_amount' => $overdue_amount,\n        ];\n    }\n\n    if ($model->status == 'partial') {\n        foreach ($model->transactions as $transaction) {\n            if ($transaction->type == 'income') {\n                $open_amount += $transaction->amount;\n            } else {\n                $open_amount -= $transaction->amount;\n            }\n        }\n    }\n\n    if ($model->due_at > $model->paid_at) {\n        $overdue_amount = $open_amount;\n    } else {\n        $open_amount = $open_amount;\n    }\n\n    return [\n        'open_amount' => $open_amount,\n        'overdue_amount' => $overdue_amount,\n    ];\n}", "CodeBleu_score": 41.191110183406465}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null)    // Determine the current page number\n    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n    // Determine the number of items per page\n    $perPage = $perPage ?: $this->model->getPerPage();\n    // Get the total count of records\n    $total = $this->toBase()->getCountForPagination();\n    // Get the subset of results for the current page\n    $results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n    // Create a new paginator instance\n    $paginator = new LengthAwarePaginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n    // Return the paginator instance\n    return $paginator;\n}\n", "CodeBleu_score": 79.99704330831123}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null)    $perPage = $perPage ?: $this->model->getPerPage();\n\n    return (new LengthAwarePaginator($this->forPage($page, $perPage)->get($columns), $this->count(), $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]))->appends('query', request()->query());\n}\n", "CodeBleu_score": 49.81746005548685}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null)    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $results = ($total = $this->toBase()->getCountForPagination()) ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n\n    return new LengthAwarePaginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}\n", "CodeBleu_score": 88.68537439778284}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request)    $reconciliations = Reconciliation::where('account_id', $request->account_id)\n        ->where('date', '>=', $request->start_date)\n        ->where('date', '<=', $request->end_date)\n        ->get();\n\n    DB::transaction(function () use ($reconciliations) {\n        foreach ($reconciliations as $reconciliation) {\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n\n            Transaction::where('account_id', $reconciliation->account_id)\n                ->where('date', '>=', $reconciliation->start_date)\n                ->where('date', '<=', $reconciliation->end_date)\n                ->update(['reconciled' => true]);\n        }\n    });\n}", "CodeBleu_score": 42.68281102927811}, {"code": "<?\npublic function reconcile($request)    $reconciliations = $this->getReconciliations($request);\n\n    DB::beginTransaction();\n\n    foreach ($reconciliations as $reconciliation) {\n        $reconciliation->status = 'reconciled';\n        $reconciliation->save();\n\n        $transactions = $this->getTransactions($reconciliation);\n\n        foreach ($transactions as $transaction) {\n            $transaction->reconciled = true;\n            $transaction->save();\n        }\n    }\n\n    DB::commit();\n}\n", "CodeBleu_score": 45.225354074167356}, {"code": "<?\npublic function reconcile($request)    $reconciliations = $this->getReconciliations($request);\n\n    DB::transaction(function () use ($reconciliations) {\n        foreach ($reconciliations as $reconciliation) {\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n\n            $transactions = Transaction::where('account_id', $reconciliation->account_id)\n                ->whereBetween('date', [$reconciliation->start_date, $reconciliation->end_date])\n                ->get();\n\n            foreach ($transactions as $transaction) {\n                $transaction->reconciled = true;\n                $transaction->save();\n            }\n        }\n    });\n}\n", "CodeBleu_score": 59.44396689502892}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation    $this->user->invitations()->delete();\n\n    $invitation = $this->user->invitations()->create([\n        'token' => Str::random(32),\n    ]);\n\n    try {\n        Notification::route('mail', $this->user->email)\n            ->notify(new UserInvitationNotification($invitation));\n    } catch (\\Exception $e) {\n        throw new \\Exception('Failed to send invitation email.');\n    }\n\n    return $invitation;\n}", "CodeBleu_score": 25.57184682151058}, {"code": "<?\npublic function handle(): UserInvitation    DB::transaction(function () {\n        $this->user->invitations()->delete();\n\n        $this->invitation = UserInvitation::create([\n            'user_id' => $this->user->id,\n            'token'   => Str::random(32),\n        ]);\n\n        if ($this->shouldNotifyUser()) {\n            try {\n                Notification::route('mail', $this->user->email)\n                    ->notify(new UserInvitationNotification($this->invitation));\n            } catch (Exception $e) {\n                throw new Exception(\"Failed to send notification: {$e->getMessage()}\");\n            }\n        }\n    });\n\n    return $this->invitation;\n}", "CodeBleu_score": 40.221858085232334}, {"code": "<?\npublic function handle(): UserInvitation    $this->user->invitations()->delete();\n\n    $invitation = $this->user->invitations()->create([\n        'token' => Str::random(32),\n    ]);\n\n    try {\n        Notification::send($this->user, new UserInvitationNotification($invitation));\n    } catch (Exception $e) {\n        throw new Exception('Failed to send invitation notification.');\n    }\n\n    return $invitation;\n}", "CodeBleu_score": 23.804764700768068}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void    if ($this->isReconciled) {\n        throw new Exception(\"This transaction has been reconciled and cannot be modified.\");\n    }\n    if ($this->isTransfer()) {\n        throw new UnauthorizedException(\"This is a transfer transaction and cannot be modified.\");\n    }\n}\n", "CodeBleu_score": 23.219812549792294}, {"code": "<?\npublic function authorize(): void    if ($this->isReconciled()) {\n        throw new Exception('This transaction has been reconciled.');\n    }\n\n    if ($this->isTransfer()) {\n        throw new UnauthorizedException('You are not authorized to perform this action.');\n    }\n}\n", "CodeBleu_score": 27.422418884145678}, {"code": "<?\npublic function authorize(): void    if ($this->reconciled) {\n        throw new \\Exception('Cannot authorize a reconciled transaction');\n    }\n\n    if ($this->type === 'transfer') {\n        throw new \\Exception('Cannot authorize a transfer transaction');\n    }\n}\n", "CodeBleu_score": 32.9362508847646}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName)    // Get the tenant ID from the request's access token\n    String tenantId = getTenantIdFromAccessToken();\n\n    // If the tenant ID is not zero, allow access to certain predefined tables\n    if (tenantId != null && !tenantId.equals(\"0\")) {\n        List<String> allowedTables = Arrays.asList(\"table1\", \"table2\", \"table3\");\n        if (allowedTables.contains(tableName)) {\n            return true;\n        }\n    }\n\n    // If the tenant ID is zero or the table is not allowed, deny access\n    return false;\n}\n", "CodeBleu_score": 26.73717082371959}, {"code": "public boolean doTableFilter(String tableName)    // Get the tenant ID from the request's access token\n    int tenantId = getTenantIdFromToken();\n\n    // If the tenant ID is not zero, allow access to certain predefined tables\n    if (tenantId != 0) {\n        String[] allowedTables = {\"users\", \"products\", \"orders\"};\n        for (String allowedTable : allowedTables) {\n            if (tableName.equalsIgnoreCase(allowedTable)) {\n                return true;\n            }\n        }\n    }\n\n    // If the tenant ID is zero, deny access to all tables\n    return false;\n}\n", "CodeBleu_score": 25.910630882757935}, {"code": "public boolean doTableFilter(String tableName)    if (tenantId == 0) {\n        return true;\n    }\n    return tableName.equals(\"table1\") || tableName.equals(\"table2\");\n}", "CodeBleu_score": 9.565633083347505}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer()    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n    return mapperScannerConfigurer;\n}\n", "CodeBleu_score": 69.5448423425499}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer()    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n    return mapperScannerConfigurer;\n}\n", "CodeBleu_score": 69.5448423425499}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer()    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n    return mapperScannerConfigurer;\n}\n", "CodeBleu_score": 63.57456832038203}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception    try {\n        List<Account> accounts = accountService.findBySelect();\n        List<Map<String, Object>> list = new ArrayList<>();\n        for (Account account : accounts) {\n            Map<String, Object> map = new HashMap<>();\n            map.put(\"id\", account.getId());\n            map.put(\"name\", account.getName());\n            list.add(map);\n        }\n        return JSON.toJSONString(list);\n    } catch (Exception e) {\n        e.printStackTrace();\n        return \"{\\\"success\\\":false,\\\"msg\\\":\\\"\u67e5\u8be2\u5931\u8d25\\\"}\";\n    }\n}", "CodeBleu_score": 42.06469625850775}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception    try {\n        List<Account> accountList = accountService.findAll();\n        List<Map<String, Object>> accountMapList = new ArrayList<>();\n        for (Account account : accountList) {\n            Map<String, Object> accountMap = new HashMap<>();\n            accountMap.put(\"id\", account.getId());\n            accountMap.put(\"name\", account.getName());\n            accountMapList.add(accountMap);\n        }\n        ObjectMapper mapper = new ObjectMapper();\n        String json = mapper.writeValueAsString(accountMapList);\n        return \"{\\\"success\\\":true,\\\"message\\\":\\\"\" + json + \"\\\"}\";\n    } catch (Exception e) {\n        e.printStackTrace();\n        return \"{\\\"success\\\":false,\\\"message\\\":\\\"Failed to retrieve account list.\\\"}\";\n    }\n}\n", "CodeBleu_score": 47.003162633841576}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception    try {\n        List<Account> accounts = accountService.findAll();\n        List<Map<String, Object>> data = new ArrayList<>();\n        for (Account account : accounts) {\n            Map<String, Object> map = new HashMap<>();\n            map.put(\"id\", account.getId());\n            map.put(\"name\", account.getName());\n            data.add(map);\n        }\n        String json = JSON.toJSONString(data);\n        return json;\n    } catch (Exception e) {\n        e.printStackTrace();\n        return \"fail\";\n    }\n}", "CodeBleu_score": 45.82441282840287}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception        BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            map.put(\"name\", name);\n            map.put(\"serialNo\", serialNo);\n            map.put(\"currentPage\", currentPage);\n            map.put(\"pageSize\", pageSize);\n            PageInfo<AccountWithBalance> pageInfo = accountService.listWithBalance(map);\n            response.setData(pageInfo);\n        } catch (Exception e) {\n            logger.error(\"\u67e5\u8be2\u8d26\u6237\u5217\u8868\u5f02\u5e38\", e);\n            response.setCode(BaseResponseInfo.FAILURE);\n            response.setMessage(\"\u67e5\u8be2\u8d26\u6237\u5217\u8868\u5f02\u5e38\");\n        }\n        return response;\n    }\n\n\n\n\n    /**\n     * This function returns a paginated list of accounts based on the provided name, serial number, and status parameters. It constructs a response object, queries the account service for the list of accounts and their count, and populates the response with the result. If an exception occurs, it logs the error and sets the response code and message accordingly.\n     */\n    @GetMapping(\"/list\")\n    public BaseResponseInfo list(@RequestParam(\"name\") String name,\n                                 @RequestParam(\"serialNo\") String serialNo,\n                                 @RequestParam(\"status\") Integer status,\n                                 @RequestParam(\"currentPage\") Integer currentPage,\n                                 @RequestParam(\"pageSize\") Integer pageSize,\n                                 HttpServletRequest request) throws Exception {\n        BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            map.put(\"name\", name);\n            map.put(\"serialNo\", serialNo);\n            map.put(\"status\", status);\n            map.put(\"currentPage\", currentPage);\n            map.put(\"pageSize\", pageSize);\n            PageInfo<Account> pageInfo = accountService.list(map);\n            response.setData(pageInfo);\n        } catch (Exception e) {\n            logger.error(\"\u67e5\u8be2\u8d26\u6237\u5217\u8868\u5f02\u5e38\", e);\n            response.setCode(BaseResponseInfo.FAILURE);\n            response.setMessage(\"\u67e5\u8be2\u8d26\u6237\u5217\u8868\u5f02\u5e38\");\n        }\n        return", "CodeBleu_score": 44.756283371528646}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        // \u6784\u9020\u8bf7\u6c42\u53c2\u6570\n        AccountListReq req = new AccountListReq();\n        req.setName(name);\n        req.setSerialNo(serialNo);\n        req.setCurrentPage(currentPage);\n        req.setPageSize(pageSize);\n        // \u8c03\u7528\u670d\u52a1\u67e5\u8be2\u5217\u8868\n        List<AccountListResp> list = accountService.listWithBalance(req);\n        // \u67e5\u8be2\u603b\u6570\n        Integer total = accountService.countWithBalance(req);\n        // \u6784\u9020\u8fd4\u56de\u7ed3\u679c\n        response.setCode(ResponseCode.SUCCESS.getCode());\n        response.setMessage(ResponseCode.SUCCESS.getMessage());\n        response.setData(list);\n        response.setTotal(total);\n    } catch (Exception e) {\n        log.error(\"listWithBalance error\", e);\n        response.setCode(ResponseCode.ERROR.getCode());\n        response.setMessage(ResponseCode.ERROR.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 40.756588128688776}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception        BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            // Construct the response object\n            BaseResponseInfo.ResponseInfo responseInfo = new BaseResponseInfo.ResponseInfo();\n            response.setResponseInfo(responseInfo);\n\n            // Query the account service for the list of accounts and their count\n            List<AccountWithBalance> accountList = accountService.listWithBalance(name, serialNo, currentPage, pageSize);\n            Integer totalCount = accountService.count(name, serialNo);\n\n            // Populate the response with the result\n            responseInfo.setCode(BaseResponseInfo.ResponseInfo.SUCCESS_CODE);\n            responseInfo.setMessage(BaseResponseInfo.ResponseInfo.SUCCESS_MESSAGE);\n            response.setResult(accountList);\n            response.setTotalCount(totalCount);\n        } catch (Exception e) {\n            // Handle any exceptions that occur\n            log.error(\"Error in listWithBalance: \", e);\n            response.getResponseInfo().setCode(BaseResponseInfo.ResponseInfo.ERROR_CODE);\n            response.getResponseInfo().setMessage(BaseResponseInfo.ResponseInfo.ERROR_MESSAGE);\n        }\n        return response;\n    }\n", "CodeBleu_score": 40.14313214184507}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception        BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            List<StatisticsDto> data = accountService.getStatistics(name, serialNo);\n            response.setCode(200);\n            response.setData(data);\n        } catch (Exception e) {\n            LOGGER.error(e.getMessage(), e);\n            response.setCode(500);\n            response.setMessage(\"Internal server error\");\n        }\n        return response;\n    }\n", "CodeBleu_score": 43.04465319093161}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        Account account = accountService.getAccountByNameAndSerialNo(name, serialNo);\n        if (account == null) {\n            response.setCode(404);\n            response.setMessage(\"Account not found\");\n            return response;\n        }\n        Statistics statistics = statisticsService.getStatisticsByAccountId(account.getId());\n        if (statistics == null) {\n            response.setCode(404);\n            response.setMessage(\"Statistics not found\");\n            return response;\n        }\n        response.setCode(200);\n        response.setData(statistics);\n    } catch (Exception e) {\n        logger.error(\"Error occurred while getting statistics\", e);\n        response.setCode(500);\n        response.setMessage(\"Internal server error\");\n    }\n    return response;\n}\n", "CodeBleu_score": 37.9309191554572}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setCode(200);\n        response.setData(accountService.getStatistics(name, serialNo));\n    } catch (Exception e) {\n        log.error(\"get statistics error\", e);\n        response.setCode(500);\n        response.setMessage(\"get statistics error\");\n    }\n    return response;\n}", "CodeBleu_score": 37.86317533213324}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception        BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            List<AccountHead> accountHeadList = accountHeadService.getDetailByNumber(billNo);\n            if (accountHeadList.size() > 0) {\n                response.setStatus(HttpStatus.OK.value());\n                response.setData(accountHeadList.get(0));\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Exception occurred while fetching bill details: \", e);\n            response.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());\n            response.setMessage(\"Failed to fetch bill details.\");\n        }\n        return response;\n    }\n", "CodeBleu_score": 40.10520020171351}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception        BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            List<AccountHead> accountHeads = accountHeadService.getDetailByNumber(billNo);\n            if (accountHeads != null && accountHeads.size() > 0) {\n                response.setData(accountHeads.get(0));\n                response.setStatus(200);\n            }\n        } catch (Exception e) {\n            log.error(\"\u67e5\u8be2\u5355\u636e\u8be6\u7ec6\u4fe1\u606f\u5931\u8d25\", e);\n            response.setStatus(500);\n            response.setMsg(\"\u67e5\u8be2\u5355\u636e\u8be6\u7ec6\u4fe1\u606f\u5931\u8d25\");\n        }\n        return response;\n    }\n\n    /**\n     * This function retrieves the details of a bill based on the bill number and the requesting user. It initializes a response object and attempts to fetch the details using the account head service. If details are found, the response is set with the details and a status code of 200. In case of an exception, it logs the error and sets the response code to 500 with an error message.\n     */\n    public BaseResponseInfo getDetailByNumberAndUser(@RequestParam(\"billNo\") String billNo,\n                                                      HttpServletRequest request)throws Exception {\n        BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            List<AccountHead> accountHeads = accountHeadService.getDetailByNumberAndUser(billNo, request);\n            if (accountHeads != null && accountHeads.size() > 0) {\n                response.setData(accountHeads.get(0));\n                response.setStatus(200);\n            }\n        } catch (Exception e) {\n            log.error(\"\u67e5\u8be2\u5355\u636e\u8be6\u7ec6\u4fe1\u606f\u5931\u8d25\", e);\n            response.setStatus(500);\n            response.setMsg(\"\u67e5\u8be2\u5355\u636e\u8be6\u7ec6\u4fe1\u606f\u5931\u8d25\");\n        }\n        return response;\n    }\n\n    /**\n     * This function retrieves the details of a bill based on the bill number and the requesting user. It initializes a response object and attempts to fetch the details using the account head service. If details are found, the response is set with the details and a status code of 200. In case of an exception, it logs", "CodeBleu_score": 33.55706776329402}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception        BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            List<AccountHeadInfo> details = accountHeadService.getDetailByNumber(billNo);\n            if (details != null && details.size() > 0) {\n                response.setStatusCode(200);\n                response.setData(details.get(0));\n            }\n        } catch (Exception e) {\n            logger.error(\"getDetailByNumber error\", e);\n            response.setStatusCode(500);\n            response.setMessage(\"\u83b7\u53d6\u8d26\u5355\u8be6\u60c5\u5931\u8d25\");\n        }\n        return response;\n    }\n\n    /**\n     * This function retrieves detailed information for a specific bill number. It initializes a response object and attempts to fetch the details using the account head service. If details are found, the first item is included in the response with a status code of 200. In case of an exception, it logs the error and sets the response code to 500 with an error message.\n     */\n    public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception {\n        BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            List<AccountHeadInfo> details = accountHeadService.getDetailByNumber(billNo);\n            if (details != null && details.size() > 0) {\n                response.setStatusCode(200);\n                response.setData(details.get(0));\n            }\n        } catch (Exception e) {\n            logger.error(\"getDetailByNumber error\", e);\n            response.setStatusCode(500);\n            response.setMessage(\"\u83b7\u53d6\u8d26\u5355\u8be6\u60c5\u5931\u8d25\");\n        }\n        return response;\n    }\n\n    /**\n     * This function retrieves detailed information for a specific bill number. It initializes a response object and attempts to fetch the details using the account head service. If details are found, the first item is included in the response with a status code of 200. In case of an exception, it logs the error and sets the response code to 500 with an error message.\n     */\n    public BaseResponseInfo getDetailByNumber(@RequestParam(\"bill", "CodeBleu_score": 34.244991197546234}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        // Get the current user ID from the request\n        Integer userId = (Integer) request.getSession().getAttribute(\"userId\");\n        // Call the depot service to fetch the data\n        List<Depot> depotList = depotService.findDepotByUserId(userId);\n        // Set the response code to 200 and include the data\n        response.setCode(200);\n        response.setData(depotList);\n    } catch (Exception e) {\n        // Log the error and set the response code to 500 with an error message\n        logger.error(e.getMessage(), e);\n        response.setCode(500);\n        response.setMessage(\"\u7cfb\u7edf\u5f02\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01\");\n    }\n    return response;\n}\n", "CodeBleu_score": 44.466240789398384}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        User user = (User) request.getSession().getAttribute(\"user\");\n        List<Depot> depotList = depotService.findDepotByUserId(user.getId());\n        response.setCode(200);\n        response.setData(depotList);\n    } catch (Exception e) {\n        log.error(e.getMessage(), e);\n        response.setCode(500);\n        response.setMsg(\"\u67e5\u8be2\u5931\u8d25\");\n    }\n    return response;\n}\n", "CodeBleu_score": 43.294011369451994}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<Depot> depotList = depotService.findDepotByCurrentUser(request);\n        response.setCode(200);\n        response.setData(depotList);\n    } catch (Exception e) {\n        log.error(e.getMessage(), e);\n        response.setCode(500);\n        response.setMessage(\"\u7cfb\u7edf\u5f02\u5e38\uff0c\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\");\n    }\n    return response;\n}\n", "CodeBleu_score": 43.97369803339302}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception    JSONArray jsonArray = new JSONArray();\n    List<Function> functions = functionService.findRoleFunction(type, keyId);\n    JSONObject jsonObject = new JSONObject();\n    jsonObject.put(\"functions\", functions);\n    if (!\"admin\".equals(request.getHeader(\"tenantId\"))) {\n        List<Function> functionList = (List<Function>) jsonObject.get(\"functions\");\n        functionList = functionList.stream().filter(f -> !\"\u7cfb\u7edf\u7ba1\u7406\".equals(f.getFunctionName())).collect(Collectors.toList());\n        jsonObject.put(\"functions\", functionList);\n    }\n    jsonArray.add(jsonObject);\n    return jsonArray;\n}\n", "CodeBleu_score": 30.57806980859589}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception    JSONArray jsonArray = new JSONArray();\n    List<Function> functionList = functionService.findRoleFunction(type, keyId);\n    JSONObject jsonObject = new JSONObject();\n    jsonObject.put(\"functions\", functionList);\n    if (!UserUtils.isAdmin(request)) {\n        jsonObject.put(\"functions\", functionList.stream().filter(f -> !f.getTenantId().equals(\"\u7cfb\u7edf\u7ba1\u7406\")).collect(Collectors.toList()));\n    }\n    jsonArray.add(jsonObject);\n    return jsonArray;\n}", "CodeBleu_score": 22.70728175241406}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception    JSONArray jsonArray = new JSONArray();\n    List<RoleFunction> functionList = roleFunctionService.findRoleFunction(type, keyId);\n    JSONObject jsonObject = new JSONObject();\n    jsonObject.put(\"functionList\", functionList);\n    if (!\"admin\".equals(request.getHeader(\"tenantId\"))) {\n        List<RoleFunction> list = jsonObject.getJSONArray(\"functionList\").toList(RoleFunction.class);\n        list = list.stream().filter(e -> !\"\u7cfb\u7edf\u7ba1\u7406\".equals(e.getFunctionName())).collect(Collectors.toList());\n        jsonObject.put(\"functionList\", list);\n    }\n    jsonArray.add(jsonObject);\n    return jsonArray;\n}", "CodeBleu_score": 30.762650982612477}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception     BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        PlatformConfigInfo platformConfigInfo = platformConfigService.getInfoByKey(platformKey);\n        response.setCode(200);\n        response.setData(platformConfigInfo);\n    }catch (Exception e){\n        log.error(\"getInfoByKey error\",e);\n        response.setCode(500);\n        response.setMsg(\"error\");\n    }\n    return response;\n}", "CodeBleu_score": 43.99940029902509}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception     BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        PlatformConfigDTO platformConfigDTO = platformConfigService.getInfoByKey(platformKey);\n        response.setCode(200);\n        response.setData(platformConfigDTO);\n    } catch (Exception e) {\n        logger.error(\"getInfoByKey failed\", e);\n        response.setCode(500);\n        response.setMessage(\"getInfoByKey failed\");\n    }\n    return response;\n}", "CodeBleu_score": 43.9242555662358}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception     BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        PlatformConfigDTO platformConfigDTO = platformConfigService.getPlatformConfigByKey(platformKey);\n        response.setCode(200);\n        response.setData(platformConfigDTO);\n    } catch (Exception e) {\n        log.error(\"getInfoByKey error:\", e);\n        response.setCode(500);\n        response.setData(\"error:\" + e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 45.38477560168953}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> list = systemConfigService.getSystemConfigList(null);\n        response.setCode(200);\n        response.setData(list.get(0));\n    } catch (Exception e) {\n        logger.error(\"getCurrentInfo error\", e);\n        response.setCode(500);\n        response.setData(\"\u7cfb\u7edf\u5f02\u5e38\uff0c\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\");\n    }\n    return response;\n}\n", "CodeBleu_score": 37.985166660535484}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfiguration> list = systemConfigurationService.getSystemConfigurationList(null, null);\n        response.setCode(200);\n        response.setData(list.get(0));\n    } catch (Exception e) {\n        log.error(\"getCurrentInfo error:\", e);\n        response.setCode(500);\n        response.setMessage(\"getCurrentInfo error\");\n    }\n    return response;\n}\n", "CodeBleu_score": 36.82436778700182}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> list = systemConfigService.findAll();\n        if (list.size() > 0) {\n            response.setCode(200);\n            response.setData(list.get(0));\n        }\n    } catch (Exception e) {\n        log.error(e.getMessage(), e);\n        response.setCode(500);\n        response.setData(\"\u83b7\u53d6\u5931\u8d25\uff01\");\n    }\n    return response;\n}\n", "CodeBleu_score": 44.338381931534364}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response)    BaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n    try {\n        // \u83b7\u53d6\u4e1a\u52a1\u8def\u5f84\n        String businessPath = request.getParameter(\"businessPath\");\n        // \u83b7\u53d6\u4e0a\u4f20\u7684\u6587\u4ef6\n        MultipartFile file = ((MultipartHttpServletRequest) request).getFile(\"file\");\n        // \u83b7\u53d6\u6587\u4ef6\u540d\n        String fileName = file.getOriginalFilename();\n        // \u83b7\u53d6\u6587\u4ef6\u540e\u7f00\n        String suffix = fileName.substring(fileName.lastIndexOf(\".\") + 1);\n        // \u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u7c7b\u578b\n        String fileUploadType = request.getParameter(\"fileUploadType\");\n        // \u4fdd\u5b58\u6587\u4ef6\n        String filePath = \"\";\n        if (FileUploadType.LOCAL.getType().equals(fileUploadType)) {\n            // \u672c\u5730\u4e0a\u4f20\n            filePath = localFileUploadService.upload(businessPath, file, suffix);\n        } else if (FileUploadType.ALI_OSS.getType().equals(fileUploadType)) {\n            // \u963f\u91ccOSS\u4e0a\u4f20\n            filePath = aliOssFileUploadService.upload(businessPath, file, suffix);\n        }\n        // \u8bbe\u7f6e\u54cd\u5e94\u7801\u548c\u6570\u636e\n        baseResponseInfo.setCode(ResponseCode.SUCCESS.getCode());\n        baseResponseInfo.setData(filePath);\n    } catch (Exception e) {\n        // \u8bb0\u5f55\u5f02\u5e38\u65e5\u5fd7\n        log.error(\"\u4e0a\u4f20\u6587\u4ef6\u5931\u8d25\", e);\n        // \u8bbe\u7f6e\u54cd\u5e94\u7801\u548c\u6570\u636e\n        baseResponseInfo.setCode(ResponseCode.ERROR.getCode());\n        baseResponseInfo.setData(\"\u4e0a\u4f20\u6587\u4ef6\u5931\u8d25\");\n    }\n    // \u8fd4\u56de\u54cd\u5e94\n    return baseResponseInfo;\n}", "CodeBleu_score": 40.72863986819094}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response)    BaseResponseInfo responseInfo = new BaseResponseInfo();\n    try {\n        String businessPath = request.getParameter(\"businessPath\");\n        MultipartFile file = ((MultipartHttpServletRequest) request).getFile(\"file\");\n        if (StringUtils.isEmpty(businessPath) || file == null) {\n            responseInfo.setCode(ResponseCode.PARAM_ERROR.getCode());\n            responseInfo.setMessage(ResponseCode.PARAM_ERROR.getMessage());\n            return responseInfo;\n        }\n        // \u6839\u636e\u4e1a\u52a1\u8def\u5f84\u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u7c7b\u578b\n        FileUploadTypeEnum uploadType = FileUploadTypeEnum.getFileUploadTypeEnumByBusinessPath(businessPath);\n        if (uploadType == null) {\n            responseInfo.setCode(ResponseCode.PARAM_ERROR.getCode());\n            responseInfo.setMessage(ResponseCode.PARAM_ERROR.getMessage());\n            return responseInfo;\n        }\n        // \u6839\u636e\u6587\u4ef6\u4e0a\u4f20\u7c7b\u578b\u8fdb\u884c\u6587\u4ef6\u4e0a\u4f20\n        if (uploadType == FileUploadTypeEnum.LOCAL) {\n            // \u672c\u5730\u6587\u4ef6\u4e0a\u4f20\n            String filePath = fileUploadService.localUpload(file, businessPath);\n            responseInfo.setCode(ResponseCode.SUCCESS.getCode());\n            responseInfo.setMessage(ResponseCode.SUCCESS.getMessage());\n            responseInfo.setData(filePath);\n        } else if (uploadType == FileUploadTypeEnum.ALIOSS) {\n            // \u963f\u91cc\u4e91OSS\u6587\u4ef6\u4e0a\u4f20\n            String filePath = fileUploadService.aliOssUpload(file, businessPath);\n            responseInfo.setCode(ResponseCode.SUCCESS.getCode());\n            responseInfo.setMessage(ResponseCode.SUCCESS.getMessage());\n            responseInfo.setData(filePath);\n        } else {\n            // \u5176\u4ed6\u6587\u4ef6\u4e0a\u4f20\u7c7b\u578b\n            responseInfo.setCode(ResponseCode.PARAM_ERROR.getCode());\n            responseInfo.setMessage(ResponseCode.PARAM_ERROR.getMessage());\n        }\n    } catch (Exception e) {\n        log.error(\"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\", e);\n        responseInfo.setCode(ResponseCode.FAIL.getCode());\n        responseInfo.setMessage(ResponseCode.FAIL.getMessage());", "CodeBleu_score": 34.73252703184519}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response)    BaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n    try {\n        // Get the business path from the request\n        String businessPath = request.getParameter(\"businessPath\");\n        // Get the uploaded file from the request\n        MultipartFile file = ((MultipartHttpServletRequest) request).getFile(\"file\");\n        // Save the file locally or to AliOss based on the file upload type\n        String fileUrl = fileUploadService.upload(businessPath, file);\n        // Set the response code and data based on the success or failure of the upload\n        baseResponseInfo.setCode(ResultCode.SUCCESS.getCode());\n        baseResponseInfo.setData(fileUrl);\n    } catch (Exception e) {\n        // Log any exceptions\n        log.error(\"upload error\", e);\n        // Set the response code and data based on the exception\n        baseResponseInfo.setCode(ResultCode.FAIL.getCode());\n        baseResponseInfo.setData(e.getMessage());\n    }\n    // Return the response\n    return baseResponseInfo;\n}\n", "CodeBleu_score": 33.98175512750939}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response)     try {\n         String title = jsonObject.getString(\"title\");\n         String head = jsonObject.getString(\"head\");\n         String tip = jsonObject.getString(\"tip\");\n         List<String> data = jsonObject.getJSONArray(\"data\").toJavaList(String.class);\n         exportExcelService.exportExcel(title, head, tip, data, response);\n     } catch (Exception e) {\n         log.error(\"exportExcelByParam error: {}\", e.getMessage());\n     }\n }\n\n", "CodeBleu_score": 73.78057423701934}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response)    try {\n        String title = jsonObject.getString(\"title\");\n        String[] head = jsonObject.getJSONArray(\"head\").toArray(new String[0]);\n        String[] tip = jsonObject.getJSONArray(\"tip\").toArray(new String[0]);\n        List<List<String>> data = jsonObject.getJSONArray(\"data\").toJavaList(List.class);\n        ExcelUtil.exportExcelByParam(response, title, head, tip, data);\n    } catch (Exception e) {\n        log.error(\"\u5bfc\u51faExcel\u5f02\u5e38\", e);\n    }\n}", "CodeBleu_score": 55.379829197749764}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response)        try {\n            String title = jsonObject.getString(\"title\");\n            String[] head = (String[]) jsonObject.get(\"head\");\n            String[] tip = (String[]) jsonObject.get(\"tip\");\n            List<Map<String, Object>> dataList = (List<Map<String, Object>>) jsonObject.get(\"dataList\");\n            excelService.exportExcel(title, head, tip, dataList, response);\n        } catch (Exception e) {\n            logger.error(\"exportExcelByParam error\", e);\n        }\n    }\n", "CodeBleu_score": 58.763223839800375}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception     Account account = new Account();\n    account.setName(obj.getString(\"name\"));\n    account.setDescription(obj.getString(\"description\"));\n    account.setCurrency(obj.getString(\"currency\"));\n    account.setInitialAmount(obj.has(\"initialAmount\") ? obj.getDouble(\"initialAmount\") : 0);\n    account.setType(obj.getString(\"type\"));\n    account.setBank(obj.getString(\"bank\"));\n    account.setAccountNumber(obj.getString(\"accountNumber\"));\n    account.setDefaultAccount(false);\n    if (account.getInitialAmount() != 0) {\n        account.setDefaultAccount(true);\n    }\n    account.setEnabled(true);\n    int result = accountDao.insertAccount(account);\n    if (result > 0) {\n        logOperation(request, \"Account added\", \"Account added successfully\");\n    }\n    return result;\n}\n", "CodeBleu_score": 36.75959665763543}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception   try {\n    Account account=new Account();\n    account.setAccountName(obj.getString(\"accountName\"));\n    account.setAccountType(obj.getString(\"accountType\"));\n    account.setAccountNumber(obj.getString(\"accountNumber\"));\n    account.setBankName(obj.getString(\"bankName\"));\n    account.setBranchName(obj.getString(\"branchName\"));\n    account.setBranchCode(obj.getString(\"branchCode\"));\n    account.setCurrency(obj.getString(\"currency\"));\n    account.setBankCode(obj.getString(\"bankCode\"));\n    account.setAccountHolderName(obj.getString(\"accountHolderName\"));\n    account.setAccountHolderNumber(obj.getString(\"accountHolderNumber\"));\n    account.setAccountHolderAddress(obj.getString(\"accountHolderAddress\"));\n    account.setAccountHolderPhone(obj.getString(\"accountHolderPhone\"));\n    account.setAccountHolderEmail(obj.getString(\"accountHolderEmail\"));\n    account.setAccountHolderType(obj.getString(\"accountHolderType\"));\n    account.setAccountHolderDateOfBirth(obj.getString(\"accountHolderDateOfBirth\"));\n    account.setAccountHolderNationality(obj.getString(\"accountHolderNationality\"));\n    account.setAccountHolderCountryOfResidence(obj.getString(\"accountHolderCountryOfResidence\"));\n    account.setAccountHolderOccupation(obj.getString(\"accountHolderOccupation\"));\n    account.setAccountHolderEmployer(obj.getString(\"accountHolderEmployer\"));\n    account.setAccountHolderEmployerAddress(obj.getString(\"accountHolderEmployerAddress\"));\n    account.setAccountHolderEmployerPhone(obj.getString(\"accountHolderEmployerPhone\"));\n    account.setAccountHolderEmployerEmail(obj.getString(\"accountHolderEmployerEmail\"));\n    account.setAccountHolderEmployerWebsite(obj.getString(\"accountHolderEmployerWebsite\"));\n    account.setAccountHolderEmployerDateOfBirth(obj.getString(\"accountHolderEmployerDateOfBirth\"));\n    account.setAccountHolderEmployerNationality(obj.getString(\"accountHolderEmployerNationality\"));\n    account.setAccountHolderEmployerCountryOfResidence(obj.getString(\"accountHolder", "CodeBleu_score": 13.604938463009592}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception     int result = 0;\n    try {\n        Account account = new Account();\n        account.setAccountName(obj.getString(\"accountName\"));\n        account.setAccountType(obj.getString(\"accountType\"));\n        account.setAmount(obj.has(\"amount\") ? obj.getDouble(\"amount\") : 0);\n        account.setAccountNumber(obj.getString(\"accountNumber\"));\n        account.setBankName(obj.getString(\"bankName\"));\n        account.setBankAddress(obj.getString(\"bankAddress\"));\n        account.setBankBranch(obj.getString(\"bankBranch\"));\n        account.setBankCity(obj.getString(\"bankCity\"));\n        account.setBankState(obj.getString(\"bankState\"));\n        account.setBankCountry(obj.getString(\"bankCountry\"));\n        account.setBankZipCode(obj.getString(\"bankZipCode\"));\n        account.setBankPhone(obj.getString(\"bankPhone\"));\n        account.setBankEmail(obj.getString(\"bankEmail\"));\n        account.setBankWebsite(obj.getString(\"bankWebsite\"));\n        account.setBankAccountNumber(obj.getString(\"bankAccountNumber\"));\n        account.setBankAccountType(obj.getString(\"bankAccountType\"));\n        account.setBankAccountHolderName(obj.getString(\"bankAccountHolderName\"));\n        account.setBankAccountHolderAddress(obj.getString(\"bankAccountHolderAddress\"));\n        account.setBankAccountHolderPhone(obj.getString(\"bankAccountHolderPhone\"));\n        account.setBankAccountHolderEmail(obj.getString(\"bankAccountHolderEmail\"));\n        account.setBankAccountHolderWebsite(obj.getString(\"bankAccountHolderWebsite\"));\n        account.setBankAccountHolderAccountNumber(obj.getString(\"bankAccountHolderAccountNumber\"));\n        account.setBankAccountHolderAccountType(obj.getString(\"bankAccountHolderAccountType\"));\n        account.setBankAccountHolderAccountHolderName(obj.getString(\"bankAccountHolderAccountHolderName\"));\n        account.setBankAccountHolderAccountHolderAddress(obj.getString(\"bankAccountHolderAccountHolderAddress\"));\n        account.setBankAccountHolderAccountHolderPhone(obj.getString(\"bankAccountHolderAccountHolderPhone\"));", "CodeBleu_score": 16.21399988516864}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo)    try {\n        return mapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        log.error(\"Error in listWithBalanceCount: {}\", e.getMessage());\n        return null;\n    }\n}\n", "CodeBleu_score": 30.258255938023403}, {"code": "public Long listWithBalanceCount(String name, String serialNo)    try {\n        return accountMapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        log.error(\"Error in listWithBalanceCount\", e);\n        return null;\n    }\n}", "CodeBleu_score": 31.251050263390983}, {"code": "public Long listWithBalanceCount(String name, String serialNo)    try {\n        return mapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        log.error(e.getMessage());\n        return null;\n    }\n}\n", "CodeBleu_score": 29.222288597828538}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception  try {\n    return depotItemMapper.deleteDepotItem(id);\n  }\n catch (  Exception e) {\n    logger.error(e.getMessage(),e);\n  }\n  return 0;\n}", "CodeBleu_score": 24.4292949783534}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception  try {\n    return depotItemMapper.deleteByPrimaryKey(id);\n  }\n catch (  Exception e) {\n    logger.error(String.formatodeBleu_score": 13.578796669685028}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception  DepotItemMapper depotItemMapper = getDepotItemMapper(request);\n  try {\n    return depotItemMapper.deleteDepotItem(id);\n  }\n catch (  Exception e) {\n    logger.error(\"\",e);\n  }\n  return 0;\n}", "CodeBleu_score": 33.28633381739745}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey)    HttpClient httpClient = HttpClient.newHttpClient();\n    String url = String.format(\"%s/projects/%s/%s/%s\", endpoint, projectName, nodeType, nodeKey);\n    HttpRequest request = HttpRequest.newBuilder().uri(URI.create(url)).build();\n    try {\n        HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n        String body = response.body();\n        if (body.contains(\"key\")) {\n            return true;\n        }\n    } catch (IOException | InterruptedException e) {\n        e.printStackTrace();\n    } finally {\n        httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString()).thenApply(HttpResponse::body).thenAccept(System.out::println).join();\n    }\n    return false;\n}", "CodeBleu_score": 41.79237027739994}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey)    try {\n        HttpClient client = new DefaultHttpClient();\n        String requestURL = \"http://localhost:8080/addNode?projectName=\" + projectName + \"&nodeType=\" + nodeType + \"&nodeKey=\" + nodeKey;\n        HttpGet get = new HttpGet(requestURL);\n        HttpResponse response = client.execute(get);\n        HttpEntity entity = response.getEntity();\n        String responseString = EntityUtils.toString(entity);\n        JSONObject jsonObject = new JSONObject(responseString);\n        if (jsonObject.has(\"key\")) {\n            return true;\n        } else {\n            return false;\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        client.getConnectionManager().shutdown();\n    }\n    return false;\n}", "CodeBleu_score": 42.32762033087503}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey)    CloseableHttpClient httpClient = HttpClients.createDefault();\n    HttpGet httpGet = new HttpGet(endpoint + \"/projects/\" + projectName + \"/\" + nodeType + \"/\" + nodeKey);\n    try {\n        CloseableHttpResponse response = httpClient.execute(httpGet);\n        HttpEntity entity = response.getEntity();\n        if (entity != null) {\n            String responseString = EntityUtils.toString(entity);\n            JSONObject json = new JSONObject(responseString);\n            if (json.has(\"key\")) {\n                return true;\n            }\n        }\n    } catch (IOException | JSONException e) {\n        e.printStackTrace();\n    } finally {\n        try {\n            httpClient.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return false;\n}", "CodeBleu_score": 46.55745356844025}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to)    CloseableHttpClient client = HttpClients.createDefault();\n    try {\n        URIBuilder builder = new URIBuilder(endpoint + \"/addEdge\");\n        builder.addParameter(\"projectName\", projectName);\n        builder.addParameter(\"edgeType\", edgeType);\n        builder.addParameter(\"fromType\", fromType);\n        builder.addParameter(\"toType\", toType);\n        builder.addParameter(\"from\", from);\n        builder.addParameter(\"to\", to);\n        URI uri = builder.build();\n        HttpGet request = new HttpGet(uri);\n        CloseableHttpResponse response = client.execute(request);\n        try {\n            HttpEntity entity = response.getEntity();\n            if (entity != null) {\n                String json = EntityUtils.toString(entity);\n                JSONObject jsonObject = new JSONObject(json);\n                if (jsonObject.has(\"key\")) {\n                    return true;\n                }\n            }\n        } finally {\n            response.close();\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        try {\n            client.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return false;\n}", "CodeBleu_score": 42.353065561199706}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to)    CloseableHttpClient httpClient = HttpClients.createDefault();\n    try {\n        HttpGet httpGet = new HttpGet(endpoint + \"/addedge\");\n        List<NameValuePair> params = new ArrayList<NameValuePair>();\n        params.add(new BasicNameValuePair(\"project\", projectName));\n        params.add(new BasicNameValuePair(\"type\", edgeType));\n        params.add(new BasicNameValuePair(\"fromType\", fromType));\n        params.add(new BasicNameValuePair(\"toType\", toType));\n        params.add(new BasicNameValuePair(\"from\", from));\n        params.add(new BasicNameValuePair(\"to\", to));\n        httpGet.setEntity(new UrlEncodedFormEntity(params));\n        CloseableHttpResponse response = httpClient.execute(httpGet);\n        try {\n            System.out.println(response.getStatusLine());\n            HttpEntity entity = response.getEntity();\n            if (entity != null) {\n                String result = EntityUtils.toString(entity);\n                JSONObject json = new JSONObject(result);\n                if (json.has(\"key\")) {\n                    return true;\n                }\n            }\n        } finally {\n            response.close();\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        try {\n            httpClient.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return false;\n}", "CodeBleu_score": 41.815516108607774}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to)    CloseableHttpClient httpClient = HttpClients.createDefault();\n    try {\n        HttpGet request = new HttpGet(url + \"/addEdge0\");\n        List<NameValuePair> params = new ArrayList<NameValuePair>();\n        params.add(new BasicNameValuePair(\"projectName\", projectName));\n        params.add(new BasicNameValuePair(\"edgeType\", edgeType));\n        params.add(new BasicNameValuePair(\"fromType\", fromType));\n        params.add(new BasicNameValuePair(\"toType\", toType));\n        params.add(new BasicNameValuePair(\"from\", from));\n        params.add(new BasicNameValuePair(\"to\", to));\n        request.setEntity(new UrlEncodedFormEntity(params));\n        CloseableHttpResponse response = httpClient.execute(request);\n        try {\n            HttpEntity entity = response.getEntity();\n            if (entity != null) {\n                String json = EntityUtils.toString(entity);\n                JSONObject jsonObject = new JSONObject(json);\n                if (jsonObject.has(\"key\")) {\n                    return true;\n                }\n            }\n        } finally {\n            response.close();\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        try {\n            httpClient.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return false;\n}", "CodeBleu_score": 41.49210526791815}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event)    if (event != null && event.getMessage() != null) {\n        if (event.getLocation() == null) {\n            event.setLocation(new Location(40.7128, -74.0060));\n        }\n        event.setTime(LocalDateTime.now());\n        String json = gson.toJson(event);\n        String topic = target != null ? target : \"test\";\n        ProducerRecord<String, String> record = new ProducerRecord<>(topic, json);\n        producer.send(record);\n        producer.flush();\n    }\n}", "CodeBleu_score": 35.42267476980484}, {"code": "public void sendEvent(Event event)    if (event != null && event.getMessage() != null) {\n        if (event.getLocation() == null) {\n            event.setLocation(\"Testing\");\n        }\n        event.setTime(new Date());\n        String json = gson.toJson(event);\n        String topic = event.getTarget() != null ? event.getTarget() : \"test\";\n        ProducerRecord<String, String> record = new ProducerRecord<>(topic, json);\n        producer.send(record);\n        producer.flush();\n    }\n}\n", "CodeBleu_score": 37.647931874760864}, {"code": "public void sendEvent(Event event)    if (event != null && event.getMessage() != null) {\n        if (event.getLocation() == null) {\n            event.setLocation(new Location(100, 100));\n        }\n        event.setTime(new Date());\n        String json = gson.toJson(event);\n        String topic = target != null ? target : \"test\";\n        ProducerRecord<String, String> record = new ProducerRecord<>(topic, json);\n        producer.send(record);\n        producer.flush();\n    }\n}\n", "CodeBleu_score": 36.36305915051835}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content)    String endpoint = \"<yourEndpoint>\";\n    String accessKeyId = \"<yourAccessKeyId>\";\n    String accessKeySecret = \"<yourAccessKeySecret>\";\n    String bucketName = \"<yourBucketName>\";\n\n    OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);\n    ossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n    ossClient.shutdown();\n\n    return \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}\n", "CodeBleu_score": 41.510491865884624}, {"code": "public String upload(String objName, byte[] content)    // Initialize the OSS client with access credentials.\n    OSS ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n    try {\n        // Upload the file content as an object with the specified name.\n        ossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n    } finally {\n        // Shut down the OSS client.\n        ossClient.shutdown();\n    }\n    // Return the URL of the uploaded object.\n    return \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}\n", "CodeBleu_score": 31.264860048200877}, {"code": "public String upload(String objName, byte[] content)    OSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n    ossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n    ossClient.shutdown();\n    return \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 31.318359212807295}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception    IpToLocationWorker worker = IpToLocationWorker.getInstance();\n    if (worker == null) {\n        return new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\");\n    }\n    return worker.getLocation(ipAddress);\n}", "CodeBleu_score": 23.13380173084074}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception    IpToLocationWorker worker = getWorker();\n    if (worker == null) {\n        return new LocationInfo(\"unknown\", \"unknown\", \"unknown\");\n    } else {\n        return worker.getLocationInfo(ipAddress);\n    }\n}\n", "CodeBleu_score": 25.364266834770667}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception    IpToLocationWorker worker = getWorker();\n    if (worker == null) {\n        return new LocationInfo(ipAddress, \"unknown\", \"unknown\", \"unknown\", \"unknown\");\n    } else {\n        return worker.getLocationInfo(ipAddress);\n    }\n}", "CodeBleu_score": 26.384331072420892}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception    if (lowLevelRestClient == null || highLevelRestClient == null) {\n        synchronized (this) {\n            if (lowLevelRestClient == null || highLevelRestClient == null) {\n                // Parse cluster hosts and ports\n                String[] hosts = clusterHosts.split(\",\");\n                int[] ports = Arrays.stream(clusterPorts.split(\",\"))\n                        .mapToInt(Integer::parseInt)\n                        .toArray();\n\n                // Build low-level and high-level REST clients\n                RestClientBuilder restClientBuilder = RestClient.builder(\n                        Stream.of(hosts)\n                                .map(host -> new HttpHost(host, ports[0], \"http\"))\n                                .toArray(HttpHost[]::new)\n                );\n                lowLevelRestClient = restClientBuilder.build();\n                highLevelRestClient = new RestHighLevelClient(restClientBuilder);\n            }\n        }\n    }\n}", "CodeBleu_score": 46.793406996003014}, {"code": "protected void ensureESClientInitialized() throws Exception    synchronized (this) {\n        if (lowLevelClient == null && highLevelClient == null) {\n            String[] hosts = clusterHosts.split(\",\");\n            int[] ports = Arrays.stream(clusterPorts.split(\",\")).mapToInt(Integer::parseInt).toArray();\n            if (hosts.length != ports.length) {\n                throw new Exception(\"Number of hosts and ports do not match\");\n            }\n            RestClientBuilder restClientBuilder = RestClient.builder(\n                    IntStream.range(0, hosts.length).mapToObj(i -> new HttpHost(hosts[i], ports[i], \"http\")).toArray(HttpHost[]::new)\n            );\n            lowLevelClient = restClientBuilder.build();\n            highLevelClient = new RestHighLevelClient(restClientBuilder);\n        }\n    }\n}", "CodeBleu_score": 43.557613271575256}, {"code": "protected void ensureESClientInitialized() throws Exception    synchronized (this) {\n        if (lowLevelClient == null || highLevelClient == null) {\n            // Parse cluster hosts and ports\n            List<String> hosts = parseHosts(clusterHosts);\n            List<Integer> ports = parsePorts(clusterPorts);\n\n            // Build low-level and high-level REST clients\n            lowLevelClient = buildLowLevelRestClient(hosts, ports);\n            highLevelClient = buildHighLevelRestClient(hosts, ports);\n        }\n    }\n}\n", "CodeBleu_score": 32.568819036507314}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort)    List<HttpHost> hosts = new ArrayList<>();\n    String[] hostList = clusterHostList.split(\",\");\n    for (String host : hostList) {\n        String[] hostAndPort = host.split(\":\");\n        String hostName = hostAndPort[0];\n        int port = hostAndPort.length > 1 ? Integer.parseInt(hostAndPort[1]) : clusterPort;\n        hosts.add(new HttpHost(hostName, port, \"http\"));\n    }\n    return hosts;\n}", "CodeBleu_score": 39.309802447070666}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort)    List<HttpHost> hosts = new ArrayList<>();\n    String[] hostArray = clusterHostList.split(\",\");\n    for (String host : hostArray) {\n        String[] hostPort = host.split(\":\");\n        if (hostPort.length == 2) {\n            hosts.add(new HttpHost(hostPort[0], Integer.parseInt(hostPort[1]), \"http\"));\n        } else {\n            hosts.add(new HttpHost(host, clusterPort, \"http\"));\n        }\n    }\n    return hosts;\n}\n", "CodeBleu_score": 42.4997409662658}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort)    List<HttpHost> hostList = new ArrayList<>();\n    String[] hosts = clusterHostList.split(\",\");\n    for (String host : hosts) {\n        String[] hostAndPort = host.split(\":\");\n        String hostName = hostAndPort[0];\n        int port = clusterPort;\n        if (hostAndPort.length == 2) {\n            port = Integer.parseInt(hostAndPort[1]);\n        }\n        hostList.add(new HttpHost(hostName, port, \"http\"));\n    }\n    return hostList;\n}", "CodeBleu_score": 41.22323449059261}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException    while (true) {\n        // Poll for tasks with a 30-second timeout\n        Task task = taskQueue.poll(30, TimeUnit.SECONDS);\n        if (task != null) {\n            // Check the task type\n            if (task.getType() == Task.Type.PLAIN_TEXT_MESSAGE) {\n                // Extract the recipient number and message data\n                String recipient = task.getRecipient();\n                String message = task.getMessage();\n\n                // Validate the message data\n                if (recipient == null || recipient.isEmpty() || message == null || message.isEmpty()) {\n                    // Log an error message if the message data is invalid\n                    logger.error(\"Invalid message data: recipient={}, message={}\", recipient, message);\n                } else {\n                    // Send the message\n                    try {\n                        sendMessage(recipient, message);\n                    } catch (Exception e) {\n                        // Log an error message if an exception occurs\n                        logger.error(\"Error sending message: recipient={}, message={}\", recipient, message, e);\n                    }\n                }\n            }\n        }\n    }\n}\n", "CodeBleu_score": 26.446767958205886}, {"code": "protected void pollingWork() throws InterruptedException    while (true) {\n        try {\n            // Poll for tasks with a 30-second timeout\n            Task task = taskQueue.poll(30, TimeUnit.SECONDS);\n            if (task != null) {\n                // Check the task type\n                if (task instanceof PlainTextMessageTask) {\n                    // Extract the recipient number and message data\n                    PlainTextMessageTask plainTextMessageTask = (PlainTextMessageTask) task;\n                    String recipientNumber = plainTextMessageTask.getRecipientNumber();\n                    String messageData = plainTextMessageTask.getMessageData();\n\n                    // Validate the data\n                    if (recipientNumber != null && messageData != null) {\n                        // Send the message\n                        sendMessage(recipientNumber, messageData);\n                    } else {\n                        // Log an error message\n                        logger.error(\"Invalid message data for task: {}\", task);\n                    }\n                }\n            }\n        } catch (Exception e) {\n            // Log an error message\n            logger.error(\"Error while polling for tasks: {}\", e.getMessage());\n        }\n    }\n}\n", "CodeBleu_score": 27.46340379737481}, {"code": "protected void pollingWork() throws InterruptedException    while (true) {\n        try {\n            Task task = queue.poll(30, TimeUnit.SECONDS);\n            if (task != null) {\n                switch (task.getType()) {\n                    case Task.Type.PLAIN_TEXT_MESSAGE:\n                        String recipient = task.getRecipient();\n                        String message = task.getMessage();\n                        if (isValid(recipient) && isValid(message)) {\n                            sendMessage(recipient, message);\n                        } else {\n                            log.error(\"Invalid recipient or message\");\n                        }\n                        break;\n                    default:\n                        log.error(\"Unknown task type\");\n                        break;\n                }\n            }\n        } catch (InterruptedException e) {\n            log.error(\"Interrupted while waiting for task\", e);\n            break;\n        }\n    }\n}\n", "CodeBleu_score": 23.438618079711834}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception    CloseableHttpClient httpClient = HttpClientBuilder.create().build();\n    HttpGet httpGet = new HttpGet(uri);\n    CloseableHttpResponse response = httpClient.execute(httpGet);\n    HttpEntity entity = response.getEntity();\n    String content = EntityUtils.toString(entity, \"UTF-8\");\n    log.info(\"Response content: {}\", content);\n    return content;\n}", "CodeBleu_score": 59.86775704594942}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception    try (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n        HttpGet httpGet = new HttpGet(uri);\n        HttpResponse response = httpClient.execute(httpGet);\n        HttpEntity entity = response.getEntity();\n        String content = EntityUtils.toString(entity, \"UTF-8\");\n        log.info(\"Response content: {}\", content);\n        return content;\n    }\n}", "CodeBleu_score": 52.83049682013888}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception    try (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n        HttpGet httpGet = new HttpGet(uri);\n        CloseableHttpResponse response = httpClient.execute(httpGet);\n        HttpEntity entity = response.getEntity();\n        String content = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        logger.info(content);\n        return content;\n    }\n}\n", "CodeBleu_score": 60.97154039552608}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n    NodeList nodeList = doc.getChildNodes();\n    String[] decoded = decodeRootElement(nodeList.item(0), doTrim);\n    if (decoded == null) {\n        return null;\n    }\n    Map<String, Object> map = new HashMap<>();\n    for (int i = 0; i < decoded.length; i += 2) {\n        map.put(decoded[i], decoded[i + 1]);\n    }\n    return map;\n}\n", "CodeBleu_score": 57.01230539956907}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document document = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n    NodeList childNodes = document.getDocumentElement().getChildNodes();\n    if (childNodes == null || childNodes.getLength() == 0) {\n        return null;\n    }\n    Object[] root = decodeElement(childNodes.item(0), doTrim);\n    if (root == null) {\n        return null;\n    }\n    Map<String, Object> map = new HashMap<>();\n    map.put(root[0].toString(), root[1]);\n    return map;\n}\n", "CodeBleu_score": 58.204013525242736}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n    doc.getDocumentElement().normalize();\n    NodeList nodeList = doc.getDocumentElement().getChildNodes();\n    Map<String, Object> map = new HashMap<>();\n    for (int i = 0; i < nodeList.getLength(); i++) {\n        Node node = nodeList.item(i);\n        if (node.getNodeType() == Node.ELEMENT_NODE) {\n            Element element = (Element) node;\n            String key = element.getTagName();\n            Object value = decodeElement(element, doTrim);\n            map.put(key, value);\n        }\n    }\n    return map;\n}\n", "CodeBleu_score": 50.99121825855877}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord)    if (orderRecord.isAutoProcessing()) {\n        log.info(\"Auto-processing order {}\", orderRecord);\n        transactionName.set(\"EnqueueGenerateSchedulesAfterCommit\");\n        enqueueOrderForAutoProcessing(orderRecord);\n    } else {\n        log.info(\"Not auto-processing order {}\", orderRecord);\n        transactionName.set(\"EnqueueCreateMissingShipmentSchedulesAfterCommit\");\n        enqueueCreateMissingShipmentSchedules(orderRecord);\n    }\n}\n", "CodeBleu_score": 22.268207005674988}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord)    final I_C_Order order = orderRecord.getC_Order();\n    final I_C_Order_Processor processor = order.getC_Order_Processor();\n\n    if (processor.isAutoProcess()) {\n        log.info(\"Auto-processing order {}\", order.getDocumentNo());\n        // Enqueue the order for automatic shipping and invoicing\n        getQueue().enqueue(order, I_C_Order.TRXNAME_AutoProcess);\n    } else {\n        log.info(\"Not auto-processing order {}\", order.getDocumentNo());\n        // Schedule the creation of missing shipment schedules if they are not postponed\n        getQueue().enqueue(order, I_C_Order.TRXNAME_CreateMissingShipmentSchedules);\n    }\n}\n", "CodeBleu_score": 29.610610470577036}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord)    final boolean eligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n    if (eligibleForAutoProcessing) {\n        log.info(\"{}: {}\", ORDER_AUTO_PROCESSING_STARTED, orderRecord.getDocumentNo());\n        enqueueOrderForAutoProcessing(orderRecord, TRANSACTION_NAME_AUTO_PROCESSING);\n    } else {\n        log.info(\"{}: {}\", ORDER_AUTO_PROCESSING_POSTPONED, orderRecord.getDocumentNo());\n        scheduleMissingShipmentSchedules(orderRecord);\n    }\n}\n", "CodeBleu_score": 25.57732895783379}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User    $user = $this->getUserByEmail($request->get('email'));\n\n    if (!$user) {\n        event(new FailedAuthentication($user, 'user not found'));\n        throw new AuthenticationException('User not found');\n    }\n\n    if (!$this->checkPassword($user, $request->get('password'))) {\n        event(new FailedAuthentication($user, 'invalid credentials'));\n        throw new AuthenticationException('Invalid credentials');\n    }\n\n    return $user;\n}\n", "CodeBleu_score": 35.989704221428816}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User    $user = $this->userRepository->findOneByEmail($request->get('email'));\n    if (!$user || !$this->passwordHasher->check($request->get('password'), $user->getPassword())) {\n        event(new FailedAuthentication($user, $request));\n        throw new AuthenticationException();\n    }\n    return $user;\n}", "CodeBleu_score": 41.89863474486284}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User    $credentials = $this->credentials($request);\n\n    if (!$user = $this->retrieveUserByCredentials($credentials)) {\n        event(new FailedAuthentication($request->ip(), $credentials['email']));\n\n        throw new AuthenticationException(\n            trans('auth.failed')\n        );\n    }\n\n    return $user;\n}\n", "CodeBleu_score": 37.479337283375344}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void    $this->incrementLoginAttempts($request);\n\n    throw ValidationException::withMessages([\n        'email' => [trans('auth.failed')],\n    ]);\n}\n", "CodeBleu_score": 83.54574388683551}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void    if ($request->hasTooManyAttempts($this->throttleKey($request))) {\n        $this->fireLockoutEvent($request);\n\n        $seconds = $this->limiter()->availableIn($this->throttleKey($request));\n\n        throw ValidationException::withMessages([\n            Fortify::username() => trans('auth.throttle', [\n                'seconds' => $seconds,\n                'minutes' => ceil($seconds / 60),\n            ]),\n        ])->status(Response::HTTP_TOO_MANY_REQUESTS);\n    }\n\n    $this->incrementLoginAttempts($request);\n\n    throw ValidationException::withMessages([\n        Fortify::username() => trans('auth.failed'),\n    ])->status(Response::HTTP_UNAUTHORIZED);\n}\n", "CodeBleu_score": 44.368026731227964}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void    $this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        Fortify::username() => [trans('auth.failed')],\n    ]);\n}\n", "CodeBleu_score": 72.66389158601761}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request)    $userId = session()->get('user_id');\n    $user = User::find($userId);\n\n    if ($user) {\n        $publicKey = $user->webAuthnCredentials()->get()->map(function ($credential) {\n            return $credential->public_key;\n        });\n\n        $data = [\n            'publicKey' => $publicKey,\n            'twoFactorEnabled' => true,\n            'rememberMe' => session()->get('remember_me'),\n        ];\n\n        return Inertia::render('TwoFactorChallenge', $data);\n    }\n\n    return response('User not found', 404);\n}", "CodeBleu_score": 44.065229387034194}, {"code": "<?\npublic function toResponse($request)    $userId = session()->get('user_id');\n    $user = User::find($userId);\n\n    if ($user) {\n        $publicKey = $user->webAuthnCredentials->map(function ($credential) {\n            return $credential->public_key;\n        });\n\n        $data = [\n            'two_factor_enabled' => true,\n            'remember_me' => session()->get('remember_me'),\n            'public_key' => $publicKey,\n        ];\n\n        return Inertia::render('TwoFactorChallenge', $data);\n    }\n}\n", "CodeBleu_score": 43.852337121594935}, {"code": "<?\npublic function toResponse($request)    $userId = session()->get('user_id');\n    $user = User::find($userId);\n\n    if ($user) {\n        $publicKey = $user->webauthnKeys()->first();\n\n        $publicKeyCredentialRequestOptions = $this->prepareAssertion($publicKey);\n\n        return Inertia::render('Auth/TwoFactorChallenge', [\n            'publicKey' => $publicKeyCredentialRequestOptions,\n            'two_factor_enabled' => true,\n            'remember' => session()->get('remember'),\n        ]);\n    }\n\n    return redirect()->route('login');\n}", "CodeBleu_score": 46.1069642752485}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User    $user = SocialiteUser::where('driver', $driver)\n        ->where('socialite_user_id', $socialite->getId())\n        ->first();\n\n    if ($user) {\n        // Verify the user association\n        if ($user->user->is_active) {\n            return $user->user;\n        } else {\n            throw new Exception('User is not active.');\n        }\n    } else {\n        // Create a new user or associate the socialite token with an existing user\n        if ($request->has('email')) {\n            $existingUser = User::where('email', $request->input('email'))->first();\n\n            if ($existingUser) {\n                // Associate the socialite token with the existing user\n                $socialiteUser = new SocialiteUser();\n                $socialiteUser->user_id = $existingUser->id;\n                $socialiteUser->driver = $driver;\n                $socialiteUser->socialite_user_id = $socialite->getId();\n                $socialiteUser->save();\n\n                return $existingUser;\n            } else {\n                // Create a new user\n                $user = new User();\n                $user->name = $request->input('name');\n                $user->email = $request->input('email');\n                $user->password = bcrypt(Str::random(16));\n                $user->save();\n\n                $socialiteUser = new SocialiteUser();\n                $socialiteUser->user_id = $user->id;\n                $socialiteUser->driver = $driver;\n                $socialiteUser->socialite_user_id = $socialite->getId();\n                $socialiteUser->save();\n\n                return $user;\n            }\n        } else {\n            throw new Exception('Email is required.');\n        }\n    }\n}", "CodeBleu_score": 38.42433668577237}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User    $socialiteUserId = $socialite->getId();\n    $userToken = UserToken::where('driver', $driver)->where('socialite_user_id', $socialiteUserId)->first();\n    if ($userToken) {\n        $user = $userToken->user;\n        $this->verifyUserAssociation($user, $socialite);\n    } else {\n        $user = $this->createOrAssociateUser($request, $driver, $socialite);\n    }\n    return $user;\n}\n", "CodeBleu_score": 52.80044672022526}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User    $user = User::whereHas('socialTokens', function ($query) use ($driver, $socialite) {\n        $query->where('driver', $driver)\n            ->where('social_id', $socialite->getId());\n    })->first();\n\n    if (!$user) {\n        $user = User::where('email', $socialite->getEmail())->first();\n\n        if (!$user) {\n            $user = User::create([\n                'name' => $socialite->getName(),\n                'email' => $socialite->getEmail(),\n                'password' => Hash::make(Str::random(16)),\n            ]);\n        }\n\n        SocialToken::create([\n            'user_id' => $user->id,\n            'driver' => $driver,\n            'social_id' => $socialite->getId(),\n            'token' => $socialite->token,\n            'refresh_token' => $socialite->refreshToken ?? null,\n            'expires_at' => $socialite->expiresIn ? Carbon::now()->addSeconds($socialite->expiresIn) : null,\n        ]);\n    }\n\n    if ($user->socialTokens->where('driver', $driver)->where('social_id', $socialite->getId())->isEmpty()) {\n        SocialToken::create([\n            'user_id' => $user->id,\n            'driver' => $driver,\n            'social_id' => $socialite->getId(),\n            'token' => $socialite->token,\n            'refresh_token' => $socialite->refreshToken ?? null,\n            'expires_at' => $socialite->expiresIn ? Carbon::now()->addSeconds($socialite->expiresIn) : null,\n        ]);\n    }\n\n    Auth::login($user, true);\n\n    return $user;\n}", "CodeBleu_score": 44.06133374501293}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool    $user = $request->user();\n\n    if (!$user) {\n        return false;\n    }\n\n    $credentials = $request->only(\n        'id',\n        'rawId',\n        'response',\n        'type'\n    );\n\n    $assertionResponse = new AssertionResponse($credentials['id'], $credentials['rawId'], $credentials['response'], $credentials['type']);\n\n    try {\n        $this->webauthn->validateAssertion($assertionResponse, $user);\n    } catch (WebauthnException $e) {\n        event(new Failed(config('webauthn.guard'), $user, [\n            'id' => $credentials['id'],\n            'type' => $credentials['type'],\n        ]));\n\n        throw ValidationException::withMessages([\n            'webauthn' => __('webauthn::errors.credential_not_allowed'),\n        ]);\n    }\n\n    return true;\n}\n", "CodeBleu_score": 47.54907127974429}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool    $user = $request->user();\n    if (!$user) {\n        return false;\n    }\n\n    $credentials = $this->getFilteredCredentials($request);\n    $validated = $this->validator->validateAssertion($credentials, $user);\n    if (!$validated) {\n        $this->fireFailedEvent($request, $user);\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    return true;\n}\n", "CodeBleu_score": 68.03554358871041}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool    $user = $request->user();\n\n    if (!$user) {\n        return false;\n    }\n\n    $credentials = $this->filterCredentials($request);\n\n    $validated = $this->validateCredentials($user, $credentials);\n\n    if (!$validated) {\n        $this->fireFailedEvent($request, $user);\n\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    return true;\n}", "CodeBleu_score": 67.01557312574042}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User    if (!$this->email) {\n        Log::error('User not found: no email provided');\n        return null;\n    }\n\n    try {\n        $user = User::where('email', $this->email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        Log::error('User not found: ' . $e->getMessage());\n        return null;\n    }\n\n    return $user;\n}", "CodeBleu_score": 53.78210112003441}, {"code": "<?\nprivate function user(): ?User    if (!$this->email) {\n        Log::error('No email provided');\n        return null;\n    }\n\n    try {\n        return User::where('email', $this->email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        Log::error('User not found: ' . $e->getMessage());\n        return null;\n    }\n}\n", "CodeBleu_score": 39.08817496236349}, {"code": "<?\nprivate function user(): ?User    if (empty($this->email)) {\n        Log::error('Email is required');\n        return null;\n    }\n\n    try {\n        $user = User::where('email', $this->email)->first();\n        return $user;\n    } catch (\\Exception $e) {\n        Log::error($e->getMessage());\n        return null;\n    }\n}\n", "CodeBleu_score": 52.5924320310023}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void    if (config('scout.driver') === 'meilisearch' && config('scout.flush')) {\n        foreach (config('meilisearch.index_settings') as $index => $settings) {\n            $table = Str::singular($index);\n            Artisan::call(\"scout:flush \\\"App\\\\Models\\\\$table\\\"\");\n        }\n        Log::info('Scout indexes flushed');\n    }\n}", "CodeBleu_score": 48.81201821613762}, {"code": "<?\nprotected function scoutFlush(): void    if (config('scout.driver') && config('scout.flush_on_update')) {\n        foreach (config('scout.meilisearch.indexes') as $index => $config) {\n            $tableName = $config['index'];\n\n            Artisan::call('scout:flush', [\n                'model' => $tableName,\n            ]);\n        }\n\n        Log::info('Scout indexes flushed.');\n    }\n}", "CodeBleu_score": 42.2080953839244}, {"code": "<?\nprotected function scoutFlush(): void    if (config('scout.driver') && config('scout.queue.flush')) {\n        foreach (config('meilisearch.index_settings') as $index => $settings) {\n            $table = Str::of($index)->before('.');\n\n            Artisan::call('scout:flush', [\n                'model' => $table,\n            ]);\n        }\n\n        Log::info('Meilisearch indexes flushed');\n    }\n}", "CodeBleu_score": 53.4941528779592}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard    $vcard = new VCard();\n\n    try {\n        $vcard->readFromString($resource->getVCard());\n    } catch (VCardException $e) {\n        if ($resource->getUid() === null) {\n            $resource->setUid($this->generateUid());\n        }\n\n        $vcard->setUid($resource->getUid());\n    }\n\n    if ($vcard->getUid() === null) {\n        $vcard->setUid($this->generateUid());\n    }\n\n    $vcard->setFullName($resource->getFullName());\n    $vcard->setOrganization($resource->getOrganization());\n    $vcard->setTitle($resource->getTitle());\n\n    foreach ($this->exporters as $exporter) {\n        $exporter->export($resource, $vcard);\n    }\n\n    return $vcard;\n}", "CodeBleu_score": 32.334656080256536}, {"code": "<?\nprivate function export(VCardResource $resource): VCard    $vcard = $this->read($resource);\n\n    if ($vcard === null) {\n        $vcard = $this->create($resource);\n    }\n\n    $this->exportUid($vcard, $resource);\n    $this->exportName($vcard, $resource);\n    $this->exportBirthday($vcard, $resource);\n    $this->exportAddress($vcard, $resource);\n    $this->exportPhone($vcard, $resource);\n    $this->exportEmail($vcard, $resource);\n    $this->exportPhoto($vcard, $resource);\n\n    return $vcard;\n}\n", "CodeBleu_score": 24.29997368543917}, {"code": "<?\nprivate function export(VCardResource $resource): VCard    $vcard = $this->getVCard($resource);\n\n    $this->exporter->addExporter(new UidExporter());\n    $this->exporter->addExporter(new NameExporter());\n    $this->exporter->addExporter(new AddressExporter());\n    $this->exporter->addExporter(new PhoneExporter());\n    $this->exporter->addExporter(new EmailExporter());\n    $this->exporter->addExporter(new UrlExporter());\n    $this->exporter->addExporter(new BirthdayExporter());\n    $this->exporter->addExporter(new PhotoExporter());\n    $this->exporter->addExporter(new NoteExporter());\n\n    $this->exporter->export($vcard, $resource);\n\n    return $vcard;\n}\n", "CodeBleu_score": 22.204924864680276}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool    $object = $this->getObjectByUri($addressBookId, $cardUri);\n\n    if ($object instanceof Contact) {\n        Queue::push(new DestroyContact($object));\n    } elseif ($object instanceof Group) {\n        Queue::push(new DestroyGroup($object));\n    } else {\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 31.35254524900591}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool    $object = $this->carddavBackend->getCard($addressBookId, $cardUri);\n    if ($object instanceof Contact) {\n        Queue::createItem(new DestroyContact($object->getId()));\n    } elseif ($object instanceof AddressBook) {\n        Queue::createItem(new DestroyAddressBook($object->getId()));\n    } else {\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 31.513654946575397}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool    // Retrieve the object corresponding to the given address book ID and card URI\n    $object = $this->getObject($addressBookId, $cardUri);\n\n    // If the object is a contact, dispatch a job to destroy the contact\n    if ($object instanceof Contact) {\n        dispatch(new DestroyContact($object))->onQueue('high');\n    }\n\n    // If the object is a group, dispatch a job to destroy the group\n    if ($object instanceof Group) {\n        dispatch(new DestroyGroup($object))->onQueue('high');\n    }\n\n    // If the object is neither a contact nor a group, return false\n    return false;\n}\n", "CodeBleu_score": 42.3221853381871}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data)    if (!request()->hasFile('file')) {\n        return;\n    }\n\n    $user = auth()->user();\n\n    $activity = $user->leadActivities()->create([\n        'lead_id' => $data['lead_id'],\n        'activity_type_id' => $data['activity_type_id'],\n        'description' => $data['description'],\n    ]);\n\n    $file = request()->file('file');\n\n    $fileName = $file->getClientOriginalName();\n    $filePath = $file->storeAs('lead_files', $fileName, 'public');\n\n    return $activity->files()->create([\n        'name' => $fileName,\n        'path' => '/storage/' . $filePath,\n    ]);\n}", "CodeBleu_score": 54.02866659965946}, {"code": "<?\npublic function upload(array $data)    $file = request()->file('file');\n\n    if (!$file) {\n        return;\n    }\n\n    $leadActivity = LeadActivity::create([\n        'type' => 'file',\n        'user_id' => auth()->id(),\n        'lead_id' => $data['lead_id'],\n        'details' => $data['details'],\n    ]);\n\n    $filePath = $file->store('lead_activity_files');\n\n    return LeadActivityFile::create([\n        'lead_activity_id' => $leadActivity->id,\n        'name' => $file->getClientOriginalName(),\n        'path' => $filePath,\n    ]);\n}", "CodeBleu_score": 58.619881080101145}, {"code": "<?\npublic function upload(array $data)    $file = $data['file'] ?? null;\n\n    if (!$file) {\n        return;\n    }\n\n    $leadActivity = LeadActivity::create([\n        'user_id' => auth()->id(),\n        'lead_id' => $data['lead_id'],\n        'type' => 'file',\n        'name' => $data['name'],\n        'description' => $data['description'],\n    ]);\n\n    $fileName = $file->getClientOriginalName();\n    $filePath = $file->storeAs('lead-files', $fileName, 'public');\n\n    return LeadActivityFile::create([\n        'lead_activity_id' => $leadActivity->id,\n        'name' => $fileName,\n        'path' => '/storage/' . $filePath,\n    ]);\n}", "CodeBleu_score": 56.32703756708533}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception)    if ($exception instanceof ModelNotFoundException) {\n        $response = response()->json([\n            'error' => 'Resource not found'\n        ], 404);\n    } elseif ($exception instanceof PDOException) {\n        $response = response()->json([\n            'error' => 'Database error'\n        ], 500);\n    } elseif ($exception instanceof ParseError) {\n        $response = response()->json([\n            'error' => 'Parse error'\n        ], 500);\n    } elseif ($exception instanceof HttpException) {\n        $statusCode = $exception->getStatusCode();\n        $response = response()->json([\n            'error' => $exception->getMessage()\n        ], $statusCode);\n    } else {\n        $response = response()->json([\n            'error' => 'Internal server error'\n        ], 500);\n    }\n\n    return $response;\n}", "CodeBleu_score": 49.11600715304042}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception)    // Check if the route is for admin or front\n    $isAdminRoute = Str::startsWith(request()->route()->getPrefix(), 'admin');\n\n    // Redirect front routes to the admin session creation\n    if (!$isAdminRoute) {\n        return redirect()->route('admin.session.create');\n    }\n\n    // Handle HTTP exceptions\n    if ($exception instanceof HttpException) {\n        $statusCode = $exception->getStatusCode();\n        return response()->view('errors.custom', ['statusCode' => $statusCode], $statusCode);\n    }\n\n    // Handle ModelNotFoundException\n    if ($exception instanceof ModelNotFoundException) {\n        return response()->view('errors.custom', ['statusCode' => 404], 404);\n    }\n\n    // Handle PDOException\n    if ($exception instanceof PDOException) {\n        return response()->view('errors.custom', ['statusCode' => 500], 500);\n    }\n\n    // Handle ParseError\n    if ($exception instanceof ParseError) {\n        return response()->view('errors.custom', ['statusCode' => 500], 500);\n    }\n\n    // Handle other exceptions\n    return parent::render($request, $exception);\n}", "CodeBleu_score": 52.12988709146773}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception)    $route = Route::getCurrentRoute();\n    $isAdminRoute = strpos($route->getPrefix(), 'admin') !== false;\n\n    if ($isAdminRoute) {\n        if ($exception instanceof ModelNotFoundException) {\n            return response()->view('admin.errors.404', [], 404);\n        }\n\n        if ($exception instanceof PDOException) {\n            return response()->view('admin.errors.500', [], 500);\n        }\n\n        if ($exception instanceof ParseError) {\n            return response()->view('admin.errors.500', [], 500);\n        }\n\n        if ($exception instanceof HttpException) {\n            $statusCode = $exception->getStatusCode();\n            if (view()->exists(\"admin.errors.{$statusCode}\")) {\n                return response()->view(\"admin.errors.{$statusCode}\", [], $statusCode);\n            }\n            return response()->view('admin.errors.500', [], 500);\n        }\n    } else {\n        if ($exception instanceof ModelNotFoundException) {\n            return response()->view('front.errors.404', [], 404);\n        }\n\n        if ($exception instanceof PDOException) {\n            return response()->view('front.errors.500', [], 500);\n        }\n\n        if ($exception instanceof ParseError) {\n            return response()->view('front.errors.500', [], 500);\n        }\n\n        if ($exception instanceof HttpException) {\n            $statusCode = $exception->getStatusCode();\n            if (view()->exists(\"front.errors.{$statusCode}\")) {\n                return response()->view(\"front.errors.{$statusCode}\", [], $statusCode);\n            }\n            return response()->view('front.errors.500', [], 500);\n        }\n    }\n}", "CodeBleu_score": 41.617869152554334}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode)    if (request()->expectsJson()) {\n        return response()->json([\n            'error' => 'The resource at ' . $path . ' does not exist.'\n        ], $statusCode);\n    }\n\n    return response()->view('errors.' . $statusCode, ['path' => $path], $statusCode);\n}", "CodeBleu_score": 57.070416090796364}, {"code": "<?\nprivate function response($path, $statusCode)    if (request()->expectsJson()) {\n        return response()->json(['message' => 'Not found'], $statusCode);\n    }\n\n    return view(\"errors.$statusCode\", ['path' => $path], $statusCode);\n}\n", "CodeBleu_score": 49.62664838595083}, {"code": "<?\nprivate function response($path, $statusCode)    if ($this->request->expectsJson()) {\n        return response()->json([\n            'error' => 'Unauthenticated.',\n        ], $statusCode);\n    }\n\n    return redirect()->guest(route($path));\n}\n", "CodeBleu_score": 41.07734711288623}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate()    $ids = request('ids');\n    $ids = explode(',', $ids);\n\n    $count = 0;\n    foreach ($ids as $id) {\n        $activity = Activity::find($id);\n        if ($activity) {\n            event(new ActivityUpdating($activity));\n            $activity->is_done = request('is_done');\n            $activity->save();\n            event(new ActivityUpdated($activity));\n            $count++;\n        }\n    }\n\n    if ($count > 0) {\n        return response()->json(['success' => true]);\n    } else {\n        return response()->json(['success' => false]);\n    }\n}", "CodeBleu_score": 40.79367421670963}, {"code": "<?\npublic function massUpdate()    $activityIds = request('activityIds');\n    $isDone = request('isDone');\n\n    $count = 0;\n    foreach ($activityIds as $activityId) {\n        $activity = Activity::find($activityId);\n        if ($activity) {\n            event(new ActivityUpdating($activity));\n            $activity->is_done = $isDone;\n            $activity->save();\n            $count++;\n            event(new ActivityUpdated($activity));\n        }\n    }\n\n    return response()->json([\n        'success' => $count > 0,\n    ]);\n}", "CodeBleu_score": 37.228705568854224}, {"code": "<?\npublic function massUpdate()    $activity_ids = request('activity_ids');\n    $is_done = request('is_done');\n    $updated = 0;\n\n    foreach ($activity_ids as $activity_id) {\n        event(new ActivityUpdating($activity_id));\n        $activity = Activity::find($activity_id);\n        $activity->is_done = $is_done;\n        $activity->save();\n        event(new ActivityUpdated($activity_id));\n        $updated++;\n    }\n\n    if ($updated > 0) {\n        return response()->json(['status' => 'success']);\n    } else {\n        return response()->json(['status' => 'error']);\n    }\n}\n", "CodeBleu_score": 36.35286719885652}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy()    $request = request();\n    $ids = $request->input('ids');\n\n    foreach ($ids as $id) {\n        $activity = Activity::find($id);\n        event(new ActivityDeleting($activity));\n        $activity->delete();\n        event(new ActivityDeleted($activity));\n    }\n\n    return response()->json(['success' => true]);\n}\n\n", "CodeBleu_score": 24.893083333541117}, {"code": "<?\n public function massDestroy()    $activities = request()->input('ids');\n    foreach ($activities as $activity) {\n        event(new ActivityDeleting($activity));\n        $activity = Activity::find($activity);\n        $activity->delete();\n        event(new ActivityDeleted($activity));\n    }\n    return response()->json([\n        'message' => 'Successfully deleted activities.'\n    ], 200);\n}", "CodeBleu_score": 30.899798427482555}, {"code": "<?\n public function massDestroy()    $request = request()->all();\n\n    foreach ($request['ids'] as $id) {\n        $activity = Activity::find($id);\n\n        if ($activity) {\n            event(new ActivityDestroying($activity));\n            $activity->delete();\n            event(new ActivityDestroyed($activity));\n        }\n    }\n\n    return response()->json(['message' => 'Successfully destroyed'], 200);\n}", "CodeBleu_score": 22.788336957264523}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards()    $requestData = request()->all();\n    $currentCards = DashboardCard::get();\n\n    foreach ($currentCards as $card) {\n        $card->selected = false;\n    }\n\n    foreach ($requestData as $requestCard) {\n        foreach ($currentCards as $card) {\n            if ($card->id == $requestCard['id']) {\n                $card->selected = true;\n            }\n        }\n    }\n\n    foreach ($currentCards as $card) {\n        $card->save();\n    }\n\n    return response()->json($currentCards);\n}", "CodeBleu_score": 41.66506710526187}, {"code": "<?\n public function updateCards()    $currentCards = json_decode($this->getCards(), true);\n    $requestData = json_decode(file_get_contents('php://input'), true);\n\n    foreach ($requestData as $card) {\n        $cardId = $card['id'];\n        $cardSelected = $card['selected'];\n\n        foreach ($currentCards as &$currentCard) {\n            if ($currentCard['id'] === $cardId) {\n                $currentCard['selected'] = $cardSelected;\n                break;\n            }\n        }\n    }\n\n    return $this->json($currentCards);\n}", "CodeBleu_score": 42.04433097865055}, {"code": "<?\n public function updateCards()    $cards = Card::all();\n\n    $requestData = json_decode(request()->getContent(), true);\n\n    foreach ($requestData as $data) {\n        $card = $cards->where('id', $data['id'])->first();\n        $card->selected = $data['selected'];\n        $card->save();\n    }\n\n    return response()->json($cards);\n}", "CodeBleu_score": 37.875198087182305}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store()    event(new ConfigurationSaving($this->request));\n    $configuration = $this->createConfiguration();\n    event(new ConfigurationSaved($configuration, $this->request));\n\n    flash(trans('configuration.event.created', ['name' => $configuration->present()->name]), 'success');\n    return redirect()->route('configuration.index');\n}", "CodeBleu_score": 26.962768621055954}, {"code": "<?\npublic function store()    // Dispatch an event before saving\n    Event::fire('config.before.save');\n\n    // Create the configuration with the provided request data\n    $config = Config::create(Input::all());\n\n    // Dispatch an event after saving\n    Event::fire('config.after.save', $config);\n\n    // Flash a success message to the session\n    Session::flash('success', 'Configuration created successfully.');\n\n    // Redirect back to the previous page\n    return Redirect::back();\n}", "CodeBleu_score": 23.1912362245574}, {"code": "<?\npublic function store()    event(new ConfigurationSaving($this->request));\n\n    $this->configuration->create($this->request->all());\n\n    event(new ConfigurationSaved($this->request));\n\n    flash()->success(trans('configuration::messages.create success'));\n\n    return redirect()->route('admin.configuration.index');\n}", "CodeBleu_score": 30.507483936215074}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download()    $filePath = $this->request->get('file_path');\n    $fileName = $this->request->get('file_name');\n\n    $file = $this->repository->getFile($filePath);\n\n    return response()->download($file, $fileName);\n}", "CodeBleu_score": 36.381986608829266}, {"code": "<?\npublic function download()    // Get the file path from the request parameters\n    $filePath = $this->request->get('filePath');\n\n    // Construct the full file name\n    $fileName = \"{$this->filePath}/{$filePath}\";\n\n    // Fetch the corresponding configuration from the repository\n    $config = $this->configRepository->getByKey($filePath);\n\n    // Return the file for download using the stored value\n    return $this->file($fileName, $config->getValue());\n}", "CodeBleu_score": 40.534115410700075}, {"code": "<?\npublic function download()    $file_path = $this->request->get('file_path');\n    $file_name = $this->request->get('file_name');\n    $full_file_name = $file_path . '/' . $file_name;\n\n    $config = $this->repository->get($full_file_name);\n    return $this->response->download($config);\n}", "CodeBleu_score": 34.91140316395499}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list)     List<AdminModelSort> sortList = new ArrayList<>();\n    for (String model : list) {\n        AdminModelSort sort = new AdminModelSort();\n        sort.setUserId(getUserId());\n        sort.setModel(model);\n        sort.setSort(list.indexOf(model));\n        sortList.add(sort);\n    }\n    adminModelSortService.removeByUserId(getUserId());\n    adminModelSortService.saveInBatch(sortList);\n    return ResultGenerator.genSuccessResult();\n}\n", "CodeBleu_score": 38.94098753735606}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list)     List<AdminModelSort> adminModelSorts = new ArrayList<>();\n    list.forEach(model -> {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setAdminId(getAdminId());\n        adminModelSort.setModel(model);\n        adminModelSort.setSort(list.indexOf(model));\n        adminModelSorts.add(adminModelSort);\n    });\n    adminModelSortService.removeByAdminId(getAdminId());\n    adminModelSortService.saveAll(adminModelSorts);\n    return Result.success();\n}\n", "CodeBleu_score": 37.841103008083685}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list)     List<AdminModelSort> sortList = new ArrayList<>();\n    for (String model : list) {\n        AdminModelSort sort = new AdminModelSort();\n        sort.setUserId(userId);\n        sort.setModelName(model);\n        sort.setSortOrder(list.indexOf(model));\n        sortList.add(sort);\n    }\n    adminModelSortRepository.deleteByUserId(userId);\n    adminModelSortRepository.saveAll(sortList);\n    return new Result(\"success\", \"Header model sort order saved successfully\");\n}", "CodeBleu_score": 36.88141883247137}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting)    AdminConfig adminConfig = adminConfigService.getAdminConfigBySettingId(moduleSetting.getSettingId());\n    if (adminConfig.getModule().equals(Module.CRM)) {\n        return ResultGenerator.genFailResult(ResultCode.MODULE_SETTING_UPDATE_FAILED);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.updateAdminConfig(adminConfig);\n    return ResultGenerator.genSuccessResult();\n}", "CodeBleu_score": 59.85638809145249}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting)    AdminConfig adminConfig = adminConfigService.getAdminConfigBySettingId(moduleSetting.getSettingId());\n    if (adminConfig.getModule().equals(Module.CRM)) {\n        return ResultGenerator.genFailResult(ResultCode.SETTING_MODULE_ERROR);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.saveAdminConfig(adminConfig);\n    return ResultGenerator.genSuccessResult();\n}", "CodeBleu_score": 60.67512040369023}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting)    AdminConfig adminConfig = adminConfigService.findBySettingId(moduleSetting.getSettingId());\n    if (adminConfig.getModuleType().equals(ModuleType.CRM)) {\n        return Result.error(\"Cannot change status of CRM\");\n    }\n    adminConfig.setActive(moduleSetting.getActive());\n    adminConfigService.save(adminConfig);\n    return Result.success();\n}", "CodeBleu_score": 58.18988343194604}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey)     UserConfiguration userConfiguration = userConfigurationService.findByCustomKey(customKey);\n    if(userConfiguration != null) {\n        userConfiguration.setJson(json);\n    } else {\n        userConfiguration = new UserConfiguration();\n        userConfiguration.setCustomKey(customKey);\n        userConfiguration.setJson(json);\n    }\n    userConfigurationService.save(userConfiguration);\n    return new Result(true, \"success\");\n}\n", "CodeBleu_score": 38.79496674383802}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey)     User user = userService.getCurrentUser();\n    UserConfiguration userConfiguration = userConfigurationService.findByCustomKey(user, customKey);\n    if (userConfiguration == null) {\n        userConfiguration = new UserConfiguration(user, customKey, json);\n    } else {\n        userConfiguration.setValue(json);\n    }\n    userConfigurationService.save(userConfiguration);\n    return new Result(true, null);\n}\n", "CodeBleu_score": 40.811820849373134}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey)     User user = userService.getUser();\n    UserConfiguration userConfiguration = userConfigurationService.getUserConfigurationByCustomKey(user, customKey);\n    if (userConfiguration != null) {\n        userConfiguration.setValue(json.toString());\n        userConfigurationService.save(userConfiguration);\n    } else {\n        userConfiguration = new UserConfiguration();\n        userConfiguration.setUser(user);\n        userConfiguration.setCustomKey(customKey);\n        userConfiguration.setValue(json.toString());\n        userConfigurationService.save(userConfiguration);\n    }\n    return new Result(true, \"success\", null);\n}\n", "CodeBleu_score": 50.73787759267334}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId)     AdminUser user = userMapper.queryUserInfo(userId);\n    String departmentName = departmentMapper.getDepartmentName(user.getDepartmentId());\n    user.setDepartmentName(departmentName);\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.success(user);\n}\n", "CodeBleu_score": 45.33923953015356}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId)     AdminUser user = userMapper.selectByPrimaryKey(userId);\n    if (user == null) {\n        return Result.error(ResultCode.USER_NOT_EXIST);\n    }\n    String departmentName = departmentService.getDepartmentName(user.getDepartmentId());\n    user.setDepartmentName(departmentName);\n    user.setPassword(null);\n    user.setSalt(null);\n    return Result.success(user);\n}\n", "CodeBleu_score": 44.433461285893415}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId)     AdminUser user = adminUserService.getById(userId);\n    user.setDepartmentName(departmentService.getById(user.getDepartmentId()).getName());\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.success(user);\n}", "CodeBleu_score": 37.792268463842944}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice()     Long userId = getCurrentUserId();\n    List<ReadNotice> readNotices = ReadNotice.find.where().eq(\"userId\", userId).findList();\n    if (readNotices.size() > 0) {\n        for (ReadNotice readNotice : readNotices) {\n            readNotice.status = 1;\n            readNotice.update();\n        }\n    } else {\n        ReadNotice readNotice = new ReadNotice();\n        readNotice.userId = userId;\n        readNotice.status = 1;\n        readNotice.save();\n    }\n    return ok(Json.toJson(\"success\"));\n}\n", "CodeBleu_score": 25.716495783424286}, {"code": " public Result readNotice()     User user = User.find.byId(session().get(\"email\"));\n    List<ReadNotice> readNotices = ReadNotice.find.where().eq(\"user\", user).findList();\n    if (readNotices.size() > 0) {\n        for (ReadNotice readNotice : readNotices) {\n            readNotice.status = 1;\n            readNotice.update();\n        }\n    } else {\n        ReadNotice readNotice = new ReadNotice();\n        readNotice.user = user;\n        readNotice.status = 1;\n        readNotice.save();\n    }\n    return ok(Json.toJson(\"success\"));\n}\n", "CodeBleu_score": 28.62958697031336}, {"code": " public Result readNotice()     // Get the current user ID\n    Long userId = session().get(\"userId\");\n\n    // Check if there are multiple \"readNotice\" entries for the user\n    List<ReadNotice> readNotices = ReadNotice.find.where().eq(\"userId\", userId).findList();\n\n    if (readNotices.size() > 0) {\n        // Update the status for all matching entries\n        for (ReadNotice readNotice : readNotices) {\n            readNotice.status = 1;\n            readNotice.update();\n        }\n    } else {\n        // Create a new \"readNotice\" entry with status 1\n        ReadNotice readNotice = new ReadNotice();\n        readNotice.userId = userId;\n        readNotice.status = 1;\n        readNotice.save();\n    }\n\n    // Return a success result\n    return ok(\"Notice read\");\n}\n", "CodeBleu_score": 27.345518469339225}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO)    // Check if the configuration already exists\n    AdminConfiguration adminConfiguration = adminConfigurationRepository.findByName(\"companyInfo\");\n\n    // Create a new configuration if it doesn't exist\n    if (adminConfiguration == null) {\n        adminConfiguration = new AdminConfiguration();\n        adminConfiguration.setName(\"companyInfo\");\n        adminConfiguration.setValue(\"{}\");\n    }\n\n    // Update the configuration with the provided company information\n    try {\n        ObjectMapper objectMapper = new ObjectMapper();\n        String companyInfoJson = objectMapper.writeValueAsString(adminCompanyBO);\n        adminConfiguration.setValue(companyInfoJson);\n    } catch (JsonProcessingException e) {\n        throw new RuntimeException(\"Error converting company information to JSON\", e);\n    }\n\n    // Save or update the configuration\n    adminConfigurationRepository.save(adminConfiguration);\n}\n", "CodeBleu_score": 39.85951939932936}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO)    String companyInfo = adminCompanyBO.getCompanyInfo();\n    AdminConfiguration adminConfiguration = adminConfigurationRepository.findByName(\"companyInfo\");\n    if (adminConfiguration == null) {\n        adminConfiguration = new AdminConfiguration();\n        adminConfiguration.setName(\"companyInfo\");\n    }\n    adminConfiguration.setValue(companyInfo);\n    adminConfigurationRepository.save(adminConfiguration);\n}\n", "CodeBleu_score": 39.30795901030068}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO)    String companyInfoJson = JSON.toJSONString(adminCompanyBO);\n    AdminConfig adminConfig = adminConfigMapper.selectOne(new QueryWrapper<AdminConfig>().eq(\"name\", \"companyInfo\"));\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(\"companyInfo\");\n        adminConfig.setValue(companyInfoJson);\n        adminConfigMapper.insert(adminConfig);\n    } else {\n        adminConfig.setValue(companyInfoJson);\n        adminConfigMapper.updateById(adminConfig);\n    }\n}\n", "CodeBleu_score": 56.66152432987358}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig()    AdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n    String adminConfig = (String) getConfig(ADMIN_CONFIG_KEY);\n    if (adminConfig != null) {\n        try {\n            adminCompanyBO = objectMapper.readValue(adminConfig, AdminCompanyBO.class);\n        } catch (Exception e) {\n            LOGGER.error(\"Failed to parse admin config\", e);\n        }\n    }\n    return adminCompanyBO;\n}", "CodeBleu_score": 47.697983722238604}, {"code": "public AdminCompanyBO queryAdminConfig()    String configKey = getConfigKey();\n    AdminConfigBO config = adminConfigService.queryAdminConfig(configKey);\n    if (config != null) {\n        return parseAdminConfig(config);\n    }\n    return new AdminCompanyBO();\n}\n", "CodeBleu_score": 22.538686928772027}, {"code": "public AdminCompanyBO queryAdminConfig()    AdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n    String adminConfig = adminConfigService.getAdminConfig(AdminConfigKeys.ADMIN_COMPANY_CONFIG);\n    if (StringUtils.isNotBlank(adminConfig)) {\n        adminCompanyBO = JSON.parseObject(adminConfig, AdminCompanyBO.class);\n    }\n    return adminCompanyBO;\n}\n", "CodeBleu_score": 43.661856915236164}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList)    List<AdminConfig> adminConfigList = new ArrayList<>();\n\n    for (String string : stringList) {\n        AdminConfig adminConfig = new AdminConfig();\n        adminConfig.setConfigDataId(logWelcomeSpeechConfigName);\n        adminConfig.setConfigData(string);\n        adminConfig.setConfigType(configType);\n        adminConfig.setConfigRepeatInd(configRepeatInd);\n        adminConfig.setConfigLevel(configLevel);\n        adminConfigList.add(adminConfig);\n    }\n\n    try {\n        adminConfigService.removeConfig(logWelcomeSpeechConfigName);\n        adminConfigService.saveConfigBatch(adminConfigList);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n", "CodeBleu_score": 40.87778663370568}, {"code": " public void setLogWelcomeSpeech(List<String> stringList)    List<AdminConfig> configList = new ArrayList<AdminConfig>();\n    for (String string : stringList) {\n        AdminConfig config = new AdminConfig();\n        config.setConfigData(string);\n        config.setConfigType(AdminConfig.STRING);\n        config.setName(LOG_WELCOME_SPEECH);\n        config.setDescription(\"Log Welcome Speech\");\n        config.setAppName(APP_NAME);\n        config.setModuleName(MODULE_NAME);\n        configList.add(config);\n    }\n    AdminConfigService adminConfigService = new AdminConfigService();\n    try {\n        adminConfigService.removeConfigurations(LOG_WELCOME_SPEECH, APP_NAME, MODULE_NAME);\n    } catch (AdminConfigServiceException e) {\n        e.printStackTrace();\n    }\n    try {\n        adminConfigService.saveConfigurations(configList);\n    } catch (AdminConfigServiceException e) {\n        e.printStackTrace();\n    }\n}\n", "CodeBleu_score": 39.56164989260552}, {"code": " public void setLogWelcomeSpeech(List<String> stringList)    List<AdminConfig> configList = new ArrayList<AdminConfig>();\n    for (String string : stringList) {\n        AdminConfig config = new AdminConfig();\n        config.setConfigData(string);\n        config.setConfigName(logWelcomeSpeech);\n        config.setConfigType(AdminConfig.CONFIG_TYPE_STRING);\n        configList.add(config);\n    }\n    removeLogWelcomeSpeech();\n    AdminConfigService.getInstance().saveBatch(configList);\n}\n", "CodeBleu_score": 43.84240330798733}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO)    String userId = getCurrentUserId();\n    UserDetailsBO userDetailsBO = userService.getUserDetails(userId);\n    String username = userDetailsBO.getUsername();\n    String password = adminInitDataBO.getPassword();\n    String salt = userDetailsBO.getSalt();\n    String storedPassword = userDetailsBO.getPassword();\n    String hashedPassword = passwordUtil.hashPassword(password, salt);\n    if (!storedPassword.equals(hashedPassword)) {\n        throw new InvalidPasswordException(\"Invalid password\");\n    }\n    String code = generateRandomCode();\n    redisUtil.set(code, userId, 10L, TimeUnit.MINUTES);\n    return code;\n}\n", "CodeBleu_score": 37.50000339266575}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO)    String userId = getCurrentUserId();\n    AdminUserDetailsBO adminUserDetailsBO = getUserDetails(userId);\n    String username = adminUserDetailsBO.getUsername();\n    String password = adminInitDataBO.getPassword();\n    String salt = getSalt(username);\n    String hashedPassword = hashPassword(password, salt);\n    if (hashedPassword.equals(adminUserDetailsBO.getPassword())) {\n        String tempAccessCode = generateTempAccessCode();\n        storeTempAccessCode(tempAccessCode);\n        return tempAccessCode;\n    } else {\n        throw new InvalidPasswordException();\n    }\n}\n", "CodeBleu_score": 34.52266974680107}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO)    String userId = getCurrentUserId();\n    User user = userRepository.findById(userId).orElseThrow(() -> new RuntimeException(\"User not found\"));\n    String username = user.getUsername();\n    String password = adminInitDataBO.getPassword();\n    String salt = user.getSalt();\n    String hashedPassword = passwordEncoder.encode(password, salt);\n    if (!hashedPassword.equals(user.getPassword())) {\n        throw new RuntimeException(\"Invalid password\");\n    }\n    String accessCode = generateAccessCode();\n    redisTemplate.opsForValue().set(userId, accessCode, 10, TimeUnit.MINUTES);\n    return accessCode;\n}\n", "CodeBleu_score": 39.608199055142734}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth()    String userId = getUserId();\n    String key = \"user:initAuth:unauth:url:\" + userId;\n    List<String> unauthorizedUrls = redisTemplate.opsForList().range(key, 0, -1);\n    return unauthorizedUrls != null && unauthorizedUrls.contains(getRequestUrl());\n}", "CodeBleu_score": 36.43516864591459}, {"code": "private boolean verifyInitAuth()    String userId = getUserId();\n    String key = \"user:\" + userId + \":unauthorized_menu_url\";\n    List<String> unauthorizedMenuUrls = redisTemplate.opsForList().range(key, 0, -1);\n    if (unauthorizedMenuUrls == null) {\n        return false;\n    }\n    String initialAuthUrl = \"/initial/auth\";\n    return unauthorizedMenuUrls.contains(initialAuthUrl);\n}", "CodeBleu_score": 39.81963208881869}, {"code": "private boolean verifyInitAuth()    String userId = getUserId();\n    String key = userId + \":initAuth\";\n    List<String> initAuth = redisTemplate.opsForList().range(key, 0, -1);\n    if (initAuth.contains(initialAuthUrl)) {\n        return true;\n    }\n    return false;\n}\n", "CodeBleu_score": 37.20788294079934}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList)    // Create a list of AdminRoleMenu objects\n    List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n\n    // Save the list of role-menu associations in batches\n    for (int i = 0; i < roleMenuList.size(); i += BATCH_SIZE) {\n        int end = Math.min(i + BATCH_SIZE, roleMenuList.size());\n        List<AdminRoleMenu> subList = roleMenuList.subList(i, end);\n        adminRoleMenuMapper.insertBatch(subList);\n    }\n}\n", "CodeBleu_score": 51.89638880222378}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList)    // Create a list of AdminRoleMenu objects to hold the role-menu associations\n    List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n\n    // Loop through the list of menu IDs and create a new AdminRoleMenu object for each one\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n\n    // Save the list of role-menu associations in batches\n    for (List<AdminRoleMenu> list : Lists.partition(roleMenuList, 100)) {\n        adminRoleMenuDao.saveAll(list);\n    }\n}\n", "CodeBleu_score": 53.733782214957195}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList)    // Create a list of AdminRoleMenu objects\n    List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n    // Loop through the list of menu IDs\n    for (Integer menuId : menuIdList) {\n        // Create a new AdminRoleMenu object with the specified role ID and menu ID\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        // Add the AdminRoleMenu object to the list\n        roleMenuList.add(roleMenu);\n    }\n    // Save the list of role-menu associations in batches\n    for (List<AdminRoleMenu> list : ListUtil.partition(roleMenuList, 100)) {\n        adminRoleMenuMapper.insertList(list);\n    }\n}\n", "CodeBleu_score": 54.50897594295927}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog)     try {\n        String index = elasticsearchProperties.getIndex() + \"_\" + DateUtil.format(new Date(), \"yyyy.MM.dd\");\n        Map<String, Object> map = BeanUtil.beanToMap(sysLog);\n        map.put(\"@timestamp\", DateUtil.format(sysLog.getCreateTime(), \"yyyy-MM-dd HH:mm:ss\"));\n        map.put(\"id\", null);\n        IndexRequest indexRequest = new IndexRequest(index).source(map);\n        elasticsearchClient.index(indexRequest, RequestOptions.DEFAULT);\n    } catch (Exception e) {\n        log.error(\"save sysLog error, sysLog:{}\", sysLog, e);\n    }\n}\n", "CodeBleu_score": 46.70697396423055}, {"code": "public void saveSysLog(SysLog sysLog)     log.info(\"save syslog:{}\", sysLog);\n    // get index\n    String index = logIndex.getIndex(sysLog.getCreateTime());\n    // convert to map\n    Map<String, Object> map = BeanMap.create(sysLog);\n    // format time\n    map.put(\"createTime\", DateUtil.format(sysLog.getCreateTime()));\n    // remove id\n    map.remove(\"id\");\n    // create index request\n    IndexRequest request = new IndexRequest(index).id(sysLog.getId()).source(map);\n    // submit\n    try {\n        restHighLevelClient.index(request, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        log.error(\"save syslog error:{}\", e.getMessage(), e);\n    }\n}", "CodeBleu_score": 52.846937901924285}, {"code": "public void saveSysLog(SysLog sysLog)   int index = getIndex();\n  Map<String, Object> map = BeanUtil.beanToMap(sysLog);\n  map.put(\"@timestamp\", DateUtil.format(sysLog.getCreateTime(), \"yyyy-MM-dd HH:mm:ss\"));\n  map.put(\"id\", null);\n  IndexRequest indexRequest = new IndexRequest(String.format(\"%s%s\", indexName, index));\n  indexRequest.source(map);\n  try {\n    restHighLevelClient.indexAsync(indexRequest, RequestOptions.DEFAULT, new ActionListener<IndexResponse>() {\n      @Override\n      public void onResponse(IndexResponse indexResponse) {\n        log.info(\"saveSysLog success\");\n      }\n      @Override\n      public void onFailure(Exception e) {\n        log.error(\"saveSysLog error\", e);\n      }\n    });\n  }\n catch (  IOException e) {\n    log.error(\"saveSysLog error\", e);\n  }\n}", "CodeBleu_score": 44.88961801697277}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO)    SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\n    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n    if (StringUtils.isNotBlank(querySysLogBO.getKeyword())) {\n        boolQueryBuilder.must(QueryBuilders.queryStringQuery(querySysLogBO.getKeyword()));\n    }\n    if (StringUtils.isNotBlank(querySysLogBO.getLogType())) {\n        boolQueryBuilder.must(QueryBuilders.termQuery(\"logType\", querySysLogBO.getLogType()));\n    }\n    if (StringUtils.isNotBlank(querySysLogBO.getLogLevel())) {\n        boolQueryBuilder.must(QueryBuilders.termQuery(\"logLevel\", querySysLogBO.getLogLevel()));\n    }\n    if (StringUtils.isNotBlank(querySysLogBO.getStartTime())) {\n        boolQueryBuilder.must(QueryBuilders.rangeQuery(\"createTime\").gte(querySysLogBO.getStartTime()));\n    }\n    if (StringUtils.isNotBlank(querySysLogBO.getEndTime())) {\n        boolQueryBuilder.must(QueryBuilders.rangeQuery(\"createTime\").lte(querySysLogBO.getEndTime()));\n    }\n    sourceBuilder.query(boolQueryBuilder);\n    sourceBuilder.sort(SortBuilders.fieldSort(\"createTime\").order(SortOrder.DESC));\n    sourceBuilder.fetchSource(new String[]{\"logType\", \"logLevel\", \"logContent\", \"createTime\"}, new String[]{});\n    SearchRequest searchRequest = new SearchRequest(EsConstant.SYS_LOG_INDEX);\n    searchRequest.source(sourceBuilder);\n    try {\n        SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n        SearchHits hits = searchResponse.getHits();\n        List<SysLog> sysLogList = new ArrayList<>();\n        for (SearchHit hit : hits) {\n            SysLog sysLog = new SysLog();\n            sysLog.setLogType(hit.getSourceAsMap().get(\"logType\").toString());\n            sysLog.setLog", "CodeBleu_score": 45.72111088883231}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO)    try {\n        // Initialize the search criteria\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        // Add the query conditions to the bool query\n        if (StringUtils.isNotBlank(querySysLogBO.getUserName())) {\n            boolQueryBuilder.must(QueryBuilders.termQuery(\"userName\", querySysLogBO.getUserName()));\n        }\n        if (StringUtils.isNotBlank(querySysLogBO.getOperation())) {\n            boolQueryBuilder.must(QueryBuilders.termQuery(\"operation\", querySysLogBO.getOperation()));\n        }\n        if (StringUtils.isNotBlank(querySysLogBO.getStartTime())) {\n            boolQueryBuilder.must(QueryBuilders.rangeQuery(\"createTime\").gte(querySysLogBO.getStartTime()));\n        }\n        if (StringUtils.isNotBlank(querySysLogBO.getEndTime())) {\n            boolQueryBuilder.must(QueryBuilders.rangeQuery(\"createTime\").lte(querySysLogBO.getEndTime()));\n        }\n        searchSourceBuilder.query(boolQueryBuilder);\n        // Sort by creation time in descending order\n        searchSourceBuilder.sort(\"createTime\", SortOrder.DESC);\n        // Exclude specific fields from the response\n        searchSourceBuilder.source(new String[]{\"id\", \"userName\", \"operation\", \"method\", \"params\", \"time\", \"ip\", \"createTime\"});\n        // Execute the search request\n        SearchRequest searchRequest = new SearchRequest(EsConstant.SYS_LOG_INDEX);\n        searchRequest.source(searchSourceBuilder);\n        SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n        // Map the search results to SysLog objects\n        List<SysLog> sysLogList = new ArrayList<>();\n        SearchHit[] hits = searchResponse.getHits().getHits();\n        for (SearchHit hit : hits) {\n            SysLog sysLog = JSON.parseObject(hit.getSourceAsString(), SysLog.class);\n            sysLogList.", "CodeBleu_score": 48.27158451293365}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO)    SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\n    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n    // \u8bbe\u7f6e\u67e5\u8be2\u6761\u4ef6\n    setQuery(boolQueryBuilder, querySysLogBO);\n    sourceBuilder.query(boolQueryBuilder);\n    // \u8bbe\u7f6e\u6392\u5e8f\n    sourceBuilder.sort(SortBuilders.fieldSort(\"createTime\").order(SortOrder.DESC));\n    // \u8bbe\u7f6e\u4e0d\u8fd4\u56de\u7684\u5b57\u6bb5\n    sourceBuilder.fetchSource(new String[]{\"id\", \"operateUser\", \"operateTime\", \"operateType\", \"operateModule\", \"operateDesc\", \"operateMethod\", \"operateUrl\", \"operateParam\", \"operateResult\", \"operateIp\", \"createTime\"}, new String[]{});\n    SearchRequest searchRequest = new SearchRequest(EsConstant.SYS_LOG_INDEX_NAME);\n    searchRequest.source(sourceBuilder);\n    // \u5206\u9875\n    searchRequest.source().from(querySysLogBO.getPageNum() * querySysLogBO.getPageSize());\n    searchRequest.source().size(querySysLogBO.getPageSize());\n    SearchResponse searchResponse = null;\n    try {\n        searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        log.error(\"\u7cfb\u7edf\u65e5\u5fd7\u67e5\u8be2\u5931\u8d25\", e);\n    }\n    SearchHits hits = searchResponse.getHits();\n    List<SysLog> sysLogs = new ArrayList<>();\n    for (SearchHit hit : hits) {\n        SysLog sysLog = JSONObject.parseObject(hit.getSourceAsString(), SysLog.class);\n        sysLogs.add(sysLog);\n    }\n    BasePage<SysLog> page = new BasePage<>();\n    page.setTotal(hits.getTotalHits().value);\n    page.setPageNum(querySysLogBO.getPageNum());\n    page.setPageSize(querySysLogBO.getPageSize());\n    page.setList(sysLogs);\n    return page;\n}", "CodeBleu_score": 51.99084477227588}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest)  const file = fs.createWriteStream(dest);\n\n  const request = https.get(url, function (response) {\n    response.pipe(file);\n  });\n\n  return new Promise((resolve, reject) => {\n    file.on(\"finish\", () => resolve());\n    file.on(\"error\", (err) => {\n      fs.unlink(dest, () => reject(err));\n    });\n    request.on(\"error\", (err) => {\n      fs.unlink(dest, () => reject(err));\n    });\n    request.end();\n  }).catch((err) => {\n    throw err;\n  });\n}\n", "CodeBleu_score": 52.10452343976273}, {"code": "async function downloadFile(url, dest)    const file = fs.createWriteStream(dest);\n    const request = https.get(url, function (response) {\n        response.pipe(file);\n    });\n\n    return new Promise((resolve, reject) => {\n        file.on('finish', () => {\n            file.close();\n            resolve();\n        });\n        file.on('error', (err) => {\n            fs.unlink(dest, () => reject(err));\n        });\n        request.on('error', (err) => {\n            fs.unlink(dest, () => reject(err));\n        });\n    }).catch((err) => {\n        throw err;\n    });\n}\n", "CodeBleu_score": 52.07035088665284}, {"code": "async function downloadFile(url, dest)  const file = fs.createWriteStream(dest);\n\n  return new Promise((resolve, reject) => {\n    https\n      .get(url, (response) => {\n        response.pipe(file);\n        file.on(\"finish\", () => {\n          file.close();\n          resolve(true);\n        });\n      })\n      .on(\"error\", (err) => {\n        fs.unlink(dest, () => reject(err)); // delete the file\n      });\n  });\n}\n", "CodeBleu_score": 55.07942139418438}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet)        return Flux.fromIterable(module.getDependentModules())\n                .filter(moduleId -> !circularDependencyCheckSet.contains(moduleId))\n                .doOnNext(circularDependencyCheckSet::add)\n                .flatMap(moduleId -> getApplicationModule(moduleId)\n                        .onErrorResume(error -> {\n                            log.warn(\"Error retrieving dependent module with ID: {}\", moduleId, error);\n                            return Mono.empty();\n                        }));\n    }\n\n    /**\n     * This function retrieves the application module with the given module ID. It first checks if the module ID is already present in the cache. If not, it fetches the module from the database, adds it to the cache, and returns the module.\n     */\n    private Mono<Application> getApplicationModule(String moduleId) {\n        return cache.get(moduleId)\n                .switchIfEmpty(applicationRepository.findById(moduleId)\n                        .doOnNext(module -> cache.put(moduleId, Mono.just(module))));\n    }\n\n    /**\n     * This function retrieves all the modules that are dependent on the given module ID. It uses the applicationRepository to fetch the dependent modules from the database.\n     */\n    private Flux<Application> getDependentModules(String moduleId) {\n        return applicationRepository.findByDependentModulesContains(moduleId);\n    }\n}", "CodeBleu_score": 53.08774753782739}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet)        return Flux.fromIterable(module.getDependencies())\n                .filter(moduleId -> !circularDependencyCheckSet.contains(moduleId))\n                .doOnNext(circularDependencyCheckSet::add)\n                .flatMap(moduleId -> getModuleById(moduleId)\n                        .doOnError(throwable -> log.warn(\"Error while retrieving dependent module: {}\", throwable.getMessage())))\n                .flatMap(dependentModule -> getDependentModules(dependentModule, circularDependencyCheckSet));\n    }\n", "CodeBleu_score": 60.80302134477794}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet)        return module.getDependencies()\n                .stream()\n                .filter(moduleId -> !circularDependencyCheckSet.contains(moduleId))\n                .peek(circularDependencyCheckSet::add)\n                .map(moduleId -> {\n                    try {\n                        return getApplication(moduleId);\n                    } catch (Exception e) {\n                        log.warn(\"Error while retrieving dependent module for application with id: {}, error: {}\", module.getId(), e.getMessage());\n                        return null;\n                    }\n                })\n                .filter(Objects::nonNull)\n                .flatMap(dependentModule -> getDependentModules(dependentModule, circularDependencyCheckSet));\n    }\n", "CodeBleu_score": 49.73606028562281}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds)    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        Object value = entry.getValue();\n        if (value instanceof Map) {\n            doGetDependentModules((Map<?, ?>) value, dependentModuleIds);\n        } else if (value instanceof List) {\n            for (Object item : (List<?>) value) {\n                if (item instanceof Map) {\n                    doGetDependentModules((Map<?, ?>) item, dependentModuleIds);\n                }\n            }\n        } else if (entry.getKey().equals(\"componentType\") && value.equals(\"module\")) {\n            String appId = (String) map.get(\"appId\");\n            if (!appId.isBlank()) {\n                dependentModuleIds.add(appId);\n            }\n        }\n    }\n}", "CodeBleu_score": 44.50284374128375}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds)    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        Object value = entry.getValue();\n        if (value instanceof Map) {\n            doGetDependentModules((Map<?, ?>) value, dependentModuleIds);\n        } else if (value instanceof List) {\n            for (Object item : (List<?>) value) {\n                if (item instanceof Map) {\n                    doGetDependentModules((Map<?, ?>) item, dependentModuleIds);\n                }\n            }\n        } else if (entry.getKey().equals(\"componentType\") && value.equals(\"module\")) {\n            String appId = (String) map.get(\"appId\");\n            if (!appId.isBlank()) {\n                dependentModuleIds.add(appId);\n            }\n        }\n    }\n}\n", "CodeBleu_score": 44.50284374128375}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds)    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        Object key = entry.getKey();\n        Object value = entry.getValue();\n        if (value instanceof Map) {\n            doGetDependentModules((Map<?, ?>) value, dependentModuleIds);\n        } else if (value instanceof List) {\n            for (Object item : (List<?>) value) {\n                if (item instanceof Map) {\n                    doGetDependentModules((Map<?, ?>) item, dependentModuleIds);\n                }\n            }\n        } else if (key.equals(\"componentType\") && value.equals(\"module\")) {\n            String appId = (String) map.get(\"appId\");\n            if (!appId.isBlank()) {\n                dependentModuleIds.add(appId);\n            }\n        }\n    }\n}", "CodeBleu_score": 45.51489803843428}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException      byte[] imageData = dataBuffer.getData();\n     if (createThumbnail) {\n         imageData = resizeImage(imageData, srcContentType);\n     }\n     String contentType = createThumbnail ? \"image/jpeg\" : srcContentType.toString();\n     return new Asset(imageData, contentType);\n }\n", "CodeBleu_score": 39.94576040979735}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException     Asset asset = null;\n    try {\n        BufferedImage image = ImageIO.read(dataBuffer.getInputStream());\n        if (createThumbnail) {\n            image = ImageUtils.resizeImage(image, THUMBNAIL_WIDTH, THUMBNAIL_HEIGHT);\n        }\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        ImageIO.write(image, \"jpeg\", baos);\n        baos.flush();\n        asset = new Asset(baos.toByteArray(), srcContentType.toString());\n    }\n    catch (IOException e) {\n        LOG.error(\"Error creating thumbnail\", e);\n        throw e;\n    }\n    finally {\n        dataBuffer.release();\n    }\n    return asset;\n}\n", "CodeBleu_score": 33.905496437699625}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException      Asset asset = new Asset();\n     byte[] bytes = IOUtils.toByteArray(dataBuffer.getInputStream());\n     if (createThumbnail) {\n         ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n         Thumbnails.of(new ByteArrayInputStream(bytes)).size(160, 160).outputFormat(\"JPG\").toOutputStream(outputStream);\n         asset.setContent(new ByteArrayInputStream(outputStream.toByteArray()));\n         asset.setContentType(MediaType.IMAGE_JPEG);\n         outputStream.close();\n     } else {\n         asset.setContent(new ByteArrayInputStream(bytes));\n         asset.setContentType(srcContentType);\n     }\n     dataBuffer.close();\n     return asset;\n }\n", "CodeBleu_score": 39.76745231276735}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId)    return assetRepository.findById(assetId)\n            .flatMap(asset -> {\n                ServerHttpResponse response = exchange.getResponse();\n                response.setStatusCode(HttpStatus.OK);\n                Optional.ofNullable(asset.getContentType()).ifPresent(response::getHeaders()::setContentType);\n                DataBuffer buffer = response.bufferFactory().wrap(asset.getData());\n                return response.writeWith(Mono.just(buffer));\n            });\n}", "CodeBleu_score": 54.45664002680066}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId)    return assetService.getAssetById(assetId)\n            .flatMap(asset -> {\n                ServerHttpResponse response = exchange.getResponse();\n                response.setStatusCode(HttpStatus.OK);\n                if (asset.getContentType() != null) {\n                    response.getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n                }\n                DataBuffer buffer = exchange.getResponse().bufferFactory().wrap(asset.getData());\n                return response.writeWith(Flux.just(buffer));\n            });\n}", "CodeBleu_score": 57.12648322043162}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId)    return assetRepository.findById(assetId)\n        .flatMap(asset -> {\n            exchange.getResponse().setStatusCode(HttpStatus.OK);\n            if (asset.getContentType() != null) {\n                exchange.getResponse().getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n            }\n            DataBuffer dataBuffer = exchange.getResponse().bufferFactory().wrap(asset.getData());\n            return exchange.getResponse().writeWith(Flux.just(dataBuffer));\n        });\n}\n", "CodeBleu_score": 47.289639927078944}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode()     if (mode == WorkspaceMode.SAAS) {\n        return Flux.empty();\n    }\n    return organizationService.findAll()\n            .map(this::mapToFindAuthConfig);\n}\n", "CodeBleu_score": 22.496876904390255}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode()     if (isWorkspaceModeSaas()) {\n        return Flux.empty();\n    }\n    return organizationRepository.findAll().map(FindAuthConfig::new);\n}\n\n", "CodeBleu_score": 18.131207717960695}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode()   if (isSaasMode()) {\n    return Flux.empty();\n  }\n  return organizationRepository.findAll().map(this::mapToFindAuthConfig);\n}", "CodeBleu_score": 17.562393482855548}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate)    return MongockSpring5.builder()\n            .setDriver(springContext.getBean(MongoDriver.class))\n            .setSpringContext(springContext)\n            .addChangeLogsScanPackage(\"com.mongodb.migrations\")\n            .setTransactionEnabled(true)\n            .buildApplicationRunner();\n}\n", "CodeBleu_score": 23.612988395303216}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate)    return MongockSpring5.builder()\n            .setDriver(mongoTemplate)\n            .setLockQuickConfig()\n            .setChangeLogsScanPackage(\"com.mongodb.mongock.examples.springdata.v3.changelogs\")\n            .addDependency(\"springContext\", springContext)\n            .buildApplicationRunner();\n}\n", "CodeBleu_score": 30.071695331980635}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate)    return MongockSpring5.builder()\n            .setDriver(mongoTemplate)\n            .addChangeLogsScanPackage(\"com.example.mongock.changelogs\")\n            .setSpringContext(springContext)\n            .buildApplicationRunner();\n}\n", "CodeBleu_score": 26.386908777006074}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter)        ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return reactiveMongoTemplate;\n    }\n\n    /**\n     * This function creates and configures a ReactiveMongoTemplate instance using the provided MongoDB factory and mapping converter. It sets the read preference to \"primaryPreferred\" and returns the configured ReactiveMongoTemplate.\n     */\n    public ReactiveMongoTemplate reactiveMongoMasterTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter) {\n        ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        reactiveMongoTemplate.setReadPreference(ReadPreference.primaryPreferred());\n        return reactiveMongoTemplate;\n    }\n\n    /**\n     * This function creates and configures a ReactiveMongoTemplate instance using the provided MongoDB factory and mapping converter. It sets the read preference to \"primaryPreferred\" and returns the configured ReactiveMongoTemplate.\n     */\n    public ReactiveMongoTemplate reactiveMongoTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter) {\n        ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        reactiveMongoTemplate.setReadPreference(ReadPreference.primaryPreferred());\n        return reactiveMongoTemplate;\n    }\n\n    /**\n     * This function creates and configures a MongoTransactionManager instance using the provided ReactiveMongoDatabaseFactory. It sets the transactionSynchronization to \"SYNCHRONIZED\" and returns the configured MongoTransactionManager.\n     */\n    public MongoTransactionManager transactionManager(ReactiveMongoDatabaseFactory mongoDbFactory) {\n        MongoTransactionManager transactionManager = new MongoTransactionManager(mongoDbFactory);\n        transactionManager.setTransactionSynchronization(TransactionSynchronizationManager.SYNCHRONIZED);\n        return transactionManager;\n    }", "CodeBleu_score": 60.01795268603143}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter)        ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory,\n                mappingMongoConverter);\n        reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return reactiveMongoTemplate;\n    }\n", "CodeBleu_score": 70.26246172108532}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter)        ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return reactiveMongoTemplate;\n    }", "CodeBleu_score": 71.57467961238515}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId)    return libraryQueryRepository.findFirstByLibraryQueryIdOrderByCreatedAtDesc(libraryQueryId)\n        .switchIfEmpty(libraryQueryRepository.findById(libraryQueryId))\n        .flatMap(libraryQuery -> {\n            if (libraryQuery == null) {\n                return Mono.error(new IllegalArgumentException(\"Library query not found\"));\n            }\n            return Mono.just(libraryQuery.getDsl());\n        });\n}\n", "CodeBleu_score": 44.77907810793857}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId)    return libraryQueryRepository.findFirstByQueryIdOrderByCreatedAtDesc(libraryQueryId)\n            .switchIfEmpty(libraryQueryRepository.findById(libraryQueryId))\n            .map(libraryQuery -> {\n                try {\n                    return mapper.readValue(libraryQuery.getDsl(), new TypeReference<Map<String, Object>>() {});\n                } catch (JsonProcessingException e) {\n                    throw new RuntimeException(e);\n                }\n            });\n}", "CodeBleu_score": 37.74335250569718}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId)    return Mono.just(libraryQueryId)\n            .flatMap(id -> libraryQueryRecordRepository.findFirstByLibraryQueryIdOrderByCreatedAtDesc(id))\n            .map(record -> {\n                try {\n                    return objectMapper.readValue(record.getDsl(), new TypeReference<Map<String, Object>>() {});\n                } catch (JsonProcessingException e) {\n                    throw new RuntimeException(e);\n                }\n            })\n            .switchIfEmpty(Mono.defer(() -> {\n                log.info(\"No library query record found for library query ID: {}\", libraryQueryId);\n                return libraryQueryService.getLibraryQueryById(libraryQueryId)\n                        .map(libraryQuery -> {\n                            try {\n                                return objectMapper.readValue(libraryQuery.getDsl(), new TypeReference<Map<String, Object>>() {});\n                            } catch (JsonProcessingException e) {\n                                throw new RuntimeException(e);\n                            }\n                        });\n            }));\n}", "CodeBleu_score": 43.0239009696677}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext)        long timeout = TimeUnit.SECONDS.toMillis(Long.parseLong(timeoutStr));\n        Mono<QueryExecutionResult> queryExecutionResultMono;\n\n        if (datasource.getDatasourceType().equals(DatasourceType.JDBC)) {\n            queryExecutionResultMono = executeQueryOnJDBC(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n        } else {\n            queryExecutionResultMono = executeQueryLocally(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n        }\n\n        return queryExecutionResultMono.onErrorResume(throwable -> {\n            if (throwable instanceof TimeoutException) {\n                return Mono.just(QueryExecutionResult.builder().error(\n                        new PluginException(PluginError.PLUGIN_EXECUTE_QUERY_ERROR,\n                                \"Query execution timed out.\")).build());\n            }\n            log.error(\"Error executing query: {}\", throwable.getMessage());\n            return Mono.just(QueryExecutionResult.builder().error(\n                    new PluginException(PluginError.PLUGIN_EXECUTE_QUERY_ERROR,\n                            \"Error executing query.\")).build());\n        });\n    }\n\n    /**\n     * This function executes a query on a JDBC datasource using the JDBC datasource executor.\n     */\n    private Mono<QueryExecutionResult> executeQueryOnJDBC(Datasource datasource, Map<String, Object> queryConfig,\n                                                         Map<String, Object> requestParams, long timeout,\n                                                         QueryVisitorContext queryVisitorContext) {\n        return jdbcDatasourceExecutor.executeQuery(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n    }\n\n    /**\n     * This function executes a query locally using the local datasource executor.\n     */\n    private Mono<QueryExecutionResult> executeQueryLocally(Datasource datasource, Map<String, Object> queryConfig,\n                                                           Map<String, Object> requestParams, long timeout,\n                                                           QueryVisitorContext queryVisitorContext) {\n        return localDatasourceExecutor.execute", "CodeBleu_score": 39.06594268271293}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext)        long timeout = getTimeout(timeoutStr);\n        if (datasource.getDatasourceType() == DatasourceType.JDBC) {\n            return executeJDBCQuery(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n        }\n        return executeLocalQuery(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n    }\n\n    /**\n     * This function executes a JDBC query on a given datasource with specified configurations and parameters. It creates a JDBC datasource object, creates a query visitor, and executes the query using the JDBC datasource. It handles any exceptions that occur during the query execution and maps them to a generic query execution error.\n     */\n    private Mono<QueryExecutionResult> executeJDBCQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            long timeout, QueryVisitorContext queryVisitorContext) {\n        JDBCDatasource jdbcDatasource = (JDBCDatasource) datasource;\n        JDBCQueryVisitor jdbcQueryVisitor = new JDBCQueryVisitor(jdbcDatasource, queryConfig, requestParams, timeout, queryVisitorContext);\n        return jdbcQueryVisitor.executeQuery();\n    }\n\n    /**\n     * This function executes a local query on a given datasource with specified configurations and parameters. It creates a local datasource object, creates a query visitor, and executes the query using the local datasource. It handles any exceptions that occur during the query execution and maps them to a generic query execution error.\n     */\n    private Mono<QueryExecutionResult> executeLocalQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            long timeout, QueryVisitorContext queryVisitorContext) {\n        LocalDatasource localDatasource = (LocalDatasource) datasource;\n        LocalQueryVisitor localQueryVisitor = new LocalQueryVisitor(localDatasource, queryConfig, requestParams, timeout, queryVisitorContext);\n        return localQueryVisitor.executeQuery();\n    }\n\n    /**\n     * This function determines the timeout duration", "CodeBleu_score": 36.03968832378034}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext)        final Mono<QueryExecutionResult> queryExecutionMono;\n        final long timeout = TimeUnit.MILLISECONDS.convert(Long.parseLong(timeoutStr), TimeUnit.SECONDS);\n\n        if (datasource.getDatasourceConfiguration().getDatasourceType() == DatasourceType.JDBC) {\n            queryExecutionMono = executeQueryLocally(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n        } else {\n            queryExecutionMono = executeQueryUsingNode(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n        }\n\n        return queryExecutionMono\n                .onErrorResume(throwable -> {\n                    if (throwable instanceof TimeoutException) {\n                        return Mono.just(QueryExecutionResult.builder()\n                                .result(new QueryExecutionError(QueryExecutionErrorType.TIMEOUT, throwable.getMessage()))\n                                .build());\n                    } else if (throwable instanceof PluginException) {\n                        return Mono.just(QueryExecutionResult.builder()\n                                .result(new QueryExecutionError(QueryExecutionErrorType.PLUGIN_ERROR, throwable.getMessage()))\n                                .build());\n                    } else {\n                        log.error(\"Error while executing query: \", throwable);\n                        return Mono.just(QueryExecutionResult.builder()\n                                .result(new QueryExecutionError(QueryExecutionErrorType.GENERIC_ERROR, throwable.getMessage()))\n                                .build());\n                    }\n                });\n    }\n\n    /**\n     * Executes a query locally using the given datasource, query configuration, request parameters, timeout, and query visitor context.\n     *\n     * @param datasource          The datasource to execute the query on.\n     * @param queryConfig         The configuration for the query.\n     * @param requestParams       The request parameters for the query.\n     * @param timeout             The timeout duration for the query execution.\n     * @param queryVisitorContext The context for the query visitor.\n     * @return A Mono emitting the query execution result.\n     */\n    private Mono<QueryExecutionResult> executeQueryLocally(Datasource datasource, Map<String, Object> queryConfig, Map", "CodeBleu_score": 41.31613450906936}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext)        QueryExecutor queryExecutor = queryExecutorRegistry.getQueryExecutor(datasource.getType());\n        QueryExecutionContext queryExecutionContext = new QueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n        return datasource.getConnectionPool().getConnection()\n                .flatMap(connection -> queryExecutor.executeQuery(queryExecutionContext, connection))\n                .onErrorResume(throwable -> Mono.just(new QueryExecutionResult(throwable)));\n    }\n\n    /**\n     * This function executes a query remotely for a given datasource. It retrieves the appropriate query executor based on the datasource type, builds the query execution context, and acquires a connection from the datasource connection pool. It then executes the query using the connection and handles any errors that occur during execution.\n     */\n    private Mono<QueryExecutionResult> executeRemotely(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext) {\n        QueryExecutor queryExecutor = queryExecutorRegistry.getQueryExecutor(datasource.getType());\n        QueryExecutionContext queryExecutionContext = new QueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n        return datasource.getConnectionPool().getConnection()\n                .flatMap(connection -> queryExecutor.executeQuery(queryExecutionContext, connection))\n                .onErrorResume(throwable -> Mono.just(new QueryExecutionResult(throwable)));\n    }\n\n    /**\n     * This function is responsible for executing a query for a given datasource. It determines whether the query should be executed locally or remotely based on the datasource configuration and then delegates to the appropriate execution method.\n     */\n    public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext) {\n        if (datasource.isLocal()) {\n            return executeLocally(datasource, queryConfig, requestParams, queryVisitorContext);\n        } else {\n            return executeRemotely(datasource, queryConfig, requestParams, queryVisitor", "CodeBleu_score": 42.773738052687285}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext)    return Mono.fromSupplier(() -> {\n        QueryExecutor queryExecutor = queryExecutorFactory.getQueryExecutor(datasource.getDatasourceType());\n        QueryExecutionContext queryExecutionContext = new QueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n        return queryExecutor.executeQuery(queryExecutionContext);\n    })\n            .flatMap(queryExecutionResult -> {\n                if (queryExecutionResult.getStatus() == QueryExecutionStatus.FAILED) {\n                    return Mono.error(queryExecutionResult.getError());\n                }\n                return Mono.just(queryExecutionResult);\n            });\n}\n", "CodeBleu_score": 47.81099844350675}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext)        QueryExecutor queryExecutor = queryExecutorFactory.get(datasource.getType());\n        QueryExecutionContext queryExecutionContext = new QueryExecutionContext(queryConfig, requestParams, queryVisitorContext);\n        return datasourceService.getConnection(datasource)\n                .flatMap(connection -> queryExecutor.execute(connection, queryExecutionContext))\n                .doOnError(throwable -> {\n                    log.error(\"Error while executing query: {}\", throwable.getMessage());\n                    throw new RuntimeException(\"Error while executing query\", throwable);\n                });\n    }\n", "CodeBleu_score": 46.80930605635319}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr)  if (timeoutStr == null || timeoutStr.isBlank()) {\n    return DEFAULT_QUERY_TIMEOUT_MS;\n  }\n\n  String valueStr = timeoutStr.replaceAll(\"[^0-9]\", \"\");\n  int value = Integer.parseInt(valueStr);\n\n  String unitStr = timeoutStr.replaceAll(\"[0-9]\", \"\");\n  long unitMs;\n  switch (unitStr) {\n    case \"ms\":\n      unitMs = 1;\n      break;\n    case \"s\":\n      unitMs = 1000;\n      break;\n    case \"m\":\n      unitMs = 60 * 1000;\n      break;\n    case \"h\":\n      unitMs = 60 * 60 * 1000;\n      break;\n    default:\n      throw new IllegalArgumentException(\"Invalid query timeout unit: \" + unitStr);\n  }\n\n  long timeoutMs = value * unitMs;\n  if (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n    throw new IllegalArgumentException(\"Query timeout must be less than or equal to \" + MAX_QUERY_TIMEOUT_MS + \" ms\");\n  }\n\n  return (int) timeoutMs;\n}\n", "CodeBleu_score": 31.530034851903533}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr)    if (timeoutStr == null || timeoutStr.isBlank()) {\n        return DEFAULT_QUERY_TIMEOUT_MS;\n    }\n    String valueStr = timeoutStr.replaceAll(\"[^0-9]\", \"\");\n    int value = Integer.parseInt(valueStr);\n    String unit = timeoutStr.replaceAll(\"[0-9]\", \"\");\n    int multiplier = 1;\n    if (unit.equals(\"ms\")) {\n        multiplier = 1;\n    } else if (unit.equals(\"s\")) {\n        multiplier = 1000;\n    } else if (unit.equals(\"m\")) {\n        multiplier = 60 * 1000;\n    } else if (unit.equals(\"h\")) {\n        multiplier = 60 * 60 * 1000;\n    } else if (unit.equals(\"d\")) {\n        multiplier = 24 * 60 * 60 * 1000;\n    } else {\n        throw new IllegalArgumentException(\"Invalid timeout unit: \" + unit);\n    }\n    int timeoutMs = value * multiplier;\n    if (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n        throw new IllegalArgumentException(\"Timeout value exceeds maximum allowed value: \" + MAX_QUERY_TIMEOUT_MS + \"ms\");\n    }\n    return timeoutMs;\n}", "CodeBleu_score": 31.59255647357732}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr)    if (timeoutStr == null || timeoutStr.isBlank()) {\n        return DEFAULT_QUERY_TIMEOUT_MS;\n    }\n\n    String valueStr = timeoutStr.replaceAll(\"[^0-9]\", \"\");\n    String unitStr = timeoutStr.replaceAll(\"[0-9]\", \"\");\n\n    int value = Integer.parseInt(valueStr);\n    long timeoutMs;\n\n    switch (unitStr) {\n        case \"ms\":\n            timeoutMs = value;\n            break;\n        case \"s\":\n            timeoutMs = value * 1000L;\n            break;\n        case \"m\":\n            timeoutMs = value * 60 * 1000L;\n            break;\n        case \"h\":\n            timeoutMs = value * 60 * 60 * 1000L;\n            break;\n        default:\n            throw new IllegalArgumentException(\"Invalid timeout unit: \" + unitStr);\n    }\n\n    if (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n        throw new IllegalArgumentException(\"Query timeout cannot exceed \" + MAX_QUERY_TIMEOUT_MS + \" ms\");\n    }\n\n    return (int) timeoutMs;\n}\n", "CodeBleu_score": 31.108432358652173}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId)        return getLiveQueries(application.getId(), visitorId)\n            .flatMapIterable(liveQueries -> liveQueries.stream()\n                .map(liveQuery -> liveQuery.getDatasource().getId())\n                .collect(Collectors.toList()))\n            .flatMap(datasourceId -> copyDatasource(currentOrganizationId, datasourceId, visitorId))\n            .collectList()\n            .switchIfEmpty(Mono.error(new ServerException(ServerErrorCode.QUERY_400_BAD_REQUEST_INVALID_QUERY,\n                \"No live queries found for the application\")));\n    }", "CodeBleu_score": 34.47596107254585}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId)        return queryRepository.findByApplicationId(application.getId(), QueryScope.LIVE)\n                .collectList()\n                .flatMap(queries -> {\n                    if (queries.isEmpty()) {\n                        return Mono.error(new ServerException(NucleusError.DATA_SOURCE_NOT_FOUND));\n                    }\n\n                    List<String> datasourceIds = queries.stream().map(Query::getDatasourceId).distinct().collect(Collectors.toList());\n                    return datasourceIds.stream()\n                            .map(datasourceId -> datasourceService.copyDatasource(currentOrganizationId, datasourceId, visitorId)\n                                    .map(datasource -> new Pair<>(datasourceId, datasource.getId())))\n                            .collect(Collectors.toList())\n                            .then(Mono.just(datasourceIds))\n                            .flatMap(Mono::sequence)\n                            .map(pairs -> pairs.stream().collect(Collectors.toList()));\n                });\n    }\n", "CodeBleu_score": 42.544817836871054}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId)        return this.liveQueryService.findLiveQueriesByApplicationId(application.getId())\n                .filter(liveQuery -> !liveQuery.getDatasource().getIsTemplate())\n                .switchIfEmpty(Mono.error(new ServerException(\n                        \"Cannot copy datasources from template to current organization because no queries exist in the application.\")))\n                .map(LiveQuery::getDatasource)\n                .map(Datasource::getId)\n                .flatMap(datasourceId -> this.datasourceService.findById(datasourceId))\n                .flatMap(datasource -> this.datasourceService.copyDatasource(datasource, currentOrganizationId, visitorId))\n                .collectList()\n                .map(datasourceList -> datasourceList.stream()\n                        .map(datasource -> new Pair<>(datasource.getTemplateId(), datasource.getId()))\n                        .collect(Collectors.toList()));\n    }\n", "CodeBleu_score": 29.120284623850768}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId)    return datasourceRepository.findById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.isSystemStatic()) {\n                    return Mono.just(datasource.getId());\n                } else if (datasource.isLegacyQuickApi()) {\n                    return Mono.just(datasource.getId());\n                } else if (datasource.isLegacyOpenblocksApi()) {\n                    return Mono.just(datasource.getId());\n                } else {\n                    return datasourceRepository.save(\n                            Datasource.builder()\n                                    .organizationId(organizationId)\n                                    .visitorId(visitorId)\n                                    .name(datasource.getName())\n                                    .type(datasource.getType())\n                                    .pluginId(datasource.getPluginId())\n                                    .datasourceConfiguration(datasource.getDatasourceConfiguration())\n                                    .isTemplate(datasource.isTemplate())\n                                    .build()\n                    );\n                }\n            })\n            .map(Datasource::getId);\n}", "CodeBleu_score": 49.66876894227745}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId)    return datasourceRepository.findById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.isSystemStatic()) {\n                    return Mono.just(datasource.getId());\n                }\n                if (datasource.getType() == DatasourceType.REST) {\n                    return Mono.just(datasource.getId());\n                }\n                if (datasource.getType() == DatasourceType.OPENBLOCKS_API) {\n                    return Mono.just(datasource.getId());\n                }\n                return datasourceService.createDatasource(organizationId, visitorId, datasource);\n            });\n}\n", "CodeBleu_score": 71.2266962796649}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId)    return datasourceService.getById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.getIsSystemDatasource()) {\n                    return Mono.just(datasource.getId());\n                }\n                if (datasource.getType() == DatasourceType.REST) {\n                    return Mono.just(datasource.getDatasourceConfiguration().getRestDatasourceConfig().getDatasourceId());\n                }\n                if (datasource.getType() == DatasourceType.OPENBLOCKS_API) {\n                    return Mono.just(datasource.getDatasourceConfiguration().getOpenblocksApiDatasourceConfig().getDatasourceId());\n                }\n                return datasourceService.create(datasource.copy(organizationId, visitorId));\n            });\n}\n", "CodeBleu_score": 64.2473710593939}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user)        return filePart.content()\n                .flatMap(dataBuffer -> {\n                    String filename = UUID.randomUUID().toString() + \".\" + FilenameUtils.getExtension(filePart.filename());\n                    Path filepath = Paths.get(uploadPath, filename);\n                    try {\n                        Files.copy(dataBuffer.asInputStream(), filepath, StandardCopyOption.REPLACE_EXISTING);\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                    return Mono.just(filename);\n                })\n                .flatMap(filename -> {\n                    user.setAvatar(filename);\n                    return userRepository.save(user);\n                })\n                .flatMap(updatedUser -> {\n                    if (updatedUser.getAvatar() != null) {\n                        return Mono.just(true);\n                    } else {\n                        return Mono.just(false);\n                    }\n                });\n    }\n", "CodeBleu_score": 38.13486860796894}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user)    return fileService.upload(filePart)\n            .flatMap(file -> {\n                if (user.getAvatar() != null) {\n                    return fileService.delete(user.getAvatar().getFileName())\n                            .thenReturn(file);\n                } else {\n                    return Mono.just(file);\n                }\n            })\n            .flatMap(file -> {\n                user.setAvatar(file);\n                return userRepository.save(user);\n            })\n            .map(updatedUser -> true)\n            .onErrorResume(error -> {\n                log.error(\"Error saving profile photo: {}\", error.getMessage());\n                return Mono.just(false);\n            });\n}\n", "CodeBleu_score": 28.89696477711806}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user)    return filePart.content()\n        .flatMap(dataBuffer -> {\n            byte[] bytes = new byte[dataBuffer.readableByteCount()];\n            dataBuffer.read(bytes);\n            return Mono.just(bytes);\n        })\n        .flatMap(bytes -> {\n            String fileName = UUID.randomUUID().toString() + \".png\";\n            return fileStorageService.upload(bytes, fileName)\n                .flatMap(url -> {\n                    user.setAvatar(url);\n                    return userRepository.save(user);\n                })\n                .flatMap(updatedUser -> {\n                    if (user.getAvatar() != null) {\n                        return fileStorageService.delete(user.getAvatar());\n                    } else {\n                        return Mono.just(true);\n                    }\n                })\n                .map(result -> true);\n        });\n}", "CodeBleu_score": 35.526167054154975}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser)    return Mono.fromCallable(() -> {\n        User user = new User();\n        user.setName(authUser.getName());\n        user.setState(UserState.NORMAL);\n        user.setEnabled(true);\n        user.setAvatar(authUser.getAvatar());\n        if (authUser.getSource() == AuthSource.EMAIL && authUser.getAuthContext().containsKey(\"password\")) {\n            String password = (String) authUser.getAuthContext().get(\"password\");\n            user.setPassword(passwordEncoder.encode(password));\n        }\n        user.setConnections(authUser.getConnections());\n        user.setNewUser(true);\n        return user;\n    });\n}\n", "CodeBleu_score": 47.47755818858581}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser)    return Mono.fromCallable(() -> {\n        User user = new User();\n        user.setName(authUser.getName());\n        user.setState(UserState.ENABLED);\n        user.setEnabled(true);\n        user.setAvatar(authUser.getAvatar());\n        if (authUser.getAuthSource() == AuthSource.EMAIL && authUser.getAuthContext().containsKey(\"password\")) {\n            user.setPassword(passwordEncoder.encode(authUser.getAuthContext().get(\"password\")));\n        }\n        user.setConnections(authUser.getConnections());\n        user.setNewUser(true);\n        return user;\n    });\n}\n", "CodeBleu_score": 40.91399427113529}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser)    User user = new User();\n    user.setName(authUser.getName());\n    user.setState(UserState.NORMAL);\n    user.setEnabled(true);\n    user.setAvatar(authUser.getAvatar());\n    if (authUser.getAuthSource() == AuthSource.EMAIL && authUser.getAuthContext().containsKey(\"password\")) {\n        user.setPassword(passwordEncoder.encode(authUser.getAuthContext().get(\"password\")));\n    }\n    user.setConnections(authUser.getConnections());\n    user.setNewUser(true);\n    return userRepository.save(user);\n}\n", "CodeBleu_score": 39.43391028392666}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email)    return emailSource.findByEmail(email)\n        .switchIfEmpty(Mono.defer(() -> emailSource.save(new Email(email))))\n        .flatMap(email -> {\n            user.getConnections().add(email);\n            return userSource.save(user);\n        })\n        .onErrorResume(DuplicateKeyException.class, e -> Mono.error(new DuplicateEmailException(email)))\n        .then(Mono.just(true));\n}\n", "CodeBleu_score": 27.214054550496446}, {"code": "public Mono<Boolean> bindEmail(User user, String email)    return sourceRepository.findByName(email)\n            .switchIfEmpty(Mono.defer(() -> {\n                Source source = new Source();\n                source.setName(email);\n                source.setType(SourceType.EMAIL);\n                return sourceRepository.save(source);\n            }))\n            .flatMap(source -> {\n                Connection connection = new Connection();\n                connection.setSource(source);\n                connection.setUser(user);\n                user.getConnections().add(connection);\n                return userRepository.save(user);\n            })\n            .map(user1 -> true)\n            .onErrorResume(DuplicateKeyException.class, e -> Mono.error(new EmailAlreadyBoundException()));\n}\n", "CodeBleu_score": 39.245777228459225}, {"code": "public Mono<Boolean> bindEmail(User user, String email)    return Mono.just(new EmailConnection(email, user.getId()))\n            .flatMap(connectionRepository::save)\n            .doOnNext(connection -> user.getConnections().add(connection))\n            .flatMap(connection -> userRepository.save(user))\n            .map(user1 -> true)\n            .onErrorResume(DuplicateKeyException.class, e -> Mono.error(new DuplicateEmailException(email)));\n}\n", "CodeBleu_score": 24.407259118348158}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword)    return userRepository.findById(userId)\n            .flatMap(user -> {\n                if (passwordEncoder.matches(oldPassword, user.getPassword())) {\n                    String encodedPassword = passwordEncoder.encode(newPassword);\n                    user.setPassword(encodedPassword);\n                    return userRepository.save(user).thenReturn(true);\n                } else {\n                    return Mono.error(new InvalidPasswordException(\"Invalid password\"));\n                }\n            });\n}\n", "CodeBleu_score": 30.877701231337053}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword)    return userRepository.findById(userId)\n        .flatMap(user -> {\n            if (passwordEncoder.matches(oldPassword, user.getPassword())) {\n                user.setPassword(passwordEncoder.encode(newPassword));\n                return userRepository.save(user).thenReturn(true);\n            } else {\n                return Mono.error(new InvalidPasswordException(\"Invalid password\"));\n            }\n        });\n}\n", "CodeBleu_score": 25.064608956660926}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword)    return userRepository.findById(userId)\n        .flatMap(user -> {\n            if (passwordEncoder.matches(oldPassword, user.getPassword())) {\n                user.setPassword(passwordEncoder.encode(newPassword));\n                return userRepository.save(user).thenReturn(true);\n            } else {\n                return Mono.error(new InvalidPasswordException(\"Invalid password\"));\n            }\n        });\n}\n", "CodeBleu_score": 25.064608956660926}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale)        if (orgMember.isAdmin()) {\n            return getAllGroups(withoutDynamicGroups).map(groups -> groups.stream()\n                    .filter(g -> !g.isAllUsersGroup())\n                    .map(g -> {\n                        Map<String, String> map = new HashMap<>();\n                        map.put(\"id\", g.getId());\n                        map.put(\"name\", g.getLocalizedName(locale));\n                        return map;\n                    })\n                    .collect(Collectors.toList()));\n        } else {\n            return getUserGroups(userId).map(groups -> groups.stream()\n                    .filter(g -> !g.isAllUsersGroup())\n                    .map(g -> {\n                        Map<String, String> map = new HashMap<>();\n                        map.put(\"id\", g.getId());\n                        map.put(\"name\", g.getLocalizedName(locale));\n                        return map;\n                    })\n                    .collect(Collectors.toList()));\n        }\n    }\n", "CodeBleu_score": 29.154267676172307}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale)        return groupService.findAllByUserId(userId)\n                .filter(group -> !group.isAllUsersGroup())\n                .filter(group -> !withoutDynamicGroups || !group.isDynamicGroup())\n                .map(group -> {\n                    Map<String, String> groupMap = new HashMap<>();\n                    groupMap.put(\"id\", group.getId());\n                    groupMap.put(\"name\", group.getLocalizedName(locale));\n                    return groupMap;\n                })\n                .collectList();\n    }\n\n", "CodeBleu_score": 29.905476073171844}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale)        if (orgMember.isAdmin()) {\n            return getAllGroups(withoutDynamicGroups, locale);\n        }\n        return getUserGroups(userId, withoutDynamicGroups, locale);\n    }\n", "CodeBleu_score": 12.633327986678783}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId)    return mongoUpsertHelper.upsert(UserStatus.class, UserStatus.builder()\n            .userId(userId)\n            .hasShowNewUserGuidance(true)\n            .build());\n}\n", "CodeBleu_score": 36.40144923871377}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId)    UserStatus userStatus = new UserStatus();\n    userStatus.setUserId(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n\n    return mongoUpsertHelper.upsert(userStatus);\n}\n", "CodeBleu_score": 33.44620354744574}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId)    UserStatus userStatus = new UserStatus(userId, true);\n    return mongoUpsertHelper.upsert(userStatus);\n}\n", "CodeBleu_score": 24.98487795327964}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) \tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\n\trun := rungroup.New(c.ctx)\n\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\trun.Go(func() {\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t})\n\t\t}\n\t}\n\n\trun.Wait()\n}\n", "CodeBleu_score": 36.295986964575995}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) \tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\n\trun := rungroup.New(c.ctx)\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\trun.Go(func() {\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t})\n\t\t}\n\t}\n\trun.Wait()\n}", "CodeBleu_score": 36.295986964575995}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) \tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\n\trunGroup := sync.WaitGroup{}\n\trunGroup.Add(len(c.partitions))\n\n\tfor _, partition := range c.partitions {\n\t\tif predicatePartition(partition.name, partition.manager) {\n\t\t\tgo func(p *partition) {\n\t\t\t\tp.clearMatching(predicateValue)\n\t\t\t\trunGroup.Done()\n\t\t\t}(partition)\n\t\t}\n\t}\n\n\trunGroup.Wait()\n}\n", "CodeBleu_score": 38.137520537591854}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\tmaxSizePerPartition := int(math.Ceil(float64(maxItemsTotal) / avgWeightPerPartition))\n\treturn maxSizePerPartition\n}\n", "CodeBleu_score": 41.19765339846699}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\tmaxSizePerPartition := int(math.Ceil(avgWeightPerPartition * 2.0))\n\n\tif maxSizePerPartition > maxItemsTotal {\n\t\treturn maxItemsTotal\n\t}\n\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 50.32650322279151}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\tmaxSizePerPartition := int(math.Ceil(avgWeightPerPartition * float64(maxItemsTotal)))\n\treturn maxSizePerPartition\n}\n", "CodeBleu_score": 40.994099930702504}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap()    try {\n        Map<String, Object> map = new HashMap<>();\n        DatabaseMetaData metaData = connection.getMetaData();\n        if (metaData != null) {\n            map.put(\"database_product_name\", metaData.getDatabaseProductName());\n            map.put(\"database_product_version\", metaData.getDatabaseProductVersion());\n        }\n        return map;\n    } catch (SQLException e) {\n        return Collections.emptyMap();\n    }\n}", "CodeBleu_score": 41.515445930886315}, {"code": "public Map<String, Object> contributorMap()    Map<String, Object> map = new HashMap<>();\n    DatabaseMetaData metaData = null;\n    try {\n        metaData = connection.getMetaData();\n    } catch (SQLException e) {\n        e.printStackTrace();\n    }\n    if (metaData != null) {\n        map.put(\"databaseProductName\", metaData.getDatabaseProductName());\n        map.put(\"databaseProductVersion\", metaData.getDatabaseProductVersion());\n    }\n    return map;\n}", "CodeBleu_score": 43.06901983920854}, {"code": "public Map<String, Object> contributorMap()    Map<String, Object> map = new HashMap<>();\n    DatabaseMetaData metadata = null;\n    try {\n        metadata = getConnection().getMetaData();\n    } catch (SQLException e) {\n        e.printStackTrace();\n    }\n    if (metadata != null) {\n        try {\n            map.put(\"Database Product Name\", metadata.getDatabaseProductName());\n            map.put(\"Database Product Version\", metadata.getDatabaseProductVersion());\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n    return map;\n}", "CodeBleu_score": 47.86420462467004}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap)    UserSettings userSettings = configMap.getUserSettings();\n    if (userSettings == null) {\n        info.setRegistrationEnabled(false);\n        info.setEmailVerificationOnRegistration(false);\n    } else {\n        info.setRegistrationEnabled(userSettings.isRegistrationEnabled());\n        info.setEmailVerificationOnRegistration(userSettings.isEmailVerificationOnRegistration());\n    }\n}", "CodeBleu_score": 41.408471701740055}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap)    Map<String, Object> userSettings = configMap.getMap(\"user\");\n    if (userSettings == null) {\n        info.setRegistrationEnabled(false);\n        info.setEmailVerificationEnabled(false);\n    } else {\n        info.setRegistrationEnabled(userSettings.getBoolean(\"registrationEnabled\", false));\n        info.setEmailVerificationEnabled(userSettings.getBoolean(\"emailVerificationEnabled\", false));\n    }\n}\n", "CodeBleu_score": 35.19850838562386}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap)    def userSettings = configMap.get(\"userSettings\")\n    if (userSettings == null) {\n        info.setRegistrationEnabled(false)\n        info.setEmailVerificationOnRegistration(false)\n    } else {\n        info.setRegistrationEnabled(userSettings.get(\"registrationEnabled\", false))\n        info.setEmailVerificationOnRegistration(userSettings.get(\"emailVerificationOnRegistration\", false))\n    }\n}\n", "CodeBleu_score": 33.535948665360934}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart()    ThreadGroup group = new ThreadGroup(\"Restart\");\n    Thread thread = new Thread(group, \"Restart\", new RestartRunnable());\n    thread.setDaemon(false);\n    thread.setContextClassLoader(getClass().getClassLoader());\n    thread.start();\n    return \"Restarting application\";\n}\n", "CodeBleu_score": 51.39001493051929}, {"code": "public Object restart()    ThreadGroup threadGroup = new ThreadGroup(Thread.currentThread().getThreadGroup(), \"restart\");\n    Thread thread = new Thread(threadGroup, this);\n    thread.setContextClassLoader(getClass().getClassLoader());\n    thread.setDaemon(false);\n    thread.start();\n    return \"restarting\";\n}\n", "CodeBleu_score": 49.94205999158364}, {"code": "public Object restart()    ThreadGroup threadGroup = new ThreadGroup(\"restart\");\n    Thread thread = new Thread(threadGroup, \"restart\");\n    thread.setDaemon(false);\n    thread.setContextClassLoader(getClass().getClassLoader());\n    thread.start();\n    return \"restarting...\";\n}\n", "CodeBleu_score": 51.14711934084202}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer)    configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n    configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n}\n", "CodeBleu_score": 67.95574968143305}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer)        configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper, MediaType.APPLICATION_JSON));\n        configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper, MediaType.APPLICATION_JSON));\n    }\n", "CodeBleu_score": 52.97600529393496}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer)    configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper, MediaType.APPLICATION_JSON));\n    configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper, MediaType.APPLICATION_JSON));\n}\n", "CodeBleu_score": 53.87957647661467}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection()    return route(GET(\"/console/**\").and(accept(MediaType.TEXT_HTML)),\n            request -> ServerResponse.temporaryRedirect(URI.create(\"/console/index.html\")).build());\n}\n", "CodeBleu_score": 19.41889709085138}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection()    return route(\n        GET(\"/console/**\")\n            .and(accept(MediaType.TEXT_HTML))\n            .and(negate(WebSocketRequestPredicate.webSocket())),\n        req ->\n            ServerResponse.temporaryRedirect(URI.create(\"/console/index.html\")).build()\n    );\n}\n", "CodeBleu_score": 27.298174399113}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection()    return RouterFunctions.route(\n        RequestPredicates.GET(\"/console/**\")\n            .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n            .and(RequestPredicates.pathPattern(\"/console/**\").negate())\n            .and(RequestPredicates.not(RequestPredicates.webSocket())),\n        request -> ServerResponse.ok().contentType(MediaType.TEXT_HTML).body(BodyInserters.fromResource(new ClassPathResource(\"console/index.html\"))));\n}", "CodeBleu_score": 26.791781099435287}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect()    return route(GET(\"/uc/**\")\n            .and(accept(MediaType.TEXT_HTML))\n            .and(not(path(\"/uc/assets/**\")))\n            .and(not(WebSocketRequestPredicate.webSocket())),\n        request -> ServerResponse.ok().contentType(MediaType.TEXT_HTML)\n            .bodyValue(new ClassPathResource(\"uc/index.html\", this.getClass().getClassLoader())));\n}", "CodeBleu_score": 31.338103151347774}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect()    return route(GET(\"/uc/**\").and(accept(MediaType.TEXT_HTML)).and(not(path(\"/uc/assets/**\"))).and(not(WebSocketRequest.class::isInstance)),\n            request -> ServerResponse.ok().contentType(MediaType.TEXT_HTML).syncBody(new ClassPathResource(\"uc/index.html\", UcApplication.class.getClassLoader())));\n}\n", "CodeBleu_score": 29.12886547966472}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect()    return route(\n        GET(\"/uc/**\").and(accept(MediaType.TEXT_HTML)),\n        req -> {\n            String path = req.path();\n            if (path.endsWith(\"/\")) {\n                path += \"index.html\";\n            }\n            return ServerResponse.ok().contentType(MediaType.TEXT_HTML).render(\"uc\", path);\n        });\n}\n", "CodeBleu_score": 29.69860927339716}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository    ReactiveIndexedSessionRepository<MapSession> repository = new ReactiveMapIndexedSessionRepository(new ConcurrentHashMap<>());\n    repository.setDefaultMaxInactiveInterval(Duration.ofSeconds(session.getTimeout().toSeconds()));\n    return repository;\n}\n", "CodeBleu_score": 33.53898913185153}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository    def repo = new MapReactiveIndexedSessionRepository(new ConcurrentHashMap<>())\n    repo.setDefaultMaxInactiveInterval(sessionProperties.getRedis().getTimeout())\n    repo.setIndexName(serverProperties.getServlet().getSession().getCookie().getName())\n    return repo\n}\n", "CodeBleu_score": 44.240517632021415}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository\n    // Create a concurrent hash map to store sessions\n    ConcurrentHashMap<String, MapSession> map = new ConcurrentHashMap<>();\n\n    // Create a new reactive session repository using the concurrent hash map\n    ReactiveIndexedSessionRepository<MapSession> repository = new MapReactiveIndexedSessionRepository(map);\n\n    // Set the default session timeout based on properties from the session and server configurations\n    repository.setDefaultMaxInactiveInterval(sessionProperties.getRedis().getDefaultSessionTimeout());\n\n    // Return the configured repository\n    return repository;\n}\n", "CodeBleu_score": 33.296285745138455}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties)    DefaultUserDetailService userDetailsService = new DefaultUserDetailService();\n    userDetailsService.setUserService(userService);\n    userDetailsService.setRoleService(roleService);\n    userDetailsService.setTwoFactorAuthEnabled(haloProperties.getAuth().getTwoFactorAuth().isEnabled());\n    return userDetailsService;\n}\n", "CodeBleu_score": 39.235163137303495}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties)    DefaultUserDetailService userDetailService = new DefaultUserDetailService(userService, roleService);\n    userDetailService.setTwoFactorAuthEnabled(haloProperties.getSecurity().getTwoFactorAuth().isEnabled());\n    return userDetailService;\n}\n", "CodeBleu_score": 53.53074574819876}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties)    DefaultUserDetailService userDetailService = new DefaultUserDetailService(userService, roleService);\n    userDetailService.setTwoFactorAuthentication(haloProperties.getAuth().getTwoFactorAuth().getEnabled());\n    return userDetailService;\n}\n", "CodeBleu_score": 52.55641619013905}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner()    Comment.CommentOwner owner = new Comment.CommentOwner();\n    owner.setKind(\"email\");\n    owner.setEmail(email != null ? email : \"\");\n    owner.setDisplayName(displayName);\n    owner.setAvatar(new Comment.CommentOwner.Avatar());\n    owner.setWebsite(new Comment.CommentOwner.Website());\n    return owner;\n}", "CodeBleu_score": 30.449410119193026}, {"code": "public Comment.CommentOwner toCommentOwner()    Comment.CommentOwner owner = new Comment.CommentOwner();\n    owner.setKind(\"email\");\n    owner.setEmail(email != null ? email : \"\");\n    owner.setDisplayName(displayName);\n    owner.setAvatar(new Comment.CommentOwner.Avatar());\n    owner.setWebsite(new Comment.CommentOwner.Website());\n    return owner;\n}", "CodeBleu_score": 30.449410119193026}, {"code": "public Comment.CommentOwner toCommentOwner()    Comment.CommentOwner owner = new Comment.CommentOwner();\n    owner.setKind(\"email\");\n    owner.setEmail(email != null ? email : \"\");\n    owner.setDisplayName(displayName);\n    owner.setAvatar(new Comment.CommentOwner.Avatar());\n    owner.setWebsite(new Comment.CommentOwner.Website());\n    return owner;\n}", "CodeBleu_score": 30.449410119193026}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner)  if (commentOwner.kind == Comment.CommentOwner.Kind.EMAIL) {\n    User user = getUser(post.owner);\n    return user.email == commentOwner.name;\n  } else {\n    return post.owner.name == commentOwner.name;\n  }\n}\n", "CodeBleu_score": 17.77575749055318}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner)    if (commentOwner.getKind() == Comment.CommentOwner.Kind.EMAIL) {\n        User user = User.getUser(post.getOwner().getName());\n        return user.getEmail().equals(commentOwner.getName());\n    } else {\n        return post.getOwner().getName().equals(commentOwner.getName());\n    }\n}\n", "CodeBleu_score": 38.31104163658591}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner)    if (commentOwner.getKind() == Comment.CommentOwner.Kind.EMAIL) {\n        User user = User.getByEmail(post.getOwner().getEmail());\n        return user.getName().equals(commentOwner.getName());\n    } else {\n        return post.getOwner().getName().equals(commentOwner.getName());\n    }\n}\n", "CodeBleu_score": 39.11103306340039}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions()    ListOptions options = new ListOptions();\n    String fieldQuery = buildFieldQuery();\n    if (keyword != null && !keyword.isEmpty()) {\n        fieldQuery += \",\" + \"metadata.name=\" + keyword;\n    }\n    if (ownerName != null && !ownerName.isEmpty()) {\n        fieldQuery += \",\" + \"metadata.ownerReferences.name=\" + ownerName;\n    }\n    options.setFieldSelector(fieldQuery);\n    return options;\n}\n", "CodeBleu_score": 22.040786899050666}, {"code": "public ListOptions toListOptions()    ListOptions options = new ListOptions();\n    String fieldQuery = (this.label != null ? \"metadata.labels.\" + this.label : \"\") + (this.field != null ? \",\" + this.field : \"\");\n    if (fieldQuery.length() > 0) {\n        options.fieldSelector = fieldQuery;\n    }\n    if (this.keyword != null) {\n        options.fieldSelector += (options.fieldSelector.length() > 0 ? \",\" : \"\") + \"metadata.name=\" + this.keyword;\n    }\n    if (this.ownerName != null) {\n        options.fieldSelector += (options.fieldSelector.length() > 0 ? \",\" : \"\") + \"metadata.ownerReferences.name=\" + this.ownerName;\n    }\n    return options;\n}", "CodeBleu_score": 27.68048415434566}, {"code": "public ListOptions toListOptions()    ListOptions options = new ListOptions();\n    String fieldQuery = (label != null ? \"metadata.labels.\" + label : \"\") + (field != null ? \",\" + field : \"\");\n    if (fieldQuery.length() > 0) {\n        options.fieldSelector(fieldQuery);\n    }\n    if (keyword != null) {\n        options.fieldSelector(\"metadata.name=\" + keyword);\n    }\n    if (ownerName != null) {\n        options.fieldSelector(\"metadata.ownerReferences.name=\" + ownerName);\n    }\n    return options;\n}", "CodeBleu_score": 21.35404694427719}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName)    return Mono.justOrEmpty(commentName)\n            .flatMap(name -> reactiveValueOperations.get(name))\n            .map(counter -> new CommentStats(counter.get(UPVOTE_COUNT)))\n            .defaultIfEmpty(new CommentStats());\n}\n", "CodeBleu_score": 34.83649929604273}, {"code": "Mono<CommentStats> fetchStats(String commentName)    if (commentName == null) {\n        return Mono.empty();\n    }\n\n    return counterRepository.findById(commentName)\n            .map(counter -> new CommentStats(counter.getUpvoteCount()));\n}\n", "CodeBleu_score": 36.61928629663663}, {"code": "Mono<CommentStats> fetchStats(String commentName)    if (commentName == null) {\n        return Mono.error(new IllegalArgumentException(\"Comment name cannot be null\"));\n    }\n\n    Mono<Long> upvotes = counterService.get(commentName);\n    return upvotes.map(upvoteCount -> new CommentStats(upvoteCount));\n}\n", "CodeBleu_score": 23.26228000128017}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity)    Subscriber subscriber = Subscriber.fromIdentity(identity);\n    InterestReason reason = InterestReason.replyTo(identity.getName());\n    NotificationCenter.shared().subscribe(subscriber, reason) {\n        if let error = $0 {\n            print(\"Subscription failed with error: \\(error)\")\n        } else {\n            print(\"Subscription succeeded\")\n        }\n    }\n}\n", "CodeBleu_score": 37.54944607063203}, {"code": "void subscribeReply(UserIdentity identity)    let subscriber = Subscriber(identity: identity)\n    let reason = InterestReason(type: .someoneRepliedToYou, condition: [\"repliedOwner\": identity.name])\n    subscriber.subscribe(reason: reason) { result in\n        switch result {\n        case .success:\n            print(\"Successfully subscribed to reply notifications\")\n        case .failure(let error):\n            print(\"Failed to subscribe to reply notifications: \\(error.localizedDescription)\")\n        }\n    }\n}\n", "CodeBleu_score": 31.656504397193086}, {"code": "void subscribeReply(UserIdentity identity)    Subscriber subscriber = new Subscriber(identity);\n    InterestReason reason = new InterestReason(InterestReasonType.SOMEONE_REPLIED_TO_YOU,\n                                               new Condition(ConditionType.REPLIED_OWNER,\n                                                               identity.getName()));\n    NotificationCenter.getInstance().subscribe(subscriber, reason,\n                                               (NotificationCenter.SubscriptionCallback) (subscriber, reason, error) -> {\n                                                   if (error != null) {\n                                                       System.out.println(\"Subscription failed: \" + error.getLocalizedMessage());\n                                                   } else {\n                                                       System.out.println(\"Subscription succeeded\");\n                                                   }\n                                               });\n}", "CodeBleu_score": 33.47466984487938}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment)    return client.update(comment)\n        .doOnNext(c -> {\n            c.setApproved(true);\n            c.setApprovedAt(Instant.now());\n        })\n        .onErrorResume(OptimisticLockingFailureException.class, e -> update(comment, c -> {\n            c.setApproved(true);\n            c.setApprovedAt(Instant.now());\n        }));\n}\n", "CodeBleu_score": 31.84860296913411}, {"code": "private Mono<Comment> approveComment(Comment comment)    return client.update(comment)\n            .onErrorResume(OptimisticLockingFailureException.class, e -> update(comment))\n            .flatMap(c -> {\n                c.setApproved(true);\n                c.setApprovedAt(Instant.now());\n                return Mono.just(c);\n            });\n}\n", "CodeBleu_score": 28.76028923441072}, {"code": "private Mono<Comment> approveComment(Comment comment)    return client.update(comment)\n            .doOnNext(updatedComment -> {\n                if (updatedComment.getApproved() == null) {\n                    updatedComment.setApproved(true);\n                    updatedComment.setApprovedAt(Instant.now());\n                }\n            })\n            .onErrorResume(OptimisticLockingFailureException.class, e -> update(comment, c -> {\n                c.setApproved(true);\n                c.setApprovedAt(Instant.now());\n            }));\n}\n", "CodeBleu_score": 34.42359255190373}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction    if ($action instanceof MountableAction) {\n        $action->component($this);\n    }\n\n    if ($this instanceof HasRecord && $action instanceof HasRecord) {\n        $action->record($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 65.30529495163691}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction    if ($action instanceof MountableAction) {\n        $action->livewire($this);\n    }\n\n    if ($action instanceof HasRecord && $this instanceof HasRecord) {\n        $action->record($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 62.25894856928711}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction    if ($action instanceof MountableAction) {\n        $action->livewire($this);\n    }\n\n    if ($action instanceof HasRecord && $this instanceof HasRecord) {\n        $action->record($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 62.25894856928711}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static    if ($this->successRedirectUrl) {\n        redirect($this->successRedirectUrl);\n    }\n    return $this;\n}", "CodeBleu_score": 33.30787967003409}, {"code": "<?\npublic function dispatchSuccessRedirect(): static    $successRedirectUrl = $this->getSuccessRedirectUrl();\n    if (!empty($successRedirectUrl)) {\n        wp_safe_redirect($successRedirectUrl);\n        exit;\n    }\n    return $this;\n}\n", "CodeBleu_score": 44.677504462272054}, {"code": "<?\npublic function dispatchSuccessRedirect(): static    $successRedirectUrl = $this->getSuccessRedirectUrl();\n\n    if (!empty($successRedirectUrl)) {\n        wp_safe_redirect($successRedirectUrl);\n        exit;\n    }\n\n    return $this;\n}", "CodeBleu_score": 44.677504462272054}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void    if (!$record || !method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagModel = app(Tag::class);\n\n    $tagNames = collect($state['tags'])\n        ->map(fn ($name) => trim($name))\n        ->filter(fn ($name) => strlen($name) > 0);\n\n    $tags = $tagModel->findOrCreate($tagNames);\n\n    $record->tags()->sync($tags->pluck('id'));\n}", "CodeBleu_score": 34.7422142333941}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void    if (!$record) {\n        return;\n    }\n\n    if (!method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagClass = app(Tag::class);\n\n    $tagNames = $this->processTagNames($state['tags'] ?? []);\n\n    $tags = $tagClass::whereIn('name', $tagNames)->get();\n\n    $tagsToAttach = $tagClass::whereIn('name', $tagNames)->pluck('id')->toArray();\n\n    $record->tags()->sync($tagsToAttach);\n}\n", "CodeBleu_score": 34.25370582899058}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void    if (!$record || !method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagModelClass = $record->tags()->getMorphClass();\n\n    $tags = collect($state['tags'] ?? [])->map(function ($tag) use ($tagModelClass) {\n        return $tagModelClass::findOrCreate($tag, 'en');\n    });\n\n    $record->tags()->sync($tags->pluck('id')->toArray());\n}\n", "CodeBleu_score": 33.616139819036405}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error \tspacePath, repoName, err := dissectPipelinePath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tscope := authz.NewScope(spacePath, repoName, authz.PipelineScope, pipelineIdentifier)\n\tresource := authz.NewResource(spacePath, repoName, authz.PipelineResource, pipelineIdentifier)\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}\n", "CodeBleu_score": 53.01226400687773}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error \n\tspacePath, repoName, err := dissectPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tscope := enum.Scope{\n\t\tType: enum.ScopeTypePipeline,\n\t\tName: pipelineIdentifier,\n\t}\n\n\tresource := enum.Resource{\n\t\tType: enum.ResourceTypePipeline,\n\t\tName: pipelineIdentifier,\n\t\tAttributes: map[string]interface{}{\n\t\t\t\"spacePath\": spacePath,\n\t\t\t\"repoName\":  repoName,\n\t\t},\n\t}\n\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}\n", "CodeBleu_score": 63.69493207803348}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error \tspacePath, repoName, err := dissectPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tscope := fmt.Sprintf(\"space/%s/repository/%s/pipeline/%s\", spacePath, repoName, pipelineIdentifier)\n\tresource := fmt.Sprintf(\"space/%s/repository/%s/pipeline/%s\", spacePath, repoName, pipelineIdentifier)\n\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}\n", "CodeBleu_score": 51.22655617086862}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error\tparentSpace, name, err := dissectSpacePath(space.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tscope := types.Scope{\n\t\tKind:     enum.SpaceKind,\n\t\tParentID: parentSpace.ID,\n\t\tName:     name,\n\t}\n\n\tresource := types.Resource{\n\t\tKind: enum.SpaceKind,\n\t\tID:   space.ID,\n\t}\n\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}\n", "CodeBleu_score": 62.92100101665474}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error\tparent, name := space.ParentPath()\n\n\tscope := types.Scope{\n\t\tType:  types.SpaceScope,\n\t\tSpace: parent,\n\t}\n\n\tresource := types.Resource{\n\t\tType: types.SpaceResource,\n\t\tName: name,\n\t}\n\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}\n", "CodeBleu_score": 53.42809986444828}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error\tparent, name := space.ParentAndName()\n\n\tscope := fmt.Sprintf(\"spaces/%s/%s\", parent, name)\n\tresource := fmt.Sprintf(\"spaces/%s/%s\", parent, name)\n\n\treturn authz.Check(ctx, authorizer, session, scope, resource, permission)\n}\n", "CodeBleu_score": 40.070121691047476}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error)\tif len(source) == 0 {\n\t\tsource, _ = json.Marshal(data)\n\t}\n\n\tdec := json.NewDecoder(bytes.NewReader(source))\n\tdec.DisallowUnknownFields()\n\n\tvar dst bytes.Buffer\n\tenc := json.NewEncoder(&dst)\n\tenc.SetEscapeHTML(false)\n\n\tif err := enc.Encode(dec); err != nil {\n\t\treturn nil, err\n\t}\n\n\tb := dst.Bytes()\n\tif len(b) > 0 && b[len(b)-1] == '\\n' {\n\t\tb = b[:len(b)-1]\n\t}\n\n\treturn b, nil\n}", "CodeBleu_score": 46.5602455337071}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error)\tif len(source) == 0 {\n\t\tb, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tsource = b\n\t}\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\tif err := decoder.Decode(&data); err != nil {\n\t\treturn nil, err\n\t}\n\tb, err := json.Marshal(data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn bytes.TrimRight(b, \"\\n\"), nil\n}", "CodeBleu_score": 45.37802749601346}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error)\tif len(source) == 0 {\n\t\tb, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tsource = b\n\t}\n\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\n\tvar target json.RawMessage\n\tif err := decoder.Decode(&target); err != nil {\n\t\treturn nil, err\n\t}\n\n\tb, err := json.Marshal(target)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tresult := bytes.TrimSuffix(b, []byte(\"\\n\"))\n\treturn result, nil\n}", "CodeBleu_score": 47.91005600343834}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error)\trepo, err := c.getRepo(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := c.checkAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}\n", "CodeBleu_score": 37.71786329055434}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error)\trepoRef, err := c.validateRepoRef(ctx, session, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\trepo, err := c.getRepo(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := c.checkAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}\n", "CodeBleu_score": 49.25818910920445}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error)\trepo, err := c.getRepo(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := c.checkAccess(session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}\n", "CodeBleu_score": 33.741316455610196}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty:    SanitizeCheckEmpty,\n\t\tenum.CheckPayloadKindRaw:      SanitizeCheckRaw,\n\t\tenum.CheckPayloadKindMarkdown: SanitizeCheckMarkdown,\n\t\tenum.CheckPayloadKindPipeline: SanitizeCheckPipeline,\n\t}\n}", "CodeBleu_score": 26.424208516734733}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error\tsanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tsanitizers[enum.CheckPayloadKindEmpty] = SanitizeEmptyPayload\n\tsanitizers[enum.CheckPayloadKindRaw] = SanitizeRawPayload\n\tsanitizers[enum.CheckPayloadKindMarkdown] = SanitizeMarkdownPayload\n\tsanitizers[enum.CheckPayloadKindPipeline] = SanitizePipelinePayload\n\treturn sanitizers\n}\n", "CodeBleu_score": 42.583615598657765}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindRaw: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindMarkdown: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindPipeline: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t}\n}", "CodeBleu_score": 24.852130197986888}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)  self.state.on_render = on_render\n  if not self.state.attached then\n    self.state.attached = true\n    self.renderer:attach_buffer(self)\n  end\n  return self", "CodeBleu_score": 57.67409950712465}, {"code": "function Buffer:attach_to_renderer(on_render)    self.state.on_render = on_render\n    if not self.state.attached then\n        self.state.attached = true\n        self.state.renderer:attach_buffer(self)\n    end\n    return self", "CodeBleu_score": 58.862890676591405}, {"code": "function Buffer:attach_to_renderer(on_render)    local buffer = self.buffer\n    local renderer = self.renderer\n    local state = self.state\n\n    if state.is_attached_to_renderer then\n        return buffer\n    end\n\n    local function render_buffer()\n        local width, height = buffer:get_size()\n        local content = buffer:get_content()\n        local cursor_row, cursor_col = buffer:get_cursor_position()\n        local cursor_visible = buffer:get_cursor_visible()\n        local cursor_shape = buffer:get_cursor_shape()\n\n        if cursor_visible then\n            renderer:set_cursor_position(cursor_row, cursor_col)\n            renderer:set_cursor_visible(cursor_visible)\n            renderer:set_cursor_shape(cursor_shape)\n        end\n\n        renderer:set_content(content)\n        renderer:set_size(width, height)\n    end\n\n    if on_render then\n        state.on_render = on_render\n    else\n        state.on_render = render_buffer\n    end\n\n    state.is_attached_to_renderer = true\n\n    return buffer", "CodeBleu_score": 53.630092724223154}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)  if self.valid then \n    local watcher = require(\"filesystem\").watch(self.filename, function(err) \n      if err then \n        log.error(\"Error watching file: \" .. err) \n      else \n        callback() \n      end \n    end) \n  end ", "CodeBleu_score": 35.14390704909179}, {"code": "function Buffer:watch(callback)    if not self:is_valid() then\n        return\n    end\n\n    local file_path = self.file_path\n    local buffer_id = self.id\n    local watcher = self.watcher\n\n    if watcher and watcher:is_running() then\n        watcher:stop()\n    end\n\n    if callback then\n        local function on_change()\n            local file_path = self.file_path\n            local buffer_id = self.id\n            local watcher = self.watcher\n\n            if watcher and watcher:is_running() then\n                watcher:stop()\n            end\n\n            local new_buffer = Buffer.from_file(file_path)\n            if new_buffer then\n                new_buffer.id = buffer_id\n                callback(new_buffer)\n            end\n        end\n\n        watcher = file_watcher.new(file_path, on_change)\n        watcher:start()\n        self.watcher = watcher\n    end", "CodeBleu_score": 36.56241660721552}, {"code": "function Buffer:watch(callback)  if self.valid and callback then\n    local watcher = vim.loop.fs_watch(self.filename, {}, function()\n      callback(self)\n    end)\n    self.watcher = watcher\n  end", "CodeBleu_score": 28.944228918596203}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()    if self.hex then return self.hex end\n\n    local spec = self.spec\n    local attr = spec.attr\n    local hl_name = spec.name\n\n    if not hl_name then return end\n\n    local color_name = attr == 'foreground' and 'foreground' or 'background'\n    local color_value = vim.api.nvim_get_hl_by_name(hl_name, true)[color_name]\n\n    if not color_value then return end\n\n    local hex_value = Color.to_hex_string(color_value)\n    self.hex = hex_value\n    return hex_value", "CodeBleu_score": 55.10363155388121}, {"code": "function Color:to_hex()    if self.hex then return self.hex end\n\n    local spec = self:get_spec()\n    local attr = spec.attr and spec.attr.id or 0\n    local hl_name = spec.name\n    local hex = vim.api.nvim_get_hl_by_name(hl_name, true, attr)\n    if hex then\n        hex = hex.foreground\n        self.hex = hex\n        return hex\n    end", "CodeBleu_score": 52.18723201976454}, {"code": "function Color:to_hex()    if self.hex then\n        return self.hex\n    end\n\n    local spec = self.spec\n    local attr = self.attr\n\n    local hl = vim.api.nvim_get_hl_by_name(spec, true)\n    if not hl then\n        return nil\n    end\n\n    local color = hl[attr]\n    if not color then\n        return nil\n    end\n\n    local hex = string.format(\"#%02x%02x%02x\", color.r * 255, color.g * 255, color.b * 255)\n    self.hex = hex\n    return hex", "CodeBleu_score": 57.37794683665266}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)    local lines = buffer:get_lines()\n    for _, line in ipairs(lines) do\n        local start_pos, end_pos = line:find(pattern)\n        if start_pos then\n            buffer:apply_highlight_by_name(hl, start_pos, end_pos)\n        end\n    end\n    return self", "CodeBleu_score": 39.96870212148221}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)    local lines = buffer:get_lines()\n    for i, line in ipairs(lines) do\n        local start_pos, end_pos = line:find(pattern)\n        while start_pos do\n            buffer:add_highlight(hl, start_pos, end_pos)\n            start_pos, end_pos = line:find(pattern, end_pos + 1)\n        end\n    end\n    return self", "CodeBleu_score": 50.330670531896914}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)    local lines = vim.api.nvim_buf_get_lines(buffer, 0, -1, false)\n    for i, line in ipairs(lines) do\n        local start_pos = 0\n        while true do\n            local match_start, match_end = string.find(line, pattern, start_pos, true)\n            if match_start then\n                local match = string.sub(line, match_start, match_end)\n                local hl_start = vim.api.nvim_buf_get_mark(buffer, \"<\" .. hl .. \">\")[1]\n                local hl_end = vim.api.nvim_buf_get_mark(buffer, \"</\" .. hl .. \">\")[1]\n                local hl_range = {match_start + hl_start, match_end + hl_end}\n                vim.api.nvim_buf_add_highlight(buffer, -1, hl, hl_range[1], hl_range[2], hl_start, hl_end)\n                start_pos = match_end + 1\n            else\n                break\n            end\n        end\n    end\n    return self", "CodeBleu_score": 45.67213155190402}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)    local id = vim.api.nvim_buf_get_mark(buffer, \"<\" .. row .. \",\" .. col .. \">\")\n    if id ~= \"\" then\n        vim.apiim.nvim_buf_del_extmark(buffer, Namespace.ns, id)\n    end\n    id = vim.api.nvim_buf_set_extmark(buffer, Namespace.ns, row, col, {\n        virt_text = { { text, hl } },\n        virt_text_pos = pos,\n        virt_lines = true,\n        virt_lines_above = true,\n        virt_lines_below = true,\n        priority = priority,\n    })\n    return id", "CodeBleu_score": 58.263620889028886}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)    local id = row .. \":\" .. col\n    buffer.extmarks[id] = buffer.api.nvim_buf_set_extmark(buffer.id, buffer.ns, id, pos, row - 1, col - 1, {})\n    buffer.api.nvim_buf_set_extmark(buffer.id, buffer.ns, id, pos, row - 1, col - 1, {virt_text = {{{text, hl}}}, priority = priority})\n    return id", "CodeBleu_score": 54.18934740822662}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)    local id = vim.api.nvim_buf_get_mark(buffer, \"<\")[1] - 1\n    local id_str = string.format(\"%d%d\", row, col)\n    local ns_id = vim.api.nvim_create_namespace(\"transpose_virtual_text\")\n    local mark_id = vim.api.nvim_buf_set_extmark(buffer, ns_id, id, row - 1, col - 1, {\n        virt_text = { { text, hl } },\n        virt_text_pos = pos,\n        virt_lines = { { text, hl } },\n        virt_lines_above = true,\n        virt_lines_below = true,\n        priority = priority,\n    })\n    return id_str, mark_id", "CodeBleu_score": 55.355293971947226}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)    local result = \"\"\n    local line = \"\"\n    for i = 1, #output do\n        local char = string.sub(output, i, i)\n        if char == \"\\n\" then\n            callback(line)\n            line = \"\"\n        else\n            line = line .. char\n        end\n    end\n    if line ~= \"\" then\n        callback(line)\n    end", "CodeBleu_score": 48.45037159514834}, {"code": "function Spawn:parse_result(output, callback)    local line = \"\"\n    local result = \"\"\n    for i = 1, #output do\n        local c = output:sub(i, i)\n        if c == \"\\n\" then\n            callback(line)\n            line = \"\"\n        else\n            line = line .. c\n        end\n    end\n    if line ~= \"\" then\n        callback(line)\n    end\n    return result", "CodeBleu_score": 49.35646867108561}, {"code": "function Spawn:parse_result(output, callback)    local line = \"\"\n    for i = 1, #output do\n        local char = output:sub(i, i)\n        if char == \"\\n\" then\n            callback(line)\n            line = \"\"\n        else\n            line = line .. char\n        end\n    end\n    if line ~= \"\" then\n        callback(line)\n    end", "CodeBleu_score": 50.478655728727674}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)  if self.watchers[path] then\n    return self.watchers[path]\n  end\n\n  local watcher = vim.loop.new_fs_event()\n  watcher:start(path, {}, function(err, _, name)\n    if not err then\n      handler(name)\n    end\n  end)\n\n  self.watchers[path] = watcher\n  return watcher", "CodeBleu_score": 49.19189335687468}, {"code": "function Watcher:watch_file(path, handler)    if not self.watchers[path] then\n        local watcher = vim.loop.new_fs_event()\n        watcher:start(path, {}, function(_, _, filename)\n            handler(filename)\n        end)\n        self.watchers[path] = watcher\n    end\n    return self.watchers[path]", "CodeBleu_score": 46.546338853743926}, {"code": "function Watcher:watch_file(path, handler)    local watcher = self.watchers[path]\n    if not watcher then\n        watcher = vim.loop.new_fs_event()\n        watcher:start(path, {}, function(err, filename, status)\n            if err then\n                vim.notify(\"Error watching file: \" .. err, vim.log.levels.ERROR)\n                return\n            end\n            handler(filename, status)\n        end)\n        self.watchers[path] = watcher\n    end\n    return watcher", "CodeBleu_score": 45.051513319079675}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()  local hunks = {}\n  local lines = vim.api.nvim_buf_get_lines(self.bufnr, 0, -1, false)\n  local git_object = self.git_object\n  if not git_object then\n    return hunks, \"No git object\"\n  end\n  local hunks = git_object:hunks(lines)\n  if hunks == nil then\n    return hunks, \"No hunks\"\n  end\n  for _, hunk in ipairs(hunks) do\n    local sign_priority = self.sign_priority\n    for _, line in ipairs(hunk.lines) do\n      local line_type = line.type\n      local line_number = line.number\n      local sign_name = self.signs[line_type]\n      local sign_priority_offset = self.sign_priority_offsets[line_type]\n      vim.fn.sign_place(sign_priority, \"*\", sign_name, self.bufnr, {lnum = line_number, priority = sign_priority + sign_priority_offset})\n    end\n  end\n  vim.fn.sign_define(\"GitAdd\", {text = \"+\", texthl = \"GitAdd\", numhl = \"\"})\n  vim.fn.sign_define(\"GitDelete\", {text = \"-\", texthl = \"GitDelete\", numhl = \"\"})\n  vim.fn.sign_define(\"GitChange\", {text = \"~\", texthl = \"GitChange\", numhl = \"\"})\n  vim.fn.sign_define(\"GitChangeDelete\", {text = \"~\", texthl = \"GitChangeDelete\", numhl = \"\"})\n  vim.fn.sign_define(\"GitUnmerged\", {text = \"=\", texthl = \"GitUnmerged\", numhl = \"\"})\n  vim.fn.sign_define(\"GitTopDelete\", {text = \"-\", texthl = \"GitTopDelete\", numhl = \"\"})\n  vim.fn.sign_define(\"GitTopAdd\", {text = \"", "CodeBleu_score": 38.93490034548469}, {"code": "function GitBuffer:live_hunks()    local lines = vim.api.nvim_buf_get_lines(self.bufnr, 0, -1, false)\n    local hunks = self.git_object:hunks()\n    if hunks == nil then\n        return hunks\n    end\n    for _, hunk in ipairs(hunks) do\n        local start_line = hunk.start_line\n        local end_line = hunk.end_line\n        local lines_in_hunk = end_line - start_line + 1\n        local line_numbers = {}\n        for i = start_line, end_line do\n            table.insert(line_numbers, i)\n        end\n        for i = 1, lines_in_hunk do\n            local line = lines[i]\n            local line_number = line_numbers[i]\n            local line_type = hunk.lines[i].type\n            local sign = self:get_sign(line_type)\n            if sign ~= nil then\n                self:set_sign(line_number, sign)\n            end\n        end\n    end\n    vim.fn.sign_place(0, \"*\", \"o\", self.bufnr, {})\n    return hunks", "CodeBleu_score": 43.497012163124026}, {"code": "function GitBuffer:live_hunks()  local lines = vim.api.nvim_buf_get_lines(self.bufnr, 0, -1, false)\n  local hunks, err = git.hunks(self.git_object, lines)\n  if err then\n    return nil, err\n  end\n\n  local signs = {}\n  for _, hunk in ipairs(hunks) do\n    for _, line in ipairs(hunk.lines) do\n      local sign = {\n        bufnr = self.bufnr,\n        lnum = line.lnum,\n        priority = hunk.type == \"+\" and 10 or 11,\n        name = hunk.type == \"+\" and \"GitAdd\" or \"GitDelete\",\n      }\n      table.insert(signs, sign)\n    end\n  end\n\n  vim.fn.sign_unplace(\"*\", { buffer = self.bufnr })\n  vim.fn.sign_place(0, signs, \"o\", self.bufnr, { id = self.bufnr })\n\n  return hunks", "CodeBleu_score": 46.03580274458139}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)    local temp_file = tempname()\n    local f = io.open(temp_file, \"w\")\n    f:write(patch)\n    f:close()\n    local _, _, exit_code = os.execute(\"git add -p \" .. temp_file)\n    os.remove(temp_file)\n    if exit_code ~= 0 then\n        return false, \"Failed to stage hunk from patch\"\n    end\n    return true", "CodeBleu_score": 39.813140195027096}, {"code": "function GitObject:stage_hunk_from_patch(patch)    local temp_file = tempname()\n    local f = io.open(temp_file, \"w\")\n    f:write(patch)\n    f:close()\n    local _, err = git_cmd({\"apply\", \"--cached\", \"--unidiff-zero\", \"--ignore-space-change\", \"--ignore-whitespace\", temp_file}, self.git_dir)\n    os.remove(temp_file)\n    return err", "CodeBleu_score": 36.836634450816334}, {"code": "function GitObject:stage_hunk_from_patch(patch)    local temp_file = os.tmpname()\n    local file = io.open(temp_file, \"w\")\n    if not file then\n        return nil, \"Failed to create temporary file\"\n    end\n    file:write(patch)\n    file:close()\n    local _, err = self:stage_hunk(temp_file)\n    os.remove(temp_file)\n    return err", "CodeBleu_score": 45.57581212936757}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier)    OAuthRequest request = new OAuthRequest(Verb.POST, accessTokenEndpoint);\n    request.addHeader(OAuthConstants.HEADER, getOAuthHeader(requestToken, verifier));\n    request.addBodyParameter(OAuthConstants.CLIENT_ID, apiKey);\n    request.addBodyParameter(OAuthConstants.CLIENT_SECRET, apiSecret);\n    request.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n    request.addBodyParameter(OAuthConstants.REDIRECT_URI, callback);\n    request.addBodyParameter(OAuthConstants.GRANT_TYPE, OAuthConstants.AUTHORIZATION_CODE);\n    Response response = request.send();\n    return accessTokenExtractor.extract(response.getBody());\n}\n", "CodeBleu_score": 50.62799254112157}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier)    OAuthRequest request = new OAuthRequest(Verb.POST, accessTokenEndpointUrl);\n    request.addHeader(\"Authorization\", \"OAuth \" +\n            OAuthEncoder.encode(apiKey) + \":\" +\n            OAuthEncoder.encode(apiSecret));\n    request.addBodyParameter(\"oauth_verifier\", verifier.getValue());\n    request.addBodyParameter(\"oauth_token\", requestToken.getToken());\n    Response response = request.send();\n    return api.getAccessTokenExtractor().extract(response.getBody());\n}\n", "CodeBleu_score": 55.80173348951762}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier)    OAuthRequest request = new OAuthRequest(accessTokenVerb, accessTokenEndpoint);\n    addClientAuthentication(request, requestToken);\n    request.addQuerystringParameter(OAuthConstants.TOKEN, requestToken.getToken());\n    request.addQuerystringParameter(OAuthConstants.VERIFIER, verifier.getValue());\n    Response response = request.send();\n    return accessTokenExtractor.extract(response.getBody());\n}", "CodeBleu_score": 53.298170257214736}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host)  // Create a credentials provider with the specified credentials\n  CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n  credentialsProvider.setCredentials(new AuthScope(host), new UsernamePasswordCredentials(username, password));\n\n  // Add the host to an authentication cache using the Basic authentication scheme\n  AuthCache authCache = new BasicAuthCache();\n  authCache.put(host, new BasicScheme());\n\n  // Assign the credentials provider and authentication cache to the context\n  context.setCredentialsProvider(credentialsProvider);\n  context.setAuthCache(authCache);\n\n  // Log the action of adding the host to the auth cache\n  LOG.debug(\"Adding host {} to the auth cache\", host);\n}\n", "CodeBleu_score": 73.79079109411906}, {"code": "public void configureContext(HttpClientContext context, HttpHost host)    // Create a credentials provider with the specified credentials\n    CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n    credentialsProvider.setCredentials(new AuthScope(host), new UsernamePasswordCredentials(username, password));\n\n    // Add the host to an authentication cache using the Basic authentication scheme\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n\n    // Assign the credentials provider and authentication cache to the context\n    context.setCredentialsProvider(credentialsProvider);\n    context.setAuthCache(authCache);\n\n    // Log the action of adding the host to the auth cache\n    logger.debug(\"Added {} to auth cache\", host);\n}", "CodeBleu_score": 73.42438773844553}, {"code": "public void configureContext(HttpClientContext context, HttpHost host)  CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n  credentialsProvider.setCredentials(new AuthScope(host), new UsernamePasswordCredentials(username, password));\n  context.setCredentialsProvider(credentialsProvider);\n  AuthCache authCache = new BasicAuthCache();\n  authCache.put(host, new BasicScheme());\n  context.setAuthCache(authCache);\n  LOGGER.info(\"Added host {} to auth cache\", host);\n}", "CodeBleu_score": 69.41075134957227}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size)    AvatarCache cache = AvatarCache.get();\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache is not installed\");\n    }\n    String key = cache.generateKey(source);\n    cache.seedCache(key);\n    try {\n        return Jenkins.get().rootUrl + \"/plugin/avatarcache/avatar/\" + URLEncoder.encode(key, \"UTF-8\") + \"/\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(e);\n    }\n}", "CodeBleu_score": 36.66069104392988}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size)    AvatarCache cache = AvatarCache.get();\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache is not available\");\n    }\n    String cacheKey = cache.generateCacheKey(source);\n    cache.seedCache(cacheKey, source);\n    try {\n        return Jenkins.get().rootUrl + \"/avatar/\" + URLEncoder.encode(cacheKey, \"UTF-8\") + \"/\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new Error(e);\n    }\n}", "CodeBleu_score": 37.61194489585032}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size)    Jenkins jenkins = Jenkins.get();\n    AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache not found\");\n    }\n    String cacheKey = cache.generateCacheKey(source);\n    cache.seedCache(cacheKey);\n    try {\n        return jenkins.getRootUrl() + \"/plugin/avatars/cache/\" + URLEncoder.encode(cacheKey, \"UTF-8\") + \"/\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding is unsupported\", e);\n    }\n}", "CodeBleu_score": 49.249236401648545}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified)    this.source = source;\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n    if (image.getWidth() > MAX_SIZE || image.getHeight() > MAX_SIZE) {\n        this.image = scale(image);\n    } else {\n        this.image = image;\n    }\n}\n", "CodeBleu_score": 60.38386133531854}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified)    this.source = source;\n    this.image = image;\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        this.image = ImageUtils.scaleImage(image, 128, 128);\n    }\n}", "CodeBleu_score": 61.54936161333833}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified)    if (lastModified < 0) {\n        lastModified = System.currentTimeMillis();\n    }\n    this.source = source;\n    this.lastModified = lastModified;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        this.image = ImageUtils.scaleImage(image, 128, 128);\n    } else {\n        this.image = image;\n    }\n}\n", "CodeBleu_score": 58.340735716611825}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending()    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            cacheEntry = future.get();\n            image = cacheEntry.getImage();\n            lastModified = cacheEntry.getLastModified();\n        } catch (Exception e) {\n            log.error(\"Error retrieving image from cache\", e);\n        }\n        future = null;\n    }\n    return true;\n}\n", "CodeBleu_score": 45.862125980127054}, {"code": "private synchronized boolean pending()    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            cacheEntry = future.get();\n            image = cacheEntry.image;\n            lastModified = cacheEntry.lastModified;\n            future = null;\n        } catch (Exception e) {\n            future = null;\n        }\n    }\n    return true;\n}\n", "CodeBleu_score": 49.45069113700006}, {"code": "private synchronized boolean pending()  if (future == null) {\n    return false;\n  }\n  if (future.isDone()) {\n    try {\n      CacheEntry entry = future.get();\n      if (entry != null) {\n        image = entry.getImage();\n        lastModified = entry.getLastModified();\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    } catch (ExecutionException e) {\n      // ignore\n    }\n    future = null;\n    return false;\n  }\n  return true;\n}\n", "CodeBleu_score": 55.09706415819957}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException        if (node instanceof Image) {\n            Image image = (Image) node;\n            byte[] imageData = image.getImageData();\n            if (imageData == null) {\n                imageData = image.getImageData(true);\n            }\n            if (imageData != null) {\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                ImageIO.write(image.getImageData(), \"png\", baos);\n                baos.flush();\n\n                rsp.setHeader(\"Cache-Control\", \"public, max-age=31536000\");\n                rsp.setHeader(\"Content-Type\", \"image/png\");\n                rsp.setHeader(\"Content-Disposition\", \"inline\");\n                rsp.setHeader(\"Content-Length\", String.valueOf(baos.size()));\n\n                rsp.serveFile(req, baos.toByteArray());\n            } else {\n                rsp.serveFile(req, image.getFile());\n            }\n        }\n    }\n", "CodeBleu_score": 41.67847758820261}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException        if (node instanceof AbstractProject) {\n            AbstractProject<?, ?> project = (AbstractProject<?, ?>) node;\n            if (project.hasPermission(Item.READ)) {\n                StaplerResponse original = Stapler.getCurrentResponse();\n                StaplerResponse wrapped = new StaplerResponseWrapper(original);\n                try {\n                    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                    BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_RGB);\n                    ImageIO.write(image, \"png\", baos);\n                    baos.flush();\n                    byte[] imageInByte = baos.toByteArray();\n                    baos.close();\n                    wrapped.setHeader(\"Cache-Control\", \"max-age=0, no-cache, no-store, must-revalidate\");\n                    wrapped.setHeader(\"Pragma\", \"no-cache\");\n                    wrapped.setHeader(\"Expires\", \"0\");\n                    wrapped.setContentType(\"image/png\");\n                    wrapped.setContentLength(imageInByte.length);\n                    wrapped.getOutputStream().write(imageInByte);\n                } finally {\n                    wrapped.getOutputStream().close();\n                }\n            }\n        }\n    }\n", "CodeBleu_score": 41.09040112250666}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException        rsp.setContentType(\"image/png\");\n        rsp.setHeader(\"Cache-Control\", \"max-age=0, no-cache, no-store\");\n        rsp.setHeader(\"Pragma\", \"no-cache\");\n        rsp.setDateHeader(\"Expires\", 0);\n\n        ByteArrayOutputStream b = new ByteArrayOutputStream();\n        try {\n            ImageIO.write(image, \"png\", b);\n        } finally {\n            if (flush) {\n                b.flush();\n            }\n        }\n        rsp.getOutputStream().write(b.toByteArray());\n    }\n", "CodeBleu_score": 49.42409395789841}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator)        this.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n\n        if (enableCache) {\n            cache = CacheBuilder.newBuilder()\n                    .expireAfterWrite(teamCacheDuration, TimeUnit.MINUTES)\n                    .expireAfterAccess(teamCacheDuration, TimeUnit.MINUTES)\n                    .build();\n\n            cacheRepositories = CacheBuilder.newBuilder()\n                    .expireAfterWrite(repositoriesCacheDuration, TimeUnit.MINUTES)\n                    .expireAfterAccess(repositoriesCacheDuration, TimeUnit.MINUTES)\n                    .build();\n        }\n\n        HttpClientBuilder builder = HttpClientBuilder.create();\n\n        builder.setKeepAliveStrategy(new DefaultConnectionKeepAliveStrategy());\n\n        PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();\n        connectionManager.setMaxTotal(20);\n        connectionManager.setDefaultMaxPerRoute(20);\n        builder.setConnectionManager(connectionManager);\n\n        builder.setRetryHandler(new DefaultHttpRequestRetryHandler(3, true));\n\n        if (authenticator != null) {\n            authenticator.configure(builder, new BasicHttpContext());\n        }\n\n        builder.setProxy(ProxySelector.getDefault());\n\n        httpClient = builder.build();\n    }", "CodeBleu_score": 46.223404470907816}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator)        this.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n\n        if (enableCache) {\n            this.cache = new Cache<String, Object>();\n            this.cache.setExpireAfterWrite(teamCacheDuration, TimeUnit.MINUTES);\n            this.cache.setExpireAfterWrite(repositoriesCacheDuration, TimeUnit.MINUTES);\n        }\n\n        HttpClientBuilder clientBuilder = HttpClientBuilder.create();\n        clientBuilder.setKeepAliveStrategy(new DefaultConnectionKeepAliveStrategy());\n        clientBuilder.setConnectionManager(new PoolingHttpClientConnectionManager());\n        clientBuilder.setRetryHandler(new DefaultHttpRequestRetryHandler(0, false));\n\n        if (authenticator != null) {\n            authenticator.configure(clientBuilder, context);\n        }\n\n        clientBuilder.setProxy(clientProxy);\n        this.client = clientBuilder.build();\n    }", "CodeBleu_score": 52.866477093602306}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator)        this.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n        this.client = HttpClients.custom()\n                .setKeepAliveStrategy(new DefaultConnectionKeepAliveStrategy())\n                .setConnectionManager(new PoolingHttpClientConnectionManager())\n                .setRetryHandler(new DefaultHttpRequestRetryHandler(0, false))\n                .build();\n\n        if (authenticator != null) {\n            this.client = authenticator.configureClient(client);\n            this.context = authenticator.configureContext(context);\n        }\n\n        this.client.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY,\n                new HttpHost(System.getProperty(\"http.proxyHost\", \"\"),\n                        Integer.parseInt(System.getProperty(\"http.proxyPort\", \"80\"))));\n    }\n\n    /**\n     * This method retrieves the team members from the Bitbucket Cloud API. It builds the URL for the team members endpoint and sends a GET request to the API. It parses the response JSON to a list of team members and returns the list.\n     *\n     * @return a list of team members\n     * @throws IOException if there is an error sending the request or parsing the response\n     */\n    public List<TeamMember> getTeamMembers() throws IOException {\n        String url = String.format(TEAM_MEMBERS_URL, owner, projectKey, repositoryName);\n\n        HttpGet request = new HttpGet(url);\n        HttpResponse response = client.execute(request, context);\n\n        String json = EntityUtils.toString(response.getEntity());\n        ObjectMapper mapper = new ObjectMapper();\n        return mapper.readValue(json, new TypeReference<List<TeamMember>>() {\n        });\n    }\n\n    /**\n     * This method retrieves the repositories from the Bitbucket Cloud API. It builds the URL for the repositories endpoint and sends a GET request to the API.", "CodeBleu_score": 41.69915649870168}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest)    def sourceBranch = pullRequest.source.branch.name\n    def destinationBranch = pullRequest.destination.branch.name\n\n    if (sourceBranch) {\n        def sourceBranchNode = getBranchNode(sourceBranch)\n        if (sourceBranchNode) {\n            pullRequest.source.branch.commitClosure = new CommitClosure(sourceBranchNode)\n        }\n    }\n\n    if (destinationBranch) {\n        def destinationBranchNode = getBranchNode(destinationBranch)\n        if (destinationBranchNode) {\n            pullRequest.destination.branch.commitClosure = new CommitClosure(destinationBranchNode)\n        }\n    }\n}\n", "CodeBleu_score": 18.257415011001942}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest)    String sourceBranchName = pullRequest.getSourceBranchName()\n    String destinationBranchName = pullRequest.getDestinationBranchName()\n\n    if (sourceBranchName) {\n        def sourceBranch = getBranch(sourceBranchName)\n        if (sourceBranch) {\n            def sourceCommitClosure = new CommitClosure(sourceBranch.rawNode)\n            pullRequest.setSourceCommitClosure(sourceCommitClosure)\n        }\n    }\n\n    if (destinationBranchName) {\n        def destinationBranch = getBranch(destinationBranchName)\n        if (destinationBranch) {\n            def destinationCommitClosure = new CommitClosure(destinationBranch.rawNode)\n            pullRequest.setDestinationCommitClosure(destinationCommitClosure)\n        }\n    }\n}\n", "CodeBleu_score": 30.255164367630734}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest)    def sourceBranch = pullRequest.source.branch\n    if (sourceBranch) {\n        def sourceBranchNode = getBranchNode(sourceBranch.name)\n        if (sourceBranchNode) {\n            sourceBranch.commitClosure = new CommitClosure(sourceBranchNode)\n        }\n    }\n\n    def destBranch = pullRequest.destination.branch\n    if (destBranch) {\n        def destBranchNode = getBranchNode(destBranch.name)\n        if (destBranchNode) {\n            destBranch.commitClosure = new CommitClosure(destBranchNode)\n        }\n    }\n}\n", "CodeBleu_score": 24.723757734252636}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build)    JenkinsLocationConfiguration jenkinsLocationConfiguration = JenkinsLocationConfiguration.get();\n    URL url = jenkinsLocationConfiguration.getUrl();\n    if (jenkinsLocationConfiguration == null || url == null) {\n        throw new IllegalStateException(\"Jenkins location configuration is not set up\");\n    }\n    return DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 57.59514074675689}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build)    JenkinsLocationConfiguration config = JenkinsLocationConfiguration.get();\n    if (config == null) {\n        throw new IllegalStateException(\"Jenkins location configuration is not set\");\n    }\n    URL url = config.getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\"Jenkins location URL is not set\");\n    }\n    return DisplayURLProvider.get().getRunURL(url, build);\n}\n", "CodeBleu_score": 63.23003649261991}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build)    JenkinsLocationConfiguration jenkinsLocationConfiguration = JenkinsLocationConfiguration.get();\n    if (jenkinsLocationConfiguration == null) {\n        throw new IllegalStateException(\"Jenkins location configuration is not set.\");\n    }\n    URL url = jenkinsLocationConfiguration.getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\"Jenkins location URL is not set.\");\n    }\n    return DisplayURLProvider.get().getRunURL(url, build);\n}\n", "CodeBleu_score": 60.94197618816397}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket)     try {\n        URI uri = new URI(url);\n        String host = uri.getHost();\n        if (host.equals(\"localhost\") || host.equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"Jenkins URL is not set\");\n        }\n        if (bitbucket instanceof BitbucketCloudApiClient) {\n            if (!host.contains(\".\")) {\n                throw new IllegalStateException(\"Jenkins URL is not fully qualified\");\n            }\n        }\n        return url;\n    } catch (URISyntaxException e) {\n        throw new IllegalStateException(\"Jenkins URL is malformed\");\n    }\n}\n", "CodeBleu_score": 52.17765653454912}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket)   try  {\n    URL parsedUrl=new URL(url);\n    if (parsedUrl.getHost().equals(\"localhost\") || parsedUrl.getHost().equals(\"unconfigured-jenkins-location\"))   {\n      throw new IllegalStateException(\"Jenkins URL is not set correctly. Please check your Jenkins configuration.\");\n    }\n    if (bitbucket instanceof BitbucketCloudApi) {\n      if (!parsedUrl.getHost().contains(\".\")) {\n        throw new IllegalStateException(\"Jenkins URL is not set correctly. Please check your Jenkins configuration.\");\n      }\n    }\n    return url;\n  }\n catch (  MalformedURLException e) {\n    throw new IllegalStateException(\"Jenkins URL is not set correctly. Please check your Jenkins configuration.\");\n  }\n}", "CodeBleu_score": 56.41263047949544}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket)   try {\n    URI uri=new URI(url);\n    if (uri.getHost() == null || uri.getHost().equals(\"localhost\") || uri.getHost().equals(\"unconfigured-jenkins-location\")) {\n      throw new IllegalStateException(\"URL is malformed\");\n    }\n    if (bitbucket instanceof BitbucketCloudApi) {\n      if (!uri.getHost().contains(\".\")) {\n        throw new IllegalStateException(\"URL is malformed\");\n      }\n    }\n    return url;\n  }\n catch (  URISyntaxException e) {\n    throw new IllegalStateException(\"URL is malformed\");\n  }\n}", "CodeBleu_score": 54.11161693765546}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException        BitbucketContext context = new BitbucketContext(source, build, listener);\n        if (context.isNotificationsDisabled()) {\n            return;\n        }\n\n        Revision revision = build.getAction(RevisionAction.class).getRevision();\n        String revisionHash = revision.getSha1String();\n\n        boolean shareBuildKey = context.isShareBuildKeyBetweenBranchAndPR();\n        String revisionType = context.getRevisionType(revision);\n\n        listener.getLogger().println(\"Sending \" + revisionType + \" notification to Bitbucket\");\n\n        String buildKey = context.getBuildKey(revisionHash, shareBuildKey);\n        BitbucketClient client = context.newClientBuilder().build();\n\n        BuildStatusNotification notification = new BuildStatusNotification(\n                buildKey,\n                context.getBuildState(build),\n                context.getBuildName(build),\n                context.getBuildUrl(build),\n                context.getBuildDescription(build)\n        );\n        client.createBuildStatus(notification);\n    }", "CodeBleu_score": 37.77354263732121}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException    BitbucketBuildStatusNotifierContext context = new BitbucketBuildStatusNotifierContext(build, listener);\n\n    if (!context.isNotificationsEnabled()) {\n        listener.getLogger().println(\"Build notifications are disabled. Skipping...\");\n        return;\n    }\n\n    String revision = context.getRevision();\n    String revisionHash = context.getRevisionHash();\n\n    if (revision == null || revisionHash == null) {\n        listener.getLogger().println(\"Could not retrieve SCM revision. Skipping...\");\n        return;\n    }\n\n    boolean shareBuildKey = context.shouldShareBuildKey();\n    String buildKey = context.getBuildKey();\n\n    if (revision.startsWith(\"refs/heads/\")) {\n        listener.getLogger().println(\"Sending build status notification for branch...\");\n    } else if (revision.startsWith(\"refs/pull-requests/\")) {\n        listener.getLogger().println(\"Sending build status notification for pull request...\");\n    } else {\n        listener.getLogger().println(\"Unsupported SCM revision type. Skipping...\");\n        return;\n    }\n\n    BitbucketClient client = new BitbucketClient(source, context, listener);\n\n    BitbucketBuildStatusNotification notification = new BitbucketBuildStatusNotification(\n            context.getBuildState(),\n            context.getBuildKey(),\n            context.getBuildName(),\n            context.getBuildUrl(),\n            context.getBuildDescription(),\n            context.getRevision(),\n            context.getRevisionHash(),\n            context.getRevisionUrl(),\n            context.getRevisionDescription(),\n            context.getRevisionAuthorName(),\n            context.getRevisionAuthorAvatarUrl(),\n            context.getRevisionAuthorUrl()\n    );\n\n    client.createBuildStatus(notification);\n}\n", "CodeBleu_score": 36.22540260510674}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException    BitbucketContext bitbucketContext = new BitbucketContext(source, build, listener);\n    if (bitbucketContext.isNotificationsDisabled()) {\n        return;\n    }\n\n    String revision = bitbucketContext.getRevision();\n    String revisionHash = bitbucketContext.getRevisionHash();\n\n    boolean shareBuildKey = bitbucketContext.isShareBuildKey();\n    String buildKey = bitbucketContext.getBuildKey();\n\n    if (revision.startsWith(BitbucketSCM.BRANCH_PREFIX)) {\n        listener.getLogger().println(\"Sending build status notification for branch\");\n        buildKey = shareBuildKey ? buildKey : revision;\n    } else if (revision.startsWith(BitbucketSCM.PR_PREFIX)) {\n        listener.getLogger().println(\"Sending build status notification for PR\");\n        buildKey = shareBuildKey ? buildKey : revisionHash;\n    } else {\n        listener.getLogger().println(\"Sending build status notification for commit\");\n        buildKey = shareBuildKey ? buildKey : revisionHash;\n    }\n\n    BitbucketClient bitbucketClient = new BitbucketClient(bitbucketContext);\n\n    BuildStatusNotification notification = new BuildStatusNotification(bitbucketContext, buildKey);\n    bitbucketClient.createBuildStatus(notification);\n}\n", "CodeBleu_score": 35.18844170438202}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR)    if (shareBuildKeyBetweenBranchAndPR) {\n        return build.getParent().getFullName() + \"-\" + branch;\n    } else {\n        return build.getFullDisplayName();\n    }\n}", "CodeBleu_score": 28.763102577659794}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR)    String key;\n    if (shareBuildKeyBetweenBranchAndPR) {\n        key = build.getParent().getFullName() + \"/\" + branch;\n    } else {\n        key = build.getParent().getFullName();\n    }\n    return key;\n}", "CodeBleu_score": 60.30726574178416}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR)    if (shareBuildKeyBetweenBranchAndPR) {\n        return build.getParent().getFullName() + \"/\" + branch;\n    } else {\n        return build.getFullDisplayName();\n    }\n}", "CodeBleu_score": 28.77630860441589}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException    if (serverUrl == null) {\n        serverUrl = BitbucketSCMNavigator.DEFAULT_SERVER_URL;\n    }\n    if (traits == null) {\n        traits = new BitbucketSCMNavigatorTraits();\n        traits.setRepoOwner(repoOwner);\n        traits.setCredentialsId(credentialsId);\n        traits.setProjectName(projectName);\n        traits.setBranch(branch);\n        traits.setDiscoverBranches(discoverBranches);\n        traits.setDiscoverTags(discoverTags);\n        traits.setCloneByHttp(cloneByHttp);\n        traits.setTag(tag);\n        traits.setRepoName(repoName);\n        traits.setManualCredentials(manualCredentials);\n        traits.setAutoCloseEnabled(autoCloseEnabled);\n        traits.setSubmoduleUpdate(submoduleUpdate);\n        traits.setUseSubmodules(useSubmodules);\n        traits.setDoGenerateSubmoduleConfigurations(doGenerateSubmoduleConfigurations);\n        traits.setBrowser(browser);\n        traits.setGitTool(gitTool);\n        traits.setSshPort(sshPort);\n        traits.setUseSshProtocol(useSshProtocol);\n        traits.setSshCredentialsId(sshCredentialsId);\n        traits.setGitConfigName(gitConfigName);\n        traits.setGitConfigEmail(gitConfigEmail);\n        traits.setGitConfigCredentialsId(gitConfigCredentialsId);\n        traits.setGitTool(gitTool);\n        traits.setExtensions(extensions);\n        traits.setSkipTag(skipTag);\n        traits.setSkipTagWithRef(skipTagWithRef);\n        traits.setInvertFilter(invertFilter);\n        traits.setExcludedRegions(excludedRegions);\n        traits.setIncludedRegions(includedRegions);\n        traits.setExcludedUsers(excludedUsers);\n        traits.setExcludedCommitMessages(excludedCommitMessages);\n        traits.setExcludedRevprop(excludedRevprop);\n        traits.setExcludedPaths(excludedPaths);\n        traits.setExcluded", "CodeBleu_score": 24.649825645680373}, {"code": "private Object readResolve() throws ObjectStreamException    if (serverUrl == null) {\n        serverUrl = BitbucketSCMNavigator.DEFAULT_SERVER_URL;\n    }\n    if (traits == null) {\n        if (credentialsId != null) {\n            traits = new BitbucketSCMNavigatorTraits(true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false,", "CodeBleu_score": 12.330232619326335}, {"code": "private Object readResolve() throws ObjectStreamException    if (serverUrl == null) {\n        serverUrl = getBitbucketServerUrl()\n        if (serverUrl == null) {\n            LOGGER.warning(\"Failed to resolve Bitbucket Server URL from the navigator configuration.\")\n        }\n    }\n    if (traits == null) {\n        traits = new BitbucketSCMNavigatorTraits(serverUrl, credentialsId, project, repository, serverUrl, null, null, null, null)\n    }\n    return this\n}\n", "CodeBleu_score": 15.59956088351483}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch)    var repo = getRepository(name);\n    if (isMatch) {\n        LOGGER.info(\"Repository '{}' is proposed\", repo);\n        count++;\n    } else {\n        LOGGER.info(\"Repository '{}' is ignored\", repo);\n    }\n}", "CodeBleu_score": 37.20334036421092}, {"code": "public void record(@NonNull String name, boolean isMatch)    Repository repository = this.repositoryService.getByName(name);\n    if (isMatch) {\n        LOG.info(\"Repository '{}' is proposed\", name);\n        this.count++;\n    } else {\n        LOG.info(\"Repository '{}' is ignored\", name);\n    }\n}", "CodeBleu_score": 45.95857145083221}, {"code": "public void record(@NonNull String name, boolean isMatch)    BitbucketRepository repository = getRepository(name);\n    if (repository == null) {\n        return;\n    }\n    if (isMatch) {\n        LOGGER.info(\"Proposed {}\", repository);\n        count++;\n    } else {\n        LOGGER.info(\"Ignored {}\", repository);\n    }\n}", "CodeBleu_score": 42.02776917022601}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException\n    if (marked != null) {\n        // We've already marked this revision, so we don't need to do it again.\n        return marked;\n    }\n\n    if (rev == null) {\n        // No revision was given, so we can't do anything.\n        return null;\n    }\n\n    // Check if the revision is a branch with a hash.\n    if (rev.getType() == Revision.Type.BRANCH && rev.getBranch().contains(\"-\")) {\n        // Get the branch name and hash.\n        String branchName = rev.getBranch().split(\"-\")[0];\n        String branchHash = rev.getBranch().split(\"-\")[1];\n\n        // Check if the branch hash exists locally.\n        if (git.revParse(branchHash) == null) {\n            // The branch hash doesn't exist locally, so we need to fetch it.\n            // Create a RefSpec for the branch hash.\n            RefSpec refSpec = new RefSpec(\"+refs/heads/\" + rev.getBranch() + \":refs/remotes/origin/\" + rev.getBranch());\n\n            // Fetch the branch hash from the remote repository.\n            git.fetch(scm.getRepositories(), listener, refSpec);\n        }\n    }\n\n    // Return the given revision.\n    return rev;\n}\n", "CodeBleu_score": 33.73352425163565}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException\n    // Check if the revision is a branch with a hash\n    if (marked != null && rev instanceof Branch && marked.getSha1().equals(rev.getSha1())) {\n        String branchName = rev.getDisplayName();\n        String branchRef = \"+refs/heads/\" + branchName;\n\n        // Check if the branch exists locally\n        if (git.revParse(branchRef) == null) {\n            // Create a RefSpec for the branch\n            RefSpec refSpec = new RefSpec(branchRef);\n\n            // Fetch the missing commits from the remote repository\n            git.fetch(scm.getUserRemoteConfigs(), scm.getRefspecs(), scm.getGitTool(), listener, null, null, null, null, null, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false,", "CodeBleu_score": 22.807629222313754}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException    if (marked == null) {\n        return rev;\n    }\n    String branch = marked.getBranch();\n    String hash = marked.getSha1String();\n    if (branch != null && hash != null) {\n        List<RefSpec> refSpecs = new ArrayList<>();\n        List<String> missingCommits = new ArrayList<>();\n        for (Revision r : scm.getBranches().getRevisions(git)) {\n            if (r.getBranch().equals(branch) && !r.getSha1String().equals(hash)) {\n                refSpecs.add(new RefSpec(\"+refs/heads/\" + r.getBranch() + \":\" + r.getBranch()));\n                missingCommits.add(r.getSha1String());\n            }\n        }\n        if (!refSpecs.isEmpty()) {\n            listener.getLogger().println(\"Fetching missing commits \" + missingCommits + \" from \" + scm.getUserRemoteConfigs().get(0).getUrl());\n            git.fetch(scm.getUserRemoteConfigs().get(0), refSpecs, listener);\n        }\n    }\n    return marked;\n}", "CodeBleu_score": 35.86295487169554}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks()    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().get(0));\n    }\n    return result;\n}", "CodeBleu_score": 69.47252700408676}, {"code": "public Map<String, BitbucketHref> getLinks()    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().get(0));\n    }\n    return result;\n}", "CodeBleu_score": 67.03776497582548}, {"code": "public Map<String, BitbucketHref> getLinks()    Map<String, BitbucketHref> links = super.getLinks();\n    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n    for (Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        List<BitbucketHref> hrefs = entry.getValue();\n        if (hrefs != null && !hrefs.isEmpty()) {\n            result.put(entry.getKey(), hrefs.get(0));\n        }\n    }\n    return result;\n}", "CodeBleu_score": 57.093650289952315}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[])  if (resourceStates.length === 0) {\n    return;\n  }\n\n  const repositoryMap = new Map<string, SourceControlResourceState[]>();\n\n  for (const resourceState of resourceStates) {\n    const uri = resourceState.resourceUri;\n    const repository = uri.repository;\n\n    if (!repositoryMap.has(repository.rootUri.toString())) {\n      repositoryMap.set(repository.rootUri.toString(), []);\n    }\n\n    repositoryMap.get(repository.rootUri.toString())?.push(resourceState);\n  }\n\n  for (const [repositoryUri, resourceStates] of repositoryMap) {\n    const repository = this.getRepository(repositoryUri);\n    if (!repository) {\n      continue;\n    }\n\n    const filePaths = resourceStates.map((resourceState) => {\n      const uri = resourceState.resourceUri;\n      return this.getFilePath(uri);\n    });\n\n    try {\n      await repository.add(filePaths);\n    } catch (error) {\n      this.logger.error(error);\n      this.notificationService.showError(`Failed to add files to repository: ${error}`);\n    }\n  }\n}", "CodeBleu_score": 44.88290303175568}, {"code": "public async execute(...resourceStates: SourceControlResourceState[])  const selectedResourceStates = resourceStates.filter(\n    (resourceState) => resourceState.selected\n  );\n\n  if (!selectedResourceStates.length) {\n    return;\n  }\n\n  const resourceUris = selectedResourceStates.map(\n    (resourceState) => resourceState.resourceUri\n  );\n\n  const resourceUrisByRepository = await this.getResourceUrisByRepository(\n    resourceUris\n  );\n\n  for (const [repository, resourceUris] of resourceUrisByRepository.entries()) {\n    const filePaths = await this.getFilePathsFromResourceUris(resourceUris);\n\n    try {\n      await this.addFilesToRepository(repository, filePaths);\n    } catch (error) {\n      console.error(error);\n      this.showErrorMessage(error);\n    }\n  }\n}", "CodeBleu_score": 47.441062342447324}, {"code": "public async execute(...resourceStates: SourceControlResourceState[])  // Return if no resource states are selected\n  if (resourceStates.length === 0) {\n    return;\n  }\n\n  // Map selected resources to their URIs\n  const uris = resourceStates.map((resourceState) => resourceState.resourceUri);\n\n  // Process each repository\n  const repositoryMap = new Map<string, string[]>();\n  for (const uri of uris) {\n    const repository = await this.getRepository(uri);\n    if (!repositoryMap.has(repository)) {\n      repositoryMap.set(repository, []);\n    }\n    const filePath = await this.getFilePath(uri);\n    repositoryMap.get(repository)!.push(filePath);\n  }\n\n  // Add files to each repository\n  for (const [repository, filePaths] of repositoryMap) {\n    try {\n      await this.addFiles(repository, filePaths);\n    } catch (error) {\n      console.error(error);\n      this.showErrorMessage(`Failed to add files to repository ${repository}.`);\n    }\n  }\n}", "CodeBleu_score": 47.8229726882555}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates  if (this.resourceStates.length === 0 || !(this.resourceStates[0] instanceof Uri)) {\n    const scmResource = await this.getSingleScmResource();\n    if (scmResource) {\n      this.resourceStates = [scmResource];\n    }\n  }\n\n  return this.resourceStates.filter((resourceState) => resourceState instanceof Resource);\n}", "CodeBleu_score": 29.288793035129036}, {"code": "protected async getResourceStates    if (this.resourceStates.length === 0 || !(this.resourceStates[0].resourceUri instanceof Uri)) {\n        const scmResource = await this.getSingleScmResource();\n        this.resourceStates = [scmResource];\n    }\n\n    return this.resourceStates.filter(resourceState => resourceState instanceof Resource);\n}\n", "CodeBleu_score": 30.096716530255474}, {"code": "protected async getResourceStates    if (this.resourceStates.length === 0 || !(this.resourceStates[0] instanceof Uri)) {\n        // Get single SCM resource\n        const scmResource = await this.getScmResource();\n        if (scmResource) {\n            this.resourceStates = [scmResource];\n        }\n    }\n\n    // Filter out non-resource URIs\n    return this.resourceStates.filter(resource => resource instanceof Resource);\n}", "CodeBleu_score": 30.392992881939445}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>    if (!uri) {\n      const activeEditor = window.activeTextEditor;\n      if (!activeEditor) {\n        return undefined;\n      }\n      uri = activeEditor.document.uri;\n    }\n    if (uri.scheme === 'svn') {\n      uri = Uri.file(uri.fsPath);\n    }\n    const scm = this.getSCM();\n    if (!scm) {\n      return undefined;\n    }\n    const repository = scm.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n    return repository.getResource(uri);\n  }\n\n  /**\n   * This function retrieves the source control management (SCM) provider for a given URI. If no URI is provided, it uses the URI of the active text editor. If the URI is in the \"svn\" scheme, it converts it to a file URI. For file URIs, it gets the source control manager and retrieves the provider for the URI, returning the corresponding provider. If no valid URI or provider is found, it returns undefined.\n   */\n  protected getSCMProvider(uri?: Uri): Provider | undefined {\n    if (!uri) {\n      const activeEditor = window.activeTextEditor;\n      if (!activeEditor) {\n        return undefined;\n      }\n      uri = activeEditor.document.uri;\n    }\n    if (uri.scheme === 'svn') {\n      uri = Uri.file(uri.fsPath);\n    }\n    const scm = this.getSCM();\n    if (!scm) {\n      return undefined;\n    }\n    return scm.getProvider(uri);\n  }\n\n  /**\n   * This function retrieves the source control management (SCM) provider for a given URI. If no URI is provided, it uses the URI of the active text editor. If the URI is in the \"svn\" scheme, it converts it to a file URI. For file URIs, it gets the source control manager and retrieves the provider for the URI, returning the corresponding provider. If no valid URI or provider is found, it returns undefined.\n   */\n  protected getSCM(): SCM | undefined {\n    const scm =", "CodeBleu_score": 49.72057365818734}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>    if (!uri) {\n      const editor = window.activeTextEditor;\n      if (!editor) {\n        return undefined;\n      }\n      uri = editor.document.uri;\n    }\n\n    if (uri.scheme === 'svn') {\n      uri = uri.with({ scheme: 'file' });\n    }\n\n    const scm = this.getSCM();\n    if (!scm) {\n      return undefined;\n    }\n\n    const repository = await scm.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n\n    return repository.getResource(uri);\n  }\n\n  /**\n   * This async function retrieves the source control management (SCM) provider for the workspace. If the provider is not found or the provider's state is not \"initialized\", it returns undefined.\n   */\n  protected async getSCM(): Promise<SCMProvider | undefined> {\n    const scm = workspace.getExtension<SCMProvider>('vscode.git');\n    if (!scm) {\n      return undefined;\n    }\n\n    const state = await scm.state;\n    if (state !== 'initialized') {\n      return undefined;\n    }\n\n    return scm;\n  }\n}", "CodeBleu_score": 48.089523165396976}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>    if (!uri) {\n      const editor = window.activeTextEditor;\n      if (editor) {\n        uri = editor.document.uri;\n      }\n    }\n\n    if (uri) {\n      if (uri.scheme === \"svn\") {\n        uri = Uri.file(uri.path);\n      }\n\n      if (uri.scheme === \"file\") {\n        const scm = this.scmService.getSCM(uri);\n        if (scm) {\n          const repository = scm.getRepository(uri);\n          if (repository) {\n            return repository.getResource(uri);\n          }\n        }\n      }\n    }\n\n    return undefined;\n  }", "CodeBleu_score": 45.557151582409425}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange)    const repo = await this.getRemoteRepo(element);\n    if (repo) {\n        if (element.type === 'modified') {\n            const cmd = `svn diff --diff-cmd ${this.diffCmd} ${repo.url}/${element.oldPath}@${element.oldRevision} ${repo.url}/${element.path}@${element.revision}`;\n            await this.execCmd(cmd);\n        } else if (element.type === 'added') {\n            const cmd = `svn cat --diff-cmd ${this.diffCmd} ${repo.url}/${element.path}@${element.revision}`;\n            await this.execCmd(cmd);\n        }\n    }\n}", "CodeBleu_score": 38.948275811327605}, {"code": " public async openDiffCmd(element: ISvnPathChange)  const repo = await this.getRemoteRepo(element);\n  const cmd = repo.getDiffCmd(element.oldPath, element.newPath, element.oldRevision, element.newRevision);\n  await this.executeCmd(cmd);\n}\n", "CodeBleu_score": 35.15597476509629}, {"code": " public async openDiffCmd(element: ISvnPathChange)  const remoteRepo = await this.getRemoteRepo(element);\n  if (remoteRepo) {\n    if (element.type === 'modified') {\n      const diffCmd = remoteRepo.getDiffCmd(element.oldPath, element.oldRevision, element.newPath, element.newRevision);\n      this.executeCommand(diffCmd);\n    } else if (element.type === 'added') {\n      const diffCmd = remoteRepo.getDiffCmd(element.newPath, element.newRevision);\n      this.executeCommand(diffCmd);\n    }\n  }\n}", "CodeBleu_score": 39.42611560209117}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem)  if (!navigator.clipboard) {\n    vscode.window.showErrorMessage('Clipboard not supported');\n    return;\n  }\n\n  if (item instanceof CommitTreeItem) {\n    const commit = item.commit;\n    let text: string;\n\n    if (what === 'message') {\n      text = commit.message;\n    } else if (what === 'revision') {\n      text = commit.revision;\n    } else if (what === 'message_and_revision') {\n      text = `${commit.message}\\n\\n${commit.revision}`;\n    } else {\n      return;\n    }\n\n    await navigator.clipboard.writeText(text);\n  }\n}", "CodeBleu_score": 37.16351889769565}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem)  if (!navigator.clipboard) {\n    vscode.window.showErrorMessage('Clipboard API is not supported in this browser');\n    return;\n  }\n\n  if (item instanceof CommitTreeItem) {\n    const commit = item.commit;\n    if (what === 'message') {\n      await navigator.clipboard.writeText(commit.message);\n    } else {\n      await navigator.clipboard.writeText(commit.revision);\n    }\n  }\n}", "CodeBleu_score": 37.809820369495874}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem)    if (!navigator.clipboard) {\n        vscode.window.showErrorMessage('Clipboard is not supported in this browser.');\n        return;\n    }\n\n    if (item.type === 'commit') {\n        if (what === 'message') {\n            await navigator.clipboard.writeText(item.commit.message);\n        } else if (what === 'revision') {\n            await navigator.clipboard.writeText(item.commit.revision);\n        }\n    }\n}", "CodeBleu_score": 31.29113904269619}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException  GiteaConnectionFactory[] factories = GiteaConnectionFactory.getFactories();\n  Arrays.sort(factories, new Comparator<GiteaConnectionFactory>() {\n    public int compare(GiteaConnectionFactory o1, GiteaConnectionFactory o2) {\n      return o2.getPriority() - o1.getPriority();\n    }\n  });\n  for (GiteaConnectionFactory factory : factories) {\n    GiteaConnection connection = factory.open(this);\n    if (connection != null) {\n      return connection;\n    }\n  }\n  throw new IOException(\"Unable to open Gitea connection\");\n}", "CodeBleu_score": 31.975660986523135}, {"code": "public GiteaConnection open() throws IOException, InterruptedException    List<GiteaConnectionFactory> factories = GiteaConnectionFactory.all();\n    factories.sort(Comparator.comparing(GiteaConnectionFactory::priority));\n    for (GiteaConnectionFactory factory : factories) {\n        if (factory.canOpenConnection(this)) {\n            return factory.openConnection(this);\n        }\n    }\n    throw new IOException(\"Cannot open a connection to \" + this);\n}", "CodeBleu_score": 23.850249923139096}, {"code": "public GiteaConnection open() throws IOException, InterruptedException  for (GiteaConnectionFactory factory : GiteaConnectionFactory.getFactories()) {\n    if (factory.canOpen(this)) {\n      return factory.open(this);\n    }\n  }\n  throw new IOException(\"Cannot open connection\");\n}", "CodeBleu_score": 14.36247101632991}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader()    Jenkins jenkins = Jenkins.getInstance();\n    if (jenkins != null) {\n        PluginManager pluginManager = jenkins.getPluginManager();\n        if (pluginManager != null) {\n            gitea.setClassLoader(pluginManager.uberClassLoader);\n        }\n    } else {\n        gitea.setClassLoader(getClass().getClassLoader());\n    }\n    return gitea;\n}", "CodeBleu_score": 36.82762586845753}, {"code": "public Gitea jenkinsPluginClassLoader()    Jenkins jenkins = Jenkins.getInstance();\n    if (jenkins != null) {\n        PluginManager pluginManager = jenkins.getPluginManager();\n        ClassLoader classLoader = pluginManager.getClassLoader();\n        gitea.setClassLoader(classLoader);\n    } else {\n        gitea.setClassLoader(getClass().getClassLoader());\n    }\n    return gitea;\n}", "CodeBleu_score": 41.48100109072312}, {"code": "public Gitea jenkinsPluginClassLoader()    Jenkins jenkins = Jenkins.getInstance();\n    if (jenkins != null) {\n        PluginManager pluginManager = jenkins.getPluginManager();\n        ClassLoader classLoader = pluginManager.getClassLoader();\n        gitea.setClassLoader(classLoader);\n    } else {\n        ClassLoader classLoader = getClass().getClassLoader();\n        gitea.setClassLoader(classLoader);\n    }\n    return gitea;\n}", "CodeBleu_score": 44.69606360517802}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl)     this.displayName = displayName != null ? displayName : serverUrl;\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    this.credentialsId = credentialsId;\n    this.aliasUrl = normalizeAliasUrl(aliasUrl);\n}\n", "CodeBleu_score": 31.19265153432469}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl)     this.displayName = displayName != null ? displayName : serverUrl;\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    this.credentialsId = credentialsId;\n    this.aliasUrl = normalizeAliasUrl(aliasUrl);\n}\n", "CodeBleu_score": 31.19265153432469}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl)     this.displayName = displayName != null ? displayName : serverUrl;\n    this.serverUrl = normalizeGiteaServerUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    if (manageHooks) {\n        this.credentialsId = credentialsId;\n    }\n    this.aliasUrl = aliasUrl != null ? aliasUrl.trim() : null;\n}\n", "CodeBleu_score": 34.52487546967062}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl)    ListBoxModel result = new ListBoxModel();\n    if (hasAdministrativePermissions()) {\n        serverUrl = normalizeServerUrl(serverUrl);\n        if (serverUrl != null) {\n            for (Credentials c : CredentialsProvider.lookupCredentials(\n                    StandardUsernamePasswordCredentials.class,\n                    Jenkins.getInstance(),\n                    ACL.SYSTEM,\n                    Collections.<DomainRequirement>emptyList())) {\n                StandardUsernamePasswordCredentials creds = (StandardUsernamePasswordCredentials) c;\n                String credentialsId = creds.getId();\n                String description = creds.getDescription() != null ? creds.getDescription() : creds.getId();\n                if (credentialsId != null && credentialsId.length() > 0) {\n                    if (creds instanceof GiteaAuth) {\n                        GiteaAuth giteaAuth = (GiteaAuth) creds;\n                        if (giteaAuth.getServerUrl() != null && giteaAuth.getServerUrl().length() > 0) {\n                            if (serverUrl.equals(giteaAuth.getServerUrl())) {\n                                result.add(credentialsId, description);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return result;\n}\n", "CodeBleu_score": 34.608483937362436}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl)    if (Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n        ListBoxModel items = new ListBoxModel();\n\n        // Normalize the server URL\n        String normalizedServerUrl = normalizeServerUrl(serverUrl);\n\n        // Include matching credentials based on the server URL requirements\n        for (StandardUsernamePasswordCredentials credentials : CredentialsProvider.lookupCredentials(StandardUsernamePasswordCredentials.class, Jenkins.get(), ACL.SYSTEM, new SchemeRequirement(\"http\"))) {\n            if (credentials.getId().startsWith(normalizedServerUrl)) {\n                items.add(credentials.getId());\n            }\n        }\n\n        // Include credentials based on authentication tokens for GiteaAuth\n        for (GiteaAuth auth : GiteaAuth.getAll()) {\n            String tokenId = auth.getTokenId();\n            if (tokenId != null && tokenId.startsWith(normalizedServerUrl)) {\n                items.add(tokenId);\n            }\n        }\n\n        return items;\n    } else {\n        return new ListBoxModel();\n    }\n}\n", "CodeBleu_score": 42.71914631873411}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl)    if (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n        return new ListBoxModel();\n    }\n\n    String normalizedServerUrl = normalizeServerUrl(serverUrl);\n    ListBoxModel result = new ListBoxModel();\n\n    if (serverUrl == null) {\n        result.add(new ListBoxModel.Option(\"\", \"\"));\n    } else {\n        result.add(new ListBoxModel.Option(serverUrl, \"\"));\n    }\n\n    for (GiteaAuth auth : GiteaAuth.getAll()) {\n        if (auth.getServerUrl().equals(normalizedServerUrl) && auth.getAuthenticationToken() != null) {\n            result.add(new ListBoxModel.Option(auth.getAuthenticationToken(), auth.getAuthenticationToken()));\n        }\n    }\n\n    return result;\n}\n", "CodeBleu_score": 40.59077488021309}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl)    if (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme().toLowerCase();\n        int port = uri.getPort();\n        if (port == -1) {\n            if (scheme.equals(\"http\")) {\n                port = 80;\n            } else if (scheme.equals(\"https\")) {\n                port = 443;\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        sb.append(scheme).append(\"://\").append(uri.getHost());\n        if (port != -1) {\n            sb.append(\":\").append(port);\n        }\n        String path = uri.getPath();\n        if (path != null && !path.isEmpty()) {\n            sb.append(path);\n        }\n        String query = uri.getQuery();\n        if (query != null && !query.isEmpty()) {\n            sb.append(\"?\").append(query);\n        }\n        String fragment = uri.getFragment();\n        if (fragment != null && !fragment.isEmpty()) {\n            sb.append(\"#\").append(fragment);\n        }\n        String result = sb.toString();\n        if (result.endsWith(\"/\")) {\n            result = result.substring(0, result.length() - 1);\n        }\n        return result;\n    } catch (URISyntaxException e) {\n        return serverUrl;\n    }\n}", "CodeBleu_score": 44.55515045626694}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl)    if (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        String host = uri.getHost();\n        int port = uri.getPort();\n        if (scheme == null || host == null) {\n            return null;\n        }\n        if (port == -1) {\n            if (scheme.equalsIgnoreCase(\"http\")) {\n                port = 80;\n            } else if (scheme.equalsIgnoreCase(\"https\")) {\n                port = 443;\n            }\n        }\n        String normalizedServerUrl = scheme + \"://\" + host;\n        if (port != -1) {\n            normalizedServerUrl += \":\" + port;\n        }\n        return removeTrailingSlash(normalizedServerUrl);\n    } catch (URISyntaxException e) {\n        return null;\n    }\n}", "CodeBleu_score": 38.802118008557855}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl)    if (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl.toLowerCase());\n        if (uri.getScheme() == null) {\n            uri = new URI(\"http://\" + serverUrl);\n        }\n        if (uri.getPort() == -1) {\n            if (\"http\".equals(uri.getScheme())) {\n                uri = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), 80, uri.getPath(), uri.getQuery(), uri.getFragment());\n            } else if (\"https\".equals(uri.getScheme())) {\n                uri = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), 443, uri.getPath(), uri.getQuery(), uri.getFragment());\n            }\n        }\n        return uri.toString().replaceAll(\"/+$\", \"\");\n    } catch (URISyntaxException e) {\n        return serverUrl;\n    }\n}", "CodeBleu_score": 37.492084505806716}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems()    ListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : GiteaServer.getAll()) {\n        String displayName = server.getDisplayName();\n        if (displayName.isBlank()) {\n            items.add(server.getUrl(), server.getUrl());\n        } else {\n            items.add(displayName, server.getUrl());\n        }\n    }\n    return items;\n}\n", "CodeBleu_score": 44.2076492377598}, {"code": "public ListBoxModel getServerItems()    ListBoxModel model = new ListBoxModel();\n    for (GiteaServer server : GiteaServer.getAll()) {\n        String displayName = server.getDisplayName();\n        if (displayName.isEmpty()) {\n            model.add(server.getUrl(), server.getUrl());\n        } else {\n            model.add(displayName, server.getUrl());\n        }\n    }\n    return model;\n}\n", "CodeBleu_score": 43.828488712428204}, {"code": "public ListBoxModel getServerItems()    ListBoxModel model = new DefaultListBoxModel();\n    for (GiteaServer server : GiteaServer.getAllServers()) {\n        String displayName = server.getDisplayName();\n        if (displayName == null || displayName.trim().isEmpty()) {\n            displayName = server.getUrl();\n        }\n        model.addElement(new ServerItem(displayName, server.getUrl()));\n    }\n    return model;\n}\n", "CodeBleu_score": 37.72818794163611}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers)    if (servers == null) {\n        servers = new ArrayList<>();\n    }\n    if (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n        throw new AccessDeniedException();\n    }\n    List<GiteaServer> newServers = new ArrayList<>(servers);\n    newServers.removeIf(server -> server == null || StringUtils.isBlank(server.getServerUrl()));\n    newServers = new ArrayList<>(new LinkedHashSet<>(newServers));\n    if (this.servers.equals(newServers)) {\n        return;\n    }\n    this.servers = newServers;\n    save();\n}", "CodeBleu_score": 37.22690651818074}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers)    checkAdminPermission();\n    if (servers == null) {\n        servers = Collections.emptyList();\n    } else {\n        servers = servers.stream().filter(Objects::nonNull).filter(server -> !server.getUrl().isEmpty()).distinct().collect(Collectors.toList());\n    }\n    this.servers = servers;\n    save();\n}", "CodeBleu_score": 29.12374979594756}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers)    checkPermission(ADMINISTRATION);\n    if (servers != null) {\n        this.servers = new ArrayList<>(servers);\n        this.servers.removeIf(server -> server == null || server.getUrl() == null);\n    } else {\n        this.servers = Collections.emptyList();\n    }\n    save();\n}", "CodeBleu_score": 21.691345117003742}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl)  if (serverUrl == null) {\n    return false;\n  }\n  serverUrl=normalizeServerUrl(serverUrl);\n  GiteaServer server=findServer(serverUrl);\n  if (server == null) {\n    return false;\n  }\n  servers.remove(server);\n  updateServerList();\n  return true;\n}", "CodeBleu_score": 21.013594970429967}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl)  serverUrl = normalizeServerUrl(serverUrl);\n  boolean removed = false;\n  for (int i = 0; i < servers.size(); i++) {\n    if (servers.get(i).getUrl().equals(serverUrl)) {\n      servers.remove(i);\n      removed = true;\n      break;\n    }\n  }\n  updateServerList();\n  return removed;\n}", "CodeBleu_score": 31.611633757791925}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl)    if (serverUrl == null) {\n        return false;\n    }\n    serverUrl = normalizeServerUrl(serverUrl);\n    if (serverUrl == null) {\n        return false;\n    }\n    boolean removed = servers.removeIf(server -> serverUrl.equals(server.getUrl()));\n    if (removed) {\n        saveServerList();\n    }\n    return removed;\n}", "CodeBleu_score": 39.75642832382032}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation)    for (Element annotatedElement : roundEnv.getElementsAnnotatedWith(annotation)) {\n        ConfigElement configElement = new ConfigElement();\n        configElement.setType(annotatedElement.asType().toString());\n        configElement.setName(annotatedElement.getSimpleName().toString());\n        configElement.setAttributes(getAttributes(annotatedElement));\n        descriptorElements.add(configElement);\n    }\n}\n", "CodeBleu_score": 32.03905381866882}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation)    Set<? extends Element> annotatedElements = roundEnv.getElementsAnnotatedWith(annotation);\n    for (Element element : annotatedElements) {\n        ConfigElement configElement = new ConfigElement();\n        configElement.setType(element.asType().toString());\n        configElement.setName(element.getSimpleName().toString());\n        for (Annotation annotation1 : element.getAnnotations()) {\n            if (annotation1 instanceof Name) {\n                configElement.setName(((Name) annotation1).value());\n            } else if (annotation1 instanceof Description) {\n                configElement.setDescription(((Description) annotation1).value());\n            }\n        }\n        descriptorElements.add(configElement);\n    }\n}", "CodeBleu_score": 41.09878840156496}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation)    Set<? extends Element> elements = roundEnv.getElementsAnnotatedWith(annotation);\n    for (Element element : elements) {\n        ConfigElement configElement = new ConfigElement();\n        configElement.setType(element.asType().toString());\n        configElement.setName(element.getSimpleName().toString());\n        configElement.setQualifiedName(element.asType().toString());\n        configElement.setSimpleName(element.getSimpleName().toString());\n        configElement.setValues(getAnnotationValues(element));\n        descriptorElements.add(configElement);\n    }\n}\n", "CodeBleu_score": 41.92154727377062}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass)     String annotationClassName = annotationClass.getName();\n    for (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().toString().replace(\"$\", \".\")\n                .equals(annotationClassName)) {\n            return annotation;\n        }\n    }\n    return null;\n}\n", "CodeBleu_score": 50.54545830438355}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass)     String annotationCanonicalName = annotationClass.getCanonicalName();\n    for (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().contentEquals(annotationCanonicalName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 46.82988111451507}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass)     String annotationCanonicalName = annotationClass.getCanonicalName();\n    for (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().toString().equals(annotationCanonicalName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 47.97341652850527}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\n    filters = {\"docstatus\": 1, \"employee\": employee}\n\n    if for_approval:\n        filters.update(\n            {\n                \"docstatus\": 0,\n                \"name\": [\"not in\", [employee]],\n                \"leave_approval_status\": \"Pending Approval\",\n            }\n        )\n    else:\n        filters.update(\n            {\n                \"name\": [\"not in\", [employee]],\n                \"leave_approval_status\": [\"not in\", [\"Canceled\"]],\n            }\n        )\n\n    if approver_id:\n        filters.update({\"leave_approver\": approver_id})\n\n    return filters\n\n", "CodeBleu_score": 25.266473693536227}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\n    filters = {\"docstatus\": 1, \"employee\": employee}\n    if for_approval:\n        filters[\"approval_status\"] = \"Pending Approval\"\n        filters[\"name\"] = [\"not in\", [employee]]\n    else:\n        filters[\"docstatus\"] = 1\n        filters[\"name\"] = employee\n\n    if approver_id:\n        filters[\"approver\"] = approver_id\n\n    return filters\n\n", "CodeBleu_score": 24.755560692776395}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\n    filters = {\n        \"docstatus\": 1,\n        \"employee\": employee,\n        \"leave_type\": [\"Leave Type\", \"is\", \"Leave Type\"],\n    }\n\n    if for_approval:\n        filters.update(\n            {\n                \"workflow_state\": [\n                    \"Workflow State\",\n                    \"not in\",\n                    [\"Approved\", \"Rejected\"],\n                ],\n                \"name\": [\"not in\", [employee]],\n            }\n        )\n    else:\n        filters.update(\n            {\n                \"workflow_state\": [\n                    \"Workflow State\",\n                    \"not in\",\n                    [\"Cancelled\"],\n                ],\n            }\n        )\n\n    if approver_id:\n        filters.update({\"approver\": [\"Approver\", \"=\", approver_id]})\n\n    return filters\n\n", "CodeBleu_score": 23.194843662366978}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n    today = datetime.date.today()\n    leave_details = get_leave_details(employee, today)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_details[leave_type][\"allocated\"],\n            \"balance\": leave_details[leave_type][\"balance\"],\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 39.69943465290003}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n    today = date.today()\n    leave_details = get_leave_details(employee, today)\n\n    leave_balance_map = {}\n    for leave in leave_details:\n        leave_type = leave.leave_type\n        allocated_leave = leave.allocated_leave\n        balance_leave = leave.balance_leave\n\n        leave_balance_map[leave_type] = {\n            \"allocated_leave\": allocated_leave,\n            \"balance_leave\": balance_leave\n        }\n\n    return leave_balance_map\n", "CodeBleu_score": 40.42785133447223}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n    today = datetime.date.today()\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_details[leave_type][\"allocated\"],\n            \"balance\": leave_details[leave_type][\"balance\"],\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 36.64885617228259}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = Holiday.query.filter(\n        Holiday.employee_id == employee.id,\n        Holiday.holiday_list_id == holiday_list.id,\n        Holiday.weekly_off == False\n    ).order_by(Holiday.date).all()\n    for holiday in holidays:\n        holiday.description = strip_html(holiday.description)\n    return holidays\n\n", "CodeBleu_score": 33.80340992907502}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n    holiday_list = frappe.get_value(\"Employee\", employee, \"holiday_list\")\n    if not holiday_list:\n        return []\n    holidays = frappe.db.sql(\n        \"\"\"\n        SELECT holiday_date, description\n        FROM `tabHoliday`\n        WHERE parent = %s\n        AND description NOT LIKE '%%Weekly%%'\n        ORDER BY holiday_date\n        \"\"\",\n        holiday_list,\n        as_dict=True,\n    )\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html_tags(holiday[\"description\"])\n    return holidays\n\n", "CodeBleu_score": 33.6292798422413}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = Holiday.query.filter_by(holiday_list_id=holiday_list.id).filter(Holiday.description != 'Weekly Off').order_by(Holiday.date).all()\n    for holiday in holidays:\n        holiday.description = strip_html(holiday.description)\n    return holidays\n", "CodeBleu_score": 32.058609289068464}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n    hr_settings = frappe.get_doc(\"HR Settings\")\n    if hr_settings.send_holiday_reminders and hr_settings.holiday_reminders_frequency == \"Weekly\":\n        # Get the current date and the date one week from now\n        today = datetime.date.today()\n        one_week_from_now = today + datetime.timedelta(days=7)\n\n        # Get the list of holidays between today and one week from now\n        holidays = frappe.get_list(\"Holiday\", filters={\"holiday_date\": [\"between\", today, one_week_from_now]}, fields=[\"name\", \"holiday_date\"])\n\n        # Send the reminders for each holiday\n        for holiday in holidays:\n            send_holiday_reminders(holiday.name)\n", "CodeBleu_score": 29.314434606763218}, {"code": "def send_reminders_in_advance_weekly()\n    pass\n\n", "CodeBleu_score": 0.7352941176479391}, {"code": "def send_reminders_in_advance_weekly()\n    settings = frappe.get_single(\"HR Settings\")\n    if not settings.stop_reminders and settings.reminders_frequency == \"Weekly\":\n        send_reminders_weekly()\n\n", "CodeBleu_score": 15.936504741804761}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n    self_ratings = self.self_ratings\n    total_score = 0\n    for self_rating in self_ratings:\n        score = self_rating.rating * 5 * self_rating.percentage_weightage / 100\n        total_score += score\n    self.self_appraisal_score = round(total_score, 2)\n\n", "CodeBleu_score": 21.445468630183605}, {"code": "def calculate_self_appraisal_score(self)\n    self_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self_appraisal_score += self_rating.rating * 5 * self_rating.percentage / 100\n    self.self_appraisal_score = round(self_appraisal_score, 2)\n", "CodeBleu_score": 21.21014615600572}, {"code": "def calculate_self_appraisal_score(self)\n\n    self_ratings = self.self_ratings\n    total_score = 0\n    for rating in self_ratings:\n        score = rating.rating * 5 * rating.percentage / 100\n        total_score += score\n    self.self_appraisal_score = round(total_score, 2)\n    self.save()\n", "CodeBleu_score": 22.71817589653263}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.calculate_final_score_based_on_formula:\n        total_score = self.total_score\n        average_feedback_score = self.average_feedback_score\n        self_appraisal_score = self.self_appraisal_score\n        formula = appraisal_cycle.final_score_formula\n        formula = formula.replace(\"{total_score}\", str(total_score))\n        formula = formula.replace(\"{average_feedback_score}\", str(average_feedback_score))\n        formula = formula.replace(\"{self_appraisal_score}\", str(self_appraisal_score))\n        formula = formula.replace(\"{final_score}\", \"final_score\")\n        formula = formula.replace(\"{total_score}\", str(total_score))\n        formula = formula.replace(\"{average_feedback_score}\", str(average_feedback_score))\n        formula = formula.replace(\"{self_appraisal_score}\", str(self_appraisal_score))\n        formula = formula.replace(\"{final_score}\", \"final_score\")\n        formula = formula.replace(\"{total_score}\", str(total_score))\n        formula = formula.replace(\"{average_feedback_score}\", str(average_feedback_score))\n        formula = formula.replace(\"{self_appraisal_score}\", str(self_appraisal_score))\n        formula = formula.replace(\"{final_score}\", \"final_score\")\n        formula = formula.replace(\"{total_score}\", str(total_score))\n        formula = formula.replace(\"{average_feedback_score}\", str(average_feedback_score))\n        formula = formula.replace(\"{self_appraisal_score}\", str(self_appraisal_score))\n        formula = formula.replace(\"{final_score}\", \"final_score", "CodeBleu_score": 25.48402693706376}, {"code": "def calculate_final_score(self)\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.calculate_final_score_using_formula:\n        # Gather necessary data for the formula\n        data = {\n            \"total_score\": self.total_score,\n            \"average_feedback_score\": self.average_feedback_score,\n            \"self_appraisal_score\": self.self_appraisal_score,\n        }\n\n        # Sanitize the formula\n        formula = appraisal_cycle.final_score_formula\n        sanitized_formula = sanitize_formula(formula)\n\n        # Evaluate the formula\n        final_score = evaluate_formula(sanitized_formula, data)\n\n        # Set the final score with the appropriate precision\n        self.final_score = round(final_score, appraisal_cycle.final_score_precision)\n    else:\n        # Calculate the final score as the average of the total score, average feedback score, and self-appraisal score\n        final_score = (\n            self.total_score + self.average_feedback_score + self.self_appraisal_score\n        ) / 3\n\n        # Set the final score with the appropriate precision\n        self.final_score = round(final_score, appraisal_cycle.final_score_precision)", "CodeBleu_score": 35.54158914211521}, {"code": "def calculate_final_score(self)\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.formula_based:\n        formula = appraisal_cycle.formula\n        appraisal_cycle_doc = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n        total_score = self.total_score\n        average_feedback_score = self.average_feedback_score\n        self_appraisal_score = self.self_appraisal_score\n\n        formula = formula.replace(\"{total_score}\", str(total_score))\n        formula = formula.replace(\"{average_feedback_score}\", str(average_feedback_score))\n        formula = formula.replace(\"{self_appraisal_score}\", str(self_appraisal_score))\n        formula = formula.replace(\"{final_score}\", \"final_score\")\n\n        final_score = eval(formula)\n        self.final_score = final_score\n    else:\n        total_score = self.total_score\n        average_feedback_score = self.average_feedback_score\n        self_appraisal_score = self.self_appraisal_score\n\n        final_score = (total_score + average_feedback_score + self_appraisal_score) / 3\n        self.final_score = final_score\n\n    self.final_score = round(self.final_score, 2)", "CodeBleu_score": 36.36924934462218}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n    if self.attendance_date > date.today():\n        if self.status != \"On Leave\" or self.leave_application_id:\n            frappe.throw(\"Attendance cannot be marked for future dates\")\n    if self.attendance_date < self.date_of_joining:\n        frappe.throw(\"Attendance date cannot be earlier than employee's date of joining\")\n", "CodeBleu_score": 20.912165370427832}, {"code": "def validate_attendance_date(self)\n    if self.attendance_date > getdate(today()):\n        frappe.throw(\n            _(\"Attendance can not be marked for future dates\"))\n\n    if self.status != \"On Leave\" and self.leave_application:\n        frappe.throw(\n            _(\"Attendance can only be marked for Leave Types\"))\n\n    if self.attendance_date < self.date_of_joining:\n        frappe.throw(\n            _(\"Attendance date can not be before employee's joining date\"))\n\n", "CodeBleu_score": 29.19836911219889}, {"code": "def validate_attendance_date(self)\n    if self.status == \"On Leave\":\n        if self.leave_application_id:\n            leave_application = frappe.get_doc(\"Leave Application\", self.leave_application_id)\n            if leave_application.to_date < self.attendance_date:\n                frappe.throw(\n                    _(\n                        \"Attendance date cannot be later than the leave end date {0} of the applied leave {1}\"\n                    ).format(\n                        leave_application.to_date, self.leave_application_id\n                    )\n                )\n        else:\n            frappe.throw(_(\"Leave application is required for On Leave attendance status\"))\n\n    if self.attendance_date > getdate():\n        frappe.throw(\n            _(\"Attendance date cannot be of future\"),\n            frappe.DocstatusTransitionError,\n        )\n\n    if self.attendance_date < self.employee.date_of_joining:\n        frappe.throw(\n            _(\"Attendance date cannot be earlier than employee's joining date\")\n        )\n", "CodeBleu_score": 32.547538698433044}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n    attendance_records = frappe.db.sql(\"\"\"\n        SELECT name, employee, attendance_date\n        FROM `tabAttendance`\n        WHERE employee = %s AND attendance_date = %s\n    \"\"\", (self.employee, self.attendance_date), as_dict=True)\n\n    if len(attendance_records) > 0:\n        existing_record = attendance_records[0]\n        message = f\"An attendance record already exists for employee {self.employee} on {self.attendance_date}. <a href='/app/attendance/{existing_record.name}'>View existing record</a>\"\n        frappe.throw(message)", "CodeBleu_score": 23.595490382202215}, {"code": "def validate_duplicate_record(self)\n    if self.employee and self.attendance_date:\n        existing_record = frappe.db.exists(\n            \"Attendance\",\n            {\n                \"employee\": self.employee,\n                \"attendance_date\": self.attendance_date,\n                \"docstatus\": (\"<\", 2),\n                \"name\": (\"not in\", [self.name]),\n            },\n        )\n\n        if existing_record:\n            frappe.throw(\n                _(\n                    \"Attendance record already exists for Employee {0} on {1}. Please check the existing record at <a href='#Form/Attendance/{2}'>{2}</a>\"\n                ).format(\n                    self.employee,\n                    frappe.utils.format_date(self.attendance_date),\n                    existing_record,\n                ),\n                AttendanceDuplicateRecordError,\n            )\n", "CodeBleu_score": 32.430062995566054}, {"code": "def validate_duplicate_record(self)\n\n    if self.check_if_attendance_record_exists():\n        attendance_record = frappe.db.get_value(\"Attendance\", {\"employee\": self.employee, \"attendance_date\": self.attendance_date}, [\"name\", \"attendance_date\"], as_dict=True)\n        attendance_record_link = frappe.utils.get_url_to_form(\"Attendance\", attendance_record.name)\n        frappe.throw(f\"An attendance record already exists for {self.employee} on {self.attendance_date}. Please check the existing record at <a href='{attendance_record_link}'>{attendance_record_link}</a>\")\n", "CodeBleu_score": 31.807464943580634}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n    message_details = self.get_message_details()\n    group_emails = self.get_group_emails()\n    self.send_email(group_emails, message_details)\n    self.update_status(\"Sent\")", "CodeBleu_score": 14.167081996054401}, {"code": "def send_summary(self)\n\n    # Get the current date\n    today = datetime.date.today()\n\n    # Get the message details for the current date\n    message_details = self.get_message_details(today)\n\n    # Get the email addresses of users in the specified group\n    group_members = self.get_group_members()\n\n    # Create a list of recipient email addresses\n    recipient_list = [member.email for member in group_members]\n\n    # Create a dictionary of message details\n    context = {'message_details': message_details}\n\n    # Render the email template with the message details\n    html_content = render_to_string('email_template.html', context)\n\n    # Create an email message with the recipient list, subject, and message body\n    msg = EmailMultiAlternatives(\n        'Daily Summary',\n        'Here is the daily summary of all replies',\n        'sender@example.com',\n        recipient_list\n    )\n\n    # Attach the HTML content to the email message\n    msg.attach_alternative(html_content, \"text/html\")\n\n    # Send the email\n    msg.send()\n\n    # Update the status to \"Sent\"\n    self.status = 'Sent'", "CodeBleu_score": 35.69835868064395}, {"code": "def send_summary(self)\n    # Get message details\n    message_details = self.get_message_details()\n\n    # Get email addresses of users in the specified group\n    group_email_addresses = self.get_group_email_addresses(self.group_name)\n\n    # Send email with summary using a template\n    self.send_email(\n        to=group_email_addresses,\n        subject=\"Daily Summary\",\n        template=\"email_template.html\",\n        context={\"message_details\": message_details},\n    )\n\n    # Update status to \"Sent\"\n    self.status = \"Sent\"", "CodeBleu_score": 27.749968418667827}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\n    # Get the interview round of the current interview record\n    interview_round = self.interview_round\n\n    # Check if there is an existing interview record for the same job applicant and interview round\n    existing_interview = frappe.db.exists(\n        \"Interview\",\n        {\n            \"job_applicant\": self.job_applicant,\n            \"interview_round\": interview_round,\n            \"docstatus\": (\"<\", 2),\n            \"name\": (\"not in\", [self.name]),\n        },\n    )\n\n    # If an existing interview record is found, raise an exception with a message indicating that job applicants are not allowed to appear twice for the same interview round\n    if existing_interview:\n        # Get the link to the existing interview record and the job applicant's information\n        existing_interview_link = frappe.utils.get_url_to_form(\n            \"Interview\", existing_interview\n        )\n        job_applicant_link = frappe.utils.get_url_to_form(\n            \"Job Applicant\", self.job_applicant\n        )\n\n        # Raise an exception with a message indicating that job applicants are not allowed to appear twice for the same interview round\n        frappe.throw(\n            _(\n                \"Job applicant {0} is not allowed to appear twice for the same interview round. Please see {1} for details. <br> Job Applicant: {2}\"\n            ).format(\n                self.job_applicant,\n                existing_interview_link,\n                job_applicant_link,\n            )\n        )", "CodeBleu_score": 45.60462953264951}, {"code": "def validate_duplicate_interview(self)\n    # Get the interview round for the current interview record\n    interview_round = self.interview_round_id.name\n    # Get the job applicant for the current interview record\n    job_applicant = self.job_applicant_id.name\n    # Get the existing interview records for the current job applicant\n    existing_interviews = self.env['hr.applicant'].search([('job_applicant_id', '=', self.job_applicant_id.id)])\n    # Loop through the existing interview records\n    for interview in existing_interviews:\n        # Check if the interview round for the existing interview record matches the current interview round\n        if interview.interview_round_id.name == interview_round:\n            # If a match is found, raise an exception with a message indicating that job applicants are not allowed to appear twice for the same interview round\n            raise ValidationError(_('Job applicants are not allowed to appear twice for the same interview round. Existing interview record: %s. Job applicant: %s') % (interview.name, job_applicant))", "CodeBleu_score": 34.28311501795435}, {"code": "def validate_duplicate_interview(self)\n    for interview in self.interview_round_ids:\n        if interview.state == 'done':\n            domain = [('job_applicant_id', '=', self.job_applicant_id.id), ('interview_round_id', '=', interview.id)]\n            existing_interview = self.env['hr.interview'].search(domain)\n            if existing_interview:\n                raise ValidationError(_('Job applicants are not allowed to appear twice for the same interview round. Please check the existing interview record: %s. Job Applicant: %s') % (existing_interview.name, self.job_applicant_id.name))\n", "CodeBleu_score": 47.67735528766528}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n    total_rating = 0\n    num_assessments = 0\n    for assessment in self.skill_assessment_set.all():\n        if assessment.rating:\n            total_rating += assessment.rating\n            num_assessments += 1\n    if num_assessments > 0:\n        self.average_rating = total_rating / num_assessments\n    else:\n        self.average_rating = 0\n    self.save()\n\n", "CodeBleu_score": 25.470250654445802}, {"code": "def calculate_average_rating(self)\n    total_rating = 0\n    num_assessments = 0\n    for assessment in self.skill_assessments:\n        if assessment.rating is not None:\n            total_rating += assessment.rating\n            num_assessments += 1\n    if num_assessments > 0:\n        self.average_rating = total_rating / num_assessments\n    else:\n        self.average_rating = 0\n", "CodeBleu_score": 23.217354312675855}, {"code": "def calculate_average_rating(self)\n    if self.skill_assessments.all():\n        total_rating = 0\n        num_assessments = 0\n        for assessment in self.skill_assessments.all():\n            if assessment.rating:\n                total_rating += assessment.rating\n                num_assessments += 1\n        if num_assessments > 0:\n            self.average_rating = total_rating / num_assessments\n        else:\n            self.average_rating = 0\n    else:\n        self.average_rating = 0", "CodeBleu_score": 23.3843389241579}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n    interview = frappe.new_doc(\"Interview\")\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview.interview_round = doc.get(\"interview_round\")\n    interview.designation = doc.get(\"designation\")\n    interview.interviewers = doc.get(\"interviewers\")\n    interview.save()\n    return interview\n", "CodeBleu_score": 46.438535346182356}, {"code": "def create_interview(doc):\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    if doc.interviewers:\n        interview.append(\"interview_details\", {\n            \"interviewer\": doc.interviewers\n        })\n    interview.insert()\n    return interview\n\n", "CodeBleu_score": 44.353144068569364}, {"code": "def create_interview(doc):\n    interview = frappe.get_doc({\n        \"doctype\": \"Interview\",\n        \"interview_round\": doc.interview_round,\n        \"designation\": doc.designation,\n    })\n    if doc.interviewers:\n        interview.interview_details = []\n        for interviewer in doc.interviewers:\n            interview.append(\"interview_details\", {\n                \"interviewer\": interviewer.interviewer,\n                \"interviewer_name\": interviewer.interviewer_name,\n                \"interviewer_email\": interviewer.interviewer_email,\n                \"interviewer_designation\": interviewer.interviewer_designation\n            })\n    return interview\n", "CodeBleu_score": 36.44361612458663}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n    job_offer = frappe.db.sql(\"\"\"SELECT name FROM `tabJob Offer` WHERE company = %s and designation = %s and docstatus = 1 and posting_date BETWEEN %s and %s\"\"\", (self.company, self.designation, from_date, to_date), as_dict=True)\n    return job_offer\n", "CodeBleu_score": 34.414825726455454}, {"code": "def get_job_offer(self, from_date, to_date)\n    return frappe.get_all(\n        \"Job Offer\",\n        filters={\n            \"designation\": self.designation,\n            \"company\": self.company,\n            \"docstatus\": 1,\n            \"creation\": [\"between\", [from_date, to_date]],\n        },\n        pluck=\"name\",\n    )\n\n", "CodeBleu_score": 61.71832846468489}, {"code": "def get_job_offer(self, from_date, to_date)\n\n    filters = {\n        \"type\": \"Job Offer\",\n        \"company\": self.company,\n        \"designation\": self.designation,\n        \"docstatus\": 1,\n        \"creation\": [\"between\", [from_date, to_date]],\n    }\n\n    job_offers = frappe.get_all(\"Job Offer\", filters=filters, pluck=\"name\")\n\n    return job_offers", "CodeBleu_score": 54.24994745233238}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n    filters = {\"docstatus\": 1}\n    if company:\n        filters[\"company\"] = company\n    if department:\n        filters[\"department\"] = department\n    total_job_offers = frappe.db.count(\"Job Offer\", filters=filters)\n    accepted_job_offers = frappe.db.count(\"Job Offer\", filters={**filters, \"status\": \"Accepted\"})\n    acceptance_rate = (accepted_job_offers / total_job_offers) * 100 if total_job_offers else 0\n    return acceptance_rate, \"Percent\"\n\n", "CodeBleu_score": 57.11349087236722}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n    filters = {\n        \"docstatus\": 1,\n    }\n    if company:\n        filters[\"company\"] = company\n    if department:\n        filters[\"department\"] = department\n    total_offers = frappe.db.count(\"Job Offer\", filters=filters)\n    accepted_offers = frappe.db.count(\n        \"Job Offer\",\n        filters={\n            **filters,\n            \"offer_status\": \"Accepted\",\n        },\n    )\n    acceptance_rate = (accepted_offers / total_offers) * 100 if total_offers else 0\n    return acceptance_rate, \"Percent\"\n\n", "CodeBleu_score": 54.92502677995482}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n    filters = {\"docstatus\": 1}\n    if company:\n        filters[\"company\"] = company\n    if department:\n        filters[\"department\"] = department\n    total_job_offers = frappe.db.count(\"Job Offer\", filters=filters)\n    filters[\"offer_accepted\"] = 1\n    accepted_job_offers = frappe.db.count(\"Job Offer\", filters=filters)\n    acceptance_rate = (accepted_job_offers / total_job_offers) * 100 if total_job_offers > 0 else 0\n    return acceptance_rate, \"Percent\"\n\n", "CodeBleu_score": 56.4317866653699}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto)    final Result result = employerService.register(employerForRegisterDto);\n    if (!result.isSuccess()) {\n        return ResponseEntity.badRequest().body(result);\n    }\n    return ResponseEntity.ok(result);\n}", "CodeBleu_score": 65.92269881619922}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto)    final Result result = this.employerService.register(employerForRegisterDto);\n    if (!result.isSuccess()) {\n        return ResponseEntity.badRequest().body(result);\n    }\n    return ResponseEntity.ok(result);\n}\n", "CodeBleu_score": 60.623959691752404}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto)    final Result result = this.employerService.register(employerForRegisterDto);\n    if (!result.isSuccess()) {\n        return ResponseEntity.badRequest().body(result);\n    }\n    return ResponseEntity.ok(result);\n}\n", "CodeBleu_score": 60.623959691752404}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto)     final var companyStaff = companyStaffRepository.findById(companyStaffForUpdateDto.getId());\n    if (companyStaff.isEmpty()) {\n        return new ErrorResult(\"Staff not found\");\n    }\n    if (!companyStaff.get().getPassword().equals(companyStaffForUpdateDto.getPassword())) {\n        return new ErrorResult(\"Password is wrong\");\n    }\n    companyStaff.get().setFirstName(companyStaffForUpdateDto.getFirstName());\n    companyStaff.get().setLastName(companyStaffForUpdateDto.getLastName());\n    companyStaffRepository.save(companyStaff.get());\n    return new SuccessResult(\"Staff updated\");\n}", "CodeBleu_score": 42.68723296480474}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto)     final CompanyStaff companyStaff = companyStaffRepository.findById(companyStaffForUpdateDto.getId()).orElse(null);\n    if (companyStaff == null) {\n        return new ErrorResult(\"Company staff not found\");\n    }\n    if (!companyStaff.getPassword().equals(companyStaffForUpdateDto.getPassword())) {\n        return new ErrorResult(\"Password does not match\");\n    }\n    companyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n    companyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n    companyStaffRepository.save(companyStaff);\n    return new SuccessResult(\"Company staff updated\");\n}", "CodeBleu_score": 40.61901065405962}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto)     final CompanyStaff companyStaff = companyStaffRepository.findById(companyStaffForUpdateDto.getId()).orElse(null);\n    if (companyStaff == null) {\n        return new Result(false, \"Company staff not found\");\n    }\n\n    if (!companyStaff.getPassword().equals(companyStaffForUpdateDto.getPassword())) {\n        return new Result(false, \"Password does not match\");\n    }\n\n    companyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n    companyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\n    companyStaffRepository.save(companyStaff);\n\n    return new Result(true, \"Company staff updated\");\n}", "CodeBleu_score": 39.462331817574395}]}
