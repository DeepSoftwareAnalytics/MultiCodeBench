{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n    # get the attachment IDs from the HTTP request arguments\n    attachment_ids = args.get('attachment_ids', [])\n    # get the attachment IDs from the HTTP request arguments\n    if not isinstance(attachment_ids, list):\n        attachment_ids = [attachment_ids]\n    # get the zip filename from the HTTP request arguments\n    zip_filename = args.get('zip_filename')\n    # get the zip filename from the HTTP request arguments\n    if not zip_filename:\n        zip_filename = 'attachments.zip'\n    # get the zip filename from the HTTP request arguments\n    if not zip_filename.endswith('.zip'):\n        zip_filename += '.zip'\n    # get the zip file content type from the HTTP request arguments\n    zip_content_type = args.get('zip_content_type')\n    # get the zip file content type from the HTTP request arguments\n    if not zip_content_type:\n        zip_content_type = 'application/zip'\n    # get the zip file content type from the HTTP request arguments\n    if not zip_content_type.endswith('zip'):\n        zip_content_type += '; application/zip'\n    # get the zip file content type from the HTTP request arguments\n    if not zip_content_type.startswith('application/zip'):\n        zip_content_type = 'application/zip' + zip_content_type\n    # get the zip file content type from the HTTP request arguments\n    if not zip_content_type.startswith('application/'):\n        zip_content_type = 'application/' + zip_content_type\n    # get the zip file content type from the HTTP request arguments\n    if not zip_content_type.startswith('application/octet-stream'):\n        zip_content_type = 'application/octet-stream' + zip_content_type\n    # get the zip file content type from the HTTP request arguments\n    if not zip_content_type.startswith('application/x-zip'):\n        zip_content_type = 'application/x-zip' + zip_content_type\n    # get the zip file content type from the HTTP request arguments\n    if not zip_content_type.startswith('application/x-zip-compressed'):\n        zip_content_type = 'application/x-zip-compressed' + zip_content_type\n    # get the zip file content type from the HTTP request arguments\n    if not zip_content_type.startswith('application/x-", "CodeBleu_score": 24.112310077808395}, {"code": "def export_zip_documents(self, **args)\n    args = args or {}\n    if not args.get('ids'):\n      raise ValueError('Missing argument: ids')\n    if not args.get('format'):\n      raise ValueError('Missing argument: format')\n    if args.get('format') not in ('zip', 'tar', 'tar.gz', 'tar.bz2'):\n      raise ValueError('Invalid argument: format')\n    ids = args.get('ids')\n    if not isinstance(ids, list):\n      ids = [ids]\n    if not ids:\n      raise ValueError('Missing argument: ids')\n    if not isinstance(ids[0], int):\n      ids = [int(id) for id in ids]\n    if not ids:\n      raise ValueError('Missing argument: ids')\n    if not args.get('filename'):\n      raise ValueError('Missing argument: filename')\n    filename = args.get('filename')\n    if not isinstance(filename, str):\n      raise ValueError('Invalid argument: filename')\n    if not filename:\n      raise ValueError('Missing argument: filename')\n    if not args.get('content_type'):\n      raise ValueError('Missing argument: content_type')\n    content_type = args.get('content_type')\n    if not isinstance(content_type, str):\n      raise ValueError('Invalid argument: content_type')\n    if not content_type:\n      raise ValueError('Missing argument: content_type')\n    if not args.get('encoding'):\n      raise ValueError('Missing argument: encoding')\n    encoding = args.get('encoding')\n    if not isinstance(encoding, str):\n      raise ValueError('Invalid argument: encoding')\n    if not encoding:\n      raise ValueError('Missing argument: encoding')\n    if not args.get('mime_type'):\n      raise ValueError('Missing argument: mime_type')\n    mime_type = args.get('mime_type')\n    if not isinstance(mime_type, str):\n      raise ValueError('Invalid argument: mime_type')\n    if not mime_type:\n      raise ValueError('Missing argument: mime_type')\n    if not args.get('charset'):\n      raise ValueError('Missing argument: charset')\n    charset = args.get('charset')\n    if not isinstance(charset, str):\n      raise ValueError('Invalid argument: charset')\n    if not charset:\n      raise ValueError('Missing argument: charset')\n    if not args.get('compression'):\n      raise ValueError('Missing argument: compression')\n    compression = args.get('compression')\n    if not isinstance", "CodeBleu_score": 25.170435655252938}, {"code": "def export_zip_documents(self, **args)\n\n    # Get attachment IDs from HTTP request arguments\n    attachment_ids = args.get('attachment_ids')\n    if not attachment_ids:\n        raise frappe.ValidationError(_('No attachments selected'))\n\n    # Verify read access rights and rules for the attachments\n    attachments = frappe.get_all('File', filters={'name': ('in', attachment_ids)}, fields=['name', 'file_url', 'attached_to_doctype', 'attached_to_name'])\n    for attachment in attachments:\n        frappe.has_permission(attachment.attached_to_doctype,'read', attachment.attached_to_name)\n        frappe.get_doc(attachment.attached_to_doctype, attachment.attached_to_name)\n\n    # Build a zip file from the attachments' content\n    with io.BytesIO() as zip_buffer:\n        with zipfile.ZipFile(zip_buffer, 'w') as zip_file:\n            for attachment in attachments:\n                file_url = frappe.utils.get_url(attachment.file_url)\n                file_content = requests.get(file_url).content\n                zip_file.writestr(attachment.name, file_content)\n\n        # Prepare HTTP headers for the zip file\n        response = make_response(zip_buffer.getvalue())\n        response.headers['Content-Type'] = 'application/zip'\n        response.headers['Content-Disposition'] = 'attachment; filename=\"attachments.zip\"'\n\n        # Return the zip file as an HTTP response\n        return response\n", "CodeBleu_score": 32.32965381862846}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n    values = super(Home, self)._prepare_home_portal_values(counters)\n    if self.env.user.has_group('account.group_account_invoice'):\n        values['invoice_count'] = counters.get('invoice_count')\n        values['bill_count'] = counters.get('bill_count')\n    return values\n", "CodeBleu_score": 17.201744133129523}, {"code": "def _prepare_home_portal_values(self, counters)\n    values = super(Portal, self)._prepare_home_portal_values(counters)\n    if self.env.user.has_group('account.group_account_invoice'):\n        values['invoice_count'] = counters.get('invoice_count', 0)\n        values['bill_count'] = counters.get('bill_count', 0)\n    return values\n", "CodeBleu_score": 16.092490940854866}, {"code": "def _prepare_home_portal_values(self, counters)\n    values = super(Home, self)._prepare_home_portal_values(counters)\n    if self.env.user.has_group('account.group_account_invoice'):\n        Invoice = self.env['account.move']\n        domain = [\n            ('create_uid', '=', self.env.user.partner_id.id),\n            ('state', 'in', ('draft','sent', 'open')),\n        ]\n        if Invoice.check_access_rights('read', raise_exception=False):\n            values['invoice_count'] = Invoice.search_count(domain)\n        if Invoice.check_access_rights('read', raise_exception=False):\n            values['bill_count'] = Invoice.search_count(domain)\n    return values\n", "CodeBleu_score": 39.00510136416384}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n    if not request.uid:\n        return request.redirect('/login')\n\n    values = {}\n    values['date'] = date_begin and date_end and (date_begin, date_end) or None\n    values['sortby'] = sortby\n    values['filterby'] = filterby\n    values['page'] = page\n\n    # Retrieve invoices based on the provided parameters\n    invoices, total = request.website.sale_get_order(request.uid, date_begin=date_begin, date_end=date_end, sortby=sortby, filterby=filterby, limit=self._items_per_page, offset=(page - 1) * self._items_per_page)\n\n    # Update session history with the latest invoice IDs\n    if invoices:\n        request.session['my_invoices_history'] = request.session.get('my_invoices_history', [])[:(self._history_nb - 1)]\n        for invoice in invoices:\n            if invoice.id not in request.session['my_invoices_history']:\n                request.session['my_invoices_history'].insert(0, invoice.id)\n\n    # Prepare the values needed for displaying invoices\n    values.update({\n        'invoices': invoices,\n        'pager': pager(\n            url=\"/shop/history\",\n            total=total,\n            page=page,\n            step=self._items_per_page,\n            scope=7,\n            url_args=values,\n        ),\n    })\n\n    # Render the invoices page with the prepared values\n    return request.render(\"website_sale.portal_my_invoices\", values)\n\n", "CodeBleu_score": 39.07999654508641}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n    # TODO: Add support for filterby\n    # TODO: Add support for sortby\n    # TODO: Add support for date_begin and date_end\n    # TODO: Add support for page\n    # TODO: Add support for kw\n    # TODO: Add support for invoice_type\n    # TODO: Add support for invoice_status\n    # TODO: Add support for invoice_number\n    # TODO: Add support for invoice_date\n    # TODO: Add support for invoice_due_date\n    # TODO: Add support for invoice_amount\n    # TODO: Add support for invoice_balance\n    # TODO: Add support for invoice_currency\n    # TODO: Add support for invoice_payment_method\n    # TODO: Add support for invoice_payment_status\n    # TODO: Add support for invoice_payment_date\n    # TODO: Add support for invoice_payment_amount\n    # TODO: Add support for invoice_payment_currency\n    # TODO: Add support for invoice_payment_reference\n    # TODO: Add support for invoice_payment_method\n    # TODO: Add support for invoice_payment_status\n    # TODO: Add support for invoice_payment_date\n    # TODO: Add support for invoice_payment_amount\n    # TODO: Add support for invoice_payment_currency\n    # TODO: Add support for invoice_payment_reference\n    # TODO: Add support for invoice_payment_method\n    # TODO: Add support for invoice_payment_status\n    # TODO: Add support for invoice_payment_date\n    # TODO: Add support for invoice_payment_amount\n    # TODO: Add support for invoice_payment_currency\n    # TODO: Add support for invoice_payment_reference\n    # TODO: Add support for invoice_payment_method\n    # TODO: Add support for invoice_payment_status\n    # TODO: Add support for invoice_payment_date\n    # TODO: Add support for invoice_payment_amount\n    # TODO: Add support for invoice_payment_currency\n    # TODO: Add support for invoice_payment_reference\n    # TODO: Add support for invoice_payment_method\n    # TODO: Add support for invoice_payment_status\n    # TODO: Add support for invoice_payment_date\n    # TODO: Add support for invoice_payment_amount\n    # TODO: Add support for invoice_payment_currency\n    # TODO: Add support for invoice_payment_reference\n    # TODO: Add support for invoice_payment_method\n    # TODO: Add support for invoice_payment", "CodeBleu_score": 7.211538461538461}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n    if not request.uid:\n        return http.request.render('website.403')\n\n    values = {}\n    values['page_name'] ='my_invoices'\n    values['main_object'] = request.env['res.partner'].sudo().browse(request.uid)\n    values['date_begin'] = date_begin\n    values['date_end'] = date_end\n    values['sortby'] = sortby\n    values['filterby'] = filterby\n    values['default_url'] = '/my/invoices'\n\n    # Search\n    domain = []\n    if date_begin and date_end:\n        domain += [('date_invoice', '>=', date_begin), ('date_invoice', '<=', date_end)]\n    if filterby == 'paid':\n        domain += [('state', '=', 'paid')]\n    elif filterby == 'open':\n        domain += [('state', 'in', ['open', 'in_payment'])]\n    elif filterby == 'overdue':\n        domain += [('state', '=', 'overdue')]\n    elif filterby == 'cancel':\n        domain += [('state', '=', 'cancel')]\n    if not request.env.user.has_group('account.group_account_invoice'):\n        domain += [('create_uid', '=', request.uid)]\n\n    # Count for pager\n    invoice_count = request.env['account.invoice'].sudo().search_count(domain)\n    # Make pager\n    pager = request.website.pager(url=\"/my/invoices\", total=invoice_count, page=page, step=self._items_per_page, scope=7, url_args={'date_begin': date_begin, 'date_end': date_end,'sortby': sortby, 'filterby': filterby})\n    # Content according to pager and with the chosen domain\n    invoices = request.env['account.invoice'].sudo().search(domain, limit=self._items_per_page, offset=pager['offset'], order=self._get_order(sortby))\n    request.session['my_invoices_history'] = invoices.ids[:100]\n\n    values.update({\n        'date': date_begin,\n        'invoices': invoices,\n        'page_name':'my_invoices',\n        'pager': pager,\n        'default_url': '/my/invoices',\n       'searchbar_sortings': searchbar", "CodeBleu_score": 37.62479872236771}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n    invoice = request.env['account.invoice'].browse(int(invoice_id))\n    if invoice.access_token!= access_token:\n        return request.redirect('/my/invoices')\n    if download:\n        return request.env['report'].render_downloadable_report(request.cr, request.uid, invoice.id, report_type, data=kw)\n    if report_type in ['html', 'pdf', 'text']:\n        report_type = 'account.report_invoice'\n    return request.render('account.portal_my_invoice_page', {\n        'invoice': invoice,\n       'report_type': report_type,\n        'page_name': 'invoice',\n    })\n\n", "CodeBleu_score": 17.853166270598393}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n    access_token = access_token or request.httprequest.cookies.get('access_token')\n    if not access_token:\n        return werkzeug.utils.redirect('/my/login')\n    try:\n        invoice = request.env['account.invoice'].sudo().search([('id', '=', int(invoice_id))])\n        if invoice:\n            if invoice.access_token_id.id!= int(access_token):\n                return werkzeug.utils.redirect('/my/login')\n            if invoice.state == 'draft' and invoice.access_token_id.id == int(access_token):\n                return werkzeug.utils.redirect('/my/invoices')\n            if invoice.state == 'open' and invoice.access_token_id.id == int(access_token):\n                if download:\n                    if report_type == 'pdf':\n                        return request.env['report'].sudo().get_pdf([invoice.id], 'account.report_invoice')\n                    elif report_type == 'html':\n                        return request.env['report'].sudo().render_template('account.report_invoice', 'account.report_invoice', invoice.id)\n                    elif report_type == 'text':\n                        return request.env['report'].sudo().render_template('account.report_invoice', 'account.report_invoice_text', invoice.id)\n                else:\n                    return request.env['ir.ui.view'].sudo().render_template(\"account.portal_my_invoice_page\", values={'invoice': invoice})\n            else:\n                return werkzeug.utils.redirect('/my/login')\n        else:\n            return werkzeug.utils.redirect('/my/login')\n    except Exception as e:\n        return werkzeug.utils.redirect('/my/login')\n", "CodeBleu_score": 32.55692300277915}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n    if not access_token:\n        request.session['my_invoice_id'] = invoice_id\n        return request.redirect('/my/login')\n    invoice_obj = request.env['account.invoice'].sudo().browse(int(invoice_id))\n    if invoice_obj.access_token!= access_token:\n        return request.not_found()\n    if invoice_obj.type == 'out_invoice' and invoice_obj.state == 'draft':\n        return request.redirect('/my/invoices')\n    if invoice_obj.type == 'out_invoice' and invoice_obj.state == 'cancel':\n        return request.redirect('/my/invoices')\n    if invoice_obj.type == 'out_invoice' and invoice_obj.state == 'paid':\n        return request.redirect('/my/invoices')\n    if invoice_obj.type == 'out_invoice' and invoice_obj.state == 'open':\n        return request.redirect('/my/invoices')\n    if invoice_obj.type == 'out_refund' and invoice_obj.state == 'draft':\n        return request.redirect('/my/invoices')\n    if invoice_obj.type == 'out_refund' and invoice_obj.state == 'cancel':\n        return request.redirect('/my/invoices')\n    if invoice_obj.type == 'out_refund' and invoice_obj.state == 'open':\n        return request.redirect('/my/invoices')\n    if invoice_obj.type == 'out_refund' and invoice_obj.state == 'paid':\n        return request.redirect('/my/invoices')\n    if invoice_obj.type == 'in_invoice' and invoice_obj.state == 'draft':\n        return request.redirect('/my/invoices')\n    if invoice_obj.type == 'in_invoice' and invoice_obj.state == 'cancel':\n        return request.redirect('/my/invoices')\n    if invoice_obj.type == 'in_invoice' and invoice_obj.state == 'open':\n        return request.redirect('/my/invoices')\n    if invoice_obj.type == 'in_invoice' and invoice_obj.state == 'paid':\n        return request.redirect('/my/invoices')\n    if invoice_obj.type == 'in_refund' and invoice_obj.state == 'draft':\n        return request.redirect('/my/invoices')\n    if invoice_obj.", "CodeBleu_score": 24.880860969527355}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n    product_obj = self.env['product.template']\n    product_ids = product_obj.search([('company_id', '=', company.id)])\n    for product in product_ids:\n        if company.account_sale_tax_id:\n            product.write({'taxes_id': [(4, company.account_sale_tax_id.id)]})\n        if company.account_purchase_tax_id:\n            product.write({'supplier_taxes_id': [(4, company.account_purchase_tax_id.id)]})\n", "CodeBleu_score": 18.064444443189615}, {"code": "def _get_demo_data_products(self, company=False)\n    # company = self.env.user.company_id\n    domain = []\n    if company:\n        domain = ['|', ('company_id', '=', company.id), ('company_id', '=', False)]\n    product_template_obj = self.env['product.template']\n    product_template_ids = product_template_obj.search(domain)\n    for product_template in product_template_ids:\n        if company and company.account_sale_tax_id:\n            product_template.write({'taxes_id': [(6, 0, [company.account_sale_tax_id.id])]})\n        if company and company.account_purchase_tax_id:\n            product_template.write({'supplier_taxes_id': [(6, 0, [company.account_purchase_tax_id.id])]})\n", "CodeBleu_score": 32.509576078933314}, {"code": "def _get_demo_data_products(self, company=False)\n    if company:\n        product_template_obj = self.env['product.template']\n        product_template_ids = product_template_obj.search([('company_id', '=', company.id)])\n        for product_template_id in product_template_ids:\n            if company.account_sale_tax_id:\n                product_template_id.write({'taxes_id': [(6, 0, [company.account_sale_tax_id.id])]})\n            if company.account_purchase_tax_id:\n                product_template_id.write({'supplier_taxes_id': [(6, 0, [company.account_purchase_tax_id.id])]})\n", "CodeBleu_score": 30.70499547441992}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n    demo_account = self.env['ir.model.data'].xmlid_to_res_id(xml_id)\n    if not demo_account:\n        demo_account = self.env['account.account'].search([\n            ('company_id', '=', company.id),\n            ('user_type_id.type', '=', account_type)], limit=1)\n    if not demo_account:\n        demo_account = self.env['account.account'].search([\n            ('company_id', '=', company.id)], limit=1)\n    return demo_account", "CodeBleu_score": 44.505445083978515}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n    account = self.env['ir.model.data'].xmlid_to_object(xml_id)\n    if not account:\n        account = self.env['account.account'].search(\n            [('company_id', '=', company.id), ('user_type_id.type', '=', account_type)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    return account\n", "CodeBleu_score": 42.26508411397927}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n    demo_account = self.env['ir.model.data'].xmlid_to_object(xml_id)\n    if not demo_account:\n        demo_account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.type', '=', account_type)], limit=1)\n    if not demo_account:\n        demo_account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    return demo_account\n\n", "CodeBleu_score": 42.31073728691096}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n    accounts = Account.objects.filter(type=\"Current Year Earnings\").values(\"company\").annotate(count=Count(\"id\"))\n    if any(account[\"count\"] > 1 for account in accounts):\n        raise ValidationError(\"There can only be one account of type 'Current Year Earnings' per company.\")\n\n", "CodeBleu_score": 16.38244639717808}, {"code": "def _check_account_type_unique_current_year_earning(self)\n    accounts = self.env['account.account'].search([('company_id', '=', self.company_id.id), ('account_type', '=', 'current_year_earnings')])\n    if len(accounts) > 1:\n        raise ValidationError(_(\"There is already an account of type 'Current Year Earnings' for this company.\"))\n", "CodeBleu_score": 18.044418687370737}, {"code": "def _check_account_type_unique_current_year_earning(self)\n    if self.account_type == \"Current Year Earnings\":\n        if self.company_id:\n            if self.company_id.account_ids.filtered(lambda account: account.account_type == \"Current Year Earnings\" and account.id!= self.id):\n                raise ValidationError(\"There can only be one account with the 'Current Year Earnings' type for each company.\")\n\n", "CodeBleu_score": 22.055434848212112}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n    if not name:\n        return super(AccountAccount, self)._name_search(name, domain=domain, operator=operator, limit=limit, order=order)\n    if domain is None:\n        domain = []\n    if operator == 'ilike' and not (name.startswith('(') and name.endswith(')')):\n        name = name.replace(' ','| ')\n    domain = ['|', ('code', operator, name), ('name', operator, name)] + domain\n    accounts = self.search(domain, limit=limit, order=order)\n    return accounts.name_get()\n", "CodeBleu_score": 33.12798798149349}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n    if name:\n        if operator == 'ilike':\n            name = name.replace(' ', '%')\n        domain = ['|', ('code', operator, name), ('name', operator, name)] + (domain or [])\n    if not name and 'partner_id' in self._context:\n        partner_id = self._context['partner_id']\n        if isinstance(partner_id, (list, tuple)):\n            partner_id = partner_id[0]\n        domain = ['&', ('partner_id', '=', partner_id), ('active', '=', True)] + (domain or [])\n    if not name and 'frequency' in self._context:\n        domain = ['&', ('frequency', '=', self._context['frequency']), ('active', '=', True)] + (domain or [])\n    if not name and 'journal_id' in self._context:\n        domain = ['&', ('journal_id', '=', self._context['journal_id']), ('active', '=', True)] + (domain or [])\n    if not name and 'company_id' in self._context:\n        domain = ['&', ('company_id', '=', self._context['company_id']), ('active', '=', True)] + (domain or [])\n    if not name and'reconcile' in self._context:\n        domain = ['&', ('reconcile', '=', self._context['reconcile']), ('active', '=', True)] + (domain or [])\n    if not name and 'currency_id' in self._context:\n        domain = ['&', ('currency_id', '=', self._context['currency_id']), ('active', '=', True)] + (domain or [])\n    if not name and 'type' in self._context:\n        domain = ['&', ('type', '=', self._context['type']), ('active', '=', True)] + (domain or [])\n    if not name and'search_default_internal_type' in self._context:\n        domain = ['&', ('internal_type', '=', self._context['search_default_internal_type']), ('active', '=', True)] + (domain or [])\n    if not name and'search_default_user_type' in self._context:\n        domain = ['&', ('user_type_id', '=', self._context['search_default_user_type']), ('active', '=', True)] + (domain or [])\n    if not name and'search_default_reconcile' in self._", "CodeBleu_score": 35.640148159139926}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n    if not name:\n        # If no name is given, we search for accounts with the specific context values.\n        # If no context values are given, we search for all accounts.\n        domain = self._name_search_domain(name, operator)\n        if self._context.get('partner_id'):\n            # If a partner is given, we search for accounts with that partner.\n            domain += [('partner_id', '=', self._context['partner_id'])]\n        elif self._context.get('frequency'):\n            # If a frequency is given, we search for accounts with that frequency.\n            domain += [('frequency', '=', self._context['frequency'])]\n        elif self._context.get('company_id'):\n            # If a company is given, we search for accounts with that company.\n            domain += [('company_id', '=', self._context['company_id'])]\n        elif self._context.get('journal_id'):\n            # If a journal is given, we search for accounts with that journal.\n            domain += [('journal_id', '=', self._context['journal_id'])]\n        elif self._context.get('search_default_internal_type'):\n            # If an internal type is given, we search for accounts with that internal type.\n            domain += [('internal_type', '=', self._context['search_default_internal_type'])]\n        elif self._context.get('search_default_user_type'):\n            # If a user type is given, we search for accounts with that user type.\n            domain += [('user_type_id', '=', self._context['search_default_user_type'])]\n        elif self._context.get('search_default_reconcile'):\n            # If a reconciliation flag is given, we search for accounts with that reconciliation flag.\n            domain += [('reconcile', '=', self._context['search_default_reconcile'])]\n        elif self._context.get('search_default_currency_mode'):\n            # If a currency mode is given, we search for accounts with that currency mode.\n            domain += [('currency_mode', '=', self._context['search_default_currency_mode'])]\n        elif self._context.get('search_default_deprecated'):\n            # If a deprecated flag is given, we search for accounts with that deprecated flag.\n            domain += [('deprecated', '=', self._context['search_default_deprecated'])]\n        elif self._", "CodeBleu_score": 33.80877165576109}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n    super(TranslationMixin, self).copy_translations(new, excluded=excluded)\n    if new.name and new.name.startswith('Copy of '):\n        new._set_name(new.name[len('Copy of '):])\n", "CodeBleu_score": 18.137628780386237}, {"code": "def copy_translations(self, new, excluded=())\n    if new.name and new.name.startswith(self.name + '-'):\n        new.name = new.name.replace(self.name, new.name)\n    if self.name:\n        excluded = list(excluded) + ['name']\n        super(TranslationMixin, self).copy_translations(new, excluded)\n\n", "CodeBleu_score": 31.493240176826713}, {"code": "def copy_translations(self, new, excluded=())\n    if new.id!= self.id:\n        raise UserError(_(\"You may only copy translations from a record to itself.\"))\n    if not self.env.context.get('copy_translations'):\n        return\n    if not self.env.context.get('copy_translations_lang'):\n        return\n    if not self.env.context.get('copy_translations_lang_code'):\n        return\n    lang = self.env.context['copy_translations_lang']\n    lang_code = self.env.context['copy_translations_lang_code']\n    trans_fields = self._get_translatable_fields()\n    for field in trans_fields:\n        if field in excluded:\n            continue\n        if field == 'name':\n            if new.name!= self.name:\n                new._set_name(new.name)\n        else:\n            new._set_field(field, self._get_field(field))\n    new._set_field('lang', lang_code)\n    new._set_field('lang_code', lang)\n    new.invalidate_cache()\n", "CodeBleu_score": 31.743125475451784}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n    self.ensure_one()\n    action = self.env.ref('account.action_move_out_invoice_type').read()[0]\n    action['context'] = {'default_partner_id': self.partner_id.id, 'default_partner_shipping_id': self.partner_shipping_id.id, 'default_invoice_origin': self.name, 'default_fiscal_position_id': self.fiscal_position_id.id, 'default_company_id': self.company_id.id, 'default_currency_id': self.currency_id.id, 'default_payment_term_id': self.payment_term_id.id, 'default_team_id': self.team_id.id, 'default_user_id': self.user_id.id, 'default_origin': self.origin, 'default_invoice_user_id': self.user_id.id, 'default_partner_bank_id': self.partner_bank_id.id, 'default_ref': self.client_order_ref, 'default_type': 'out_invoice', 'default_sale_id': self.id}\n    action['domain'] = [('type', '=', 'out_invoice'), ('partner_id', '=', self.partner_id.id), ('analytic_account_id', '=', self.analytic_account_id.id)]\n    action['views'] = [(self.env.ref('account.invoice_tree').id, 'tree'), (self.env.ref('account.invoice_form').id, 'form')]\n    return action\n", "CodeBleu_score": 37.392311634706964}, {"code": "def action_view_invoice(self)\n    self.ensure_one()\n    action = self.env.ref('account.action_move_out_invoice_type').read()[0]\n    action['domain'] = [('id', 'in', self.mapped('invoice_ids').ids)]\n    action['context'] = {'default_partner_id': self.partner_id.id, 'default_company_id': self.company_id.id}\n    return action\n", "CodeBleu_score": 21.54330963007796}, {"code": "def action_view_invoice(self)\n    self.ensure_one()\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['domain'] = [('id', 'in', self.mapped('invoice_ids').ids)]\n    action['context'] = {'default_type': 'out_invoice', 'default_partner_id': self.partner_id.id, 'default_partner_shipping_id': self.partner_shipping_id.id, 'default_analytic_account_id': self.analytic_account_id.id}\n    return action\n", "CodeBleu_score": 26.98437832725771}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n    self.ensure_one()\n    purchase_type = self.env.ref('purchase.purchase_order_type')\n    move_lines = self.env['account.move.line'].search([\n        ('move_id.purchase_id', '=', self.id),\n        ('move_id.move_type', '=', 'entry'),\n        ('move_id.move_type', '!=', 'initial_entry'),\n        ('account_internal_type', 'in', ['payable','receivable']),\n        ('move_id.state', '!=', 'draft'),\n        ('move_id.move_type', '!=', 'entry'),\n        ('move_id.move_type', '!=', 'initial_entry'),\n        ('move_id.purchase_id.type_id', '=', purchase_type.id)\n    ])\n    move_ids = move_lines.mapped('move_id').filtered(lambda m: m.state!= 'draft')\n    action = self.env.ref('account.action_move_out_invoice_type').read()[0]\n    action['domain'] = [('id', 'in', move_ids.ids)]\n    action['context'] = {'default_move_type': 'in_invoice'}\n    return action\n", "CodeBleu_score": 45.03513193134882}, {"code": "def action_view_vendor_bill(self)\n    if len(self)!= 1:\n        raise UserError(\n            _(\"This option should only be used for a single id, not multiple.\"))\n    purchase_type = self.env.ref(\n        'account.data_account_type_purchase')\n    purchase_account_id = self.env['account.account'].search(\n        [('user_type_id', '=', purchase_type.id)], limit=1)\n    purchase_journal_id = self.env['account.journal'].search(\n        [('type', '=', 'purchase')], limit=1)\n    move_line_ids = self.env['account.move.line'].search(\n        [('account_id', '=', purchase_account_id.id),\n         ('move_id.purchase_id', '=', self.id)])\n    move_ids = move_line_ids.mapped('move_id')\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['domain'] = [('id', 'in', move_ids.ids)]\n    action['context'] = {'default_move_type': 'in_invoice',\n                         'default_journal_id': purchase_journal_id.id}\n    return action", "CodeBleu_score": 44.370111126592796}, {"code": "def action_view_vendor_bill(self)\n    self.ensure_one()\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['domain'] = [('id', 'in', self.env['account.move.line'].search([('move_id.purchase_id', '=', self.id)]).mapped('move_id').ids)]\n    action['context'] = {'default_move_type': 'in_invoice', 'default_type': 'in_invoice', 'default_purchase_id': self.id}\n    return action\n", "CodeBleu_score": 27.893727160755155}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n    if len(values) > 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n    with self.env.context_attach_files():\n        return super(MailThread, self).write(values)\n", "CodeBleu_score": 37.590023795193936}, {"code": "def write(self, values)\n    if 'attachment_ids' in values and len(values['attachment_ids']) > 1:\n        values.pop('attachment_ids')\n    with self.env.attachment_context():\n        return super(Base, self).write(values)\n", "CodeBleu_score": 27.90476617200408}, {"code": "def write(self, values)\n    if isinstance(values, dict):\n        if 'attachment_ids' in values:\n            del values['attachment_ids']\n    with self.env.manage_attachments():\n        return super(MailThread, self).write(values)\n", "CodeBleu_score": 28.75155794604328}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n    if self.env[\"ir.config_parameter\"].sudo().get_param(\"account.disable_automatic_bank_account_creation\"):\n        return self.env[\"res.partner.bank\"]\n    bank_account = self.env[\"res.partner.bank\"].search(\n        [\n            (\"acc_number\", \"=\", self.acc_number),\n            (\"partner_id\", \"=\", self.partner_id.id),\n            (\"company_id\", \"=\", self.company_id.id),\n        ],\n        limit=1,\n    )\n    if not bank_account:\n        bank_account = self.env[\"res.partner.bank\"].create(\n            {\n                \"acc_number\": self.acc_number,\n                \"partner_id\": self.partner_id.id,\n                \"company_id\": self.company_id.id,\n            }\n        )\n    return bank_account\n\n", "CodeBleu_score": 50.96372232978601}, {"code": "def _find_or_create_bank_account(self)\n    if self.env[\"ir.config_parameter\"].sudo().get_param(\"l10n_mx_edi_skip_bank_account_creation\"):\n        return self.env[\"res.partner.bank\"].browse()\n    return (\n        self.env[\"res.partner.bank\"]\n       .search(\n            [\n                (\"acc_number\", \"=\", self.account_number),\n                (\"partner_id\", \"=\", self.partner_id.id),\n            ],\n            limit=1,\n        )\n       .filtered(lambda ba: ba.company_id == self.company_id)\n    )\n\n", "CodeBleu_score": 28.429498300084237}, {"code": "def _find_or_create_bank_account(self)\n    if self.env['ir.config_parameter'].sudo().get_param('account.disable_bank_account_creation'):\n        return self.env['res.partner.bank'].browse()\n    bank_account = self.env['res.partner.bank'].search([\n        ('acc_number', '=', self.acc_number),\n        ('partner_id', '=', self.partner_id.id),\n        ('company_id', '=', self.company_id.id),\n    ], limit=1)\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'acc_number': self.acc_number,\n            'partner_id': self.partner_id.id,\n            'company_id': self.company_id.id,\n        })\n    return bank_account\n", "CodeBleu_score": 58.306157601410135}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n    with self.env.context_multi_currency(date=self.date, company_id=self.company_id, currency_id=currency.id):\n        transaction_amount = self.amount_currency\n        journal_amount = self.amount_currency\n        company_amount = self.amount_currency\n        if currency!= self.company_id.currency_id:\n            journal_amount = self.company_id.currency_id._convert(\n                journal_amount, self.journal_id.currency_id, self.company_id, self.date or fields.Date.today()\n            )\n        if currency!= self.env.user.company_id.currency_id:\n            transaction_amount = self.env.user.company_id.currency_id._convert(\n                transaction_amount, self.env.user.company_id.currency_id, self.company_id, self.date or fields.Date.today()\n            )\n        if currency!= self.company_id.currency_id:\n            company_amount = self.company_id.currency_id._convert(\n                company_amount, self.company_id.currency_id, self.company_id, self.date or fields.Date.today()\n            )\n        if currency!= self.company_id.currency_id:\n            balance = self.company_id.currency_id._convert(\n                balance, self.company_id.currency_id, self.company_id, self.date or fields.Date.today()\n            )\n        if self.env.user.company_id.currency_id!= self.company_id.currency_id:\n            balance = self.env.user.company_id.currency_id._convert(\n                balance, self.env.user.company_id.currency_id, self.company_id, self.date or fields.Date.today()\n            )\n        if self.env.user.company_id.currency_id!= self.journal_id.currency_id:\n            balance = self.env.user.company_id.currency_id._convert(\n                balance, self.env.user.company_id.currency_id, self.company_id, self.date or fields.Date.today()\n            )\n        return {\n            'transaction_amount': transaction_amount,\n            'journal_amount': journal_amount", "CodeBleu_score": 26.86648760983326}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n    # Prepare the context for the transaction\n    ctx = dict(self._context, date=self.date)\n    # Retrieve the relevant accounting amounts and currencies\n    if self.currency_id == currency:\n        amount_currency = False\n    else:\n        amount_currency = amount_currency or self.credit or self.debit or 0.0\n    if self.currency_id!= company_currency:\n        amount_currency = currency.compute(amount_currency, company_currency)\n    if self.currency_id!= current_currency:\n        amount_currency = currency.compute(amount_currency, current_currency)\n    # Compute the transaction amount, journal amount, and company amount\n    if self.currency_id == current_currency:\n        amount = self.debit - self.credit\n    elif self.currency_id == company_currency:\n        amount = current_currency.compute(self.debit - self.credit, company_currency)\n    else:\n        amount = current_currency.compute(amount_currency, company_currency)\n    if self.debit > 0:\n        amount = abs(amount)\n    else:\n        amount = -abs(amount)\n    # Adjust the transaction amount and balance accordingly\n    if self.currency_id == current_currency:\n        balance += amount\n    elif self.currency_id == company_currency:\n        balance += current_currency.compute(amount, company_currency)\n    else:\n        balance += current_currency.compute(amount_currency, company_currency)\n    # Return the computed values in a dictionary\n    return {\n        'amount': amount,\n        'amount_currency': amount_currency,\n        'balance': balance,\n    }\n", "CodeBleu_score": 28.504588537347797}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n    if currency == self.company_currency:\n        amount = amount_currency\n        journal_amount = self.company_currency_id._convert(\n            amount, self.journal_id.currency_id, self.company_id, self.date or fields.Date.today()\n        )\n        company_amount = self.company_currency_id._convert(\n            amount, self.company_id.currency_id, self.company_id, self.date or fields.Date.today()\n        )\n    elif currency == self.journal_id.currency_id:\n        journal_amount = amount_currency\n        amount = self.journal_id.currency_id._convert(\n            journal_amount, self.company_currency_id, self.company_id, self.date or fields.Date.today()\n        )\n        company_amount = self.company_currency_id._convert(\n            amount, self.company_id.currency_id, self.company_id, self.date or fields.Date.today()\n        )\n    else:\n        amount = amount_currency\n        journal_amount = self.company_currency_id._convert(\n            amount, self.journal_id.currency_id, self.company_id, self.date or fields.Date.today()\n        )\n        company_amount = self.journal_id.currency_id._convert(\n            journal_amount, self.company_id.currency_id, self.company_id, self.date or fields.Date.today()\n        )\n    if self.env.context.get('force_balance'):\n        balance = self.company_currency_id._convert(\n            balance, self.company_currency_id, self.company_id, self.date or fields.Date.today()\n        )\n    return {\n        'amount': amount,\n        'journal_amount': journal_amount,\n        'company_amount': company_amount,\n        'balance': balance,\n    }\n", "CodeBleu_score": 26.590620390657655}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n    for journal in self:\n        journal.outbound_payment_method_line_ids = []\n        if journal.type in ['bank', 'cash']:\n            default_outbound_payment_methods = self.env.ref('account.data_payment_method_outbound')\n            for method in default_outbound_payment_methods:\n                journal.outbound_payment_method_line_ids.create({\n                    'payment_method_id': method.id,\n                    'journal_id': journal.id,\n                })\n\n", "CodeBleu_score": 35.94728575730477}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n    for journal in self:\n        journal.outbound_payment_method_line_ids = False\n        if journal.type in ('bank', 'cash'):\n            default_outbound_payment_methods = self.env.ref('account.account_payment_method_manual_out')\n            journal.outbound_payment_method_line_ids = [\n                (0, 0, {\n                    'payment_method_id': default_outbound_payment_methods.id,\n                    'payment_method_code': default_outbound_payment_methods.code,\n                })\n            ]", "CodeBleu_score": 43.568100894916086}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n    for journal in self:\n        journal.outbound_payment_method_line_ids = [(5, 0, 0)]\n        if journal.type in (\"bank\", \"cash\"):\n            default_outbound_payment_methods = self.env[\"payment.acquirer\"].search(\n                [(\"payment_flow\", \"=\", \"form\")]\n            )\n            for method in default_outbound_payment_methods:\n                journal.outbound_payment_method_line_ids = [\n                    (0, 0, {\"payment_method_id\": method.id})\n                ]\n\n", "CodeBleu_score": 41.02317379367447}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n    today = fields.Date.today()\n    for move in self:\n        if not move.date:\n            if move.invoice_date:\n                if not move.is_invoice(include_receipts=True):\n                    move.date = move.invoice_date + move.tax_report_id.tax_report_period_id.tax_report_period_date\n                else:\n                    move.date = move.invoice_date\n            else:\n                move.date = today\n        elif move.invoice_date:\n            if not move.is_invoice(include_receipts=True):\n                new_date = move.invoice_date + move.tax_report_id.tax_report_period_id.tax_report_period_date\n                if new_date!= move.date:\n                    move.date = new_date\n                    move.with_env(move.env(recompute_date=True))._compute_date()", "CodeBleu_score": 34.76602761797329}, {"code": "def _compute_date(self)\n    for move in self:\n        if move.invoice_date and move.invoice_date!= move.date:\n            if move.type!= \"out_invoice\":\n                move.date = move.invoice_date + move.tax_report_id.tax_report_period_id.start_date - 1\n            else:\n                move.date = move.invoice_date\n        elif not move.date:\n            move.date = fields.Date.context_today(self)\n        if move.date!= move.scheduled_date:\n            move.scheduled_date = move.date\n            move.recompute_tax_line_amounts()\n            move.recompute_tax_line_amounts_signed()\n            move.recompute_tax_line_base_amounts()\n            move.recompute_tax_line_base_amounts_signed()\n            move.recompute_tax_line_tax_amounts()\n            move.recompute_tax_line_tax_amounts_signed()\n            move.recompute_tax_line_tax_base_amounts()\n            move.recompute_tax_line_tax_base_amounts_signed()\n            move.recompute_tax_line_tax_amounts_after_tax_deduction()\n            move.recompute_tax_line_tax_amounts_after_tax_deduction_signed()\n            move.recompute_tax_line_tax_base_amounts_after_tax_deduction()\n            move.recompute_tax_line_tax_base_amounts_after_tax_deduction_signed()\n            move.recompute_tax_line_tax_amounts_after_tax_deduction_signed()\n            move.recompute_tax_line_tax_base_amounts_after_tax_deduction_signed()\n            move.recompute_tax_line_tax_amounts_after_tax_deduction_signed()\n            move.recompute_tax_line_tax_base_amounts_after_tax_deduction_signed()\n            move.recompute_tax_line_amounts_after_tax_deduction()\n            move.recompute_tax_line_amounts_after_tax_deduction_signed()\n            move.recompute_tax_line_base_amounts_after_tax_deduction", "CodeBleu_score": 30.316364440205874}, {"code": "def _compute_date(self)\n    today = fields.Date.context_today(self)\n    for move in self:\n        if move.invoice_date and move.tax_report_id.impact_on_tax_report:\n            move.date = fields.Date.to_string(\n                move.invoice_date + move.tax_report_id.impact_on_tax_report\n            )\n        elif not move.date:\n            move.date = today\n        if move.date!= today:\n            self.env.recompute()\n\n", "CodeBleu_score": 20.445382999804984}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n    for move in self:\n        if move.is_invoice():\n            if move.type == \"in\":\n                move.invoice_payment_term_id = move.partner_id.supplier_payment_term_id\n            elif move.type == \"out\":\n                move.invoice_payment_term_id = move.partner_id.customer_payment_term_id\n            else:\n                move.invoice_payment_term_id = False\n", "CodeBleu_score": 39.562449157180374}, {"code": "def _compute_invoice_payment_term_id(self)\n    for move in self:\n        if move.type == 'out_invoice':\n            if move.partner_id.supplier_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.supplier_payment_term_id.id\n            else:\n                move.invoice_payment_term_id = False\n        elif move.type == 'in_invoice':\n            if move.partner_id.customer_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.customer_payment_term_id.id\n            else:\n                move.invoice_payment_term_id = False\n        else:\n            move.invoice_payment_term_id = False\n", "CodeBleu_score": 38.79865502842571}, {"code": "def _compute_invoice_payment_term_id(self)\n    for move in self:\n        if move.type == \"out_invoice\":\n            if move.partner_id.customer_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.customer_payment_term_id.id\n            else:\n                move.invoice_payment_term_id = False\n        elif move.type == \"in_invoice\":\n            if move.partner_id.supplier_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.supplier_payment_term_id.id\n            else:\n                move.invoice_payment_term_id = False\n        else:\n            move.invoice_payment_term_id = False\n", "CodeBleu_score": 38.79865502842571}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n    for tax in self:\n      tax_groups = self.env['account.tax.group'].search([('country_id', '=', tax.country_id.id), ('company_id', '=', tax.company_id.id)])\n      if not tax_groups:\n        tax_groups = self.env['account.tax.group'].search([('country_id', '=', False), ('company_id', '=', tax.company_id.id)])\n      if tax_groups:\n        tax.tax_group_id = tax_groups[0].id", "CodeBleu_score": 23.177017229278533}, {"code": " def _compute_tax_group_id(self)\n    for tax in self:\n      if tax.company_id and tax.company_id.country_id:\n        tax_groups = self.env[\"account.tax.group\"].search([\n          (\"country_id\", \"=\", tax.company_id.country_id.id),\n          (\"company_id\", \"=\", tax.company_id.id),\n        ])\n        if not tax_groups:\n          tax_groups = self.env[\"account.tax.group\"].search([\n            (\"country_id\", \"=\", False),\n            (\"company_id\", \"=\", tax.company_id.id),\n          ])\n        if tax_groups:\n          tax.tax_group_id = tax_groups[0]\n\n  @api.depends(\"tax_group_id\")\n  def _compute_tax_group_name(self):\n    \"\"\"This function computes the tax group name based on the tax group's country and company. If the tax group has a country and company, it uses the country's name and company's name. If the tax group has a country but no company, it uses the country's name and the company's name from the tax group's company. If the tax group has no country but a company, it uses the company's name. If the tax group has neither a country nor a company, it uses the company's name from the tax group's company.\"\"\"\n    for tax in self:\n      if tax.tax_group_id:\n        if tax.tax_group_id.country_id and tax.tax_group_id.company_id:\n          tax.tax_group_name = f\"{tax.tax_group_id.country_id.name} ({tax.tax_group_id.company_id.name})\"\n        elif tax.tax_group_id.country_id:\n          tax.tax_group_name = f\"{tax.tax_group_id.country_id.name} ({tax.tax_group_id.company_id.name})\"\n        elif tax.tax_group_id.company_id:\n          tax.tax_group_name = tax.tax_group_id.company_id.name\n        else:\n          tax.tax_group_name = tax.tax_group_id.company_id.name\n      else:\n        tax.tax_group_name = \"\"\n\n  @api.depends(\"tax_group_id\")\n  def _compute_", "CodeBleu_score": 28.615505999511505}, {"code": " def _compute_tax_group_id(self)\n    for tax in self:\n      tax_groups = self.env['account.tax.group']\n      if tax.company_id:\n        tax_groups |= tax_groups.search([('company_id', '=', tax.company_id.id)])\n      if tax.country_id:\n        tax_groups |= tax_groups.search([('country_id', '=', tax.country_id.id)])\n      tax_groups |= tax_groups.search([('country_id', '=', False), ('company_id', '=', tax.company_id.id)])\n      tax_group = tax_groups.filtered(lambda tax_group: tax in tax_group.tax_ids)\n      if tax_group:\n        tax.tax_group_id = tax_group[0]\n      else:\n        tax.tax_group_id = tax_groups[0] if tax_groups else False", "CodeBleu_score": 28.985741165253522}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n    session = requests.Session()\n    session.post(url, data={'login': login, 'password':, 'db': db})\n    data = {'file': (module_file, open(module_file, 'rb')), 'db': db, 'force': force}\n    response = session.post(url + '/base_import_module/login_upload', files=data)\n    if response.status_code!= 200:\n        raise Exception(response.text)\n    return response.text\n", "CodeBleu_score": 31.528196562651946}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n    if not module_file:\n        raise Exception(\"No module file specified.\")\n    if not url:\n        raise Exception(\"No URL specified.\")\n    if not login:\n        raise Exception(\"No login specified.\")\n    if not password:\n        raise Exception(\"No password specified.\")\n    if not db:\n        raise Exception(\"No database specified.\")\n\n    # Set the database in the session\n    self.set_database(url, db)\n\n    # Prepare the POST request data\n    data = {\n        \"login\": login,\n        \"password\":,\n        \"db\": db,\n        \"force\": force\n    }\n\n    # Read the module file\n    with open(module_file, \"rb\") as f:\n        module_data = f.read()\n\n    # Upload the module file to the server\n    response = requests.post(url + \"/base_import_module/login_upload\", data=data, files={\"module\": module_data})\n\n    # Check if the server has the required module installed or is outdated\n    if response.status_code == 400:\n        raise Exception(\"The server does not have the required module installed or is outdated.\")\n\n    return response.text", "CodeBleu_score": 47.317750832667386}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n    self.set_db(db)\n    data = {\n        'login': login,\n        'password':,\n        'db': db,\n        'force': force,\n    }\n    with open(module_file, 'rb') as f:\n        files = {\n            'file': f,\n        }\n        response = self.session.post(url + '/web/base_import_module/login_upload', data=data, files=files)\n        response.raise_for_status()\n        return response.text\n\n", "CodeBleu_score": 40.25939792245795}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n    db_name = config.get('db_name')\n    overwrite = config.get('overwrite')\n\n    registry = Registry(db_name)\n    with registry.cursor() as cr:\n        importer = TranslationImporter(cr, overwrite)\n        importer.load_files(config.get('files'))\n        importer.save()\n", "CodeBleu_score": 32.564931539586226}, {"code": "def import_translation()\n    database_name = config.get('database_name')\n    overwrite = config.get('overwrite')\n    registry = Registry(database_name)\n    with registry.cursor() as cr:\n        importer = TranslationImporter(cr)\n        importer.load_translations(overwrite=overwrite)\n\n", "CodeBleu_score": 32.69699079208598}, {"code": "def import_translation()\n    db_name = config.get('db_name')\n    overwrite = config.get('overwrite', False)\n    registry = Registry(db_name)\n    with registry.cursor() as cr:\n        importer = TranslationImporter(cr, db_name, overwrite=overwrite)\n        importer.load_modules()\n        importer.save()\n\n", "CodeBleu_score": 36.3235328204864}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n    if self.children is None:\n        self.children = []\n    new_node = Node(name, info)\n    new_node.depth = self.depth + 1\n    new_node.parent = self\n    if self.parent is not None:\n        new_node.parent_name = self.parent.name\n        new_node.parent_info = self.parent.info\n    if new_node not in self.children:\n        self.children.append(new_node)\n    self.children.sort(key=lambda x: x.name)\n    return new_node\n", "CodeBleu_score": 44.56175990693024}, {"code": "def add_child(self, name, info)\n    if name in self.children:\n      raise ValueError(\"Child with name '{}' already exists\".format(name))\n    child = Node(name, info, self.depth + 1, self.parent)\n    self.children.append(child)\n    self.children = sorted(self.children, key=lambda x: x.name)\n    return child\n", "CodeBleu_score": 39.256629619948434}, {"code": "def add_child(self, name, info)\n    child = Node(name, info)\n    child.depth = self.depth + 1\n    if not child in self.children:\n        self.children.append(child)\n    if hasattr(self, \"info\"):\n        for attr in dir(self.info):\n            if not hasattr(child.info, attr):\n                setattr(child.info, attr, getattr(self.info, attr))\n    self.children.sort(key=lambda x: x.name)\n    return child\n", "CodeBleu_score": 48.146261915476764}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n    result = {\n        \"dates\": dates,\n        \"balances\": [0 for _ in dates],\n    }\n    root_type = account.root_type\n    for entry in gl_entries:\n        for i, date in enumerate(dates):\n            if entry.date <= date:\n                if root_type in [\"Asset\", \"Expense\"]:\n                    result[\"balances\"][i] += entry.amount\n                else:\n                    result[\"balances\"][i] -= entry.amount\n    if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n        for i in range(1, len(dates)):\n            result[\"balances\"][i] += result[\"balances\"][i - 1]\n    return result\n\n", "CodeBleu_score": 27.11961871431817}, {"code": "def build_result(account, dates, gl_entries)\n    result = {\n        \"dates\": dates,\n        \"balance\": [0.0] * len(dates),\n        \"balance_change\": [0.0] * len(dates),\n        \"balance_change_percentage\": [0.0] * len(dates),\n    }\n    root_type = account.root_type\n    for entry in gl_entries:\n        if entry.account == account:\n            date_index = dates.index(entry.date)\n            result[\"balance\"][date_index] += entry.amount\n            if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n                for i in range(date_index + 1, len(dates)):\n                    result[\"balance\"][i] += entry.amount\n    if root_type not in [\"Asset\", \"Expense\"]:\n        for i in range(len(result[\"balance\"])):\n            result[\"balance\"][i] *= -1\n    for i in range(1, len(result[\"balance\"])):\n        result[\"balance_change\"][i] = result[\"balance\"][i] - result[\"balance\"][i - 1]\n        result[\"balance_change_percentage\"][i] = (\n            result[\"balance_change\"][i] / result[\"balance\"][i - 1]\n        ) * 100\n    return result\n\n", "CodeBleu_score": 26.20701666036859}, {"code": "def build_result(account, dates, gl_entries)\n    result = {\n        \"dates\": dates,\n        \"balances\": [0.0] * len(dates),\n    }\n    root_type = account.root_type\n    for entry in gl_entries:\n        if entry.account == account:\n            idx = dates.index(entry.date)\n            result[\"balances\"][idx] += entry.amount\n        elif entry.account.parent == account:\n            idx = dates.index(entry.date)\n            result[\"balances\"][idx] += entry.amount * -1\n    if root_type not in [\"Asset\", \"Expense\"]:\n        for idx, balance in enumerate(result[\"balances\"]):\n            result[\"balances\"][idx] *= -1\n    if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n        for idx in range(1, len(result[\"balances\"])):\n            result[\"balances\"][idx] += result[\"balances\"][idx - 1]\n    return result\n", "CodeBleu_score": 27.879256956368053}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n    if self.account_type in [\"Receivable\", \"Payable\"]:\n        old_account_type = frappe.db.get_value(\"Account\", self.name, \"account_type\")\n        if old_account_type!= self.account_type:\n            if frappe.db.exists(\"General Ledger\", {\"account\": self.name}):\n                frappe.throw(\n                    _(\"Changing the account type from Receivable/Payable to another type will result in potential issues in the Accounts report. Please consider the following before making the change:\"),\n                    title=_(\"Warning\"),\n                    indicator=\"red\",\n                )\n                frappe.msgprint(\n                    _(\"1. Ensure that the account is not used in any transactions or reports.\")\n                )\n                frappe.msgprint(\n                    _(\n                        \"2. If the account is used in transactions or reports, consider reclassifying the account to another type that is suitable for your business needs.\"\n                    )\n                )\n                frappe.msgprint(\n                    _(\n                        \"3. If you are sure that you want to change the account type, please proceed with caution and consult with your accounting team for additional guidance.\"\n                    )\n                )\n                frappe.db.set_value(\"Account\", self.name, \"comment\", \"Warning: Account type change\")\n\n", "CodeBleu_score": 22.026954584187926}, {"code": "def validate_receivable_payable_account_type(self)\n    for account in self:\n        if account.account_type in (\"Receivable\", \"Payable\"):\n            # Check if there are any existing general ledger entries for the account\n            if account.id in self.env[\"account.move.line\"]._get_children_of_account_ids():\n                # Generate warning message and add comment to the account record\n                account.message_post(\n                    body=_(\"Potential issues in the 'Accounts' report. Please review.\")\n                )\n                account.comment = (\n                    account.comment\n                    + \"\\nPotential issues in the 'Accounts' report. Please review.\"\n                )", "CodeBleu_score": 20.589513065671433}, {"code": "def validate_receivable_payable_account_type(self)\n    # Get the account type before and after the save operation\n    before_account_type = self.fetched_doc.account_type\n    after_account_type = self.doc.account_type\n    # Check if the account type has changed from \"Receivable\" or \"Payable\" to a non-receivable/payable type\n    if before_account_type in [\"Receivable\", \"Payable\"] and after_account_type not in [\"Receivable\", \"Payable\"]:\n        # Check if there are existing general ledger entries for the account\n        if frappe.db.exists(\"General Ledger Entry\", {\"account\": self.doc.name}):\n            # Generate a warning message and add a comment to the account record\n            message = _(\n                \"Changing the account type from 'Receivable' or 'Payable' to a non-receivable/payable type may cause issues in the 'Accounts' report. Please check the report and make necessary adjustments.\"\n            )\n            frappe.throw(message, title=_(\"Warning\"), indicator=\"orange\")\n            frappe.db.set_value(\"Account\", self.doc.name, \"comment\", message)\n\n", "CodeBleu_score": 29.527889219770493}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n    if self.currency_id:\n        self.currency_id.validate_account_currency(self)\n    else:\n        self.currency_id = self.company_id.currency_id\n        self.currency_id.validate_account_currency(self)\n    if self.currency_id.id!= self.company_id.currency_id.id:\n        if self.env['account.move.line'].search([('account_id', '=', self.id)]):\n            raise UserError(_(\"You cannot change the currency of an account that has existing journal items.\"))\n        self.currency_id.write({'explicit_selection': True})\n\n", "CodeBleu_score": 27.89213740759141}, {"code": "def validate_account_currency(self)\n\n    if self.currency_id:\n        self.currency_explicit = True\n    else:\n        self.currency_id = self.company_id.currency_id.id\n        self.currency_explicit = False\n\n    if self.currency_id!= self.company_id.currency_id.id:\n        # Check for existing general ledger entries with a different currency\n        existing_entries = self.env['account.move.line'].search([\n            ('account_id', '=', self.id),\n            ('currency_id', '!=', self.currency_id),\n        ])\n        if existing_entries:\n            raise UserError(_('You cannot change the currency of this account because there are existing general ledger entries with a different currency.'))\n", "CodeBleu_score": 40.417153991935585}, {"code": "def validate_account_currency(self)\n    if self.currency_id:\n        self.currency_id = self.currency_id.with_context(\n            force_company=self.company_id.id)\n        self.currency_id.check_company(self.company_id)\n        self.currency_specified = True\n    elif self.company_id.currency_id:\n        self.currency_id = self.company_id.currency_id\n        self.currency_specified = False\n    else:\n        raise UserError(\n            _('You must define a default currency for the company.'))\n\n    if self.currency_id!= self.company_id.currency_id:\n        if self.env['account.move.line'].search_count([('account_id', '=', self.id)]):\n            raise UserError(_(\n                'You cannot change the currency of this account because there are already journal entries for this account.'))\n        self.currency_specified = True\n\n", "CodeBleu_score": 30.169543831659638}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n    # Initialize the dictionary to merge entries\n    merged_entries = {}\n    # Iterate through each entry\n    for entry in entries:\n        # Generate a unique key based on the specified accounting dimensions\n        key = tuple(entry[dimension] for dimension in accounting_dimensions)\n        # Update the debit, credit, and their respective amounts in account currency\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \"debit\": 0,\n                \"credit\": 0,\n                \"debit_amount_account_currency\": 0,\n                \"credit_amount_account_currency\": 0,\n            }\n        merged_entries[key][\"debit\"] += entry[\"debit\"]\n        merged_entries[key][\"credit\"] += entry[\"credit\"]\n        merged_entries[key][\"debit_amount_account_currency\"] += entry[\"debit_amount_account_currency\"]\n        merged_entries[key][\"credit_amount_account_currency\"] += entry[\"credit_amount_account_currency\"]\n    return merged_entries", "CodeBleu_score": 40.34801738557461}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n    aggregated_entries = {}\n    for entry in entries:\n        key = tuple(entry[dimension] for dimension in accounting_dimensions)\n        if key not in aggregated_entries:\n            aggregated_entries[key] = {\n                'debit': 0,\n                'credit': 0,\n                'debit_account_currency': 0,\n                'credit_account_currency': 0,\n                'last_account_closing_balance': 0,\n            }\n        aggregated_entries[key]['debit'] += entry['debit']\n        aggregated_entries[key]['credit'] += entry['credit']\n        aggregated_entries[key]['debit_account_currency'] += entry['debit_account_currency']\n        aggregated_entries[key]['credit_account_currency'] += entry['credit_account_currency']\n        aggregated_entries[key]['last_account_closing_balance'] = entry['last_account_closing_balance']\n    return aggregated_entries\n\n", "CodeBleu_score": 30.5482020773354}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n    aggregated_entries = {}\n    for entry in entries:\n        key = tuple(entry[dimension] for dimension in accounting_dimensions)\n        if key not in aggregated_entries:\n            aggregated_entries[key] = {\n                \"debit\": entry[\"debit\"],\n                \"credit\": entry[\"credit\"],\n                \"debit_amount\": entry[\"debit_amount\"],\n                \"credit_amount\": entry[\"credit_amount\"],\n            }\n        else:\n            aggregated_entries[key][\"debit\"] += entry[\"debit\"]\n            aggregated_entries[key][\"credit\"] += entry[\"credit\"]\n            aggregated_entries[key][\"debit_amount\"] += entry[\"debit_amount\"]\n            aggregated_entries[key][\"credit_amount\"] += entry[\"credit_amount\"]\n    return aggregated_entries\n\n", "CodeBleu_score": 30.105931806478104}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n    if self.supplier_id.is_blocked:\n      if self.supplier_id.block_type == 'payment':\n        if self.supplier_id.release_date < self.date:\n          raise Warning(_('The supplier is blocked for payments, but the release date has passed.'))\n      elif self.supplier_id.block_type == 'invoice':\n        if self.supplier_id.release_date < self.date:\n          raise Warning(_('The supplier is blocked for invoices, but the release date has passed.'))\n      else:\n        raise Warning(_('The supplier is blocked.'))\n", "CodeBleu_score": 18.600431511626294}, {"code": "def ensure_supplier_is_not_blocked(self)\n    if self.supplier_id.is_blocked:\n        if self.supplier_id.hold_type == 'payment' and self.is_payment:\n            if self.supplier_id.release_date > self.date:\n                raise ValidationError(_(\"The supplier is on hold and the hold type matches the transaction type. The supplier is still blocked until %s.\") % (self.supplier_id.release_date))\n        elif self.supplier_id.hold_type == 'invoice' and not self.is_payment:\n            if self.supplier_id.release_date > self.date:\n                raise ValidationError(_(\"The supplier is on hold and the hold type matches the transaction type. The supplier is still blocked until %s.\") % (self.supplier_id.release_date))\n", "CodeBleu_score": 22.087455663735305}, {"code": "def ensure_supplier_is_not_blocked(self)\n    if self.is_blocked:\n        if self.blocked_type == 'Supplier Payment':\n            if self.blocked_release_date:\n                if self.blocked_release_date > getdate():\n                    raise frappe.ValidationError(_(\"Supplier is on hold. Payment cannot be made.\"))\n            else:\n                raise frappe.ValidationError(_(\"Supplier is on hold. Payment cannot be made.\"))\n        elif self.blocked_type == 'Buying Invoice':\n            if self.blocked_release_date:\n                if self.blocked_release_date > getdate():\n                    raise frappe.ValidationError(_(\"Supplier is on hold. Buying Invoice cannot be made.\"))\n            else:\n                raise frappe.ValidationError(_(\"Supplier is on hold. Buying Invoice cannot be made.\"))\n", "CodeBleu_score": 21.27948565230211}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n    repost_doctypes = self.get_repost_doctypes()\n    if not repost_doctypes:\n        return\n    voucher_type = self.get_voucher_type()\n    voucher_no = self.get_voucher_no()\n    if not voucher_type or not voucher_no:\n        return\n    repost_vouchers = []\n    vouchers = []\n    for doctype in repost_doctypes:\n        parent_doctype = self.get_parent_doctype(doctype)\n        if not parent_doctype:\n            continue\n        parent_docnames = self.get_parent_docnames(doctype, voucher_type, voucher_no)\n        if not parent_docnames:\n            continue\n        for docname in parent_docnames:\n            parent = frappe.get_doc(parent_doctype, docname)\n            if parent.get(\"repost_vouchers\"):\n                repost_vouchers.append(parent)\n            elif parent.get(\"vouchers\"):\n                vouchers.append(parent)\n    for parent in repost_vouchers:\n        parent.repost_vouchers = [\n            d for d in parent.repost_vouchers if d.voucher_type!= voucher_type or d.voucher_no!= voucher_no\n        ]\n        parent.flags.ignore_links = True\n        parent.flags.ignore_validate = True\n        parent.save()\n    for parent in vouchers:\n        parent.vouchers = [d for d in parent.vouchers if d.voucher_type!= voucher_type or d.voucher_no!= voucher_no]\n        parent.flags.ignore_links = True\n        parent.flags.ignore_validate = True\n        parent.save()\n\n", "CodeBleu_score": 25.50927042011916}, {"code": "def _remove_references_in_repost_doctypes(self)\n    repost_doctypes = self.get_repost_doctypes()\n    if not repost_doctypes:\n      return\n    voucher_type = self.get_voucher_type()\n    voucher_number = self.get_voucher_number()\n    if not voucher_type or not voucher_number:\n      return\n    for doctype in repost_doctypes:\n      parent_doctype = doctype.parent_doctype\n      parent_field = doctype.parent_field\n      parent_table = doctype.parent_table\n      parent_field_type = doctype.parent_field_type\n      parent_field_name = doctype.parent_field_name\n      parent_field_label = doctype.parent_field_label\n      if parent_field_type == \"Link\":\n        parent_field_type = \"Table\"\n        parent_field_name = parent_field_name + \"_list\"\n        parent_field_label = parent_field_label + \" List\"\n      if parent_field_type == \"Table\":\n        parent_field_type = \"Link\"\n        parent_field_name = parent_field_name + \"_list\"\n        parent_field_label = parent_field_label + \" List\"\n      if parent_field_type == \"Link\":\n        parent_field_type = \"Table\"\n        parent_field_name = parent_field_name + \"_list\"\n        parent_field_label = parent_field_label + \" List\"\n      if parent_field_type == \"Table\":\n        parent_field_type = \"Link\"\n        parent_field_name = parent_field_name + \"_list\"\n        parent_field_label = parent_field_label + \" List\"\n      if parent_field_type == \"Link\":\n        parent_field_type = \"Table\"\n        parent_field_name = parent_field_name + \"_list\"\n        parent_field_label = parent_field_label + \" List\"\n      if parent_field_type == \"Table\":\n        parent_field_type = \"Link\"\n        parent_field_name = parent_field_name + \"_list\"\n        parent_field_label = parent_field_label + \" List\"\n      if parent_field_type == \"Link\":\n        parent_field_type = \"Table\"\n        parent_field_name = parent_field_name", "CodeBleu_score": 15.626751214878833}, {"code": "def _remove_references_in_repost_doctypes(self)\n    repost_doctypes = set(self.get_repost_doctypes())\n    if not repost_doctypes:\n        return\n    voucher_type = self.doctype\n    voucher_number = self.name\n    voucher_rows = frappe.db.sql(\n        \"\"\"\n        SELECT parent, parenttype\n        FROM `tabRepost Vouchers`\n        WHERE voucher_type = %s AND voucher_number = %s\n        \"\"\",\n        (voucher_type, voucher_number),\n        as_dict=True,\n    )\n    if not voucher_rows:\n        return\n    voucher_rows_by_parent_doctype = {}\n    for row in voucher_rows:\n        voucher_rows_by_parent_doctype.setdefault(row.parenttype, []).append(row)\n    for parent_doctype, rows in voucher_rows_by_parent_doctype.items():\n        if parent_doctype not in repost_doctypes:\n            continue\n        parent_doc = frappe.get_doc(parent_doctype, rows[0].parent)\n        for row in rows:\n            parent_doc.remove_from_repost_vouchers(row.parenttype, row.parent, voucher_type, voucher_number)\n        parent_doc.flags.ignore_links = True\n        parent_doc.flags.ignore_validate = True\n        parent_doc.save()\n\n", "CodeBleu_score": 30.16534389569913}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n    try:\n        self.client.authenticate()\n        params = {\n            \"startDate\": start_date,\n            \"endDate\": end_date,\n            \"accountId\": account_id,\n            \"offset\": 0,\n            \"limit\": 1000,\n        }\n        transactions = []\n        while True:\n            response = self.client.get_transactions(params)\n            transactions.extend(response[\"transactions\"])\n            if len(transactions) >= response[\"total\"]:\n                break\n            params[\"offset\"] += params[\"limit\"]\n        return transactions\n    except PlaidError as e:\n        raise e\n    except Exception as e:\n        raise e\n", "CodeBleu_score": 37.562227323302096}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n    try:\n        self.authenticate()\n        query_params = {\n            \"fromDate\": start_date,\n            \"toDate\": end_date,\n            \"accountId\": account_id,\n        }\n        transactions = []\n        while True:\n            response = self.client.get_transactions(query_params)\n            transactions.extend(response[\"transactions\"])\n            if len(transactions) < response[\"totalTransactions\"]:\n                query_params[\"offset\"] = len(transactions)\n            else:\n                break\n        return transactions\n    except Exception as e:\n        if hasattr(e, \"error_code\"):\n            raise e\n        else:\n            logger.error(\"An error occurred while retrieving transactions: %s\", e)\n\n", "CodeBleu_score": 34.709055396771646}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n    try:\n        # Authenticate the client\n        self.authenticate()\n\n        # Initialize the query parameters\n        query_parameters = {\n            \"start_date\": start_date.strftime(\"%Y-%m-%d\"),\n            \"end_date\": end_date.strftime(\"%Y-%m-%d\"),\n        }\n\n        # If an account ID is provided, add it to the query parameters\n        if account_id:\n            query_parameters[\"account_id\"] = account_id\n\n        # Initialize the transactions list\n        transactions = []\n\n        # Initialize the page number\n        page = 1\n\n        # Loop until all transactions are retrieved\n        while True:\n            # Construct the query URL\n            query_url = f\"{self.base_url}/transactions?page={page}&{urlencode(query_parameters)}\"\n\n            # Send the GET request\n            response = self.session.get(query_url)\n\n            # Handle specific errors\n            if response.status_code == 401:\n                raise AuthenticationError(\"Invalid API key or secret.\")\n            elif response.status_code == 404:\n                raise NotFoundError(\"No transactions found for the specified date range and account ID.\")\n            elif response.status_code == 429:\n                raise RateLimitError(\"You have exceeded the API rate limit.\")\n\n            # Parse the response JSON\n            response_json = response.json()\n\n            # Add the retrieved transactions to the list\n            transactions.extend(response_json[\"transactions\"])\n\n            # Check if all transactions are retrieved\n            if len(transactions) >= response_json[\"total\"]:\n                break\n\n            # Increment the page number\n            page += 1\n\n        # Return the transactions\n        return transactions\n\n    except Exception as e:\n        # Log the exception\n        logging.error(f\"Error fetching transactions: {e}\")\n        raise e\n", "CodeBleu_score": 34.723088840506236}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n    try:\n        institution = response['institution']\n        access_token = response['access_token']\n        institution_id = institution['institution_id']\n        name = institution['name']\n        try:\n            bank = Bank.objects.get(institution_id=institution_id)\n            bank.access_token = access_token\n            bank.save()\n        except Bank.DoesNotExist:\n            bank = Bank(institution_id=institution_id, name=name, access_token=access_token)\n            bank.save()\n    except Exception as e:\n        logger.error('Error adding institution: {}'.format(e))\n\n", "CodeBleu_score": 37.4981098035903}, {"code": "def add_institution(token, response)\n    try:\n        institution = response['institution']\n        access_token = response['access_token']\n        institution_id = institution['institution_id']\n        name = institution['name']\n        plaid_connector = PlaidConnector()\n        access_token_response = plaid_connector.get_access_token(token, institution_id)\n        access_token = access_token_response['access_token']\n        bank = Bank.query.filter_by(institution_id=institution_id).first()\n        if bank is None:\n            bank = Bank(institution_id=institution_id, name=name, access_token=access_token)\n            db.session.add(bank)\n            db.session.commit()\n        else:\n            bank.access_token = access_token\n            db.session.commit()\n    except Exception as e:\n        logger.error(f'Error adding institution: {e}')\n\n", "CodeBleu_score": 35.43368744362726}, {"code": "def add_institution(token, response)\n    try:\n        # Parse the response\n        data = json.loads(response)\n        # Retrieve the access token using the PlaidConnector\n        access_token = PlaidConnector.get_access_token(token)\n        # Check if the bank already exists in the database\n        bank = Bank.query.filter_by(institution_id=data['institution']['institution_id']).first()\n        if bank is None:\n            # Create and insert a new bank record\n            bank = Bank(institution_id=data['institution']['institution_id'],\n                        institution_name=data['institution']['name'],\n                        access_token=access_token)\n            db.session.add(bank)\n            db.session.commit()\n        else:\n            # Update the access token for the existing bank record\n            bank.access_token = access_token\n            db.session.commit()\n    except Exception as e:\n        # Log any errors that occur during the process\n        current_app.logger.error(f'Error adding institution: {e}')\n\n", "CodeBleu_score": 41.000623845175035}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n    try:\n        # Get the last integration date\n        last_integration_date = bank_account.last_integration_date or datetime.now()\n        # Determine the start and end dates for the transaction retrieval\n        start_date = last_integration_date.date()\n        end_date = datetime.now().date()\n        # Fetch the transactions\n        transactions = bank.fetch_transactions(bank_account, start_date, end_date)\n        # Process the transactions into new bank transactions\n        for transaction in transactions:\n            bank_transaction = BankTransaction.objects.create(\n                bank_account=bank_account,\n                date=transaction.date,\n                description=transaction.description,\n                amount=transaction.amount,\n                transaction_type=transaction.transaction_type,\n            )\n            # Log the new transaction\n            logger.info(f\"New bank transaction added: {bank_transaction}\")\n        # Update the last integration date to the date of the oldest transaction\n        oldest_transaction_date = min(transaction.date for transaction in transactions)\n        bank_account.last_integration_date = oldest_transaction_date\n        bank_account.save()\n    except Exception as e:\n        # Log the error message\n        logger.error(f\"Error syncing transactions: {e}\")\n\n", "CodeBleu_score": 32.12557457661649}, {"code": "def sync_transactions(bank, bank_account)\n    try:\n        # Get the last integration date\n        last_integration_date = bank_account.last_integration_date\n        if last_integration_date is None:\n            last_integration_date = datetime.now() - timedelta(days=30)\n\n        # Determine the start and end dates for the transaction retrieval\n        start_date = last_integration_date.date()\n        end_date = datetime.now().date()\n\n        # Fetch the transactions\n        transactions = bank.get_transactions(bank_account, start_date, end_date)\n\n        # Process the transactions into new bank transactions\n        for transaction in transactions:\n            new_transaction = BankTransaction.objects.create(\n                bank_account=bank_account,\n                amount=transaction.amount,\n                description=transaction.description,\n                transaction_date=transaction.transaction_date,\n                transaction_type=transaction.transaction_type,\n            )\n            new_transaction.save()\n\n        # Update the last integration date to the date of the oldest transaction\n        oldest_transaction = BankTransaction.objects.filter(bank_account=bank_account).order_by(\"transaction_date\").first()\n        if oldest_transaction:\n            bank_account.last_integration_date = oldest_transaction.transaction_date\n            bank_account.save()\n\n        # Log the number of new transactions added\n        logger.info(f\"Added {len(transactions)} new transactions for bank account {bank_account.id}\")\n    except Exception as e:\n        # Handle any exceptions by logging an error message\n        logger.error(f\"Error syncing transactions for bank account {bank_account.id}: {e}\")", "CodeBleu_score": 36.64506574268973}, {"code": "def sync_transactions(bank, bank_account)\n    try:\n        # Determine the start and end dates for the transaction retrieval\n        start_date = bank_account.last_integration_date or datetime.date.today() - datetime.timedelta(days=30)\n        end_date = datetime.date.today()\n\n        # Fetch the transactions\n        transactions = bank.get_transactions(bank_account.account_number, start_date, end_date)\n\n        # Process the transactions into new bank transactions\n        new_transactions = []\n        for transaction in transactions:\n            new_transaction = BankTransaction(\n                bank_account=bank_account,\n                amount=transaction[\"amount\"],\n                date=transaction[\"date\"],\n                description=transaction[\"description\"],\n                transaction_type=transaction[\"transaction_type\"],\n                category=transaction[\"category\"],\n            )\n            new_transactions.append(new_transaction)\n\n        # Save the new transactions\n        BankTransaction.objects.bulk_create(new_transactions)\n\n        # Update the last integration date to the date of the oldest transaction\n        oldest_transaction = min(transactions, key=lambda t: t[\"date\"])\n        bank_account.last_integration_date = oldest_transaction[\"date\"]\n        bank_account.save()\n\n        # Log the number of new transactions added\n        logger.info(f\"Added {len(new_transactions)} new transactions for bank account {bank_account.id}.\")\n    except Exception as e:\n        # Log an error message if an exception occurs\n        logger.error(f\"Error syncing transactions for bank account {bank_account.id}: {e}\")", "CodeBleu_score": 34.688987535582385}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n    # Construct the query URI\n    query_uri = self.get_query_uri(entity)\n    # Determine the total number of entries\n    total_entries = self.get_total_entries(query_uri)\n    # Fetch the entries in batches of 1000\n    batch_size = 1000\n    for i in range(0, total_entries, batch_size):\n        try:\n            entries = self.get_entries(query_uri, i, batch_size)\n            self.preprocess_entries(entries)\n            self.save_entries(entity, entries)\n        except Exception as e:\n            logging.error(f\"Error fetching {entity} entries: {e}\")\n            logging.error(f\"Response text: {e.response.text}\")\n", "CodeBleu_score": 21.900249030574788}, {"code": "def _migrate_entries(self, entity)\n    self._log.info(\"Migrating %s entries for company %s\", entity, self.company_id)\n    query_uri = self._get_query_uri(entity)\n    total_count = self._get_total_count(query_uri)\n    if total_count == 0:\n        self._log.info(\"No %s entries to migrate\", entity)\n        return\n\n    self._log.info(\"Migrating %s %s entries for company %s\", total_count, entity, self.company_id)\n    self._log.info(\"Query URI: %s\", query_uri)\n    offset = 0\n    while offset < total_count:\n        self._log.info(\"Fetching %s entries starting at offset %s\", entity, offset)\n        query_uri = self._get_query_uri(entity, offset)\n        response = self._get_response(query_uri)\n        if response.status_code == 200:\n            entries = self._get_entries(response.text)\n            self._log.info(\"Fetched %s entries starting at offset %s\", len(entries), offset)\n            self._preprocess_entries(entity, entries)\n            self._save_entries(entity, entries)\n            self._log.info(\"Saved %s entries starting at offset %s\", len(entries), offset)\n            offset += len(entries)\n        else:\n            self._log.error(\"Error fetching %s entries starting at offset %s: %s\", entity, offset, response.text)\n\n", "CodeBleu_score": 26.630009930049464}, {"code": "def _migrate_entries(self, entity)\n    # Construct the query URI\n    query = f\"select * from {entity}\"\n    query_uri = self._construct_query_uri(query)\n    # Determine the total number of entries\n    total_count = self._get_total_count(query_uri)\n    # Fetch the entries in batches of 1000\n    for offset in range(0, total_count, 1000):\n        query_uri = self._construct_query_uri(query, offset)\n        try:\n            response = self.session.get(query_uri)\n            response.raise_for_status()\n            entries = response.json()\n            # Preprocess and save the entries\n            self._preprocess_entries(entries)\n            self._save_entries(entries)\n        except Exception as e:\n            self.logger.error(f\"Error occurred while fetching {entity} entries: {e}\")\n            self.logger.error(f\"Response text: {response.text}\")\n\n", "CodeBleu_score": 29.17320262361485}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n    if invoice.type == \"StatementCharge\" or invoice.type == \"ReimburseCharge\":\n        invoice.type = \"JournalEntry\"\n        invoice.Line = []\n        invoice.Line.append({\n            \"Amount\": invoice.TotalAmt,\n            \"DetailType\": \"JournalEntryLineDetail\",\n            \"JournalEntryLineDetail\": {\n                \"PostingType\": \"Credit\"\n            }\n        })\n        invoice.Line.append({\n            \"Amount\": invoice.TotalAmt,\n            \"DetailType\": \"JournalEntryLineDetail\",\n            \"JournalEntryLineDetail\": {\n                \"PostingType\": \"Debit\"\n            }\n        })\n    else:\n        invoice.type = \"SalesInvoice\"\n\n    invoice.Id = _get_id(invoice)\n    invoice.SyncToken = 0\n    invoice.sparse = False\n    invoice.CustomerRef = {\n        \"value\": _get_id(invoice.CustomerRef)\n    }\n    invoice.BillEmail = {\n        \"Address\": invoice.BillEmail\n    }\n    invoice.Line = _get_lines(invoice.Line)\n    invoice.save()\n\n", "CodeBleu_score": 25.818278220533962}, {"code": "def _save_invoice(self, invoice)\n    if invoice.type == \"StatementCharge\" or invoice.type == \"ReimburseCharge\":\n        invoice.quickbooks_id = self._save_journal_entry(invoice)\n    else:\n        invoice.quickbooks_id = self._save_sales_invoice(invoice)\n    invoice.save()\n\n", "CodeBleu_score": 34.436427587631805}, {"code": "def _save_invoice(self, invoice)\n    if invoice.type == \"StatementCharge\" or invoice.type == \"ReimburseCharge\":\n        journal_entry = self._get_journal_entry_from_invoice(invoice)\n        self._save_journal_entry(journal_entry)\n    else:\n        self._save_sales_invoice(invoice)\n", "CodeBleu_score": 28.719184093907923}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n    # Calculate the interval between visits\n    interval = (end_date - start_date) / (no_of_visit - 1)\n    # Create a list of schedule dates\n    schedule = [start_date]\n    for i in range(no_of_visit - 1):\n        schedule.append(schedule[-1] + interval)\n    # Adjust dates to avoid holidays\n    for i, date in enumerate(schedule):\n        while date.weekday() in [5, 6] or date in self.holidays:\n            schedule[i] += timedelta(days=1)\n    return schedule\n", "CodeBleu_score": 22.2784318229709}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n    # Calculate the interval between visits\n    interval = (end_date - start_date) / no_of_visit\n    # Create a list of schedule dates\n    schedule_list = []\n    # Iterate through the interval and create schedule dates\n    for i in range(no_of_visit):\n        schedule_date = start_date + interval * i\n        # Adjust the schedule date if it falls on a holiday\n        if schedule_date.weekday() == 5:  # Friday\n            schedule_date += datetime.timedelta(days=2)\n        elif schedule_date.weekday() == 6:  # Saturday\n            schedule_date += datetime.timedelta(days=1)\n        schedule_list.append(schedule_date)\n    # Return the list of schedule dates\n    return schedule_list\n", "CodeBleu_score": 28.442762128215865}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n    schedule = []\n    interval = (end_date - start_date).days // (no_of_visit - 1)\n    for i in range(no_of_visit):\n        schedule_date = start_date + timedelta(days=i * interval)\n        while schedule_date in sales_person.holidays:\n            schedule_date += timedelta(days=1)\n        schedule.append(schedule_date)\n    return schedule\n", "CodeBleu_score": 22.20686466296836}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = [])// Determine the method to handle the request\n        $method = $this->request->method();", "CodeBleu_score": 9.63288725582423}, {"code": "<?\n   public function response($view, $data = [])\n/**\n * This line sets the response status to success and sets the message to \"Success\".\n */\n       $this->response['status'] ='success';\n       $this->response['message'] = 'Success';\n", "CodeBleu_score": 11.268657013620405}, {"code": "<?\n   public function response($view, $data = [])\t$method = $this->request->method();\n\t$url = $this->request->url();\n\t$handle = $this->request->handle;\n\t$title = $this->request->title;\n\t$html = view($view, $data)->render();\n\treturn response()->json([\n\t\t'status' =>'success',\n\t\t'message' => 'Successfully retrieved data.',\n\t\t'data' => [\n\t\t\t'title' => $title,\n\t\t\t'path' => $url,\n\t\t\t'handle' => $handle,\n\t\t\t'html' => $html,\n\t\t],\n\t]);\n}\n}", "CodeBleu_score": 34.134869862141684}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request)\t$contacts = $request->getParameter('contacts');\n\tforeach ($contacts as $contact) {\n\t\ttry {\n\t\t\t$this->deleteContact($contact);\n\t\t} catch (Exception $e) {\n\t\t\t$this->addFlash(sprintf('Could not delete contact %s', $contact), 'error');\n\t\t}\n\t}\n}\n", "CodeBleu_score": 42.99471775403798}, {"code": "<?\npublic function deleteContacts($request)\t$contacts = $request->get('contacts');\n\tforeach ($contacts as $contact) {\n\t\ttry {\n\t\t\t$this->dispatch(new DeleteContact($contact));\n\t\t} catch (Exception $e) {\n\t\t\t$request->session()->flash('error', 'Unable to delete contact');\n\t\t}\n\t}\n}", "CodeBleu_score": 53.29877811502448}, {"code": "<?\npublic function deleteContacts($request)\t$contacts = $request->get('contacts');\n\t$success = true;\n\t$error = \"\";\n\t$deleted = 0;\n\tforeach ($contacts as $contact) {\n\t\ttry {\n\t\t\t$this->deleteContact($contact);\n\t\t\t$deleted++;\n\t\t} catch (Exception $e) {\n\t\t\t$success = false;\n\t\t\t$error = $e->getMessage();\n\t\t}\n\t}\n\t$request->set('success', $success);\n\t$request->set('error', $error);\n\t$request->set('deleted', $deleted);\n}\n", "CodeBleu_score": 42.16226656612854}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request)\t// Get the transactions to delete.\n\t$transactions = $this->getTransactions($request);\n\n\t// Delete the transactions.\n\tforeach ($transactions as $transaction) {\n\t\t// Attempt to delete the transaction.\n\t\ttry {\n\t\t\t$this->deleteTransaction($transaction);\n\t\t} catch (Exception $e) {\n\t\t\t// Flash an error message.\n\t\t\tflash()->error($e->getMessage());\n\t\t}\n\t}\n}", "CodeBleu_score": 50.52330821670636}, {"code": "<?\npublic function deleteTransactions($request)\t$transactions = $this->getTransactions($request);\n\tforeach ($transactions as $transaction) {\n\t\tif (!$this->deleteTransaction($transaction)) {\n\t\t\tflash()->error(trans('messages.transaction_delete_failed'));\n\t\t}\n\t}\n}\n", "CodeBleu_score": 40.96320152388677}, {"code": "<?\npublic function deleteTransactions($request)\ttry {\n\t\t$transactions = $this->getTransactions($request);\n\t\tforeach($transactions as $transaction) {\n\t\t\t$this->dispatch(new DeleteTransaction($transaction));\n\t\t}\n\t} catch(Exception $e) {\n\t\tflash()->error($e->getMessage());\n\t}\n}", "CodeBleu_score": 47.485153750565615}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator)\tif (! $this instanceof FormRequest) {\n\t\treturn;\n\t}\n\n\t$data = $this->all();\n\n\tforeach ($data as $key => $value) {\n\t\t$request = $this->initialize($this->request->replace([$key => $value]));\n\t\t$rules = $this->container->call([$this, 'rules']);\n\t\t$validator->after(function ($validator) use ($request, $rules) {\n\t\t\ttry {\n\t\t\t\t$this->validate($request, $rules);\n\t\t\t} catch (ValidationException $e) {\n\t\t\t\t$validator->errors()->merge($e->validator->errors());\n\t\t\t}\n\t\t});\n\t}\n}\n", "CodeBleu_score": 37.80566888883244}, {"code": "<?\npublic function withValidator($validator)\tif (class_exists($this->getFormRequestClass()) && is_subclass_of($this->getFormRequestClass(), FormRequest::class)) {\n\t\t$request = new $this->getFormRequestClass();\n\t\t$rules = $request->rules();\n\t\t$data = $this->all();\n\t\tforeach ($data as $key => $value) {\n\t\t\t$validator->after(function ($validator) use ($rules, $key, $value) {\n\t\t\t\t$request = new $this->getFormRequestClass();\n\t\t\t\t$rules = $request->rules();\n\t\t\t\tif (array_key_exists($key, $rules)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t$request->validate([$key => $value], [$key => $rules[$key]]);\n\t\t\t\t\t} catch (ValidationException $e) {\n\t\t\t\t\t\t$validator->errors()->add($key, $e->validator->errors()->first($key));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}", "CodeBleu_score": 33.98738830949102}, {"code": "<?\npublic function withValidator($validator)\tif (!($this instanceof FormRequest)) {\n\t\treturn;\n\t}\n\t$data = $this->all();\n\tforeach ($data as $key => $value) {\n\t\t$request = new static;\n\t\t$request->initialize($this->query->all(), $this->request->all(), $this->attributes->all());\n\t\t$rules = $request->rules();\n\t\t$validator->after(function($validator) use ($rules, $key, $value) {\n\t\t\ttry {\n\t\t\t\t$request = new static;\n\t\t\t\t$request->initialize($this->query->all(), $this->request->all(), $this->attributes->all());\n\t\t\t\t$request->validate();\n\t\t\t} catch (ValidationException $e) {\n\t\t\t\t$validator->errors()->add($key, $e->validator->errors()->first());\n\t\t\t}\n\t\t});\n\t}\n}\n", "CodeBleu_score": 32.1633926077436}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void\tif ($this instanceof ShouldUpdate) {\n\t\tif (count($arguments) > 0) {\n\t\t\tif ($arguments[0] instanceof Model) {\n\t\t\t\t$this->setModel($arguments[0]);\n\t\t\t}\n\t\t}\n\n\t\tif (count($arguments) > 1) {\n\t\t\tif ($arguments[1] instanceof Request) {\n\t\t\t\t$this->setRequest($arguments[1]);\n\t\t\t}\n\t\t}\n\t}\n}\n", "CodeBleu_score": 32.08631906717328}, {"code": "<?\npublic function bootUpdate(...$arguments): void\tif (is_subclass_of($this, ShouldUpdate::class)) {\n\t\tif (isset($arguments[0]) && $arguments[0] instanceof Model) {\n\t\t\t$this->model = $arguments[0];\n\t\t}\n\n\t\tif (isset($arguments[1]) && $arguments[1] instanceof Request) {\n\t\t\t$this->request = $arguments[1];\n\t\t}\n\t}\n}\n", "CodeBleu_score": 47.449519497936606}, {"code": "<?\npublic function bootUpdate(...$arguments): void\tif ($this instanceof ShouldUpdate) {\n\t\tif (count($arguments) > 0 && $arguments[0] instanceof Model) {\n\t\t\t$this->model = $arguments[0];\n\t\t}\n\n\t\tif (count($arguments) > 1 && $arguments[1] instanceof Request) {\n\t\t\t$this->request = $arguments[1];\n\t\t}\n\t}\n}", "CodeBleu_score": 48.28692675263933}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name')\t$request = request();\n\t$sort = $request->sort?? $sort;\n\t$sort = explode('|', $sort);\n\t$query = $query->search($request->search)\n\t\t->orderBy($sort[0], $sort[1]?? 'asc');\n\tif ($request->expectsJson() &&! $request->wantsJson()) {\n\t\treturn $query->get();\n\t}\n\treturn $query->paginate($request->limit?? config('app.pagination_limit'));\n}\n", "CodeBleu_score": 50.3807659698666}, {"code": "<?\n public function scopeCollect($query, $sort = 'name')\t$search = request()->query('search');\n\tif ($search) {\n\t\t$query->where('name', 'LIKE', \"%{$search}%\");\n\t}\n\tif ($sort) {\n\t\t$query->orderBy($sort);\n\t}\n\tif (request()->expectsJson() &&!request()->wantsJson()) {\n\t\treturn $query->get();\n\t}\n\treturn $query->paginate(request()->query('limit')?? 10);\n}", "CodeBleu_score": 34.5213247126714}, {"code": "<?\n public function scopeCollect($query, $sort = 'name')\t$request = request();\n\t$search = $request->input('search');\n\t$limit = $request->input('limit')?: 15;\n\t$is_api = $request->input('is_api')?: false;\n\t$is_json = $request->wantsJson() || $is_api;\n\n\tif ($search) {\n\t\t$query = $query->where('name', 'like', \"%{$search}%\");\n\t}\n\n\tif ($sort) {\n\t\t$query = $query->orderBy($sort);\n\t}\n\n\tif ($is_json) {\n\t\treturn $query->get();\n\t}\n\n\treturn $query->paginate($limit);\n}\n", "CodeBleu_score": 53.850422203874594}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model)\t$open = 0;\n\t$overdue = 0;\n\tif ($model->status == 'paid') {\n\t\treturn array(0, 0);\n\t}\n\tforeach ($model->transactions as $transaction) {\n\t\tif ($transaction->type == 'payment') {\n\t\t\t$open -= $transaction->amount;\n\t\t} else {\n\t\t\t$open += $transaction->amount;\n\t\t}\n\t}\n\tif ($model->status == 'partial') {\n\t\tif ($model->due_date < date('Y-m-d')) {\n\t\t\t$overdue = $open;\n\t\t} else {\n\t\t\t$open = $open;\n\t\t}\n\t}\n\treturn array($open, $overdue);\n}\n", "CodeBleu_score": 38.142269072116456}, {"code": "<?\npublic function calculateDocumentTotals($model)\t$totals = [\n\t\t'open' => 0,\n\t\t'overdue' => 0,\n\t];\n\n\tif ($model->status == 'paid') {\n\t\treturn $totals;\n\t}\n\n\t$totals['open'] = $model->amount;\n\n\tforeach ($model->transactions as $transaction) {\n\t\t$totals['open'] -= $transaction->amount;\n\t}\n\n\tif ($model->due_date < date('Y-m-d')) {\n\t\t$totals['overdue'] = $totals['open'];\n\t}\n\n\treturn $totals;\n}\n", "CodeBleu_score": 29.15403383744587}, {"code": "<?\npublic function calculateDocumentTotals($model)\t$open = 0;\n\t$overdue = 0;\n\tif ($model->status == 'paid') {\n\t\treturn array($open, $overdue);\n\t}\n\t$payments = $model->payments;\n\tforeach ($payments as $payment) {\n\t\t$open += $payment->amount;\n\t}\n\t$overdue = $open;\n\t$dueDate = $model->due_date;\n\t$today = date('Y-m-d');\n\tif ($dueDate > $today) {\n\t\t$overdue = 0;\n\t}\n\treturn array($open, $overdue);\n}\n", "CodeBleu_score": 35.50430295128741}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null)}", "CodeBleu_score": 14.784053156146179}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null)\t$page = $page?: Paginator::resolveCurrentPage($pageName);\n\t$perPage = $perPage?: $this->model->getPerPage();\n\t$results = $this->model->forPage($page, $perPage)->get($columns);\n\treturn $this->paginator($results, $perPage, $page, $pageName);\n}\n", "CodeBleu_score": 45.03118014073906}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null)\n}\n", "CodeBleu_score": 14.933390108628114}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request)\t$reconciliations = Reconciliation::where('account_id', $request->account_id)->where('status', 'pending')->where('date', '>=', $request->start_date)->where('date', '<=', $request->end_date)->get();\n\n\tDB::beginTransaction();\n\n\tforeach ($reconciliations as $reconciliation) {\n\t\t$reconciliation->status ='reconciled';\n\t\t$reconciliation->save();\n\t}\n\n\t$transactions = Transaction::where('account_id', $request->account_id)->where('reconciled', false)->where('date', '>=', $request->start_date)->where('date', '<=', $request->end_date)->get();\n\n\tforeach ($transactions as $transaction) {\n\t\t$transaction->reconciled = true;\n\t\t$transaction->save();\n\t}\n\n\tDB::commit();\n}", "CodeBleu_score": 35.74464807395868}, {"code": "<?\npublic function reconcile($request)\t$reconciliations = $this->getReconciliations($request);\n\t$reconciliation_ids = [];\n\t$transaction_ids = [];\n\t$reconciliation_count = 0;\n\t$transaction_count = 0;\n\tforeach ($reconciliations as $reconciliation) {\n\t\t$reconciliation_ids[] = $reconciliation->id;\n\t\t$transaction_ids = array_merge($transaction_ids, $reconciliation->transaction_ids);\n\t\t$reconciliation_count++;\n\t\t$transaction_count += count($reconciliation->transaction_ids);\n\t}\n\t$reconciliation_ids = array_unique($reconciliation_ids);\n\t$transaction_ids = array_unique($transaction_ids);\n\t$this->db->trans_start();\n\t$this->db->where_in('id', $reconciliation_ids)->update('reconciliations', ['status' =>'reconciled']);\n\t$this->db->where_in('id', $transaction_ids)->update('transactions', ['reconciled' => 1]);\n\t$this->db->trans_complete();\n\treturn [\n\t\t'reconciliations' => $reconciliation_count,\n\t\t'transactions' => $transaction_count\n\t];\n}\n", "CodeBleu_score": 34.005151562923125}, {"code": "<?\npublic function reconcile($request)\t$reconciliations = $this->getReconciliations($request);\n\tforeach ($reconciliations as $reconciliation) {\n\t\t$this->reconcileReconciliation($reconciliation);\n\t}\n}\n", "CodeBleu_score": 23.451792616055084}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation\t$user = $this->user;\n\t$invitation = $user->invitation;\n\tif ($invitation) {\n\t\t$invitation->delete();\n\t}\n\t$invitation = $user->createInvitation();\n\ttry {\n\t\t$this->dispatch(new UserInvitationNotificationJob($invitation));\n\t} catch (Exception $e) {\n\t\tthrow new Exception('Could not send invitation email');\n\t}\n\treturn $invitation;\n}", "CodeBleu_score": 20.055539836556292}, {"code": "<?\npublic function handle(): UserInvitation\t$this->db->beginTransaction();\n\n\ttry {\n\t\t$existingInvitations = $this->db->table('user_invitations')\n\t\t\t->where('user_id', $this->user->id)\n\t\t\t->get();\n\n\t\t$this->db->table('user_invitations')\n\t\t\t->where('user_id', $this->user->id)\n\t\t\t->delete();\n\n\t\t$invitation = $this->db->table('user_invitations')\n\t\t\t->insert([\n\t\t\t\t'user_id' => $this->user->id,\n\t\t\t\t'token' => $this->generateToken(),\n\t\t\t\t'created_at' => Carbon::now(),\n\t\t\t\t'updated_at' => Carbon::now(),\n\t\t\t]);\n\n\t\t$this->db->commit();\n\n\t\t$this->dispatch(new SendInvitationNotification($invitation));\n\n\t\treturn $invitation;\n\t} catch (\\Exception $e) {\n\t\t$this->db->rollBack();\n\n\t\tthrow new \\Exception('Failed to create invitation: '. $e->getMessage());\n\t}\n}", "CodeBleu_score": 40.59725349995868}, {"code": "<?\npublic function handle(): UserInvitation\t// Retrieve existing invitations for the user\n\t$existingInvitations = UserInvitation::where('user_id', $this->user->id)->get();\n\n\t// Delete existing invitations\n\tforeach ($existingInvitations as $invitation) {\n\t\t$invitation->delete();\n\t}\n\n\t// Create a new invitation with a unique token\n\t$invitation = UserInvitation::create([\n\t\t'user_id' => $this->user->id,\n\t\t'token' => Str::random(60),\n\t]);\n\n\t// Attempt to dispatch a notification job to notify the user\n\ttry {\n\t\tNotification::route('mail', $this->user->email)->notify(new UserInvitationNotification($invitation));\n\t} catch (\\Exception $e) {\n\t\t// If the notification fails, throw an exception with an error message\n\t\tthrow new \\Exception('Failed to send invitation email');\n\t}\n\n\t// Return the newly created invitation\n\treturn $invitation;\n}", "CodeBleu_score": 44.87518276310216}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void\tif (this.reconciled) {\n\t\tthrow new Exception('Transaction has been reconciled');\n\t} else if (this.type === TransactionType.Transfer) {\n\t\tthrow new Exception('Unauthorized');\n\t}\n}\n", "CodeBleu_score": 18.315892194272596}, {"code": "<?\npublic function authorize(): void\tif (this.isReconciled) {\n\t\tthrow new Exception(\"Transaction is already reconciled.\");\n\t}\n\n\tif (this.isTransfer) {\n\t\tthrow new Exception(\"Transfer transactions are not authorized.\");\n\t}\n}", "CodeBleu_score": 15.086429631995774}, {"code": "<?\npublic function authorize(): void\tif (this.isReconciled()) {\n\t\tthrow new \\Exception(\"The transaction has been reconciled. It cannot be authorized.\");\n\t} else if (this.isTransfer()) {\n\t\tthrow new \\Exception(\"The transaction is a transfer transaction. It cannot be authorized.\");\n\t}\n}\n", "CodeBleu_score": 18.810557378105123}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName)\tif (tenantId == 0) {\n\t\treturn false;\n\t}\n\tswitch (tableName) {\n\t\tcase \"tenant_table1\":\n\t\tcase \"tenant_table2\":\n\t\t\treturn true;\n\t\tdefault:\n\t\t\treturn false;\n\t}\n}", "CodeBleu_score": 8.649359088218585}, {"code": "public boolean doTableFilter(String tableName)\tboolean isPermitted = false;\n\tif (tenantId == 0) {\n\t\t// Deny access if tenant ID is zero\n\t\tisPermitted = false;\n\t} else {\n\t\t// Allow access to specific tables if tenant ID is not zero\n\t\tString[] allowedTables = { \"table1\", \"table2\", \"table3\" };\n\t\tfor (String table : allowedTables) {\n\t\t\tif (tableName.equals(table)) {\n\t\t\t\tisPermitted = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn isPermitted;\n}\n", "CodeBleu_score": 22.72060207101164}, {"code": "public boolean doTableFilter(String tableName)\t// If the tenant ID is not zero, allow access to specific tables\n\tif (tenantId!= 0) {\n\t\treturn tableName.equals(\"users\") || tableName.equals(\"tasks\");\n\t}\n\t// Otherwise, deny access\n\treturn false;\n}", "CodeBleu_score": 10.973412899730588}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer()\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 68.78236853959328}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer()\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 63.09254235041912}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer()\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}\n", "CodeBleu_score": 63.09254235041912}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception\ttry {\n\t\tString json = accountService.findBySelect();\n\t\treturn json;\n\t} catch (Exception e) {\n\t\tlog.error(\"Error in findBySelect: \" + e.getMessage());\n\t\treturn \"{\\\"success\\\":false,\\\"message\\\":\\\"\" + e.getMessage() + \"\\\"}\";\n\t}\n}", "CodeBleu_score": 14.96311316910248}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception\t// Retrieve the account data using accountService\n\tList<Account> accounts = accountService.findBySelect();\n\n\t// Convert the account data to JSON format with account IDs and names\n\tJSONArray jsonArray = new JSONArray();\n\tfor (Account account : accounts) {\n\t\tJSONObject jsonObject = new JSONObject();\n\t\tjsonObject.put(\"id\", account.getId());\n\t\tjsonObject.put(\"name\", account.getName());\n\t\tjsonArray.add(jsonObject);\n\t}\n\n\t// Return the JSON string\n\treturn jsonArray.toJSONString();\n}", "CodeBleu_score": 35.82264675790054}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception\tString json = \"\";\n\ttry {\n\t\tList<Account> accounts = accountService.findAll();\n\t\tjson = new Gson().toJson(accounts);\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage());\n\t\tjson = \"{\\\"error\\\":\\\"\" + e.getMessage() + \"\\\"}\";\n\t}\n\treturn json;\n}", "CodeBleu_score": 24.176649190524113}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\t// Construct the request object\n\t\tAccountListRequest accountListRequest = new AccountListRequest();\n\t\taccountListRequest.setName(name);\n\t\taccountListRequest.setSerialNo(serialNo);\n\t\taccountListRequest.setCurrentPage(currentPage);\n\t\taccountListRequest.setPageSize(pageSize);\n\n\t\t// Call the account service to get the list of accounts and their count\n\t\tAccountListResponse accountListResponse = accountService.listWithBalance(accountListRequest);\n\t\tList<AccountWithBalance> accountList = accountListResponse.getAccounts();\n\t\tint totalCount = accountListResponse.getTotalCount();\n\n\t\t// Populate the response with the result\n\t\tresponse.setSuccess(true);\n\t\tresponse.setMessage(\"Success\");\n\t\tresponse.setData(accountList);\n\t\tresponse.setTotalCount(totalCount);\n\t\tresponse.setPageCount(Math.ceil(totalCount / pageSize));\n\t\tresponse.setCurrentPage(currentPage);\n\t\tresponse.setPageSize(pageSize);\n\t} catch (Exception e) {\n\t\t// Log the error and set the response code and message accordingly\n\t\tlog.error(\"Error occurred while listing accounts with balance\", e);\n\t\tresponse.setSuccess(false);\n\t\tresponse.setMessage(e.getMessage());\n\t\tresponse.setErrorCode(ErrorCode.INTERNAL_SERVER_ERROR);\n\t\tresponse.setHttpStatusCode(500);\n\t}\n\treturn response;\n}", "CodeBleu_score": 36.58008816836629}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tList<Account> accounts = accountService.listWithBalance(name, serialNo, currentPage, pageSize);\n\t\tInteger count = accountService.countWithBalance(name, serialNo);\n\t\tresponse.setResult(new PageInfo<>(currentPage, pageSize, count, accounts));\n\t\tresponse.setSuccess(true);\n\t\tresponse.setMessage(\"Success\");\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error occurred while listing accounts with balance\", e);\n\t\tresponse.setSuccess(false);\n\t\tresponse.setMessage(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 36.643809721234135}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\t// Construct the request object for the account service\n\t\tAccountRequest accountRequest = new AccountRequest();\n\t\taccountRequest.setName(name);\n\t\taccountRequest.setSerialNo(serialNo);\n\t\taccountRequest.setCurrentPage(currentPage);\n\t\taccountRequest.setPageSize(pageSize);\n\t\t// Call the account service to get the list of accounts and their count\n\t\tAccountResponse accountResponse = accountService.list(accountRequest);\n\t\t// Populate the response object with the result\n\t\tresponse.setSuccess(true);\n\t\tresponse.setResult(accountResponse);\n\t} catch (Exception e) {\n\t\t// Log the error and set the response code and message accordingly\n\t\tlogger.error(\"An error occurred while listing accounts with balance: \" + e.getMessage(), e);\n\t\tresponse.setSuccess(false);\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(\"An error occurred while listing accounts with balance: \" + e.getMessage());\n\t}\n\treturn response;\n}\n", "CodeBleu_score": 33.71291161686445}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tresponse.setData(accountService.getStatistics(name, serialNo));\n\t\tresponse.setCode(200);\n\t} catch (Exception e) {\n\t\tlogger.error(\"getStatistics error\", e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 33.54073614953362}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\t// Retrieve statistics from account service\n\t\tAccountStatistics accountStatistics = accountService.getStatistics(name, serialNo);\n\t\t// Set response code to 200 and include data\n\t\tresponse.setCode(200);\n\t\tresponse.setData(accountStatistics);\n\t} catch (Exception e) {\n\t\t// Log error and set response code to 500 with error message\n\t\tlogger.error(\"Error getting statistics for name: \" + name + \" and serialNo: \" + serialNo, e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(\"Error getting statistics: \" + e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 37.93166201180887}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tList<Statistics> statistics = accountService.getStatistics(name, serialNo);\n\t\tresponse.setCode(200);\n\t\tresponse.setData(statistics);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Failed to get statistics for account name: \" + name + \" and serial number: \" + serialNo, e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(\"Failed to get statistics for account name: \" + name + \" and serial number: \" + serialNo);\n\t}\n\treturn response;\n}", "CodeBleu_score": 37.068394138607964}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception BaseResponseInfo response = new BaseResponseInfo();\n try {\n List<BillDetailsInfo> billDetails = accountHeadService.getBillDetailsByNumber(billNo);\n if (billDetails!= null &&!billDetails.isEmpty()) {\n response.setResponseCode(200);\n response.setResponseMessage(\"Success\");\n response.setData(billDetails.get(0));\n } else {\n response.setResponseCode(200);\n response.setResponseMessage(\"Success\");\n response.setData(null);\n }\n } catch (Exception e) {\n logger.error(\"Error while fetching bill details for bill number: \" + billNo, e);\n response.setResponseCode(500);\n response.setResponseMessage(\"Internal Server Error\");\n }\n return response;\n }\n}\n", "CodeBleu_score": 31.5694006296149}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception\nBaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n", "CodeBleu_score": 12.177722125043367}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tList<BillDetail> billDetailList = billDetailService.getBillDetailByBillNumber(billNo);\n\t\tif (billDetailList!= null &&!billDetailList.isEmpty()) {\n\t\t\tresponse.setStatusCode(200);\n\t\t\tresponse.setData(billDetailList.get(0));\n\t\t} else {\n\t\t\tresponse.setStatusCode(404);\n\t\t\tresponse.setMessage(\"No Bill Details Found\");\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error in retrieving bill details for bill number \" + billNo, e);\n\t\tresponse.setStatusCode(500);\n\t\tresponse.setMessage(\"Error in retrieving bill details for bill number \" + billNo);\n\t}\n\treturn response;\n}\n", "CodeBleu_score": 30.92603931311677}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tresponse.setData(depotService.findDepotByCurrentUser());\n\t\tresponse.setCode(200);\n\t} catch (Exception e) {\n\t\tlog.error(\"findDepotByCurrentUser error\", e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 36.286627703688616}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tDepotInfo depotInfo = depotService.findDepotByCurrentUser(request);\n\t\tresponse.setCode(200);\n\t\tresponse.setData(depotInfo);\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 42.970488448291036}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tUser user = (User) request.getAttribute(Constants.CURRENT_USER);\n\t\tList<Depot> depotList = depotService.findDepotByCurrentUser(user);\n\t\tresponse.setCode(200);\n\t\tresponse.setData(depotList);\n\t} catch (Exception e) {\n\t\tlogger.error(\"findDepotByCurrentUser error\", e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMsg(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 41.14338126697719}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception\tJSONArray jsonArray = new JSONArray();\n\ttry {\n\t\tList<Function> functions = functionService.findRoleFunction(type, keyId);\n\t\tJSONObject jsonObject = new JSONObject();\n\t\tjsonObject.put(\"functions\", functions);\n\t\tif (!\"admin\".equals(request.getHeader(\"tenant\"))) {\n\t\t\tList<Function> filterFunctions = new ArrayList<Function>();\n\t\t\tfor (Function function : functions) {\n\t\t\t\tif (!function.getFunctionId().equals(\"10000000000000000000000000000000\")) {\n\t\t\t\t\tfilterFunctions.add(function);\n\t\t\t\t}\n\t\t\t}\n\t\t\tjsonObject.put(\"functions\", filterFunctions);\n\t\t}\n\t\tjsonArray.add(jsonObject);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\tthrow e;\n\t}\n\treturn jsonArray;\n}", "CodeBleu_score": 32.21822630458187}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception\tJSONArray jsonArray = new JSONArray();\n\ttry {\n\t\tList<Function> functionList = functionService.findRoleFunction(type, keyId);\n\t\tJSONObject jsonObject = new JSONObject();\n\t\tjsonObject.put(\"functionList\", functionList);\n\t\tjsonArray.add(jsonObject);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\tthrow e;\n\t}\n\treturn jsonArray;\n}", "CodeBleu_score": 23.279471918040173}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception\tJSONArray jsonArray = new JSONArray();\n\tList<SysFunction> list = sysFunctionService.findRoleFunction(type, keyId);\n\tJSONObject json = new JSONObject();\n\tjson.put(\"functions\", list);\n\tjsonArray.add(json);\n\treturn jsonArray;\n}", "CodeBleu_score": 18.60957361537183}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception \tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tPlatformConfigInfo platformConfigInfo = platformConfigService.getPlatformConfigInfoByKey(platformKey);\n\t\tresponse.setCode(200);\n\t\tresponse.setData(platformConfigInfo);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error occurred while getting platform config info by key: \" + e.getMessage());\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(\"Error occurred while getting platform config info by key: \" + e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 39.31856307810264}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception \tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tPlatformConfigInfo platformConfigInfo = platformConfigService.getPlatformConfigByKey(platformKey);\n\t\tresponse.setResponseCode(ResponseCode.SUCCESS);\n\t\tresponse.setResponseMessage(ResponseCode.SUCCESS.getResponseMessage());\n\t\tresponse.setResponseObject(platformConfigInfo);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error retrieving platform configuration information for platform key \" + platformKey + \".\", e);\n\t\tresponse.setResponseCode(ResponseCode.INTERNAL_SERVER_ERROR);\n\t\tresponse.setResponseMessage(e.getMessage());\n\t}\n\treturn response;\n}\n", "CodeBleu_score": 39.48637430044817}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception \tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tresponse.setCode(200);\n\t\tresponse.setData(platformConfigService.getInfoByKey(platformKey));\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error occurred while retrieving platform configuration info: \", e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 36.52589181173996}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tList<SystemConfiguration> list = systemConfigurationService.findAll();\n\t\tif (list!= null && list.size() > 0) {\n\t\t\tresponse.setCode(200);\n\t\t\tresponse.setData(list.get(0));\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(\"getCurrentInfo error\", e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 34.614151874562204}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tList<SystemConfiguration> systemConfigurationList = systemConfigurationService.getSystemConfigurationList();\n\t\tresponse.setCode(200);\n\t\tresponse.setData(systemConfigurationList.get(0));\n\t} catch (Exception e) {\n\t\tlog.error(e.getMessage());\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 34.840127527631644}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tList<SystemConfigInfo> systemConfigInfoList = systemConfigService.getSystemConfigList(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null", "CodeBleu_score": 13.403703459013864}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response)\tString businessPath = request.getParameter(\"businessPath\");\n\tMultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n\tMultipartFile file = multipartRequest.getFile(\"file\");\n\tString fileName = file.getOriginalFilename();\n\tString fileType = fileName.substring(fileName.lastIndexOf(\".\") + 1);\n\tString fileId = null;\n\tString fileUrl = null;\n\tif (businessPath.equals(\"local\")) {\n\t\tfileId = saveFileToLocal(file, fileName);\n\t\tfileUrl = \"http://localhost:8080/file/download?fileId=\" + fileId;\n\t} else if (businessPath.equals(\"oss\")) {\n\t\tfileId = saveFileToOss(file, fileName);\n\t\tfileUrl = \"http://localhost:8080/file/download?fileId=\" + fileId;\n\t} else {\n\t\tfileId = saveFileToOss(file, fileName);\n\t\tfileUrl = \"http://localhost:8080/file/download?fileId=\" + fileId;\n\t}\n\tBaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n\tbaseResponseInfo.setCode(200);\n\tbaseResponseInfo.setData(fileUrl);\n\treturn baseResponseInfo;\n}", "CodeBleu_score": 34.11183394746983}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response)\tBaseResponseInfo result = new BaseResponseInfo();\n\ttry {\n\t\tString businessPath = request.getParameter(\"businessPath\");\n\t\tMultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n\t\tMultipartFile file = multipartRequest.getFile(\"file\");\n\t\tif (file == null || file.isEmpty()) {\n\t\t\tresult.setCode(ResponseCode.FAILURE);\n\t\t\tresult.setMessage(\"\u6587\u4ef6\u4e3a\u7a7a\");\n\t\t\treturn result;\n\t\t}\n\t\tString fileName = file.getOriginalFilename();\n\t\tString fileType = fileName.substring(fileName.lastIndexOf(\".\") + 1);\n\t\tString filePath = businessPath + \"/\" + fileName;\n\t\tif (UploadType.LOCAL.equals(uploadType)) {\n\t\t\tString localPath = uploadPath + businessPath;\n\t\t\tFile dir = new File(localPath);\n\t\t\tif (!dir.exists()) {\n\t\t\t\tdir.mkdirs();\n\t\t\t}\n\t\t\tFile dest = new File(localPath + \"/\" + fileName);\n\t\t\tfile.transferTo(dest);\n\t\t} else if (UploadType.ALI_OSS.equals(uploadType)) {\n\t\t\tString key = businessPath + \"/\" + fileName;\n\t\t\tString url = aliOssClient.uploadFile(bucketName, key, file.getInputStream(), file.getSize(), fileType);\n\t\t\tfilePath = url;\n\t\t}\n\t\tresult.setCode(ResponseCode.SUCCESS);\n\t\tresult.setData(filePath);\n\t} catch (Exception e) {\n\t\tlogger.error(\"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\", e);\n\t\tresult.setCode(ResponseCode.FAILURE);\n\t\tresult.setMessage(\"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\");\n\t}\n\treturn result;\n}", "CodeBleu_score": 37.274476824084424}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response)\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\ttry {\n\t\t// Get the business path from the request\n\t\tString businessPath = request.getParameter(\"businessPath\");\n\t\t// Get the uploaded file from the request\n\t\tMultipartFile file = ((MultipartHttpServletRequest) request).getFile(\"file\");\n\t\t// Check if the business path is not null or empty\n\t\tif (StringUtils.isNotBlank(businessPath)) {\n\t\t\t// Get the file upload type from the request\n\t\t\tString uploadType = request.getParameter(\"uploadType\");\n\t\t\t// Check if the file upload type is not null or empty\n\t\t\tif (StringUtils.isNotBlank(uploadType)) {\n\t\t\t\t// Check if the file upload type is \"local\"\n\t\t\t\tif (\"local\".equals(uploadType)) {\n\t\t\t\t\t// Save the file locally\n\t\t\t\t\tString filePath = saveFileToLocal(file, businessPath);\n\t\t\t\t\t// Set the response code and data\n\t\t\t\t\tresponseInfo.setCode(ResponseCodeEnum.SUCCESS.getCode());\n\t\t\t\t\tresponseInfo.setData(filePath);\n\t\t\t\t} else if (\"oss\".equals(uploadType)) {\n\t\t\t\t\t// Save the file to AliOss\n\t\t\t\t\tString filePath = saveFileToOss(file, businessPath);\n\t\t\t\t\t// Set the response code and data\n\t\t\t\t\tresponseInfo.setCode(ResponseCodeEnum.SUCCESS.getCode());\n\t\t\t\t\tresponseInfo.setData(filePath);\n\t\t\t\t} else {\n\t\t\t\t\t// Set the response code and message\n\t\t\t\t\tresponseInfo.setCode(ResponseCodeEnum.FAIL.getCode());\n\t\t\t\t\tresponseInfo.setMessage(\"\u6587\u4ef6\u4e0a\u4f20\u7c7b\u578b\u9519\u8bef\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Set the response code and message\n\t\t\t\tresponseInfo.setCode(ResponseCodeEnum.FAIL.getCode());\n\t\t\t\tresponseInfo.setMessage(\"\u6587\u4ef6\u4e0a\u4f20\u7c7b\u578b\u4e0d\u80fd\u4e3a\u7a7a\");\n\t\t\t}\n\t\t} else {\n\t\t\t// Set the response code and message\n\t\t\tresponseInfo.setCode(ResponseCodeEnum.FAIL.getCode());\n\t\t\tresponseInfo.setMessage(\"\u4e1a\u52a1\u8def\u5f84\u4e0d\u80fd\u4e3a\u7a7a\");\n\t\t}\n\t} catch (Exception e) {\n\t\t// Log the exception\n\t\tlogger.error(\"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\", e);\n\t\t// Set the response code and message\n\t\tresponseInfo.setCode(ResponseCodeEnum.FAIL.getCode());\n\t\tresponseInfo.setMessage(\"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\");\n\t}\n\treturn responseInfo;\n}", "CodeBleu_score": 34.28071543557333}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response) try {\n String title = jsonObject.getString(\"title\");\n String head = jsonObject.getString(\"head\");\n String tip = jsonObject.getString(\"tip\");\n List<JSONObject> dataList = (List<JSONObject>) jsonObject.get(\"dataList\");\n exportExcelService.exportExcelByParam(title, head, tip, dataList, response);\n } catch (Exception e) {\n log.error(\"exportExcelByParam error\", e);\n }\n }\n", "CodeBleu_score": 72.49565573934836}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response) String title = jsonObject.getString(\"title\");\n List<String> head = jsonObject.getJSONArray(\"head\").toJavaList(String.class);\n String tip = jsonObject.getString(\"tip\");\n List<List<String>> dataList = jsonObject.getJSONArray(\"dataList\").toJavaList(List.class);\n try {\n // Call the service to perform the export\n excelService.exportExcel(title, head, tip, dataList, response);\n } catch (Exception e) {\n log.error(\"Export Excel error\", e);\n }\n }\n\n}\n", "CodeBleu_score": 60.38728554286627}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response)\ttry {\n\t\tString title = jsonObject.getString(\"title\");\n\t\tJSONArray head = jsonObject.getJSONArray(\"head\");\n\t\tString tip = jsonObject.getString(\"tip\");\n\t\tJSONArray data = jsonObject.getJSONArray(\"data\");\n\t\texportExcelService.exportExcel(title, head, tip, data, response);\n\t} catch (Exception e) {\n\t\tlogger.error(\"\u5bfc\u51faExcel\u5931\u8d25\", e);\n\t}\n}", "CodeBleu_score": 65.95494234142092}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception \tint result = 0;\n\ttry {\n\t\tAccount account = new Account();\n\t\taccount.setAccountNumber(obj.getString(\"accountNumber\"));\n\t\taccount.setAccountName(obj.getString(\"accountName\"));\n\t\taccount.setAccountType(obj.getString(\"accountType\"));\n\t\taccount.setAccountDescription(obj.getString(\"accountDescription\"));\n\t\taccount.setAccountCurrency(obj.getString(\"accountCurrency\"));\n\t\taccount.setAccountInitialAmount(obj.getDouble(\"accountInitialAmount\"));\n\t\taccount.setAccountStatus(obj.getString(\"accountStatus\"));\n\t\taccount.setAccountDefault(obj.getBoolean(\"accountDefault\"));\n\t\taccount.setAccountUserId(obj.getInt(\"accountUserId\"));\n\t\taccount.setAccountCreatedDate(new Date());\n\t\taccount.setAccountModifiedDate(new Date());\n\t\taccount.setAccountCreatedBy(obj.getString(\"accountCreatedBy\"));\n\t\taccount.setAccountModifiedBy(obj.getString(\"accountModifiedBy\"));\n\t\taccount.setAccountDeleted(false);\n\n\t\t// Set the initial amount to zero if not specified\n\t\tif (account.getAccountInitialAmount() == 0) {\n\t\t\taccount.setAccountInitialAmount(0);\n\t\t}\n\n\t\t// Determine if the account should be set as the default based on existing accounts\n\t\tif (account.isAccountDefault()) {\n\t\t\tList<Account> accounts = accountDao.getAllAccounts();\n\t\t\tfor (Account existingAccount : accounts) {\n\t\t\t\tif (existingAccount.isAccountDefault()) {\n\t\t\t\t\texistingAccount.setAccountDefault(false);\n\t\t\t\t\taccountDao.updateAccount(existingAccount);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Enable the account\n\t\taccount.setAccountEnabled(true);\n\n\t\t// Insert the account into the database\n\t\tresult = accountDao.insertAccount(account);\n\n\t\t// Log the operation\n\t\tlog.info(\"Account created: \" + account.toString());\n\n\t\t// Send a notification email to the user\n\t\tsendNotificationEmail(account, request);\n\t} catch (Exception e) {\n\t\t// Log the failure\n\t\tlog.error(\"Failed to create account: \" + e.getMessage());\n\n\t\t// Throw the exception to the caller\n\t\tthrow e;\n\t}\n\treturn result;\n}", "CodeBleu_score": 37.445971083559556}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception \tint result = 0;\n\ttry {\n\t\tAccount account = new Account();\n\t\taccount.setAccount(obj.getString(\"account\"));\n\t\taccount.setAccountType(obj.getString(\"accountType\"));\n\t\taccount.setAccountDescription(obj.getString(\"accountDescription\"));\n\t\taccount.setAccountBalance(obj.getDouble(\"accountBalance\"));\n\t\taccount.setAccountStatus(\"Active\");\n\t\taccount.setAccountDefault(false);\n\t\taccount.setAccountCreated(new Date());\n\t\taccount.setAccountUpdated(new Date());\n\t\taccount.setAccountUpdatedBy(request.getSession().getAttribute(\"user\").toString());\n\t\taccount.setAccountCreatedBy(request.getSession().getAttribute(\"user\").toString());\n\t\tif(account.getAccountBalance() == 0.0) {\n\t\t\taccount.setAccountBalance(0.0);\n\t\t}\n\t\tif(account.getAccountDefault() == false) {\n\t\t\taccount.setAccountDefault(false);\n\t\t}\n\t\tif(account.getAccountType().equals(\"Default\")) {\n\t\t\taccount.setAccountDefault(true);\n\t\t}\n\t\taccount.setAccountStatus(\"Active\");\n\t\tresult = accountDAO.insertAccount(account);\n\t\tif(result == 1) {\n\t\t\tlog.info(\"Account \" + account.getAccount() + \" was successfully inserted\");\n\t\t} else {\n\t\t\tlog.error(\"Account \" + account.getAccount() + \" failed to insert\");\n\t\t}\n\t} catch (Exception e) {\n\t\tlog.error(\"Account failed to insert: \" + e.getMessage());\n\t\tthrow e;\n\t}\n\treturn result;\n}\n", "CodeBleu_score": 38.635262390886204}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception \t// TODO: Implement this function\n\tint result = 0;\n\ttry {\n\t\tAccount account = new Account();\n\t\taccount.setAccountNumber(obj.getString(\"accountNumber\"));\n\t\taccount.setAccountType(obj.getString(\"accountType\"));\n\t\taccount.setBalance(obj.getDouble(\"balance\"));\n\t\taccount.setCustomerID(obj.getInt(\"customerID\"));\n\t\taccount.setInterestRate(obj.getDouble(\"interestRate\"));\n\t\taccount.setLastUpdated(new Date());\n\t\taccount.setOpenDate(new Date());\n\t\taccount.setAccountStatus(\"Active\");\n\t\taccount.setAccountType(obj.getString(\"accountType\"));\n\t\taccount.setAccountNumber(obj.getString(\"accountNumber\"));\n\t\taccount.setInterestRate(obj.getDouble(\"interestRate\"));\n\t\taccount.setBalance(obj.getDouble(\"balance\"));\n\t\taccount.setOpenDate(new Date());\n\t\taccount.setLastUpdated(new Date());\n\t\taccount.setAccountStatus(\"Active\");\n\t\taccount.setCustomerID(obj.getInt(\"customerID\"));\n\t\taccount.setAccountNumber(obj.getString(\"accountNumber\"));\n\t\taccount.setAccountType(obj.getString(\"accountType\"));\n\t\taccount.setBalance(obj.getDouble(\"balance\"));\n\t\taccount.setCustomerID(obj.getInt(\"customerID\"));\n\t\taccount.setInterestRate(obj.getDouble(\"interestRate\"));\n\t\taccount.setLastUpdated(new Date());\n\t\taccount.setOpenDate(new Date());\n\t\taccount.setAccountStatus(\"Active\");\n\t\taccount.setAccountType(obj.getString(\"accountType\"));\n\t\taccount.setAccountNumber(obj.getString(\"accountNumber\"));\n\t\taccount.setInterestRate(obj.getDouble(\"interestRate\"));\n\t\taccount.setBalance(obj.getDouble(\"balance\"));\n\t\taccount.setOpenDate(new Date());\n\t\taccount.setLastUpdated(new Date());\n\t\taccount.setAccountStatus(\"Active\");\n\t\taccount.setAccountType(obj.getString(\"accountType\"));\n\t\taccount.setAccountNumber(obj.getString(\"accountNumber\"));\n\t\taccount.setInterestRate(obj.getDouble(\"interestRate\"));\n\t\taccount.setBalance(obj.getDouble(\"balance\"));\n\t\taccount.setOpenDate(new Date());\n\t\taccount.setLastUpdated(new Date());", "CodeBleu_score": 22.55761717031738}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo)\ttry {\n\t\treturn mapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error listing accounts with balance\", e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 25.881204023503944}, {"code": "public Long listWithBalanceCount(String name, String serialNo)\ttry {\n\t\treturn listWithBalanceCountMapper(name, serialNo);\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage());\n\t\treturn null;\n\t}\n}\n", "CodeBleu_score": 22.8811033171637}, {"code": "public Long listWithBalanceCount(String name, String serialNo)\ttry {\n\t\treturn accountMapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tLOGGER.error(\"Exception occurred while getting the count of accounts with the specified name and serial number\", e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 26.507575006592777}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception\ttry {\n\t\treturn depotItemMapper.deleteDepotItem(id);\n\t} catch (Exception e) {\n\t\tlog.error(\"Error deleting depot item with ID: \" + id, e);\n\t\tthrow e;\n\t}\n}\n", "CodeBleu_score": 23.248550168572553}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteByPrimaryKey(id);\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tthrow new Exception(e);\n\t}\n\treturn result;\n}\n", "CodeBleu_score": 57.46944125260869}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception\ttry {\n\t\treturn depotItemMapper.deleteDepotItem(id);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Failed to delete depot item with id \" + id, e);\n\t\tthrow new Exception(\"Failed to delete depot item with id \" + id, e);\n\t}\n}\n", "CodeBleu_score": 23.752729562019002}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey)\ttry {\n\t\tHttpClient client = HttpClientBuilder.create().build();\n\t\tString url = \"http://localhost:8080/api/projects/\" + projectName + \"/\" + nodeType + \"/\" + nodeKey;\n\t\tHttpGet request = new HttpGet(url);\n\t\tHttpResponse response = client.execute(request);\n\t\tHttpEntity entity = response.getEntity();\n\t\tif (entity!= null) {\n\t\t\tString responseBody = EntityUtils.toString(entity);\n\t\t\tJSONObject json = new JSONObject(responseBody);\n\t\t\tif (json.has(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\t// Close resources\n\t}\n\treturn false;\n}", "CodeBleu_score": 41.23283650496161}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey)\tboolean result = false;\n\ttry {\n\t\t// Create an HTTP client\n\t\tHttpClient httpClient = HttpClientBuilder.create().build();\n\n\t\t// Construct the request URL\n\t\tString requestUrl = String.format(\n\t\t\t\t\"http://localhost:8080/projects/%s/nodes/%s/%s\",\n\t\t\t\tprojectName, nodeType, nodeKey);\n\n\t\t// Create the request\n\t\tHttpGet request = new HttpGet(requestUrl);\n\n\t\t// Execute the request\n\t\tHttpResponse response = httpClient.execute(request);\n\n\t\t// Process the response\n\t\tif (response.getStatusLine().getStatusCode() == 200) {\n\t\t\t// The response contains a key\n\t\t\tresult = true;\n\t\t}\n\t} catch (Exception e) {\n\t\t// Print any exceptions\n\t\te.printStackTrace();\n\t} finally {\n\t\t// Close resources\n\t\thttpClient.close();\n\t}\n\n\treturn result;\n}\n", "CodeBleu_score": 29.87896964259628}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey)\ttry {\n\t\t// Create an HTTP client\n\t\tHttpClient httpClient = HttpClientBuilder.create().build();\n\n\t\t// Construct the request URL\n\t\tString requestUrl = \"http://localhost:8080/api/projects/\" + projectName + \"/\" + nodeType + \"/\" + nodeKey;\n\n\t\t// Create an HTTP GET request\n\t\tHttpGet request = new HttpGet(requestUrl);\n\n\t\t// Execute the request and process the response\n\t\tHttpResponse response = httpClient.execute(request);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString responseBody = EntityUtils.toString(entity);\n\n\t\t// Check if the response contains a key\n\t\tif (responseBody.contains(\"key\")) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} catch (Exception e) {\n\t\t// Handle exceptions\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\t// Close resources\n\t\ttry {\n\t\t\thttpClient.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "CodeBleu_score": 42.68611885879191}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to)\ttry {\n\t\tString url = \"http://localhost:8080/api/projects/\" + projectName + \"/edges/\" + edgeType + \"?fromType=\" + fromType + \"&toType=\" + toType + \"&from=\" + from + \"&to=\" + to;\n\t\tHttpGet request = new HttpGet(url);\n\t\trequest.addHeader(\"content-type\", \"application/json\");\n\t\trequest.addHeader(\"accept\", \"application/json\");\n\t\tCloseableHttpClient client = HttpClients.createDefault();\n\t\tCloseableHttpResponse response = client.execute(request);\n\t\tint statusCode = response.getStatusLine().getStatusCode();\n\t\tif (statusCode == 200) {\n\t\t\tString responseBody = EntityUtils.toString(response.getEntity());\n\t\t\tJSONObject jsonResponse = new JSONObject(responseBody);\n\t\t\tif (jsonResponse.has(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\treturn false;\n}\n", "CodeBleu_score": 44.3595502509926}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to)\tboolean success = false;\n\tCloseableHttpClient client = HttpClients.createDefault();\n\ttry {\n\t\tURIBuilder builder = new URIBuilder(URL_PREFIX + \"addEdge\");\n\t\tbuilder.setParameter(\"projectName\", projectName);\n\t\tbuilder.setParameter(\"edgeType\", edgeType);\n\t\tbuilder.setParameter(\"fromType\", fromType);\n\t\tbuilder.setParameter(\"toType\", toType);\n\t\tbuilder.setParameter(\"from\", from);\n\t\tbuilder.setParameter(\"to\", to);\n\t\tURI uri = builder.build();\n\t\tHttpGet request = new HttpGet(uri);\n\t\trequest.setHeader(\"Accept\", \"application/json\");\n\t\tHttpResponse response = client.execute(request);\n\t\tif (response.getStatusLine().getStatusCode() == 200) {\n\t\t\tString json = EntityUtils.toString(response.getEntity());\n\t\t\tJSONObject obj = new JSONObject(json);\n\t\t\tif (obj.has(\"key\")) {\n\t\t\t\tsuccess = true;\n\t\t\t}\n\t\t}\n\t} catch (URISyntaxException | IOException | JSONException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\ttry {\n\t\t\tclient.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\treturn success;\n}\n", "CodeBleu_score": 35.56179763312173}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to)\ttry {\n\t\t// Create the HTTP client\n\t\tCloseableHttpClient client = HttpClients.createDefault();\n\n\t\t// Create the URI with the endpoint and parameters\n\t\tURIBuilder builder = new URIBuilder(endpoint);\n\t\tbuilder.addParameter(\"projectName\", projectName);\n\t\tbuilder.addParameter(\"edgeType\", edgeType);\n\t\tbuilder.addParameter(\"fromType\", fromType);\n\t\tbuilder.addParameter(\"toType\", toType);\n\t\tbuilder.addParameter(\"from\", from);\n\t\tbuilder.addParameter(\"to\", to);\n\t\tURI uri = builder.build();\n\n\t\t// Create the HTTP GET request\n\t\tHttpGet request = new HttpGet(uri);\n\n\t\t// Execute the request and process the response\n\t\tHttpResponse response = client.execute(request);\n\t\tHttpEntity entity = response.getEntity();\n\t\tif (entity!= null) {\n\t\t\tString responseString = EntityUtils.toString(entity);\n\t\t\tJSONObject json = new JSONObject(responseString);\n\t\t\tif (json.has(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\t// Handle exceptions\n\t\te.printStackTrace();\n\t} finally {\n\t\t// Close resources\n\t\ttry {\n\t\t\tclient.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\treturn false;\n}\n", "CodeBleu_score": 42.992296462759164}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event)\tif (event == null) {\n\t\treturn;\n\t}\n\tif (event.getMessage() == null) {\n\t\treturn;\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(new Location(47.644702, -122.130622));\n\t}\n\tevent.setTime(System.currentTimeMillis());\n\tString json = event.toJson();\n\tif (json == null) {\n\t\treturn;\n\t}\n\tString topic = (this.target == null)? \"test\" : this.target;\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, json);\n\tthis.producer.send(record);\n\tthis.producer.flush();\n}", "CodeBleu_score": 46.67882877122085}, {"code": "public void sendEvent(Event event)\tif (event!= null && event.getMessage()!= null) {\n\t\tif (event.getLocation() == null) {\n\t\t\tevent.setLocation(new Location(0, 0));\n\t\t}\n\t\tevent.setTime(new Date());\n\t\tString json = event.toJSON();\n\t\tif (target!= null) {\n\t\t\tproducer.send(new ProducerRecord<String, String>(target, json));\n\t\t} else {\n\t\t\tproducer.send(new ProducerRecord<String, String>(\"test\", json));\n\t\t}\n\t\tproducer.flush();\n\t}\n}", "CodeBleu_score": 24.51206948756176}, {"code": "public void sendEvent(Event event)\t// Check if the event and its message are not null.\n\tif (event!= null && event.getMessage()!= null) {\n\t\t// If the event's location is null, assign a testing location.\n\t\tif (event.getLocation() == null) {\n\t\t\tevent.setLocation(new Location(1.1, 2.2));\n\t\t}\n\t\t// Set the event time.\n\t\tevent.setTime(System.currentTimeMillis());\n\t\t// Convert the event to a JSON string.\n\t\tString eventJson = gson.toJson(event);\n\t\t// If a target is specified, use it as the topic; otherwise, default to \"test\".\n\t\tString topic = (target!= null)? target : \"test\";\n\t\t// Create a producer record with the topic and JSON string.\n\t\tProducerRecord<String, String> record = new ProducerRecord<>(topic, eventJson);\n\t\t// Send the producer record using the producer.\n\t\tproducer.send(record);\n\t\t// Flush the producer.\n\t\tproducer.flush();\n\t}\n}", "CodeBleu_score": 34.29109739291405}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content)\t// Initialize the OSS client with access credentials.\n\tOSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\t// Upload the file content as an object with the specified name.\n\tossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\t// Shut down the OSS client.\n\tossClient.shutdown();\n\t// Return the URL of the uploaded object.\n\treturn \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 33.42957734545029}, {"code": "public String upload(String objName, byte[] content)\t// Initialize the OSS client with access credentials.\n\tOSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\ttry {\n\t\t// Upload the file content as an object with the specified name.\n\t\tossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\t\t// Return the URL of the uploaded object.\n\t\treturn ossClient.generatePresignedUrl(bucketName, objName, expiration).toString();\n\t} finally {\n\t\t// Shut down the OSS client.\n\t\tossClient.shutdown();\n\t}\n}", "CodeBleu_score": 25.984793756817666}, {"code": "public String upload(String objName, byte[] content)\t// Initialize the OSS client with access credentials.\n\tOSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\ttry {\n\t\t// Upload the file content as an object with the specified name.\n\t\tossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\t\t// Get the URL of the uploaded object.\n\t\treturn ossClient.generatePresignedUrl(bucketName, objName, expiration).toString();\n\t} finally {\n\t\t// Shut down the OSS client.\n\t\tossClient.shutdown();\n\t}\n}", "CodeBleu_score": 25.984793756817666}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception\tIpToLocationWorker worker = getIpToLocationWorker();\n\tif (worker == null) {\n\t\treturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\");\n\t}\n\treturn worker.getLocationInfo(ipAddress);\n}", "CodeBleu_score": 26.08372243495638}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception\tIpToLocationWorker worker = getIpToLocationWorker();\n\tif (worker == null) {\n\t\treturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\");\n\t}\n\treturn worker.getLocationInfo(ipAddress);\n}\n", "CodeBleu_score": 26.475474074862014}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception\tIpToLocationWorker worker = getIpToLocationWorker();\n\tif (worker == null) {\n\t\treturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\");\n\t}\n\treturn worker.getLocation(ipAddress);\n}", "CodeBleu_score": 27.513631859081105}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception\tif (this.lowLevelRestClient == null || this.highLevelRestClient == null) {\n\t\tsynchronized (this.esClientInitLock) {\n\t\t\tif (this.lowLevelRestClient == null || this.highLevelRestClient == null) {\n\t\t\t\t// Parse the cluster hosts and ports\n\t\t\t\tString[] clusterHosts = this.clusterHosts.split(\",\");\n\t\t\t\tHttpHost[] httpHosts = new HttpHost[clusterHosts.length];\n\t\t\t\tfor (int i = 0; i < clusterHosts.length; i++) {\n\t\t\t\t\tString[] hostAndPort = clusterHosts[i].split(\":\");\n\t\t\t\t\thttpHosts[i] = new HttpHost(hostAndPort[0], Integer.parseInt(hostAndPort[1]), \"http\");\n\t\t\t\t}\n\t\t\t\t// Build the low-level REST client\n\t\t\t\tthis.lowLevelRestClient = RestClient.builder(httpHosts).build();\n\t\t\t\t// Build the high-level REST client\n\t\t\t\tthis.highLevelRestClient = new RestHighLevelClient(this.lowLevelRestClient);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 31.281907305806268}, {"code": "protected void ensureESClientInitialized() throws Exception\tif (esClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (esClient == null) {\n\t\t\t\t// Parse the cluster hosts and ports\n\t\t\t\tString[] hosts = clusterHosts.split(\",\");\n\t\t\t\tint[] ports = new int[hosts.length];\n\t\t\t\tfor (int i = 0; i < hosts.length; i++) {\n\t\t\t\t\tString[] hostPort = hosts[i].split(\":\");\n\t\t\t\t\thosts[i] = hostPort[0];\n\t\t\t\t\tports[i] = Integer.parseInt(hostPort[1]);\n\t\t\t\t}\n\n\t\t\t\t// Build the low-level REST client\n\t\t\t\tRestClientBuilder restClientBuilder = RestClient.builder(new HttpHost[]{new HttpHost(hosts[0], ports[0], \"http\")});\n\t\t\t\tfor (int i = 1; i < hosts.length; i++) {\n\t\t\t\t\trestClientBuilder.setHttpClientConfigCallback(new RestClientBuilder.HttpClientConfigCallback() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder) {\n\t\t\t\t\t\t\treturn httpClientBuilder.setProxy(new HttpHost(hosts[i], ports[i]));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tesClient = restClientBuilder.build();\n\n\t\t\t\t// Build the high-level REST client\n\t\t\t\tesRestClient = RestHighLevelClientBuilder.fromClient(esClient).build();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 30.071641921577452}, {"code": "protected void ensureESClientInitialized() throws Exception\tif (lowLevelRestClient == null || highLevelRestClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (lowLevelRestClient == null || highLevelRestClient == null) {\n\t\t\t\tif (clusterHosts == null) {\n\t\t\t\t\tthrow new Exception(\"Elasticsearch cluster hosts are not set.\");\n\t\t\t\t}\n\n\t\t\t\tif (clusterHosts.isEmpty()) {\n\t\t\t\t\tthrow new Exception(\"Elasticsearch cluster hosts are empty.\");\n\t\t\t\t}\n\n\t\t\t\tfinal List<HttpHost> hosts = new ArrayList<>();\n\t\t\t\tfor (final String host : clusterHosts) {\n\t\t\t\t\tfinal String[] hostPort = host.split(\":\");\n\t\t\t\t\tif (hostPort.length!= 2) {\n\t\t\t\t\t\tthrow new Exception(\"Invalid Elasticsearch cluster host: \" + host);\n\t\t\t\t\t}\n\n\t\t\t\t\tfinal String hostname = hostPort[0];\n\t\t\t\t\tfinal int port = Integer.parseInt(hostPort[1]);\n\t\t\t\t\thosts.add(new HttpHost(hostname, port, \"http\"));\n\t\t\t\t}\n\n\t\t\t\tlowLevelRestClient = RestClient.builder(hosts.toArray(new HttpHost[hosts.size()])).build();\n\t\t\t\thighLevelRestClient = new RestHighLevelClient(lowLevelRestClient);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 41.59363380252859}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort)\tList<HttpHost> hosts = new ArrayList<>();\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\tString[] hostParts = host.split(\":\");\n\t\tif (hostParts.length == 1) {\n\t\t\thosts.add(new HttpHost(hostParts[0], clusterPort));\n\t\t} else {\n\t\t\thosts.add(new HttpHost(hostParts[0], Integer.parseInt(hostParts[1])));\n\t\t}\n\t}\n\treturn hosts;\n}\n", "CodeBleu_score": 46.69415759097926}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort)\tList<HttpHost> hosts = new ArrayList<>();\n\tString[] hostArray = clusterHostList.split(\",\");\n\tfor (String host : hostArray) {\n\t\tif (host.contains(\":\")) {\n\t\t\tString[] hostParts = host.split(\":\");\n\t\t\thosts.add(new HttpHost(hostParts[0], Integer.parseInt(hostParts[1])));\n\t\t} else {\n\t\t\thosts.add(new HttpHost(host, clusterPort));\n\t\t}\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 49.258658739973036}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort)\tList<HttpHost> hosts = new ArrayList<>();\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\tString[] hostParts = host.split(\":\");\n\t\tString hostname = hostParts[0];\n\t\tint port = hostParts.length == 2? Integer.parseInt(hostParts[1]) : clusterPort;\n\t\thosts.add(new HttpHost(hostname, port));\n\t}\n\treturn hosts;\n}\n", "CodeBleu_score": 41.94676472959608}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException\t// Poll for tasks with a 30-second timeout\n\tTask task = queue.poll(30, TimeUnit.SECONDS);\n\tif (task!= null) {\n\t\ttry {\n\t\t\t// Check the task type\n\t\t\tif (task.getType().equals(\"plainTextMessage\")) {\n\t\t\t\t// Extract the recipient number and message data\n\t\t\t\tString recipientNumber = task.getRecipientNumber();\n\t\t\t\tString messageData = task.getMessageData();\n\t\t\t\t// Validate the data\n\t\t\t\tif (recipientNumber!= null && messageData!= null) {\n\t\t\t\t\t// Send the message\n\t\t\t\t\tsendPlainTextMessage(recipientNumber, messageData);\n\t\t\t\t} else {\n\t\t\t\t\tlog.error(\"Invalid data for plain text message task: recipientNumber={}, messageData={}\", recipientNumber, messageData);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlog.error(\"Unknown task type: {}\", task.getType());\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"Exception occurred while processing task: {}\", e);\n\t\t}\n\t}\n}\n", "CodeBleu_score": 28.898561096642318}, {"code": "protected void pollingWork() throws InterruptedException\twhile (true) {\n\t\ttry {\n\t\t\t// Retrieve a task from the queue\n\t\t\tTask task = queue.poll(30, TimeUnit.SECONDS);\n\t\t\tif (task == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Process the task based on its type\n\t\t\tif (task.getType() == TaskType.SEND_TEXT_MESSAGE) {\n\t\t\t\t// Extract the recipient number and message data from the task\n\t\t\t\tString recipientNumber = task.getRecipientNumber();\n\t\t\t\tString messageData = task.getMessageData();\n\n\t\t\t\t// Validate the recipient number and message data\n\t\t\t\tif (recipientNumber == null || recipientNumber.isEmpty() || messageData == null || messageData.isEmpty()) {\n\t\t\t\t\tlogger.error(\"Invalid recipient number or message data.\");\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Send the message\n\t\t\t\ttry {\n\t\t\t\t\tsendTextMessage(recipientNumber, messageData);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tlogger.error(\"Error sending text message: \" + e.getMessage());\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlogger.error(\"Invalid task type.\");\n\t\t\t}\n\t\t} catch (InterruptedException e) {\n\t\t\t// Interrupted while polling for tasks\n\t\t\tthrow e;\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error processing task: \" + e.getMessage());\n\t\t}\n\t}\n}", "CodeBleu_score": 25.569888658933227}, {"code": "protected void pollingWork() throws InterruptedException\twhile (true) {\n\t\ttry {\n\t\t\t// Retrieve a task from the queue with a 30-second timeout.\n\t\t\tTask task = queue.retrieve(30);\n\t\t\tif (task!= null) {\n\t\t\t\t// Check the task type and process accordingly.\n\t\t\t\tif (task.getType() == TaskType.PLAIN_TEXT_MESSAGE) {\n\t\t\t\t\t// Extract the recipient number and message data from the task.\n\t\t\t\t\tString recipientNumber = task.getRecipientNumber();\n\t\t\t\t\tString messageData = task.getMessageData();\n\n\t\t\t\t\t// Validate the recipient number and message data.\n\t\t\t\t\tif (recipientNumber == null || recipientNumber.isEmpty() || messageData == null || messageData.isEmpty()) {\n\t\t\t\t\t\tthrow new IllegalArgumentException(\"Invalid recipient number or message data.\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Send the message.\n\t\t\t\t\tsendMessage(recipientNumber, messageData);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new IllegalArgumentException(\"Unknown task type.\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// Log the error message.\n\t\t\tlogger.error(\"Error processing task: {}\", e.getMessage());\n\t\t}\n\t}\n}\n", "CodeBleu_score": 23.45515856041584}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception\ttry (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n\t\tHttpGet request = new HttpGet(uri);\n\t\trequest.addHeader(\"Accept\", \"application/xml\");\n\t\trequest.addHeader(\"Authorization\", \"Basic \" + Base64.getEncoder().encodeToString(\"admin:admin\".getBytes()));\n\t\ttry (CloseableHttpResponse response = httpClient.execute(request)) {\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tString content = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n\t\t\tLOGGER.info(\"Response content: {}\", content);\n\t\t\treturn content;\n\t\t}\n\t}\n}\n", "CodeBleu_score": 51.70548481367598}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception\t// Create a CloseableHttpClient to execute the request\n\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\n\t// Create a GET request with the specified URI\n\tHttpGet httpGet = new HttpGet(uri);\n\n\t// Execute the request and retrieve the response\n\tCloseableHttpResponse response = httpClient.execute(httpGet);\n\n\t// Retrieve the response entity and convert it to a UTF-8 encoded string\n\tHttpEntity entity = response.getEntity();\n\tString content = EntityUtils.toString(entity, \"UTF-8\");\n\n\t// Log the content\n\tSystem.out.println(\"Response Content:\");\n\tSystem.out.println(content);\n\n\t// Close the response and the HTTP client\n\tresponse.close();\n\thttpClient.close();\n\n\t// Return the response content as a string\n\treturn content;\n}\n", "CodeBleu_score": 57.40473590698754}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tHttpGet httpGet = new HttpGet(uri);\n\tCloseableHttpResponse response = httpClient.execute(httpGet);\n\tHttpEntity entity = response.getEntity();\n\tString content = EntityUtils.toString(entity, \"UTF-8\");\n\tSystem.out.println(\"Response content: \" + content);\n\treturn content;\n}\n", "CodeBleu_score": 63.8114087099557}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception\tDocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\tDocument doc = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n\tdoc.getDocumentElement().normalize();\n\tif (doc.hasChildNodes()) {\n\t\tMap<String, Object> map = new HashMap<>();\n\t\tNodeList nodeList = doc.getChildNodes();\n\t\tfor (int i = 0; i < nodeList.getLength(); i++) {\n\t\t\tNode node = nodeList.item(i);\n\t\t\tif (node.getNodeType() == Node.ELEMENT_NODE) {\n\t\t\t\tElement element = (Element) node;\n\t\t\t\tmap.putAll(decodeToMap(element, doTrim));\n\t\t\t}\n\t\t}\n\t\treturn map;\n\t}\n\treturn null;\n}\n", "CodeBleu_score": 43.96160272627526}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception\tDocumentBuilder docBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\tDocument doc = docBuilder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n\tdoc.getDocumentElement().normalize();\n\tList<Map.Entry<String, Object>> entries = new ArrayList<>();\n\tdecodeNode(doc.getDocumentElement(), entries, doTrim);\n\tif (entries.isEmpty()) {\n\t\treturn null;\n\t}\n\treturn entries.stream().collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n}\n", "CodeBleu_score": 43.30800775988747}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument doc = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n\tif (doc!= null) {\n\t\treturn decodeToMap(doc.getChildNodes(), doTrim);\n\t}\n\treturn null;\n}\n", "CodeBleu_score": 36.65408708242014}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord)\t//\tCheck if order is eligible for auto-processing\n\tif (orderRecord.isAutoProcess()) {\n\t\t//\tOrder is eligible for auto-processing\n\t\tlog.info(\"Order is eligible for auto-processing: \" + orderRecord);\n\t\t//\tLog the action\n\t\tlog.info(\"Enqueuing order for automatic shipping and invoicing: \" + orderRecord);\n\t\t//\tEnqueue the order for automatic shipping and invoicing\n\t\tMOrder.enqueueAutoProcess(orderRecord);\n\t} else {\n\t\t//\tOrder is not eligible for auto-processing\n\t\tlog.info(\"Order is not eligible for auto-processing: \" + orderRecord);\n\t\t//\tLog the action\n\t\tlog.info(\"Scheduling the creation of missing shipment schedules if they are not postponed: \" + orderRecord);\n\t\t//\tSchedule the creation of missing shipment schedules if they are not postponed\n\t\tMOrder.scheduleGenerateSchedules(orderRecord);\n\t}\n}", "CodeBleu_score": 25.750906760741092}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord)\t//\tIs order eligible for auto-processing?\n\tif (isOrderEligibleForAutoProcessing(orderRecord)) {\n\t\t//\tLog action\n\t\tlog.info(\"Order \" + orderRecord.getDocumentNo() + \" is eligible for auto-processing\");\n\n\t\t//\tEnqueue order for automatic shipping and invoicing\n\t\tenqueueAutoProcessOrder(orderRecord);\n\t} else {\n\t\t//\tLog action\n\t\tlog.info(\"Order \" + orderRecord.getDocumentNo() + \" is not eligible for auto-processing\");\n\n\t\t//\tSchedule the creation of missing shipment schedules if they are not postponed\n\t\tscheduleGenerateSchedules(orderRecord);\n\t}\n}\n", "CodeBleu_score": 19.099822432990447}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord)\tfinal boolean isAutoProcess = orderRecord.isAutoProcess();\n\tfinal String transactionName = orderRecord.get_ValueAsString(I_C_Order.COLUMNNAME_TransactionName);\n\tif (isAutoProcess) {\n\t\tlog.info(\"Order \" + orderRecord.getDocumentNo() + \" is auto-processing. Schedules will be generated automatically.\");\n\t\tlog.info(\"Order \" + orderRecord.getDocumentNo() + \" is being scheduled for automatic shipping and invoicing.\");\n\t\tfinal MOrder order = new MOrder(getCtx(), orderRecord.get_ID(), get_Trx());\n\t\torder.generateShipmentSchedule(transactionName);\n\t\torder.generateInvoiceSchedule(transactionName);\n\t} else {\n\t\tlog.info(\"Order \" + orderRecord.getDocumentNo() + \" is not auto-processing. Schedules will be generated manually.\");\n\t\tfinal boolean hasMissingShipmentSchedules = orderRecord.hasMissingShipmentSchedules();\n\t\tfinal boolean hasMissingInvoiceSchedules = orderRecord.hasMissingInvoiceSchedules();\n\t\tif (hasMissingShipmentSchedules) {\n\t\t\tlog.info(\"Order \" + orderRecord.getDocumentNo() + \" has missing shipment schedules. Schedules will be generated manually.\");\n\t\t\tfinal MOrder order = new MOrder(getCtx(), orderRecord.get_ID(), get_Trx());\n\t\t\torder.generateShipmentSchedule(transactionName);\n\t\t}\n\t\tif (hasMissingInvoiceSchedules) {\n\t\t\tlog.info(\"Order \" + orderRecord.getDocumentNo() + \" has missing invoice schedules. Schedules will be generated manually.\");\n\t\t\tfinal MOrder order = new MOrder(getCtx(), orderRecord.get_ID(), get_Trx());\n\t\t\torder.generateInvoiceSchedule(transactionName);\n\t\t}\n\t}\n}", "CodeBleu_score": 34.722499438064936}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User$user = $this->userProvider->getUserByEmail($request->get('email'));\n\n\tif (!$user ||!$this->userProvider->checkPassword($user, $request->get('password'))) {\n\t\t$this->triggerFailedAuthenticationEvent($request, $user);\n\t\tthrow new AuthenticationException('Invalid credentials');\n\t}\n\n\treturn $user;\n}\n", "CodeBleu_score": 37.955901126318345}, {"code": "<?\nprotected function validateCredentials(Request $request): ?Useruser = $this->userProvider->retrieveByEmail($request->get('email'));\n", "CodeBleu_score": 7.367796187793172}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User$user = $this->getUserByEmail($request->get('email'));\n\tif (!$user ||!password_verify($request->get('password'), $user->getPassword())) {\n\t\tevent(new FailedAuthenticationEvent($request));\n\t\tthrow new AuthenticationException();\n\t}\n\treturn $user;\n}", "CodeBleu_score": 34.03959643850155}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void$this->incrementLoginAttempts($request);", "CodeBleu_score": 34.63563627178676}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void\t$this->incrementLoginAttempts($request);\n\n\tthrow ValidationException::withMessages([\n\t\t$this->username() => [trans('auth.failed')],\n\t]);\n}", "CodeBleu_score": 64.46325360452249}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void$this->incrementLoginAttempts($request);\n", "CodeBleu_score": 34.63563627178676}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request)\t$userId = $request->session()->get('user_id');\n\t$user = User::find($userId);\n\tif ($user) {\n\t\t$publicKey = $user->publicKey;\n\t\t$assertion = $this->webAuthn->createAssertion($publicKey);\n\t\t$data = [\n\t\t\t'enabled' => $user->twoFactorEnabled,\n\t\t\t'remember' => $request->session()->has('remember')\n\t\t];\n\t\treturn view('TwoFactorChallenge', ['assertion' => $assertion, 'data' => $data]);\n\t}\n\treturn view('TwoFactorChallenge', ['assertion' => null, 'data' => null]);\n}\n", "CodeBleu_score": 44.83041149538842}, {"code": "<?\npublic function toResponse($request)\t$userId = session('userId');\n\t$user = User::find($userId);\n\tif ($user) {\n\t\t$publicKey = $user->webauthn_public_key;\n\t\t$challenge = $this->generateChallenge();\n\t\t$response = [\n\t\t\t'enabled' => $user->two_factor_enabled,\n\t\t\t'remember' => $request->remember,\n\t\t\t'challenge' => $challenge,\n\t\t\t'publicKey' => $publicKey,\n\t\t];\n\t\treturn view('TwoFactorChallenge', $response);\n\t} else {\n\t\treturn redirect('/');\n\t}\n}\n", "CodeBleu_score": 39.770689134137065}, {"code": "<?\npublic function toResponse($request)\t$user_id = $request->session()->get('user_id');\n\t$user = User::find($user_id);\n\tif ($user) {\n\t\t$publicKey = $user->webauthn_public_key;\n\t\t$publicKey = json_decode($publicKey);\n\t\t$publicKey = $publicKey->publicKey;\n\t\t$publicKey = base64_decode($publicKey);\n\t\t$publicKey = json_decode($publicKey);\n\t\t$publicKey = $publicKey->n;\n\t\t$publicKey = base64_decode($publicKey);\n\t\t$publicKey = bin2hex($publicKey);\n\t\t$publicKey = strtoupper($publicKey);\n\t\t$publicKey = substr($publicKey, 0, 64). substr($publicKey, -64);\n\t\t$publicKey = str_split($publicKey, 8);\n\t\t$publicKey = array_map(function ($hex) {\n\t\t\treturn hexdec($hex);\n\t\t}, $publicKey);\n\t\t$publicKey = array_map(function ($dec) {\n\t\t\treturn chr($dec);\n\t\t}, $publicKey);\n\t\t$publicKey = implode('', $publicKey);\n\t\t$publicKey = base64_encode($publicKey);\n\t\t$publicKey = str_replace('+', '-', $publicKey);\n\t\t$publicKey = str_replace('/', '_', $publicKey);\n\t\t$publicKey = str_replace('=', '', $publicKey);\n\t\t$publicKey = str_replace(\"\\n\", '', $publicKey);\n\t\t$publicKey = str_replace(\"\\r\", '', $publicKey);\n\t\t$publicKey = str_replace(\"\\t\", '', $publicKey);\n\t\t$publicKey = str_replace(\"\\0\", '', $publicKey);\n\t\t$publicKey = str_replace(\"\\x20\", '', $publicKey);\n\t\t$publicKey = str_replace(\"\\x0B\", '', $publicKey);\n\t\t$publicKey = str_replace(\"\\xA0\", '', $publicKey);\n\t\t$publicKey = str_replace(\"\\x0C\", '', $publicKey);\n\t\t$publicKey = str_replace(\"\\x00\", '', $publicKey);\n\t\t$publicKey = str_replace(\"\\x09\", '', $publicKey);\n\t\t$publicKey = str_replace(\"\\x0A\", '', $publicKey);\n\t\t$publicKey = str_replace(\"\\xE2\", '', $publicKey);\n\t\t$publicKey = str_replace(\"\\x80\", '', $publicKey);", "CodeBleu_score": 33.27331120073631}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User\t// Check if there is an existing user token for the given driver and socialite user ID\n\t$token = UserToken::where('driver', $driver)\n\t\t->where('socialite_id', $socialite->getId())\n\t\t->first();\n\n\tif ($token) {\n\t\t// If found, retrieve the associated user and verify the user association\n\t\t$user = $token->user;\n\n\t\tif ($user->socialite_id!== $socialite->getId()) {\n\t\t\tthrow new AuthenticationException('User is already associated with a different socialite account.');\n\t\t}\n\n\t\t// Return the authenticated user\n\t\treturn $user;\n\t}\n\n\t// If not, check if there is an existing user with the same email address as the socialite user\n\t$user = User::where('email', $socialite->getEmail())->first();\n\n\tif ($user) {\n\t\t// If found, associate the socialite token with the existing user\n\t\t$user->tokens()->create([\n\t\t\t'driver' => $driver,\n\t\t\t'socialite_id' => $socialite->getId(),\n\t\t]);\n\n\t\t// Return the authenticated user\n\t\treturn $user;\n\t}\n\n\t// If not, create a new user and associate the socialite token with it\n\t$user = User::create([\n\t\t'name' => $socialite->getName(),\n\t\t'email' => $socialite->getEmail(),\n\t\t'password' => (Str::()),\n\t]);\n\n\t$user->tokens()->create([\n\t\t'driver' => $driver,\n\t\t'socialite_id' => $socialite->getId(),\n\t]);\n\n\t// Return the authenticated user\n\treturn $user;\n}\n", "CodeBleu_score": 45.846986438015755}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User\t$userToken = UserToken::where('driver', $driver)->where('socialite_id', $socialite->getId())->first();\n\tif ($userToken) {\n\t\t$user = $userToken->user;\n\t\t$user->verifyUserAssociation($socialite);\n\t} else {\n\t\t$user = User::where('email', $socialite->getEmail())->first();\n\t\tif ($user) {\n\t\t\t$user->associateSocialiteToken($driver, $socialite);\n\t\t} else {\n\t\t\t$user = User::create([\n\t\t\t\t'name' => $socialite->getName(),\n\t\t\t\t'email' => $socialite->getEmail(),\n\t\t\t\t'password' => (Str::(10)),\n\t\t\t]);\n\t\t\t$user->associateSocialiteToken($driver, $socialite);\n\t\t}\n\t}\n\t$request->session()->put('user_id', $user->id);\n\treturn $user;\n}", "CodeBleu_score": 50.12651284190327}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User\t// Check if there is an existing user token for the given driver and socialite user ID\n\t$userToken = UserToken::where('driver', $driver)->where('socialite_id', $socialite->id)->first();\n\n\tif ($userToken) {\n\t\t// Retrieve the associated user\n\t\t$user = $userToken->user;\n\n\t\t// Verify the user association\n\t\tif ($user->email!== $socialite->email) {\n\t\t\tthrow new AuthenticationException('The user associated with this socialite token is not the same as the one provided.');\n\t\t}\n\t} else {\n\t\t// Create a new user or associate the socialite token with an existing user\n\t\t$user = User::where('email', $socialite->email)->first();\n\n\t\tif ($user) {\n\t\t\t// Associate the socialite token with the existing user\n\t\t\t$userToken = UserToken::create([\n\t\t\t\t'user_id' => $user->id,\n\t\t\t\t'driver' => $driver,\n\t\t\t\t'socialite_id' => $socialite->id,\n\t\t\t\t'access_token' => $socialite->token,\n\t\t\t\t'refresh_token' => $socialite->refreshToken,\n\t\t\t\t'expires_in' => $socialite->expiresIn,\n\t\t\t]);\n\t\t} else {\n\t\t\t// Create a new user\n\t\t\t$user = User::create([\n\t\t\t\t'email' => $socialite->email,\n\t\t\t\t'name' => $socialite->name,\n\t\t\t]);\n\n\t\t\t// Associate the socialite token with the new user\n\t\t\t$userToken = UserToken::create([\n\t\t\t\t'user_id' => $user->id,\n\t\t\t\t'driver' => $driver,\n\t\t\t\t'socialite_id' => $socialite->id,\n\t\t\t\t'access_token' => $socialite->token,\n\t\t\t\t'refresh_token' => $socialite->refreshToken,\n\t\t\t\t'expires_in' => $socialite->expiresIn,\n\t\t\t]);\n\t\t}\n\t}\n\n\t// Return the authenticated user\n\treturn $user;\n}\n", "CodeBleu_score": 46.51663613301442}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool\tif (!$user = $request->user()) {\n\t\treturn false;\n\t}\n\n\t$credentials = $this->credentials($request);\n\t$credentials = array_filter($credentials, function ($value) {\n\t\treturn!is_null($value);\n\t});\n\n\tif (!$this->getWebAuthnManager()->validateAssertion($user, $credentials)) {\n\t\t$this->fireFailedAuthenticationEvent($request, $user);\n\t\tthrow new AuthenticationException();\n\t\treturn false;\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 51.93910836178589}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool\t$user = $this->getUser();\n\tif (!$user) {\n\t\treturn false;\n\t}\n\n\t$credentials = $this->getCredentials($request);\n\t$credentials = $this->filterCredentials($credentials);\n\n\tif (!$this->validateAssertion($credentials)) {\n\t\t$this->fireFailedEvent($request, $user);\n\t\tthrow new AuthenticationException;\n\t}\n\n\t$this->fireAuthenticatedEvent($request, $user);\n\n\treturn true;\n}", "CodeBleu_score": 52.87258816422472}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool\tif (!$user = $this->getUser()) {\n\t\treturn false;\n\t}\n\n\t$credentials = $this->getFilteredCredentials($request);\n\n\tif (!$this->validateAssertion($user, $credentials)) {\n\t\t$this->fireFailedAuthenticationEvent($user, $credentials);\n\t\tthrow new AuthenticationException;\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 38.347602476183575}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?Userif (!isset($this->email)) {\n\t\t$this->log->error('No email provided');\n\t\treturn null;\n\t}\n\ttry {\n\t\treturn $this->userRepository->findOneBy(['email' => $this->email]);\n\t} catch (Exception $e) {\n\t\t$this->log->error('Failed to find user', ['email' => $this->email]);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 30.35429212468831}, {"code": "<?\nprivate function user(): ?Userif (empty($this->email)) {\n\t\t$this->logError('No email provided');\n\t\treturn null;\n\t}\n\n\ttry {\n\t\t$user = User::where('email', $this->email)->first();\n\t\treturn $user;\n\t} catch (Exception $e) {\n\t\t$this->logError($e->getMessage());\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 51.10285476797147}, {"code": "<?\nprivate function user(): ?Userif (empty($this->email)) {\n\t\t$this->log->error('No email provided to retrieve user');\n\t\treturn null;\n\t}\n\n\ttry {\n\t\t$user = $this->userRepository->findByEmail($this->email);\n\t} catch (Exception $e) {\n\t\t$this->log->error('Unable to retrieve user by email', ['email' => $this->email, 'exception' => $e]);\n\t\treturn null;\n\t}\n\n\treturn $user;\n}", "CodeBleu_score": 47.75223407152778}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void\tif (config('scout.driver')!=='meilisearch') {\n\t\treturn;\n\t}\n\n\tif (! config('scout.meilisearch.flush_on_import')) {\n\t\treturn;\n\t}\n\n\tforeach (config('scout.meilisearch.index_settings') as $index => $settings) {\n\t\t$table = $settings['table'];\n\t\tArtisan::call('scout:flush', ['model' => $table]);\n\t}\n\n\tLog::info('Scout indexes flushed.');\n}", "CodeBleu_score": 41.30798822007622}, {"code": "<?\nprotected function scoutFlush(): void\tif (config('scout.driver') && config('scout.flush')) {\n\t\tforeach (config('scout.meilisearch.indexes') as $index) {\n\t\t\t$tableName = $index['table'];\n\t\t\tArtisan::call('scout:flush', ['model' => $tableName]);\n\t\t}\n\t\t$this->info('Scout indexes flushed');\n\t}\n}\n", "CodeBleu_score": 38.273922067760786}, {"code": "<?\nprotected function scoutFlush(): voidif (config('scout.driver') && config('scout.flush')) {", "CodeBleu_score": 1.070591622039836}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard\t$vcard = $this->read($resource);\n\tif (!$vcard) {\n\t\t$vcard = $this->createVCard($resource);\n\t}\n\n\t$this->applyExporters($vcard, $resource);\n\n\treturn $vcard;\n}\n", "CodeBleu_score": 15.078253723899993}, {"code": "<?\nprivate function export(VCardResource $resource): VCard\t$vcard = $this->readVCard($resource);\n\tif ($vcard === null) {\n\t\t$vcard = $this->createVCard($resource);\n\t}\n\n\t$this->applyExporters($vcard, $resource);\n\n\treturn $vcard;\n}\n", "CodeBleu_score": 15.236228025792109}, {"code": "<?\nprivate function export(VCardResource $resource): VCard\t// Read existing VCard or create a new one if it doesn't exist\n\t$vcard = $this->read($resource)?? $this->create($resource);\n\n\t// Apply exporters\n\t$this->exporters->export($vcard, $resource);\n\n\treturn $vcard;\n}\n", "CodeBleu_score": 17.49681387008399}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool\t$object = $this->getObject($addressBookId, $cardUri);\n\tif ($object instanceof Contact) {\n\t\t$this->dispatcher->dispatch(new DestroyContactJob($object), 'high');\n\t} elseif ($object instanceof Group) {\n\t\t$this->dispatcher->dispatch(new DestroyGroupJob($object), 'high');\n\t} else {\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 39.9031474332768}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool\t$object = $this->getObject($addressBookId, $cardUri);\n\tif ($object instanceof Contact) {\n\t\t$this->jobQueue->push(new DestroyContactJob($object->getId()), 'high');\n\t\treturn true;\n\t}\n\tif ($object instanceof Group) {\n\t\t$this->jobQueue->push(new DestroyGroupJob($object->getId()), 'high');\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 41.69421420606168}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool\t$object = $this->getObjectByUri($addressBookId, $cardUri);\n\tif ($object instanceof Contact) {\n\t\t$this->dispatcher->dispatch(new DestroyContact($object->getId()), 'high');\n\t\treturn true;\n\t} elseif ($object instanceof Group) {\n\t\t$this->dispatcher->dispatch(new DestroyGroup($object->getId()), 'high');\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 42.18637391819853}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data)\t// Check if a file is included in the request\n\tif (!isset($_FILES['file'])) {\n\t\treturn;\n\t}\n\n\t// Create a lead activity record with details from the provided data and the authenticated user\n\t$leadActivity = LeadActivity::create([\n\t\t'lead_id' => $data['lead_id'],\n\t\t'user_id' => Auth::user()->id,\n\t\t'type' => 'file_upload',\n\t\t'description' => $data['description'],\n\t]);\n\n\t// Create a new record with the file's name and storage path, associating it with the created lead activity\n\t$file = File::create([\n\t\t'lead_activity_id' => $leadActivity->id,\n\t\t'name' => $_FILES['file']['name'],\n\t\t'path' => $this->storeFile($_FILES['file']),\n\t]);\n\n\treturn $file;\n}\n", "CodeBleu_score": 48.49869569557725}, {"code": "<?\npublic function upload(array $data)\tif (empty($_FILES)) {\n\t\treturn;\n\t}\n\n\t$leadActivity = $this->createLeadActivity($data);\n\n\t$file = $_FILES['file'];\n\t$path = $this->uploadFile($file);\n\n\treturn [\n\t\t'id' => $leadActivity->id,\n\t\t'name' => $file['name'],\n\t\t'path' => $path,\n\t];\n}\n", "CodeBleu_score": 28.788385675160644}, {"code": "<?\npublic function upload(array $data)\tif (!isset($_FILES['file'])) {\n\t\treturn null;\n\t}\n\n\t$user = Auth::user();\n\n\t$leadActivity = LeadActivity::create([\n\t\t'lead_id' => $data['lead_id'],\n\t\t'type' => 'file',\n\t\t'user_id' => $user->id,\n\t\t'comment' => $data['comment'],\n\t]);\n\n\t$file = $_FILES['file'];\n\t$filename = $file['name'];\n\t$filetype = $file['type'];\n\t$filepath = $file['tmp_name'];\n\n\t$storagePath = Storage::putFileAs('lead_files', new File($filepath), $filename);\n\n\treturn LeadActivityFile::create([\n\t\t'lead_activity_id' => $leadActivity->id,\n\t\t'name' => $filename,\n\t\t'type' => $filetype,\n\t\t'storage_path' => $storagePath,\n\t]);\n}", "CodeBleu_score": 44.686645143833545}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception)\t$request = $this->request;\n\t$response = $this->response;\n\t$route = $request->route;\n\t$routeType = $route->type;\n\t$routeName = $route->name;\n\t$routePath = $route->path;\n\t$routePathParts = $route->pathParts;\n\t$routePathParams = $route->pathParams;\n\t$routeParams = $route->params;\n\t$routeParamsQuery = $route->paramsQuery;\n\t$routeParamsBody = $route->paramsBody;\n\t$routeParamsFiles = $route->paramsFiles;\n\t$routeParamsSession = $route->paramsSession;\n\t$routeParamsCookie = $route->paramsCookie;\n\t$routeParamsServer = $route->paramsServer;\n\t$routeParamsAttributes = $route->paramsAttributes;\n\t$routeParamsRequest = $route->paramsRequest;\n\t$routeParamsResponse = $route->paramsResponse;\n\t$routeParams = $route->params;\n\t$routeParamsQuery = $route->paramsQuery;\n\t$routeParamsBody = $route->paramsBody;\n\t$routeParamsFiles = $route->paramsFiles;\n\t$routeParamsSession = $route->paramsSession;\n\t$routeParamsCookie = $route->paramsCookie;\n\t$routeParamsServer = $route->paramsServer;\n\t$routeParamsAttributes = $route->paramsAttributes;\n\t$routeParamsRequest = $route->paramsRequest;\n\t$routeParamsResponse = $route->paramsResponse;\n\t$routeParams = $route->params;\n\t$routeParamsQuery = $route->paramsQuery;\n\t$routeParamsBody = $route->paramsBody;\n\t$routeParamsFiles = $route->paramsFiles;\n\t$routeParamsSession = $route->paramsSession;\n\t$routeParamsCookie = $route->paramsCookie;\n\t$routeParamsServer = $route->paramsServer;\n\t$routeParamsAttributes = $route->paramsAttributes;\n\t$routeParamsRequest = $route->paramsRequest;\n\t$routeParamsResponse = $route->paramsResponse;\n\t$routeParams = $route->params;\n\t$routeParamsQuery = $route->paramsQuery;\n\t$routeParamsBody = $route->paramsBody;\n\t$", "CodeBleu_score": 19.515356499291457}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception)\tif (strpos(request()->route()->uri, 'admin')!== false) {\n\t\tif (request()->route()->uri == 'admin/login') {\n\t\t\treturn redirect()->route('admin.login');\n\t\t}\n\t\tif (request()->route()->uri == 'admin/register') {\n\t\t\treturn redirect()->route('admin.register');\n\t\t}\n\t\tif (request()->route()->uri == 'admin/forgot-password') {\n\t\t\treturn redirect()->route('admin.forgot-password');\n\t\t}\n\t\tif (request()->route()->uri == 'admin/reset-password') {\n\t\t\treturn redirect()->route('admin.reset-password');\n\t\t}\n\t\tif (request()->route()->uri == 'admin/logout') {\n\t\t\treturn redirect()->route('admin.login');\n\t\t}\n\t\tif (request()->route()->uri == 'admin/dashboard') {\n\t\t\treturn redirect()->route('admin.login');\n\t\t}\n\t} else {\n\t\tif (request()->route()->uri == 'login') {\n\t\t\treturn redirect()->route('login');\n\t\t}\n\t\tif (request()->route()->uri =='register') {\n\t\t\treturn redirect()->route('register');\n\t\t}\n\t\tif (request()->route()->uri == 'forgot-password') {\n\t\t\treturn redirect()->route('forgot-password');\n\t\t}\n\t\tif (request()->route()->uri =='reset-password') {\n\t\t\treturn redirect()->route('reset-password');\n\t\t}\n\t\tif (request()->route()->uri == 'logout') {\n\t\t\treturn redirect()->route('login');\n\t\t}\n\t\tif (request()->route()->uri == 'dashboard') {\n\t\t\treturn redirect()->route('login');\n\t\t}\n\t}\n\n\tif ($exception instanceof HttpException) {\n\t\treturn response()->json(['message' => 'HTTP Exception'], $exception->getStatusCode());\n\t}\n\n\tif ($exception instanceof ModelNotFoundException) {\n\t\treturn response()->json(['message' => 'Model Not Found'], 404);\n\t}\n\n\tif ($exception instanceof PDOException) {\n\t\treturn response()->json(['message' => 'Database Error'], 500);\n\t}\n\n\tif ($exception instanceof ParseError) {\n\t\treturn response()->json(['message' => 'Parse Error'], 500);\n\t}\n\n\treturn parent::", "CodeBleu_score": 27.979813244345088}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception)\t$route = $this->app->request->getRoute();\n\tif (strpos($route, 'admin')!== false) {\n\t\t$this->app->redirect($this->app->urlFor('admin.login'));\n\t} else {\n\t\t$this->app->redirect($this->app->urlFor('admin.session.create'));\n\t}\n\n\tif ($exception instanceof HttpException) {\n\t\t$this->app->response->setStatus($exception->getStatusCode());\n\t\t$this->app->response->setBody($exception->getMessage());\n\t} else if ($exception instanceof ModelNotFoundException) {\n\t\t$this->app->response->setStatus(404);\n\t\t$this->app->response->setBody('Model not found');\n\t} else if ($exception instanceof PDOException) {\n\t\t$this->app->response->setStatus(500);\n\t\t$this->app->response->setBody('Database error');\n\t} else if ($exception instanceof ParseError) {\n\t\t$this->app->response->setStatus(500);\n\t\t$this->app->response->setBody('Parse error');\n\t} else {\n\t\t$this->app->response->setStatus(500);\n\t\t$this->app->response->setBody('Internal server error');\n\t}\n}", "CodeBleu_score": 34.08702995653064}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode)\t$response = new Response();\n\t$response->setStatusCode($statusCode);\n\n\t// Check if the request expects a JSON response\n\tif ($this->request->getRequestFormat() == 'json') {\n\t\t// Return a JSON object with an error message\n\t\t$response->setContent(json_encode(['error' => $this->errorMessages[$statusCode]]));\n\t\t$response->headers->set('Content-Type', 'application/json');\n\t} else {\n\t\t// Return an error view corresponding to the provided status code and path\n\t\t$response->setContent($this->errorView->render($path, $statusCode));\n\t}\n\n\treturn $response;\n}", "CodeBleu_score": 39.59327978107349}, {"code": "<?\nprivate function response($path, $statusCode)\t$response = array();\n\t$response['code'] = $statusCode;\n\t$response['message'] = $this->getErrorMessage($statusCode);\n\t$response['data'] = array();\n\n\tif (strpos($path, '/api/')!== false) {\n\t\treturn $response;\n\t} else {\n\t\treturn $this->view('error', $response);\n\t}\n}\n", "CodeBleu_score": 33.64406168052865}, {"code": "<?\nprivate function response($path, $statusCode)\tif (is_json_request()) {\n\t\treturn json_response($path, $statusCode);\n\t} else {\n\t\treturn view($path, $statusCode);\n\t}\n}\n", "CodeBleu_score": 38.05903965678949}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate()\t// Check if the request method is POST\n\tif ($this->request->is('post')) {\n\t\t// Get the request data\n\t\t$data = $this->request->data;\n\n\t\t// Check if the request data is valid\n\t\tif (!empty($data)) {\n\t\t\t// Initialize variables\n\t\t\t$updated = 0;\n\n\t\t\t// Iterate over the activity IDs\n\t\t\tforeach ($data['Activity']['Activity'] as $activityId) {\n\t\t\t\t// Check if the activity ID is valid\n\t\t\t\tif (!empty($activityId)) {\n\t\t\t\t\t// Get the activity\n\t\t\t\t\t$activity = $this->Activity->findById($activityId);\n\n\t\t\t\t\t// Check if the activity exists\n\t\t\t\t\tif (!empty($activity)) {\n\t\t\t\t\t\t// Dispatch the beforeMassUpdate event\n\t\t\t\t\t\t$this->getEventManager()->dispatch(new CakeEvent('Controller.Activity.beforeMassUpdate', $this, array(\n\t\t\t\t\t\t\t'activity' => $activity,\n\t\t\t\t\t\t\t'activityId' => $activityId,\n\t\t\t\t\t\t\t'userId' => $this->Auth->user('id'),\n\t\t\t\t\t\t\t'isDone' => $data['Activity']['is_done']\n\t\t\t\t\t\t)));\n\n\t\t\t\t\t\t// Update the activity's 'is_done' status\n\t\t\t\t\t\t$this->Activity->id = $activityId;\n\t\t\t\t\t\t$this->Activity->saveField('is_done', $data['Activity']['is_done']);\n\n\t\t\t\t\t\t// Dispatch the afterMassUpdate event\n\t\t\t\t\t\t$this->getEventManager()->dispatch(new CakeEvent('Controller.Activity.afterMassUpdate', $this, array(\n\t\t\t\t\t\t\t'activity' => $activity,\n\t\t\t\t\t\t\t'activityId' => $activityId,\n\t\t\t\t\t\t\t'userId' => $this->Auth->user('id'),\n\t\t\t\t\t\t\t'isDone' => $data['Activity']['is_done']\n\t\t\t\t\t\t)));\n\n\t\t\t\t\t\t// Increment the updated counter\n\t\t\t\t\t\t$updated++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Check if any updates were made\n\t\t\tif ($updated > 0) {\n\t\t\t\t// Set a success message\n\t\t\t\t$this->Session->setFlash(__('The activities have been updated.'), 'flash/success');\n\t\t\t} else {\n\t\t\t\t// Set an error message\n\t\t\t\t$this->Session->setFlash(__('No activities were updated.'), 'flash/error');\n\t\t\t}\n\t\t} else {\n\t\t\t// Set an error message\n\t\t\t$this->Session->setFlash(__('", "CodeBleu_score": 29.284819342765918}, {"code": "<?\npublic function massUpdate()\t$ids = $this->request->data['ids'];\n\t$is_done = $this->request->data['is_done'];\n\t$count = 0;\n\tforeach ($ids as $id) {\n\t\t$this->Activity->id = $id;\n\t\tif ($this->Activity->exists()) {\n\t\t\t$this->request->data['Activity']['id'] = $id;\n\t\t\t$this->request->data['Activity']['is_done'] = $is_done;\n\t\t\t$this->Activity->set($this->request->data);\n\t\t\t$this->Activity->create();\n\t\t\t$this->Activity->data['Activity']['modified'] = false;\n\t\t\tif ($this->Activity->save($this->request->data)) {\n\t\t\t\t$count++;\n\t\t\t\t$this->Activity->data['Activity']['modified'] = true;\n\t\t\t\t$this->Activity->save($this->request->data);\n\t\t\t\t$this->Activity->getEventManager()->dispatch(new CakeEvent('Model.Activity.massUpdate', $this->Activity));\n\t\t\t}\n\t\t}\n\t}\n\tif ($count > 0) {\n\t\t$this->set('success', true);\n\t\t$this->set('_serialize', array('success'));\n\t} else {\n\t\tthrow new NotFoundException(__('Invalid activity'));\n\t}\n}\n", "CodeBleu_score": 29.54040067780642}, {"code": "<?\npublic function massUpdate()\t$ids = $this->request->data['ids'];\n\t$is_done = $this->request->data['is_done'];\n\t$count = 0;\n\n\tforeach ($ids as $id) {\n\t\t$activity = $this->Activity->findById($id);\n\t\tif ($activity) {\n\t\t\t$this->Activity->id = $id;\n\t\t\t$this->Activity->saveField('is_done', $is_done);\n\t\t\t$this->Activity->saveField('modified', date('Y-m-d H:i:s'));\n\t\t\t$this->Activity->saveField('modified_by', $this->Auth->user('id'));\n\t\t\t$this->Activity->saveField('modified_by_name', $this->Auth->user('name'));\n\t\t\t$this->Activity->saveField('modified_by_username', $this->Auth->user('username'));\n\t\t\t$this->Activity->saveField('modified_by_email', $this->Auth->user('email'));\n\t\t\t$this->Activity->saveField('modified_by_phone', $this->Auth->user('phone'));\n\t\t\t$this->Activity->saveField('modified_by_role', $this->Auth->user('role'));\n\n\t\t\t$this->Activity->dispatchActivityEvent($activity, 'Activity.massUpdate.before', array(\n\t\t\t\t'activity' => $activity,\n\t\t\t\t'is_done' => $is_done\n\t\t\t));\n\t\t\t$this->Activity->dispatchActivityEvent($activity, 'Activity.massUpdate.after', array(\n\t\t\t\t'activity' => $activity,\n\t\t\t\t'is_done' => $is_done\n\t\t\t));\n\n\t\t\t$count++;\n\t\t}\n\t}\n\n\tif ($count > 0) {\n\t\t$this->set('success', true);\n\t\t$this->set('message', __('%s activity(s) updated.', $count));\n\t} else {\n\t\t$this->set('success', false);\n\t\t$this->set('message', __('No activities were updated.'));\n\t}\n\t$this->set('_serialize', array('success','message'));\n}\n", "CodeBleu_score": 30.24714681389157}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy()\t$ids = $this->request->input('ids');\n\t$activities = Activity::whereIn('id', $ids)->get();\n\tforeach ($activities as $activity) {\n\t\t$activity->delete();\n\t}\n\treturn response()->json(\n\t\t[\n\t\t\t'success' => true,\n\t\t\t'message' => 'Activities deleted successfully.'\n\t\t]\n\t);\n}\n", "CodeBleu_score": 23.334378706922788}, {"code": "<?\n public function massDestroy()\t$ids = $this->request->input('ids');\n\t$activities = Activity::whereIn('id', $ids)->get();\n\n\tforeach ($activities as $activity) {\n\t\tevent(new ActivityDeleted($activity));\n\t\t$activity->delete();\n\t}\n\n\treturn response()->json(['message' => 'Activity deleted successfully.']);\n}", "CodeBleu_score": 24.45867486018943}, {"code": "<?\n public function massDestroy()\t// Validate request data\n\t$requestData = $this->validate(request(), [\n\t\t'ids' =>'required|array'\n\t]);\n\n\t// Iterate over activity IDs\n\tforeach ($requestData['ids'] as $id) {\n\t\t// Find the activity by ID\n\t\t$activity = Activity::find($id);\n\n\t\t// Dispatch an event before deleting the activity\n\t\tevent(new ActivityDeleted($activity));\n\n\t\t// Delete the activity\n\t\t$activity->delete();\n\t}\n\n\t// Return a JSON response indicating a successful destruction\n\treturn response()->json(['message' => 'Activities deleted successfully.']);\n}", "CodeBleu_score": 20.73254572532328}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards()$cards = DashboardCard::all();\n $requestData = request()->all();\n foreach ($cards as $card) {\n foreach ($requestData as $data) {\n if ($card->id == $data['id']) {\n $card->selected = $data['selected'];\n $card->save();\n }\n }\n }\n return response()->json($cards);\n }\n}\n", "CodeBleu_score": 37.457096805083225}, {"code": "<?\n public function updateCards()$cards = DashboardCard::where('dashboard_id', '=', $this->dashboard_id)->get();\n\t$requestData = json_decode(request()->getContent());\n\tforeach ($cards as $card) {\n\t\tforeach ($requestData as $data) {\n\t\t\tif ($card->id == $data->id) {\n\t\t\t\t$card->selected = $data->selected;\n\t\t\t\t$card->save();\n\t\t\t}\n\t\t}\n\t}\n\treturn response()->json($cards);\n}\n", "CodeBleu_score": 38.364067009028055}, {"code": "<?\n public function updateCards()$cards = DashboardCard::all();\n\t$requestData = json_decode(request()->getContent());\n\tforeach ($cards as $card) {\n\t\tforeach ($requestData as $data) {\n\t\t\tif ($card->id == $data->id) {\n\t\t\t\t$card->selected = $data->selected;\n\t\t\t\t$card->save();\n\t\t\t}\n\t\t}\n\t}\n\treturn response()->json($cards);\n}\n", "CodeBleu_score": 32.97459488136889}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store()\t// Dispatch event before saving\n\tevent(new ConfigurationSaving($this->configuration));\n\n\t// Create the configuration\n\t$this->configuration->create($this->request->all());\n\n\t// Dispatch event after saving\n\tevent(new ConfigurationSaved($this->configuration));\n\n\t// Flash success message to session\n\tflash('Configuration saved successfully.');\n\n\t// Redirect back to previous page\n\treturn redirect()->back();\n}", "CodeBleu_score": 31.743718383601987}, {"code": "<?\npublic function store()\t$this->validate(request(), [\n\t\t'name' =>'required',\n\t\t'value' =>'required'\n\t]);\n\n\tevent(new ConfigurationSaving(request()->all()));\n\n\t$configuration = Configuration::create(request()->all());\n\n\tevent(new ConfigurationSaved($configuration));\n\n\tflash()->success(trans('configurations.messages.created'));\n\n\treturn redirect()->back();\n}\n", "CodeBleu_score": 31.24088602427062}, {"code": "<?\npublic function store()\t$this->validate(request(), [\n\t\t'name' =>'required|min:3|max:255',\n\t\t'value' =>'required|min:3|max:255'\n\t]);\n\n\tevent(new ConfigurationCreating(request()->all()));\n\n\t$configuration = Configuration::create(request()->all());\n\n\tevent(new ConfigurationCreated($configuration));\n\n\tsession()->flash('success', 'Configuration created successfully.');\n\n\treturn redirect()->back();\n}\n", "CodeBleu_score": 27.420524219076047}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download()\t$file = $this->request->get('file');\n\t$config = $this->repository->get($file);\n\n\t$this->response->file($config->file, array(\n\t\t'download' => true,\n\t\t'name' => $config->name\n\t));\n}", "CodeBleu_score": 29.800617077271617}, {"code": "<?\npublic function download()\t$filePath = $this->request->get('filePath');\n\t$fileName = $this->request->get('fileName');\n\t$file = $this->repository->getFile($filePath);\n\t$this->response->setContentType($file->getContentType());\n\t$this->response->setContent($file->getContent());\n\t$this->response->send();\n}", "CodeBleu_score": 30.398561510239663}, {"code": "<?\npublic function download()\t$file = $this->request->query['file'];\n\t$path = $this->request->query['path'];\n\t$config = $this->File->getConfig($path);\n\tif (empty($config)) {\n\t\treturn $this->redirect(array('controller' => 'files', 'action' => 'index', $path));\n\t}\n\t$filename = $config['File']['path']. DS. $file;\n\t$this->response->file($filename, array('download' => true));\n\treturn $this->response;\n}", "CodeBleu_score": 35.60761638277989}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) \tList<AdminModelSort> modelSorts = new ArrayList<AdminModelSort>();\n\tfor (String modelSort : list) {\n\t\tString[] modelSortArray = modelSort.split(\":\");\n\t\tAdminModelSort adminModelSort = new AdminModelSort();\n\t\tadminModelSort.setModel(modelSortArray[0]);\n\t\tadminModelSort.setSort(modelSortArray[1]);\n\t\tadminModelSort.setOrder(Integer.parseInt(modelSortArray[2]));\n\t\tmodelSorts.add(adminModelSort);\n\t}\n\tadminModelSortService.removeAll();\n\tadminModelSortService.saveBatch(modelSorts);\n\treturn Result.success();\n}", "CodeBleu_score": 38.274067556480475}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) \tList<AdminModelSort> sortList = new ArrayList<>();\n\tfor (String s : list) {\n\t\tAdminModelSort sort = new AdminModelSort();\n\t\tString[] split = s.split(\",\");\n\t\tsort.setSortType(split[0]);\n\t\tsort.setSortOrder(split[1]);\n\t\tsort.setUserId(split[2]);\n\t\tsort.setAdminModelId(split[3]);\n\t\tsortList.add(sort);\n\t}\n\tadminModelSortRepository.deleteAllByUserId(sortList.get(0).getUserId());\n\tadminModelSortRepository.saveAll(sortList);\n\treturn new Result(true, null);\n}", "CodeBleu_score": 37.29887846829352}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) \tList<AdminModelSort> adminModelSorts = new ArrayList<>();\n\tfor (String s : list) {\n\t\tString[] sArray = s.split(\":\");\n\t\tAdminModelSort adminModelSort = new AdminModelSort();\n\t\tadminModelSort.setUserId(getUserId());\n\t\tadminModelSort.setSortType(sArray[0]);\n\t\tadminModelSort.setSortDirection(sArray[1]);\n\t\tadminModelSorts.add(adminModelSort);\n\t}\n\tadminModelSortService.removeSortSettings(getUserId());\n\tadminModelSortService.saveSortSettings(adminModelSorts);\n\treturn new SuccessResult();\n}", "CodeBleu_score": 41.45345931109663}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting)\tAdminConfigurationBO adminConfiguration = adminConfigurationService.getAdminConfigurationBySettingId(moduleSetting.getSettingId());\n\tif (adminConfiguration!= null && adminConfiguration.getSettingType() == SettingType.CRM) {\n\t\treturn new Result(false, \"Module is CRM\");\n\t}\n\n\tmoduleSettingService.setModuleSetting(moduleSetting);\n\treturn new Result(true, \"Module setting updated\");\n}", "CodeBleu_score": 47.74997395984882}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting)\tAdminConfigurationBO adminConfiguration = adminConfigurationService.getAdminConfigurationById(moduleSetting.getAdminConfigurationId());\n\tif (adminConfiguration.getSetting().getSettingType().equals(SettingType.CRM)) {\n\t\treturn new Result(false, \"CRM Module cannot be disabled\");\n\t}\n\tadminConfiguration.setStatus(moduleSetting.getStatus());\n\tadminConfiguration = adminConfigurationService.saveAdminConfiguration(adminConfiguration);\n\treturn new Result(true, \"Module setting updated successfully\", adminConfiguration);\n}", "CodeBleu_score": 46.778632712355495}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting)\tAdminConfiguration adminConfiguration = adminConfigurationRepository.findBySettingId(moduleSetting.getSettingId());\n\tif (adminConfiguration.getSettingType().equals(SettingType.CRM)) {\n\t\treturn new Result(false, \"Module cannot be set to CRM\");\n\t}\n\tadminConfiguration.setStatus(moduleSetting.getStatus());\n\tadminConfigurationRepository.save(adminConfiguration);\n\treturn new Result(true, \"Module setting updated successfully\");\n}", "CodeBleu_score": 50.14733371268988}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) \ttry {\n\t\tUserConfiguration userConfiguration = userConfigurationService.findByCustomKey(customKey);\n\t\tif (userConfiguration == null) {\n\t\t\tuserConfiguration = new UserConfiguration();\n\t\t\tuserConfiguration.setCustomKey(customKey);\n\t\t}\n\t\tuserConfiguration.setCustomValue(json.toString());\n\t\tuserConfigurationService.save(userConfiguration);\n\t\treturn new Result(true, \"Success\");\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn new Result(false, \"Failed\");\n\t}\n}", "CodeBleu_score": 43.103098251107}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) \t//Retrieve the user configuration by the custom key\n\tUserConfiguration userConfiguration = userConfigurationRepository.findByCustomKey(customKey);\n\t//If the configuration exists, update its value with the provided JSON\n\tif (userConfiguration!= null) {\n\t\tuserConfiguration.setValue(json.toString());\n\t\tuserConfigurationRepository.save(userConfiguration);\n\t} else {\n\t\t//If not, create a new user configuration with the provided JSON\n\t\tuserConfiguration = new UserConfiguration();\n\t\tuserConfiguration.setCustomKey(customKey);\n\t\tuserConfiguration.setValue(json.toString());\n\t\tuserConfigurationRepository.save(userConfiguration);\n\t}\n\t//Return a successful result\n\treturn Results.ok();\n}", "CodeBleu_score": 48.603694643530915}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) \ttry {\n\t\tUserConfiguration userConfiguration = userConfigurationService.getUserConfigurationByCustomKey(customKey);\n\t\tif (userConfiguration!= null) {\n\t\t\tuserConfiguration.setConfiguration(json.toString());\n\t\t\tuserConfigurationService.saveUserConfiguration(userConfiguration);\n\t\t} else {\n\t\t\tuserConfiguration = new UserConfiguration();\n\t\t\tuserConfiguration.setConfiguration(json.toString());\n\t\t\tuserConfiguration.setCustomKey(customKey);\n\t\t\tuserConfigurationService.saveUserConfiguration(userConfiguration);\n\t\t}\n\t\treturn new Result(true, \"success\");\n\t} catch (Exception e) {\n\t\treturn new Result(false, e.getMessage());\n\t}\n}", "CodeBleu_score": 46.89531725962135}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) \tResult<AdminUser> result = new Result<>();\n\ttry {\n\t\tAdminUser user = adminUserService.queryUserInfo(userId);\n\t\tif (user == null) {\n\t\t\tresult.setCode(ResultCode.USER_NOT_EXIST);\n\t\t\tresult.setMsg(\"\u7528\u6237\u4e0d\u5b58\u5728\");\n\t\t\treturn result;\n\t\t}\n\t\tif (user.getDepartmentId()!= null) {\n\t\t\tDepartment department = departmentService.queryDepartmentInfo(user.getDepartmentId());\n\t\t\tuser.setDepartmentName(department.getName());\n\t\t}\n\t\tuser.setSalt(null);\n\t\tuser.setPassword();\n\t\tresult.setData(user);\n\t} catch (Exception e) {\n\t\tresult.setCode(ResultCode.INTERNAL_SERVER_ERROR);\n\t\tresult.setMsg(\"\u670d\u52a1\u5668\u5185\u90e8\u9519\u8bef\");\n\t\tlog.error(\"query user info error\", e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 43.34042515439993}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) \tAdminUser adminUser = adminUserService.queryUserInfo(userId);\n\treturn new Result<AdminUser>(adminUser);\n}", "CodeBleu_score": 19.397882800682687}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) \tAdminUser user = userDao.queryUserById(userId);\n\tif (user == null) {\n\t\treturn Result.error(\"User not found\");\n\t}\n\tif (user.getDepartmentId()!= null) {\n\t\tDepartment department = departmentDao.queryDepartmentById(user.getDepartmentId());\n\t\tif (department!= null) {\n\t\t\tuser.setDepartmentName(department.getName());\n\t\t}\n\t}\n\tuser.setSalt(null);\n\tuser.setPassword();\n\treturn Result.success(user);\n}", "CodeBleu_score": 41.75232073621258}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() \tString userId = session(\"userId\");\n\tList<ReadNotice> readNotices = ReadNotice.find.where().eq(\"userId\", userId).findList();\n\tif (readNotices.size() > 0) {\n\t\tfor (ReadNotice readNotice : readNotices) {\n\t\t\treadNotice.status = 1;\n\t\t\treadNotice.update();\n\t\t}\n\t} else {\n\t\tReadNotice readNotice = new ReadNotice();\n\t\treadNotice.userId = userId;\n\t\treadNotice.status = 1;\n\t\treadNotice.save();\n\t}\n\treturn ok(Json.toJson(\"success\"));\n}\n", "CodeBleu_score": 22.84798671985535}, {"code": " public Result readNotice() \tString userId = session(\"userId\");\n\tList<ReadNotice> readNotices = ReadNotice.find.where().eq(\"user_id\", userId).findList();\n\tif (readNotices.size() > 0) {\n\t\tfor (ReadNotice readNotice : readNotices) {\n\t\t\treadNotice.status = 1;\n\t\t\treadNotice.update();\n\t\t}\n\t} else {\n\t\tReadNotice readNotice = new ReadNotice();\n\t\treadNotice.user_id = userId;\n\t\treadNotice.status = 1;\n\t\treadNotice.save();\n\t}\n\treturn ok(Json.toJson(\"success\"));\n}\n", "CodeBleu_score": 22.753898431815006}, {"code": " public Result readNotice() \t//get the current user id\n\tString currentUserId = session(\"connected\");\n\t//check if there are multiple readNotice entries for the current user\n\tList<ReadNotice> readNotices = ReadNotice.find.where().eq(\"userId\", currentUserId).findList();\n\tif(readNotices.size() > 1) {\n\t\t//update the status to 1 for all matching entries\n\t\tfor(ReadNotice readNotice : readNotices) {\n\t\t\treadNotice.status = 1;\n\t\t\treadNotice.update();\n\t\t}\n\t} else {\n\t\t//create a new readNotice entry with status 1\n\t\tReadNotice readNotice = new ReadNotice();\n\t\treadNotice.userId = currentUserId;\n\t\treadNotice.status = 1;\n\t\treadNotice.save();\n\t}\n\t//return a success result\n\treturn ok(\"success\");\n}\n", "CodeBleu_score": 23.705141568936746}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO)\tAdminConfigBO adminConfigBO = adminConfigDAO.getAdminConfigByName(AdminConfigBO.COMPANY_INFO_CONFIG_NAME);\n\tif (adminConfigBO == null) {\n\t\tadminConfigBO = new AdminConfigBO();\n\t\tadminConfigBO.setName(AdminConfigBO.COMPANY_INFO_CONFIG_NAME);\n\t\tadminConfigBO.setValue(AdminConfigBO.COMPANY_INFO_CONFIG_DEFAULT_VALUE);\n\t}\n\tadminConfigBO.setValue(adminCompanyBO.toString());\n\tadminConfigDAO.saveOrUpdateAdminConfig(adminConfigBO);\n}", "CodeBleu_score": 31.102281051224388}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO)\t// Check if the configuration already exists\n\tConfiguration config = configurationService.findByConfigName(\"companyInfo\");\n\tif (config == null) {\n\t\t// Create a new configuration if it doesn't exist\n\t\tconfig = new Configuration();\n\t\tconfig.setConfigName(\"companyInfo\");\n\t\tconfig.setConfigValue(\"{}\");\n\t}\n\n\t// Update the configuration's value with the provided company information in JSON format\n\tObjectMapper mapper = new ObjectMapper();\n\tString configValue = null;\n\ttry {\n\t\tconfigValue = mapper.writeValueAsString(adminCompanyBO);\n\t} catch (JsonProcessingException e) {\n\t\t// Handle JSON processing exception\n\t}\n\tconfig.setConfigValue(configValue);\n\n\t// Save or update the configuration\n\tconfigurationService.saveOrUpdate(config);\n}", "CodeBleu_score": 39.41525611096182}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO)\ttry {\n\t\tConfigurationBO configBO = configService.getConfigurationByName(\"companyInfo\");\n\t\tif (configBO == null) {\n\t\t\tconfigBO = new ConfigurationBO();\n\t\t\tconfigBO.setConfigName(\"companyInfo\");\n\t\t\tconfigBO.setConfigValue(new Gson().toJson(adminCompanyBO));\n\t\t\tconfigService.saveConfiguration(configBO);\n\t\t} else {\n\t\t\tconfigBO.setConfigValue(new Gson().toJson(adminCompanyBO));\n\t\t\tconfigService.updateConfiguration(configBO);\n\t\t}\n\t} catch (Exception e) {\n\t\tlog.error(\"Error in setAdminConfig() : \", e);\n\t}\n}\n", "CodeBleu_score": 30.690019013479606}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig()\tAdminCompanyBO adminCompany = new AdminCompanyBO();\n\tAdminCompanyBO adminCompanyConfig = null;\n\tString adminConfig = null;\n\ttry {\n\t\tadminConfig = adminConfigDao.queryAdminConfig(AdminConfigKey.ADMIN_COMPANY_CONFIG.getKey());\n\t\tif (adminConfig!= null) {\n\t\t\tadminCompanyConfig = AdminCompanyBO.parseAdminCompanyConfig(adminConfig);\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error while retrieving admin config\", e);\n\t}\n\tif (adminCompanyConfig!= null) {\n\t\tadminCompany = adminCompanyConfig;\n\t}\n\treturn adminCompany;\n}\n", "CodeBleu_score": 33.75458565040935}, {"code": "public AdminCompanyBO queryAdminConfig()\tAdminCompanyBO adminCompany = new AdminCompanyBO();\n\tString companyConfig = queryConfig(ADMIN_CONFIG_KEY);\n\tif (companyConfig!= null) {\n\t\tadminCompany = parseAdminConfig(companyConfig);\n\t}\n\treturn adminCompany;\n}", "CodeBleu_score": 25.249159613365624}, {"code": "public AdminCompanyBO queryAdminConfig()\t// Retrieve the admin configuration for the company\n\tAdminCompanyBO adminConfig = null;\n\ttry {\n\t\t// Query the admin configuration for the company\n\t\tAdminConfiguration adminConfiguration = AdminConfiguration.queryAdminConfiguration(this.companyId, AdminConfiguration.ADMIN_CONFIG_KEY);\n\t\tif (adminConfiguration!= null) {\n\t\t\t// Parse the admin configuration value into an AdminCompanyBO object\n\t\t\tadminConfig = AdminCompanyBO.parse(adminConfiguration.getAdminConfigurationValue());\n\t\t}\n\t} catch (Exception e) {\n\t\tlog.error(\"An error occurred while querying the admin configuration for the company: \" + e.getMessage(), e);\n\t}\n\n\t// Return the admin configuration\n\treturn adminConfig;\n}\n", "CodeBleu_score": 32.51604957084181}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList) List<AdminConfig> adminConfigs = new List<AdminConfig>();\n for(String s : stringList) {\n AdminConfig ac = new AdminConfig();\n ac.Name = s;\n ac.Type = 'Log';\n ac.Speech = s;\n adminConfigs.add(ac);\n }\n AdminConfig.removeConfigs(adminConfigs[0].Name);\n AdminConfig.saveConfigs(adminConfigs);\n }\n}\n", "CodeBleu_score": 29.363897608262}, {"code": " public void setLogWelcomeSpeech(List<String> stringList)\tList<AdminConfig> configs = new ArrayList<AdminConfig>();\n\tfor (String s : stringList) {\n\t\tAdminConfig config = new AdminConfig();\n\t\tconfig.setSpeech(s);\n\t\tconfigs.add(config);\n\t}\n\tList<AdminConfig> existingConfigs = adminConfigRepository.findByLogConfigurationName(logConfigurationName);\n\tif (existingConfigs!= null) {\n\t\tadminConfigRepository.delete(existingConfigs);\n\t}\n\tadminConfigRepository.save(configs);\n}\n", "CodeBleu_score": 36.82210381152082}, {"code": " public void setLogWelcomeSpeech(List<String> stringList)\t// Get the list of configurations\n\tList<AdminConfig> configs = getLogWelcomeSpeech();\n\n\t// Remove existing configurations\n\tfor (AdminConfig config : configs) {\n\t\tconfig.remove();\n\t}\n\n\t// Create new configurations\n\tfor (String string : stringList) {\n\t\tAdminConfig config = AdminConfig.create(AdminConfig.LOG_WELCOME_SPEECH, string);\n\t\tconfig.setProperty(AdminConfig.LOG_WELCOME_SPEECH_TEXT, string);\n\t}\n\n\t// Save the new list of configurations\n\tAdminConfig.saveBatch();\n}\n", "CodeBleu_score": 25.658946069768064}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO)\tString password = adminInitDataBO.getPassword();\n\tString username = adminInitDataBO.getUsername();\n\tString salt = adminInitDataBO.getSalt();\n\tString token = adminInitDataBO.getToken();\n\tString tempCode = adminInitDataBO.getTempCode();\n\tString userId = adminInitDataBO.getUserId();\n\tString email = adminInitDataBO.getEmail();\n\tString role = adminInitDataBO.getRole();\n\tString firstName = adminInitDataBO.getFirstName();\n\tString lastName = adminInitDataBO.getLastName();\n\tString phone = adminInitDataBO.getPhone();\n\tString profilePic = adminInitDataBO.getProfilePic();\n\tString profilePicPath = adminInitDataBO.getProfilePicPath();\n\tString profilePicName = adminInitDataBO.getProfilePicName();\n\tString profilePicType = adminInitDataBO.getProfilePicType();\n\tString profilePicSize = adminInitDataBO.getProfilePicSize();\n\tString profilePicWidth = adminInitDataBO.getProfilePicWidth();\n\tString profilePicHeight = adminInitDataBO.getProfilePicHeight();\n\tString profilePicExtension = adminInitDataBO.getProfilePicExtension();\n\tString profilePicExtensionType = adminInitDataBO.getProfilePicExtensionType();\n\tString profilePicExtensionSize = adminInitDataBO.getProfilePicExtensionSize();\n\tString profilePicExtensionWidth = adminInitDataBO.getProfilePicExtensionWidth();\n\tString profilePicExtensionHeight = adminInitDataBO.getProfilePicExtensionHeight();\n\tString profilePicExtensionExtension = adminInitDataBO.getProfilePicExtensionExtension();\n\tString profilePicExtensionExtensionType = adminInitDataBO.getProfilePicExtensionExtensionType();\n\tString profilePicExtensionExtensionSize = adminInitDataBO.getProfilePicExtensionExtensionSize();\n\tString profilePicExtensionExtensionWidth = adminInitDataBO.getProfilePicExtensionExtensionWidth();\n\tString profilePicExtensionExtensionHeight = adminInitDataBO.getProfilePicExtensionExtensionHeight();\n\tString profilePicExtensionExtensionExtension = adminInitDataBO.getProfilePicExtensionExtensionExtension();\n\tString profilePicExtensionExtensionExtensionType = adminInitDataBO.getProfilePicExtensionExtensionExtensionType();\n\tString profilePicExtensionExtensionExtensionSize = adminInitDataBO.get", "CodeBleu_score": 26.417784096216273}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO)\tString userId = (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n\tAdminInitDataBO adminInitDataBO2 = adminInitDataBORepository.findById(userId).get();\n\tString salt = adminInitDataBO2.getSalt();\n\tString username = adminInitDataBO2.getUsername();\n\tString password = ();\n\tString providedPassword = ();\n\tString hashedPassword = Hashing.sha256().hashString(providedPassword + salt, StandardCharsets.UTF_8).toString();\n\tif (hashedPassword.equals(password)) {\n\t\tString code = generateCode();\n\t\tredisTemplate.opsForValue().set(userId, code, 10, TimeUnit.MINUTES);\n\t\treturn code;\n\t} else {\n\t\tthrow new InvalidPasswordException(\"Invalid password\");\n\t}\n}", "CodeBleu_score": 38.025875777308485}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO)\tString password = adminInitDataBO.getPassword();\n\tString username = adminInitDataBO.getUsername();\n\tString salt = adminInitDataBO.getSalt();\n\tString userId = adminInitDataBO.getUserId();\n\tString tempAccessCode = null;\n\ttry {\n\t\tif (password!= null) {\n\t\t\t// Generate a temporary access code\n\t\t\ttempAccessCode = UUID.randomUUID().toString();\n\t\t\t// Store the temporary access code in Redis with a 10-minute expiration\n\t\t\tredisTemplate.opsForValue().set(tempAccessCode, userId, 10, TimeUnit.MINUTES);\n\t\t\t// Check if the password is correct\n\t\t\tif (passwordEncoder.matches(password, salt)) {\n\t\t\t\treturn tempAccessCode;\n\t\t\t} else {\n\t\t\t\tthrow new Exception(\"Invalid password\");\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Exception(\"Invalid password\");\n\t\t}\n\t} catch (Exception e) {\n\t\tthrow new RuntimeException(e);\n\t}\n}", "CodeBleu_score": 29.97068372960624}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth()\t// Retrieve the user ID from the session\n\tString userId = (String) session.getAttribute(\"userId\");\n\n\t// Construct a key based on the user ID\n\tString key = \"unauthorized:\" + userId;\n\n\t// Fetch the list of unauthorized menu URLs from Redis\n\tSet<String> unauthorizedUrls = redisTemplate.opsForSet().members(key);\n\n\t// Check if the initial authentication URL is in the list of unauthorized URLs\n\treturn unauthorizedUrls.contains(request.getRequestURI());\n}\n", "CodeBleu_score": 38.56376646945377}, {"code": "private boolean verifyInitAuth()\tString userId = (String) SecurityUtils.getSubject().getPrincipal();\n\tString key = \"initAuth:\" + userId;\n\tSet<String> urls = redisTemplate.opsForSet().members(key);\n\treturn urls.contains(request.getRequestURI());\n}", "CodeBleu_score": 37.735332489651825}, {"code": "private boolean verifyInitAuth()\tString userId = getUserId();\n\tString key = userId + \"_init_auth\";\n\tList<String> unauthorizedUrls = redisTemplate.opsForList().range(key, 0, -1);\n\tif (unauthorizedUrls.contains(request.getRequestURI())) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 32.30062490358644}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList)\t// Create a list of AdminRoleMenu objects\n\tList<AdminRoleMenu> list = new ArrayList<>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu roleMenu = new AdminRoleMenu();\n\t\troleMenu.setRoleId(roleId);\n\t\troleMenu.setMenuId(menuId);\n\t\tlist.add(roleMenu);\n\t}\n\t// Save the list of role-menu associations in batches\n\tint batchSize = 20;\n\tint i = 0;\n\twhile (i < list.size()) {\n\t\tint toIndex = Math.min(i + batchSize, list.size());\n\t\tadminRoleMenuDao.save(list.subList(i, toIndex));\n\t\ti += batchSize;\n\t}\n}", "CodeBleu_score": 52.550661286185715}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList)\t// Create a list of AdminRoleMenu objects to be saved\n\tList<AdminRoleMenu> list = new ArrayList<AdminRoleMenu>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu roleMenu = new AdminRoleMenu();\n\t\troleMenu.setRoleId(roleId);\n\t\troleMenu.setMenuId(menuId);\n\t\tlist.add(roleMenu);\n\t}\n\t// Save the list of role-menu associations in batches\n\tint batchSize = 20;\n\tint i = 0;\n\twhile (i < list.size()) {\n\t\tint lastIndex = Math.min(i + batchSize, list.size());\n\t\tadminRoleMenuMapper.saveRoleMenu(list.subList(i, lastIndex));\n\t\ti += batchSize;\n\t}\n}", "CodeBleu_score": 45.25421583952832}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList)\t// Clear existing associations\n\troleMenuMapper.deleteByRoleId(roleId);\n\t// Create new associations\n\tList<AdminRoleMenu> list = new ArrayList<>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu roleMenu = new AdminRoleMenu();\n\t\troleMenu.setRoleId(roleId);\n\t\troleMenu.setMenuId(menuId);\n\t\tlist.add(roleMenu);\n\t}\n\t// Save new associations\n\tbatchSave(list);\n}", "CodeBleu_score": 49.73518182191318}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) \ttry {\n\t\t// \u83b7\u53d6\u65e5\u5fd7\u7d22\u5f15\n\t\tString index = getIndex(sysLog.getCreateTime());\n\t\t// \u65e5\u5fd7\u5bf9\u8c61\u8f6c\u6210map\n\t\tMap<String, Object> map = BeanMapUtils.beanToMap(sysLog);\n\t\t// \u683c\u5f0f\u5316\u521b\u5efa\u65f6\u95f4\n\t\tmap.put(\"createTime\", DateFormatUtils.format(sysLog.getCreateTime(), \"yyyy-MM-dd HH:mm:ss\"));\n\t\t// \u79fb\u9664ID\n\t\tmap.remove(\"id\");\n\t\t// \u521b\u5efa\u7d22\u5f15\u8bf7\u6c42\n\t\tIndexRequest request = new IndexRequest(index);\n\t\trequest.source(map);\n\t\t// \u63d0\u4ea4\u8bf7\u6c42\n\t\tclient.indexAsync(request, new ActionListener<IndexResponse>() {\n\t\t\t@Override\n\t\t\tpublic void onResponse(IndexResponse indexResponse) {\n\t\t\t\tlog.info(\"\u4fdd\u5b58\u65e5\u5fd7\u6210\u529f\uff0c\u7d22\u5f15\uff1a{}\uff0cID\uff1a{}\", index, indexResponse.getId());\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onFailure(Exception e) {\n\t\t\t\tlog.error(\"\u4fdd\u5b58\u65e5\u5fd7\u5931\u8d25\uff1a{}\", e.getMessage());\n\t\t\t}\n\t\t});\n\t} catch (Exception e) {\n\t\tlog.error(\"\u4fdd\u5b58\u65e5\u5fd7\u5f02\u5e38\uff1a{}\", e.getMessage());\n\t}\n}", "CodeBleu_score": 46.679825811290264}, {"code": "public void saveSysLog(SysLog sysLog) \tString index = \"sys_log\";\n\tString type = \"doc\";\n\tString id = sysLog.getId();\n\tMap<String, Object> map = BeanMapUtils.beanToMap(sysLog);\n\tmap.put(\"createTime\", DateUtils.format(sysLog.getCreateTime(), DateUtils.PATTERN_DATETIME));\n\tmap.remove(\"id\");\n\tIndexRequest indexRequest = new IndexRequest(index, type, id);\n\tindexRequest.source(map);\n\ttry {\n\t\tclient.index(indexRequest, RequestOptions.DEFAULT);\n\t} catch (Exception e) {\n\t\tlog.error(\"save sys log error, {}\", e.getMessage());\n\t}\n}", "CodeBleu_score": 42.9952487461321}, {"code": "public void saveSysLog(SysLog sysLog) \t// \u83b7\u53d6\u65e5\u5fd7\u7d22\u5f15\n\tString index = getIndex();\n\t// \u5c06\u65e5\u5fd7\u5bf9\u8c61\u8f6c\u6362\u4e3amap\n\tMap<String, Object> map = BeanToMapUtil.convertBean(sysLog);\n\t// \u683c\u5f0f\u5316\u521b\u5efa\u65f6\u95f4\n\tmap.put(\"createTime\", new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(map.get(\"createTime\")));\n\t// \u79fb\u9664ID\n\tmap.remove(\"id\");\n\t// \u521b\u5efa\u7d22\u5f15\u8bf7\u6c42\n\tIndexRequest indexRequest = new IndexRequest(index).source(map);\n\t// \u63d0\u4ea4\u8bf7\u6c42\n\ttry {\n\t\tclient.index(indexRequest, RequestOptions.DEFAULT);\n\t} catch (IOException e) {\n\t\tlog.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5931\u8d25\uff0c\u9519\u8bef\u4fe1\u606f\uff1a{}\", e.getMessage());\n\t}\n}", "CodeBleu_score": 46.58944275171588}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO)\t// Initialize the search criteria\n\tSearchCriteria searchCriteria = new SearchCriteria();\n\tsearchCriteria.setFrom(querySysLogBO.getFrom());\n\tsearchCriteria.setSize(querySysLogBO.getSize());\n\tsearchCriteria.setSorts(Arrays.asList(Sort.by(Sort.Direction.DESC, \"createTime\")));\n\tsearchCriteria.setExcludes(Arrays.asList(\"message\"));\n\n\t// Execute the search request\n\ttry {\n\t\tSearchResponse<SysLog> searchResponse = restClient.search(searchCriteria, SysLog.class);\n\n\t\t// Map the search results to SysLog objects\n\t\tList<SysLog> sysLogList = searchResponse.stream().map(hit -> hit.getContent()).collect(Collectors.toList());\n\n\t\t// Populate the BasePage object with the results\n\t\tBasePage<SysLog> sysLogPage = new BasePage<>();\n\t\tsysLogPage.setTotalHits(searchResponse.getTotalHits());\n\t\tsysLogPage.setCurrentPage(querySysLogBO.getPage());\n\t\tsysLogPage.setTotalPages(searchResponse.getTotalPages());\n\t\tsysLogPage.setPageSize(querySysLogBO.getSize());\n\t\tsysLogPage.setList(sysLogList);\n\n\t\treturn sysLogPage;\n\t} catch (IOException e) {\n\t\tlog.error(\"Error occurred while querying system logs: {}\", e.getMessage());\n\t\tthrow new RuntimeException(\"Error occurred while querying system logs\", e);\n\t}\n}", "CodeBleu_score": 43.50842256089422}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO)\tBasePage<SysLog> basePage = new BasePage<>();\n\ttry {\n\t\tSearchRequest searchRequest = new SearchRequest(INDEX_NAME);\n\t\tSearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n\t\tBoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n\t\t// 1. \u6784\u5efa\u67e5\u8be2\u6761\u4ef6\n\t\tif (StringUtils.isNotBlank(querySysLogBO.getAppName())) {\n\t\t\tboolQueryBuilder.must(QueryBuilders.matchQuery(\"appName\", querySysLogBO.getAppName()));\n\t\t}\n\t\tif (StringUtils.isNotBlank(querySysLogBO.getLevel())) {\n\t\t\tboolQueryBuilder.must(QueryBuilders.matchQuery(\"level\", querySysLogBO.getLevel()));\n\t\t}\n\t\tif (StringUtils.isNotBlank(querySysLogBO.getIp())) {\n\t\t\tboolQueryBuilder.must(QueryBuilders.matchQuery(\"ip\", querySysLogBO.getIp()));\n\t\t}\n\t\tif (StringUtils.isNotBlank(querySysLogBO.getThreadName())) {\n\t\t\tboolQueryBuilder.must(QueryBuilders.matchQuery(\"threadName\", querySysLogBO.getThreadName()));\n\t\t}\n\t\tif (StringUtils.isNotBlank(querySysLogBO.getClazz())) {\n\t\t\tboolQueryBuilder.must(QueryBuilders.matchQuery(\"clazz\", querySysLogBO.getClazz()));\n\t\t}\n\t\tif (StringUtils.isNotBlank(querySysLogBO.getMethodName())) {\n\t\t\tboolQueryBuilder.must(QueryBuilders.matchQuery(\"methodName\", querySysLogBO.getMethodName()));\n\t\t}\n\t\tif (StringUtils.isNotBlank(querySysLogBO.getMsg())) {\n\t\t\tboolQueryBuilder.must(QueryBuilders.matchQuery(\"msg\", querySysLogBO.getMsg()));\n\t\t}\n\t\tif (StringUtils.isNotBlank(querySysLogBO.getException())) {\n\t\t\tboolQueryBuilder.must(QueryBuilders.matchQuery(\"exception\", querySysLogBO.getException()));\n\t\t}\n\t\tif (querySysLogBO.getStartTime()!= null) {\n\t\t\tboolQueryBuilder.must(QueryBuilders.rangeQuery(\"createTime\").gte(querySysLogBO.getStartTime()));\n\t\t}\n\t\tif (querySysLogBO.getEndTime()!= null) {\n\t\t\tboolQueryBuilder.must(QueryBuilders.rangeQuery(\"createTime\").lte(querySysLogBO.getEndTime()));\n\t\t}\n\t\tsearchSourceBuilder", "CodeBleu_score": 31.68684692695972}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO)\tBasePage<SysLog> basePage = new BasePage<>();\n\ttry {\n\t\tSearchCriteria criteria = new SearchCriteria();\n\t\tcriteria.setSort(new Sort(Sort.Direction.DESC, \"createTime\"));\n\t\tcriteria.setExcludes(\"content\");\n\t\tcriteria.add(Restrictions.eq(\"deleted\", false));\n\t\tif (StringUtils.isNotBlank(querySysLogBO.getOperation())) {\n\t\t\tcriteria.add(Restrictions.eq(\"operation\", querySysLogBO.getOperation()));\n\t\t}\n\t\tif (StringUtils.isNotBlank(querySysLogBO.getOperationDesc())) {\n\t\t\tcriteria.add(Restrictions.eq(\"operationDesc\", querySysLogBO.getOperationDesc()));\n\t\t}\n\t\tif (StringUtils.isNotBlank(querySysLogBO.getOperationResult())) {\n\t\t\tcriteria.add(Restrictions.eq(\"operationResult\", querySysLogBO.getOperationResult()));\n\t\t}\n\t\tif (StringUtils.isNotBlank(querySysLogBO.getOperationResultDesc())) {\n\t\t\tcriteria.add(Restrictions.eq(\"operationResultDesc\", querySysLogBO.getOperationResultDesc()));\n\t\t}\n\t\tif (StringUtils.isNotBlank(querySysLogBO.getOperationType())) {\n\t\t\tcriteria.add(Restrictions.eq(\"operationType\", querySysLogBO.getOperationType()));\n\t\t}\n\t\tif (StringUtils.isNotBlank(querySysLogBO.getOperationTypeDesc())) {\n\t\t\tcriteria.add(Restrictions.eq(\"operationTypeDesc\", querySysLogBO.getOperationTypeDesc()));\n\t\t}\n\t\tif (StringUtils.isNotBlank(querySysLogBO.getOperator())) {\n\t\t\tcriteria.add(Restrictions.eq(\"operator\", querySysLogBO.getOperator()));\n\t\t}\n\t\tif (StringUtils.isNotBlank(querySysLogBO.getOperatorDesc())) {\n\t\t\tcriteria.add(Restrictions.eq(\"operatorDesc\", querySysLogBO.getOperatorDesc()));\n\t\t}\n\t\tif (StringUtils.isNotBlank(querySysLogBO.getOperatorIp())) {\n\t\t\tcriteria.add(Restrictions.eq(\"operatorIp\", querySysLogBO.getOperatorIp()));\n\t\t}\n\t\tif (StringUtils.isNotBlank(querySysLogBO.getOperatorIpDesc())) {\n\t\t\tcriteria.add(Restrictions.eq(\"operatorIpDesc\", querySysLogBO.getOperatorIpDesc()));\n\t\t}\n\t\tif (StringUtils.isNotBlank", "CodeBleu_score": 23.456886048070665}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest)\treturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps.get(url, (response) => {\n\t\t\tresponse.pipe(file);\n\t\t\tfile.on('finish', () => {\n\t\t\t\tfile.close();\n\t\t\t\tresolve();\n\t\t\t});\n\t\t}).on('error', (err) => {\n\t\t\tfs.unlink(dest);\n\t\t\treject(err);\n\t\t});\n\t});\n}\n", "CodeBleu_score": 54.11565744230419}, {"code": "async function downloadFile(url, dest)\treturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps.get(url, (response) => {\n\t\t\tresponse.pipe(file);\n\t\t\tfile.on('finish', () => {\n\t\t\t\tfile.close();\n\t\t\t\tresolve();\n\t\t\t});\n\t\t}).on('error', (err) => {\n\t\t\tfs.unlink(dest);\n\t\t\treject(err);\n\t\t});\n\t});\n}\n", "CodeBleu_score": 54.11565744230419}, {"code": "async function downloadFile(url, dest)\treturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\tconst request = https.get(url, (response) => {\n\t\t\tresponse.pipe(file);\n\t\t\tfile.on(\"finish\", () => {\n\t\t\t\tfile.close();\n\t\t\t\tresolve();\n\t\t\t});\n\t\t});\n\t\trequest.on(\"error\", (err) => {\n\t\t\tfs.unlink(dest, () => {\n\t\t\t\treject(err.message);\n\t\t\t});\n\t\t});\n\t\tfile.on(\"error\", (err) => {\n\t\t\tfs.unlink(dest, () => {\n\t\t\t\treject(err.message);\n\t\t\t});\n\t\t});\n\t});\n}\n", "CodeBleu_score": 49.56390154026169}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet) // If the module is already processed, return an empty Flux\n if (processedModuleIds.contains(module.getId())) {\n return Flux.empty();\n }\n // Add the module ID to the circular dependency check set\n circularDependencyCheckSet.add(module.getId());\n // Retrieve the dependent module IDs\n Flux<String> dependentModuleIds = getDependentModuleIds(module);\n // Retrieve the corresponding modules\n Flux<Application> dependentModules = dependentModuleIds.flatMap(this::getModuleById);\n // Handle errors by logging a warning and continuing processing\n dependentModules.onErrorResume(error -> {\n log.warn(\"Error retrieving dependent modules for module {}: {}\", module.getId(), error.getMessage());\n return Flux.empty();\n });\n // Flatten the nested Fluxes and filter out circular dependencies\n return dependentModules.flatMap(dependentModule -> {\n // If the dependent module is already processed, skip it\n if (processedModuleIds.contains(dependentModule.getId())) {\n return Flux.empty();\n }\n // If the dependent module is part of the circular dependency check set, it's a circular dependency\n if (circularDependencyCheckSet.contains(dependentModule.getId())) {\n log.warn(\"Circular dependency detected for module {}: {}\", dependentModule.getId(), circularDependencyCheckSet);\n return Flux.empty();\n }\n // Recursively retrieve the dependent modules for the dependent module\n return getDependentModules(dependentModule, circularDependencyCheckSet);\n });\n }\n", "CodeBleu_score": 45.16389016483278}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet) return this.applicationRepository.findDependentModules(module.getId())", "CodeBleu_score": 17.81623094944493}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet) if (circularDependencyCheckSet.contains(module.getId())) {\n return Flux.empty();\n }\n circularDependencyCheckSet.add(module.getId());\n return module.getDependencies()", "CodeBleu_score": 40.42896386174329}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds)if (map == null) {\n\t\treturn;\n\t}\n\tfor (Map.Entry<?,?> entry : map.entrySet()) {\n\t\tif (entry.getValue() instanceof Map) {\n\t\t\tdoGetDependentModules((Map<?,?>) entry.getValue(), dependentModuleIds);\n\t\t} else if (entry.getValue() instanceof List) {\n\t\t\tfor (Object obj : (List<?>) entry.getValue()) {\n\t\t\t\tif (obj instanceof Map) {\n\t\t\t\t\tdoGetDependentModules((Map<?,?>) obj, dependentModuleIds);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (entry.getKey().equals(COMPONENT_TYPE) && entry.getValue().equals(MODULE)) {\n\t\t\tString appId = (String) map.get(APP_ID);\n\t\t\tif (appId!= null &&!appId.isEmpty()) {\n\t\t\t\tdependentModuleIds.add(appId);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 34.43052799426859}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds)for (Map.Entry<?,?> entry : map.entrySet()) {\n\t\tObject value = entry.getValue();\n\t\tif (value instanceof Map) {\n\t\t\tdoGetDependentModules((Map<?,?>) value, dependentModuleIds);\n\t\t} else if (value instanceof List) {\n\t\t\tfor (Object listItem : (List<?>) value) {\n\t\t\t\tif (listItem instanceof Map) {\n\t\t\t\t\tdoGetDependentModules((Map<?,?>) listItem, dependentModuleIds);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (entry.getKey().equals(\"componentType\") && value.equals(\"module\")) {\n\t\t\tObject appId = map.get(\"appId\");\n\t\t\tif (appId!= null &&!appId.toString().isEmpty()) {\n\t\t\t\tdependentModuleIds.add(appId.toString());\n\t\t\t}\n\t\t}\n\t}\n}\n", "CodeBleu_score": 34.77166852061509}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds)if (map.get('componentType') =='module' && map.get('appId')) {\n\t\tdependentModuleIds.add(map.get('appId'));\n\t}\n\tfor (Object entry : map.entrySet()) {\n\t\tif (entry instanceof Map) {\n\t\t\tdoGetDependentModules((Map<?,?>) entry, dependentModuleIds);\n\t\t} else if (entry instanceof List) {\n\t\t\tfor (Object item : (List<?>) entry) {\n\t\t\t\tif (item instanceof Map) {\n\t\t\t\t\tdoGetDependentModules((Map<?,?>) item, dependentModuleIds);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n", "CodeBleu_score": 23.72194715534071}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException \tAsset asset = null;\n\tBufferedImage srcImage = ImageIO.read(dataBuffer.getInputStream());\n\tif (createThumbnail) {\n\t\tsrcImage = resizeImage(srcImage, MAX_THUMBNAIL_WIDTH, MAX_THUMBNAIL_HEIGHT);\n\t}\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\tImageIO.write(srcImage, \"jpg\", baos);\n\tasset = new Asset();\n\tasset.setContentType(MediaType.IMAGE_JPEG);\n\tasset.setData(baos.toByteArray());\n\tdataBuffer.release();\n\treturn asset;\n}", "CodeBleu_score": 34.189447292578805}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException \t// Create an Asset object from the DataBuffer\n\tAsset asset = new Asset();\n\tasset.setDataBuffer(dataBuffer);\n\t// Read the image data from the DataBuffer\n\tbyte[] imageData = dataBuffer.getData();\n\t// Resize the image if createThumbnail is true\n\tif (createThumbnail) {\n\t\timageData = resizeImage(imageData);\n\t}\n\t// Set the content type to JPEG if createThumbnail is true, otherwise retain the original content type\n\tasset.setContentType(createThumbnail? MediaType.IMAGE_JPEG : srcContentType);\n\t// Set the image data to the Asset\n\tasset.setData(imageData);\n\t// Release the DataBuffer\n\tdataBuffer.release();\n\treturn asset;\n}\n", "CodeBleu_score": 46.567901414306846}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException \t// Read the image data from the DataBuffer\n\tbyte[] imageData = dataBuffer.readBytes();\n\t// Create a BufferedImage from the image data\n\tBufferedImage image = ImageIO.read(new ByteArrayInputStream(imageData));\n\t// Resize the image if createThumbnail is true\n\tif (createThumbnail) {\n\t\timage = resizeImage(image);\n\t}\n\t// Create a new DataBuffer with the processed image data\n\tDataBuffer newDataBuffer = new DataBuffer(image);\n\t// Set the content type to JPEG if not creating a thumbnail\n\tMediaType contentType = createThumbnail? srcContentType : MediaType.IMAGE_JPEG;\n\t// Create a new Asset with the processed image data and content type\n\tAsset asset = new Asset(newDataBuffer, contentType);\n\t// Release the DataBuffer\n\tdataBuffer.release();\n\t// Return the new Asset\n\treturn asset;\n}\n", "CodeBleu_score": 47.50103452562415}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId)\treturn assetService.getAsset(assetId)\n\t\t\t.map(asset -> {\n\t\t\t\texchange.getResponse().getHeaders().setContentType(asset.getContentType());\n\t\t\t\treturn asset;\n\t\t\t})\n\t\t\t.flatMap(asset -> {\n\t\t\t\texchange.getResponse().setStatusCode(HttpStatus.OK);\n\t\t\t\treturn exchange.getResponse().writeWith(Mono.just(asset.getData()));\n\t\t\t});\n}", "CodeBleu_score": 31.805279438746613}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId)\treturn assetService.getAssetById(assetId)\n\t\t\t.flatMap(asset -> {\n\t\t\t\texchange.getResponse().setStatusCode(HttpStatus.OK);\n\t\t\t\tif (asset.getContentType()!= null) {\n\t\t\t\t\texchange.getResponse().getHeaders().setContentType(asset.getContentType());\n\t\t\t\t}\n\t\t\t\treturn exchange.getResponse().writeWith(Mono.just(asset.getData()));\n\t\t\t});\n}", "CodeBleu_score": 32.998268860175116}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId)\treturn assetService.getAsset(assetId)\n\t\t\t.flatMap(asset -> {\n\t\t\t\texchange.getResponse().setStatusCode(HttpStatus.OK);\n\t\t\t\tif (asset.getContentType()!= null) {\n\t\t\t\t\texchange.getResponse().getHeaders().setContentType(MediaType.valueOf(asset.getContentType()));\n\t\t\t\t}\n\t\t\t\treturn exchange.getResponse().writeWith(Mono.just(asset.getData()).map(DataBufferUtils::allocateBuffer));\n\t\t\t});\n}", "CodeBleu_score": 34.241727812990455}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() \tif (workspaceMode == WorkspaceMode.SAAS) {\n\t\treturn Flux.empty();\n\t}\n\treturn organizationService.findAllInEnterpriseMode()\n\t\t\t.flatMap(organization -> Flux.fromIterable(organization.getAuthConfigs()))\n\t\t\t.map(authConfig -> new FindAuthConfig(authConfig.getName(), authConfig.getAuthType()));\n}", "CodeBleu_score": 31.079631204582615}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() \tif (this.workspaceMode == WorkspaceMode.SAAS) {\n\t\treturn Flux.empty();\n\t}\n\treturn Flux.fromIterable(this.organizationService.findAllByMode(OrganizationMode.ENTERPRISE))\n\t\t\t.flatMap(org -> Flux.fromIterable(this.authConfigService.findAllByOrganizationId(org.getId())))\n\t\t\t.map(authConfig -> {\n\t\t\t\tFindAuthConfig findAuthConfig = new FindAuthConfig();\n\t\t\t\tfindAuthConfig.setOrganizationId(authConfig.getOrganizationId());\n\t\t\t\tfindAuthConfig.setAuthConfig(authConfig);\n\t\t\t\treturn findAuthConfig;\n\t\t\t});\n}", "CodeBleu_score": 32.75047373823813}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() \treturn Flux.fromIterable(this.authConfigRepository.findAll())\n\t\t\t.filter(authConfig -> authConfig.getWorkspaceMode() == WorkspaceMode.ENTERPRISE)\n\t\t\t.map(authConfig -> new FindAuthConfig(authConfig.getOrgId(), authConfig.getWorkspaceMode(), authConfig.getAuthConfigId(), authConfig.getAuthConfigName(), authConfig.getAuthConfigType(), authConfig.getAuthConfigValue(), authConfig.getAuthConfigSecret(), authConfig.getAuthConfigSecretType(), authConfig.getAuthConfigSecretValue(), authConfig.getAuthConfigSecretName(), authConfig.getAuthConfigSecretVersion(), authConfig.getAuthConfigSecretVersionType(), authConfig.getAuthConfigSecretVersionValue(), authConfig.getAuthConfigSecretVersionName(), authConfig.getAuthConfigSecretVersionVersion(), authConfig.getAuthConfigSecretVersionVersionType(), authConfig.getAuthConfigSecretVersionVersionValue(), authConfig.getAuthConfigSecretVersionVersionName(), authConfig.getAuthConfigSecretVersionVersionVersion(), authConfig.getAuthConfigSecretVersionVersionVersionType(), authConfig.getAuthConfigSecretVersionVersionVersionValue(), authConfig.getAuthConfigSecretVersionVersionVersionName(), authConfig.getAuthConfigSecretVersionVersionVersionVersion(), authConfig.getAuthConfigSecretVersionVersionVersionVersionType(), authConfig.getAuthConfigSecretVersionVersionVersionVersionValue(), authConfig.getAuthConfigSecretVersionVersionVersionVersionName(), authConfig.getAuthConfigSecretVersionVersionVersionVersionVersion(), authConfig.getAuthConfigSecretVersionVersionVersionVersionVersionType(), authConfig.getAuthConfigSecretVersionVersionVersionVersionVersionValue(), authConfig.getAuthConfigSecretVersionVersionVersionVersionVersionName(), authConfig.getAuthConfigSecretVersionVersionVersionVersionVersionVersion(), authConfig.getAuthConfigSecretVersionVersionVersionVersionVersionVersionType(), authConfig.getAuthConfigSecretVersionVersionVersionVersionVersionVersionValue(), authConfig.getAuthConfigSecretVersionVersionVersionVersionVersionVersionName(), authConfig.getAuthConfigSecretVersionVersionVersionVersionVersionVersionVersion(), authConfig.getAuthConfigSecretVersionVersionVersionVersionVersionVersionVersionType(), authConfig.getAuthConfigSecretVersionVersionVersionVersionVersionVersionVersionValue(), authConfig.getAuthConfigSecretVersionVersionVersionVersionVersionVersionVersionName(), authConfig.getAuthConfigSecretVersionVersionVersionVersionVersionVersionVersionVersion(), authConfig.getAuthConfigSecret", "CodeBleu_score": 13.618716176531889}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate)\treturn MongockSpring5.builder()\n\t\t\t.setDriver(MongoDriver.withDefaultLock(mongoTemplate.getMongoDbFactory().getMongoDatabase()))\n\t\t\t.addChangeLogsScanPackage(\"com.example.demo.changelog\")\n\t\t\t.setApplicationContext(springContext)\n\t\t\t.buildApplicationRunner();\n}", "CodeBleu_score": 20.663594320014674}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate)\t// Create a MongockApplicationRunner instance with the Spring application context and the MongoTemplate\n\tMongockApplicationRunner builder = MongockSpring5.builder(springContext, mongoTemplate)\n\t\t// Set the package to scan for change logs\n\t\t.setChangeLogsScanPackage(\"com.example.mongock.changelogs\")\n\t\t// Set the write concern to ACKNOWLEDGED\n\t\t.setWriteConcern(WriteConcern.ACKNOWLEDGED)\n\t\t// Set the read concern to LOCAL\n\t\t.setReadConcern(ReadConcern.LOCAL)\n\t\t// Build the MongockApplicationRunner instance\n\t\t.build();\n\n\treturn builder;\n}", "CodeBleu_score": 41.001900619905605}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate)\treturn MongockSpring5.builder()\n\t\t.setDriver(MongoDriver.withDefaultLock(mongoTemplate.getDb(), WriteConcern.ACKNOWLEDGED, ReadConcern.DEFAULT))\n\t\t.setSpringContext(springContext)\n\t\t.setPackageToScan(\"com.example.mongock.changelogs\")\n\t\t.buildApplicationRunner();\n}", "CodeBleu_score": 22.55304447953705}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter)\nReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);", "CodeBleu_score": 47.698180450402624}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter)\tReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\ttemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn template;\n}", "CodeBleu_score": 72.17811969863779}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter)\tReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\treactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn reactiveMongoTemplate;\n}", "CodeBleu_score": 72.55711220942965}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId)\treturn libraryQueryService.getLatestLibraryQueryRecordByLibraryQueryId(libraryQueryId)\n\t\t\t.flatMap(libraryQueryRecord -> {\n\t\t\t\tif (libraryQueryRecord!= null) {\n\t\t\t\t\treturn Mono.just(libraryQueryRecord.getDsl());\n\t\t\t\t} else {\n\t\t\t\t\treturn libraryQueryService.getLibraryQueryById(libraryQueryId)\n\t\t\t\t\t\t\t.flatMap(libraryQuery -> {\n\t\t\t\t\t\t\t\tif (libraryQuery!= null) {\n\t\t\t\t\t\t\t\t\treturn Mono.just(libraryQuery.getDsl());\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn Mono.empty();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n}", "CodeBleu_score": 43.89191436984975}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId)\treturn getLatestLibraryQueryRecord(libraryQueryId)\n\t\t.flatMap(libraryQueryRecord -> {\n\t\t\tif (libraryQueryRecord!= null) {\n\t\t\t\treturn Mono.just(libraryQueryRecord.getDsl());\n\t\t\t} else {\n\t\t\t\treturn libraryQueryRepository.findById(libraryQueryId)\n\t\t\t\t\t.flatMap(libraryQuery -> Mono.just(libraryQuery.getDsl()));\n\t\t\t}\n\t\t});\n}", "CodeBleu_score": 47.93180606877648}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId)\treturn libraryQueryRepository.findById(libraryQueryId)\n\t\t.flatMap(libraryQuery -> {\n\t\t\tif (libraryQuery.getDsl()!= null) {\n\t\t\t\treturn Mono.just(libraryQuery.getDsl());\n\t\t\t} else {\n\t\t\t\treturn libraryQueryService.getLibraryQueryById(libraryQueryId)\n\t\t\t\t\t.map(LibraryQuery::getDsl);\n\t\t\t}\n\t\t});\n}", "CodeBleu_score": 53.45161848682589}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext)+        String datasourceType = datasource.getType();", "CodeBleu_score": 13.259313785184435}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext)+        if (datasource instanceof Datasource) {", "CodeBleu_score": 9.381119250852498}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext)-        if (datasource.getType() == DatasourceType.PLUGIN) {", "CodeBleu_score": 10.324093385794663}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext)\t// Get the query executor for the datasource\n\tQueryExecutor queryExecutor = queryExecutorProvider.getQueryExecutor(datasource);\n\t// Build the query execution context\n\tQueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n\t// Acquire a connection from the datasource connection pool\n\treturn datasource.getConnection()\n\t\t\t// Execute the query using the connection\n\t\t\t.flatMap(conn -> queryExecutor.execute(conn, queryExecutionContext))\n\t\t\t// Handle any errors that occur during execution\n\t\t\t.onErrorResume(e -> handleError(queryExecutionContext, e));\n}", "CodeBleu_score": 35.98355955582675}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext)\treturn Mono.defer(() -> {\n\t\tQueryExecutor queryExecutor = getQueryExecutor(datasource, queryConfig);\n\t\tQueryExecutionContext queryExecutionContext = getQueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n\t\treturn getConnection(datasource)\n\t\t\t\t.flatMap(connection -> {\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn Mono.just(queryExecutor.execute(connection, queryExecutionContext));\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\treturn Mono.error(e);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.onErrorResume(e -> Mono.just(new QueryExecutionResult(e)));\n\t});\n}\n", "CodeBleu_score": 34.51255579974906}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext)\n// Get the appropriate query executor based on the datasource type", "CodeBleu_score": 9.455970299632751}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr)\tif (timeoutStr == null || timeoutStr.trim().isEmpty()) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MS;\n\t}\n\n\tint timeout = 0;\n\tString unit = null;\n\n\t// Extract the numeric value and unit from the string\n\tMatcher matcher = QUERY_TIMEOUT_PATTERN.matcher(timeoutStr);\n\tif (matcher.find()) {\n\t\ttry {\n\t\t\ttimeout = Integer.parseInt(matcher.group(1));\n\t\t\tunit = matcher.group(2);\n\t\t} catch (NumberFormatException e) {\n\t\t\tthrow new IllegalArgumentException(\"Invalid query timeout: \" + timeoutStr);\n\t\t}\n\t} else {\n\t\tthrow new IllegalArgumentException(\"Invalid query timeout: \" + timeoutStr);\n\t}\n\n\t// Convert the value to milliseconds\n\tif (unit == null || unit.equalsIgnoreCase(\"ms\")) {\n\t\t// Milliseconds\n\t\tif (timeout < 0) {\n\t\t\tthrow new IllegalArgumentException(\"Invalid query timeout: \" + timeoutStr);\n\t\t}\n\t} else if (unit.equalsIgnoreCase(\"s\")) {\n\t\t// Seconds\n\t\ttimeout *= 1000;\n\t\tif (timeout < 0) {\n\t\t\tthrow new IllegalArgumentException(\"Invalid query timeout: \" + timeoutStr);\n\t\t}\n\t} else if (unit.equalsIgnoreCase(\"m\")) {\n\t\t// Minutes\n\t\ttimeout *= 60000;\n\t\tif (timeout < 0) {\n\t\t\tthrow new IllegalArgumentException(\"Invalid query timeout: \" + timeoutStr);\n\t\t}\n\t} else {\n\t\tthrow new IllegalArgumentException(\"Invalid query timeout unit: \" + unit);\n\t}\n\n\t// Ensure the timeout does not exceed the maximum allowed timeout\n\tif (timeout > MAX_QUERY_TIMEOUT_MS) {\n\t\tthrow new IllegalArgumentException(\"Query timeout exceeds maximum allowed timeout: \" + timeoutStr);\n\t}\n\n\treturn timeout;\n}", "CodeBleu_score": 31.81837543358803}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr)\tif (StringUtils.isBlank(timeoutStr)) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MS;\n\t}\n\tMatcher matcher = QUERY_TIMEOUT_PATTERN.matcher(timeoutStr);\n\tif (!matcher.matches()) {\n\t\tthrow new IllegalArgumentException(\"Invalid query timeout format: \" + timeoutStr);\n\t}\n\tint value = Integer.parseInt(matcher.group(1));\n\tString unit = matcher.group(2);\n\tif (value <= 0) {\n\t\tthrow new IllegalArgumentException(\"Invalid query timeout value: \" + value);\n\t}\n\tint timeoutMs;\n\tswitch (unit) {\n\tcase \"s\":\n\t\ttimeoutMs = value * 1000;\n\t\tbreak;\n\tcase \"m\":\n\t\ttimeoutMs = value * 60 * 1000;\n\t\tbreak;\n\tcase \"h\":\n\t\ttimeoutMs = value * 60 * 60 * 1000;\n\t\tbreak;\n\tcase \"d\":\n\t\ttimeoutMs = value * 24 * 60 * 60 * 1000;\n\t\tbreak;\n\tdefault:\n\t\tthrow new IllegalArgumentException(\"Invalid query timeout unit: \" + unit);\n\t}\n\tif (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n\t\tthrow new IllegalArgumentException(\"Query timeout exceeds maximum allowed limit: \" + timeoutMs);\n\t}\n\treturn timeoutMs;\n}", "CodeBleu_score": 33.55297986088952}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr)\tif (timeoutStr == null || timeoutStr.trim().length() == 0) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MS;\n\t}\n\n\tMatcher matcher = QUERY_TIMEOUT_PATTERN.matcher(timeoutStr);\n\tif (!matcher.matches()) {\n\t\tthrow new IllegalArgumentException(String.format(\"Invalid query timeout: %s\", timeoutStr));\n\t}\n\n\tString valueStr = matcher.group(1);\n\tString unitStr = matcher.group(2);\n\n\tint value;\n\ttry {\n\t\tvalue = Integer.parseInt(valueStr);\n\t} catch (NumberFormatException e) {\n\t\tthrow new IllegalArgumentException(String.format(\"Invalid query timeout value: %s\", valueStr));\n\t}\n\n\tTimeUnit unit;\n\ttry {\n\t\tunit = TimeUnit.valueOf(unitStr.toUpperCase());\n\t} catch (IllegalArgumentException e) {\n\t\tthrow new IllegalArgumentException(String.format(\"Invalid query timeout unit: %s\", unitStr));\n\t}\n\n\tlong timeoutMs = unit.toMillis(value);\n\tif (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n\t\tthrow new IllegalArgumentException(String.format(\"Query timeout exceeds maximum allowed value: %s\", timeoutStr));\n\t}\n\n\treturn (int) timeoutMs;\n}", "CodeBleu_score": 35.524926258908984}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId)\treturn getLiveQueries(application, visitorId)\n           .flatMap(liveQueries -> {\n                if (liveQueries.isEmpty()) {\n                    return Mono.error(new RuntimeException(\"No live queries found\"));\n                }\n                return Mono.just(liveQueries);\n            })\n           .flatMapMany(liveQueries -> Flux.fromIterable(liveQueries))\n           .map(liveQuery -> liveQuery.getDatasourceId())\n           .distinct()\n           .collectList()\n           .flatMap(datasourceIds -> {\n                return copyDatasources(currentOrganizationId, datasourceIds);\n            });\n}\n", "CodeBleu_score": 32.526867606225416}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId)\treturn getLiveQueriesFromApplication(application, visitorId)\n\t\t.flatMap(liveQueries -> {\n\t\t\tif (liveQueries.isEmpty()) {\n\t\t\t\treturn Mono.error(new RuntimeException(\"No queries found for application \" + application.getName()));\n\t\t\t}\n\t\t\treturn Mono.just(liveQueries);\n\t\t})\n\t\t.flatMapMany(liveQueries -> Flux.fromIterable(liveQueries))\n\t\t.flatMap(liveQuery -> {\n\t\t\treturn getDatasourceFromLiveQuery(liveQuery)\n\t\t\t\t.flatMap(datasource -> {\n\t\t\t\t\treturn copyDatasourceToCurrentOrganization(currentOrganizationId, datasource, visitorId);\n\t\t\t\t});\n\t\t})\n\t\t.collectList();\n}\n", "CodeBleu_score": 30.895979699987585}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId)\treturn getLiveQueriesFromApplication(application, visitorId) //\n\t\t\t.flatMap(liveQueries -> {\n\t\t\t\tif (liveQueries.isEmpty()) {\n\t\t\t\t\treturn Mono.error(new RuntimeException(\"No live queries found in the application\"));\n\t\t\t\t}\n\t\t\t\treturn Mono.just(liveQueries);\n\t\t\t}) //\n\t\t\t.flatMapMany(liveQueries -> Flux.fromIterable(liveQueries)) //\n\t\t\t.flatMap(liveQuery -> {\n\t\t\t\tif (liveQuery.getDatasource() == null || liveQuery.getDatasource().getId() == null) {\n\t\t\t\t\treturn Mono.error(new RuntimeException(\"Datasource ID not found in the live query\"));\n\t\t\t\t}\n\t\t\t\treturn Mono.just(liveQuery.getDatasource().getId());\n\t\t\t}) //\n\t\t\t.collectList() //\n\t\t\t.flatMap(datasourceIds -> {\n\t\t\t\tif (datasourceIds.isEmpty()) {\n\t\t\t\t\treturn Mono.error(new RuntimeException(\"No datasource IDs found in the live queries\"));\n\t\t\t\t}\n\t\t\t\treturn Mono.just(datasourceIds);\n\t\t\t}) //\n\t\t\t.flatMapMany(datasourceIds -> Flux.fromIterable(datasourceIds)) //\n\t\t\t.flatMap(datasourceId -> copyDatasourceToCurrentOrganization(currentOrganizationId, datasourceId, visitorId)) //\n\t\t\t.collectList();\n}", "CodeBleu_score": 34.63637282200115}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId)\treturn getDatasource(datasourceId)\n\t\t.flatMap(datasource -> {\n\t\t\tif (datasource.isSystemStatic()) {\n\t\t\t\treturn Mono.just(datasourceId);\n\t\t\t} else if (datasource.isLegacyQuickRestApiDatasource()) {\n\t\t\t\treturn Mono.just(datasource.getLegacyQuickRestApiDatasourceId());\n\t\t\t} else if (datasource.isLegacyOpenblocksApiDatasource()) {\n\t\t\t\treturn Mono.just(datasource.getLegacyOpenblocksApiDatasourceId());\n\t\t\t} else {\n\t\t\t\treturn createDatasource(organizationId, visitorId, datasource.getName(), datasource.getDatasourceType(), datasource.getDatasourceSubType(), datasource.getDatasourceConfig());\n\t\t\t}\n\t\t});\n}", "CodeBleu_score": 50.598354201235075}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId)\treturn getDatasource(datasourceId)\n\t\t\t.map(datasource -> {\n\t\t\t\tif (datasource.isSystemStatic()) {\n\t\t\t\t\treturn datasource.getId();\n\t\t\t\t} else if (datasource.isLegacyQuickRest()) {\n\t\t\t\t\treturn datasource.getLegacyQuickRestId();\n\t\t\t\t} else if (datasource.isLegacyOpenblocks()) {\n\t\t\t\t\treturn datasource.getLegacyOpenblocksId();\n\t\t\t\t} else {\n\t\t\t\t\treturn createDatasource(organizationId, visitorId, datasource);\n\t\t\t\t}\n\t\t\t});\n}\n", "CodeBleu_score": 36.981213054027215}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId)\treturn this.datasourceRepository.findById(datasourceId)\n\t\t.flatMap(datasource -> {\n\t\t\tif (datasource.isSystemStatic()) {\n\t\t\t\treturn Mono.just(datasource.getId());\n\t\t\t} else if (datasource.isLegacyQuickRest()) {\n\t\t\t\treturn this.legacyQuickRestDatasourceRepository.findById(datasource.getId())\n\t\t\t\t\t.map(LegacyQuickRestDatasource::getId);\n\t\t\t} else if (datasource.isLegacyOpenblocks()) {\n\t\t\t\treturn this.legacyOpenblocksDatasourceRepository.findById(datasource.getId())\n\t\t\t\t\t.map(LegacyOpenblocksDatasource::getId);\n\t\t\t} else {\n\t\t\t\treturn this.datasourceRepository.save(datasource.copy(organizationId, visitorId))\n\t\t\t\t\t.map(Datasource::getId);\n\t\t\t}\n\t\t});\n}", "CodeBleu_score": 49.53823285652332}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user) return savePhoto(filePart, user.getId(), \"profile\")", "CodeBleu_score": 10.062280441551682}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user)\treturn this.uploadProfilePhoto(filePart, user)\n\t\t\t.flatMap(avatar -> {\n\t\t\t\tif (user.getAvatar()!= null) {\n\t\t\t\t\treturn this.deleteProfilePhoto(user.getAvatar())\n\t\t\t\t\t\t\t.then(this.updateProfilePhoto(avatar, user));\n\t\t\t\t} else {\n\t\t\t\t\treturn this.updateProfilePhoto(avatar, user);\n\t\t\t\t}\n\t\t\t});\n}", "CodeBleu_score": 17.511991597721238}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user) return uploadPhoto(filePart)", "CodeBleu_score": 7.9883260829076566}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser)\treturn Mono.fromCallable(() -> {\n\t\tUser user = new User();\n\t\tuser.setName(authUser.getName());\n\t\tuser.setState(User.State.ACTIVE);\n\t\tuser.setEnabled(true);\n\t\tuser.setAvatarLink(authUser.getAvatarLink());\n\t\tif (authUser.getAuthSource().equals(AuthUser.AuthSource.EMAIL) && authUser.getAuthContext().containsKey(\"password\")) {\n\t\t\tuser.setPassword(passwordEncoder.encode(authUser.getAuthContext().get(\"password\").toString()));\n\t\t}\n\t\tuser.setConnections(authUser.getConnections());\n\t\tuser.setNew(true);\n\t\treturn userRepository.save(user);\n\t});\n}", "CodeBleu_score": 37.782274546907715}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser)\treturn Mono.just(authUser)\n\t\t.map(this::createUserFromAuthUser)\n\t\t.flatMap(this::saveUser)\n\t\t.map(user -> {\n\t\t\tuser.setNew(true);\n\t\t\treturn user;\n\t\t});\n}", "CodeBleu_score": 10.345282035737343}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser)\treturn userRepository.save(authUser.toUser())\n\t\t\t.map(user -> {\n\t\t\t\tuser.setNew(true);\n\t\t\t\treturn user;\n\t\t\t});\n}", "CodeBleu_score": 14.126209354515698}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email)\treturn connectionRepository.findConnectionByProviderIdAndProviderUserId(\"email\", email)\n\t\t\t.flatMap(existingConnection -> {\n\t\t\t\tthrow new DuplicateKeyException(\"Email \" + email + \" is already bound to another user.\");\n\t\t\t})\n\t\t\t.switchIfEmpty(connectionFactoryLocator.getConnectionFactory(\"email\").createConnection(new EmailConnectionData(email)))\n\t\t\t.flatMap(connection -> {\n\t\t\t\tuser.addConnection(connection);\n\t\t\t\treturn userRepository.save(user);\n\t\t\t})\n\t\t\t.thenReturn(true)\n\t\t\t.onErrorResume(DuplicateKeyException.class, e -> Mono.just(false))\n\t\t\t.onErrorMap(e -> {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t});\n}", "CodeBleu_score": 21.688713600484014}, {"code": "public Mono<Boolean> bindEmail(User user, String email)\treturn this.emailSource.findByEmail(email)\n\t\t.flatMap(existingEmail -> {\n\t\t\tthrow new DuplicateKeyException(\"Email already exists\");\n\t\t})\n\t\t.switchIfEmpty(this.emailSource.save(new Email(email)))\n\t\t.flatMap(email -> {\n\t\t\tuser.addConnection(new Connection(email));\n\t\t\treturn this.userSource.save(user);\n\t\t})\n\t\t.map(user -> true)\n\t\t.onErrorResume(DuplicateKeyException.class, e -> Mono.just(false));\n}", "CodeBleu_score": 18.07073155745675}, {"code": "public Mono<Boolean> bindEmail(User user, String email)\treturn userRepository.findByEmail(email).flatMap(existingUser -> {\n\t\tthrow new DuplicateKeyException(\"Email already bound to a user.\");\n\t}).switchIfEmpty(Mono.defer(() -> {\n\t\treturn connectionRepository.save(new Connection(email, user.getId())).flatMap(connection -> {\n\t\t\treturn userRepository.save(user);\n\t\t}).map(savedUser -> {\n\t\t\treturn true;\n\t\t});\n\t}));\n}", "CodeBleu_score": 20.126135108049617}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword)\treturn userRepository.findById(userId)\n\t\t\t.flatMap(user -> {\n\t\t\t\tif (passwordEncoder.matches(oldPassword, user.getPassword())) {\n\t\t\t\t\tuser.setPassword(passwordEncoder.encode(newPassword));\n\t\t\t\t\treturn userRepository.save(user);\n\t\t\t\t} else {\n\t\t\t\t\treturn Mono.error(new InvalidPasswordException(\"Invalid password\"));\n\t\t\t\t}\n\t\t\t})\n\t\t\t.map(user -> true)\n\t\t\t.onErrorResume(InvalidPasswordException.class, e -> Mono.just(false))\n\t\t\t.onErrorResume(Exception.class, e -> Mono.error(e));\n}", "CodeBleu_score": 28.02560178334351}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword)\treturn this.userRepository.findById(userId)\n\t\t.flatMap(user -> {\n\t\t\tif (passwordEncoder.matches(oldPassword, user.getPassword())) {\n\t\t\t\tuser.setPassword(passwordEncoder.encode(newPassword));\n\t\t\t\treturn this.userRepository.save(user);\n\t\t\t}\n\t\t\treturn Mono.error(new InvalidPasswordException(\"Invalid password\"));\n\t\t})\n\t\t.map(user -> true)\n\t\t.onErrorResume(error -> Mono.just(false));\n}", "CodeBleu_score": 23.846488023318383}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword)\treturn userRepository.findById(userId)\n\t\t.flatMap(user -> {\n\t\t\tif (user.getPassword().equals(oldPassword)) {\n\t\t\t\treturn userRepository.updatePassword(userId, newPassword);\n\t\t\t} else {\n\t\t\t\treturn Mono.error(new InvalidPasswordException(\"Invalid password\"));\n\t\t\t}\n\t\t})\n\t\t.map(updateResult -> updateResult.wasAcknowledged())\n\t\t.onErrorReturn(false);\n}", "CodeBleu_score": 19.39103737920132}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale)return groupRepository.findGroupsForUser(userId, orgMember.getOrgId(), withoutDynamicGroups)", "CodeBleu_score": 9.209072070914823}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale)\n// Get the list of groups that the user belongs to, depending on whether dynamic groups should be excluded", "CodeBleu_score": 6.007593439767201}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale)return groupRepository.findByOrganizationAndIsDynamic(orgMember.getOrganization(), withoutDynamicGroups)\n           .filter(group ->!group.isAllUsersGroup())\n           .collectList()\n           .map(groups -> groups.stream()\n                   .map(group -> {\n                        Map<String, String> groupMap = new HashMap<>();\n                        groupMap.put(\"groupId\", group.getId());\n                        groupMap.put(\"groupName\", group.getName(locale));\n                        return groupMap;\n                    })\n                   .collect(Collectors.toList()));\n}", "CodeBleu_score": 31.167374873878906}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId)\tUserStatus userStatus = new UserStatus(userId);\n\tuserStatus.setHasShowNewUserGuidance(true);\n\treturn mongoUpsertHelper.upsert(userStatus);\n}", "CodeBleu_score": 27.611665913949114}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId)\tUserStatus userStatus = new UserStatus(userId, true);\n\treturn mongoUpsertHelper.upsert(userStatus, UserStatus.class)\n\t\t\t.map(updateResult -> updateResult.wasAcknowledged());\n}", "CodeBleu_score": 30.623053962242707}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId)\tUserStatus userStatus = new UserStatus(userId, true);\n\treturn mongoUpsertHelper.upsert(UserStatus.class, userStatus, userStatus.getUserId()).map(updateResult -> updateResult.wasAcknowledged());\n}", "CodeBleu_score": 31.956663600093716}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) \tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\tvar wg sync.WaitGroup\n\tfor _, partition := range c.partitions {\n\t\tif predicatePartition(partition.Name(), partition) {\n\t\t\twg.Add(1)\n\t\t\tgo func(partition PartitionManager) {\n\t\t\t\tdefer wg.Done()\n\t\t\t\tpartition.ClearMatching(predicateValue)\n\t\t\t}(partition)\n\t\t}\n\t}\n\twg.Wait()\n}\n", "CodeBleu_score": 37.41691656552273}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) \tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition is nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue is nil\")\n\t}\n\n\tvar wg sync.WaitGroup\n\twg.Add(len(c.partitions))\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.Name(), p) {\n\t\t\tgo func(p PartitionManager) {\n\t\t\t\tdefer wg.Done()\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t}(p)\n\t\t}\n\t}\n\twg.Wait()\n}\n", "CodeBleu_score": 37.6518612144542}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) \tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\n\tvar wg sync.WaitGroup\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\twg.Add(1)\n\t\t\tgo func(k string, p PartitionManager) {\n\t\t\t\tdefer wg.Done()\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t}(k, p)\n\t\t}\n\t}\n\twg.Wait()\n}\n", "CodeBleu_score": 41.15832703956027}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\treturn (maxItemsTotal * totalWeightQuantity) / numPartitions\n}\n", "CodeBleu_score": 21.289735920784093}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Ceil(avgWeightPerPartition))\n}\n", "CodeBleu_score": 38.448305230557445}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Ceil(averageWeightPerPartition))\n}\n", "CodeBleu_score": 38.404943679514}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap()\tMap<String, Object> contributorMap = new HashMap<>();\n\tDatabaseMetaData dbMetadata = null;\n\ttry {\n\t\tdbMetadata = connection.getMetaData();\n\t\tif (dbMetadata!= null) {\n\t\t\tcontributorMap.put(DB_PRODUCT_NAME, dbMetadata.getDatabaseProductName());\n\t\t\tcontributorMap.put(DB_PRODUCT_VERSION, dbMetadata.getDatabaseProductVersion());\n\t\t}\n\t} catch (SQLException e) {\n\t\tlogger.error(\"Error retrieving database metadata: \" + e.getMessage());\n\t}\n\treturn contributorMap;\n}", "CodeBleu_score": 34.26437825490117}, {"code": "public Map<String, Object> contributorMap()\tMap<String, Object> map = new HashMap<>();\n\tDatabaseMetaData dbMetaData = null;\n\ttry {\n\t\tdbMetaData = getConnection().getMetaData();\n\t} catch (SQLException e) {\n\t\tLOGGER.error(\"Error retrieving database metadata\", e);\n\t}\n\tif (dbMetaData!= null) {\n\t\ttry {\n\t\t\tmap.put(\"databaseProductName\", dbMetaData.getDatabaseProductName());\n\t\t\tmap.put(\"databaseProductVersion\", dbMetaData.getDatabaseProductVersion());\n\t\t} catch (SQLException e) {\n\t\t\tLOGGER.error(\"Error retrieving database product name and version\", e);\n\t\t}\n\t}\n\treturn map;\n}", "CodeBleu_score": 45.90752573757022}, {"code": "public Map<String, Object> contributorMap()\tMap<String, Object> map = new HashMap<>();\n\tDatabaseMetaData databaseMetaData = null;\n\ttry {\n\t\tdatabaseMetaData = getConnection().getMetaData();\n\t} catch (SQLException e) {\n\t\t// Ignore\n\t}\n\tif (databaseMetaData!= null) {\n\t\ttry {\n\t\t\tmap.put(\"product\", databaseMetaData.getDatabaseProductName());\n\t\t\tmap.put(\"version\", databaseMetaData.getDatabaseProductVersion());\n\t\t} catch (SQLException e) {\n\t\t\t// Ignore\n\t\t}\n\t}\n\treturn map;\n}", "CodeBleu_score": 46.37759108939987}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap)\tif (configMap!= null) {\n\t\tMap<String, Object> userSettings = (Map<String, Object>) configMap.get(\"user_settings\");\n\t\tif (userSettings!= null) {\n\t\t\tif (userSettings.get(\"enable_registration\")!= null) {\n\t\t\t\tinfo.setEnableRegistration((boolean) userSettings.get(\"enable_registration\"));\n\t\t\t}\n\t\t\tif (userSettings.get(\"enable_email_verification\")!= null) {\n\t\t\t\tinfo.setEnableEmailVerification((boolean) userSettings.get(\"enable_email_verification\"));\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 35.885230759492984}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap)\tif (configMap!= null) {\n\t\tMap<String, Object> userSettings = configMap.getMap(\"user-settings\");\n\t\tif (userSettings!= null) {\n\t\t\tinfo.setRegistrationEnabled(Boolean.parseBoolean(userSettings.get(\"registration-enabled\").toString()));\n\t\t\tinfo.setEmailVerificationEnabled(Boolean.parseBoolean(userSettings.get(\"email-verification-enabled\").toString()));\n\t\t}\n\t}\n}", "CodeBleu_score": 28.582617444929348}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap)\tif (configMap!= null) {\n\t\tObject userSettings = configMap.get(\"userSettings\");\n\t\tif (userSettings!= null) {\n\t\t\tif (userSettings instanceof Map) {\n\t\t\t\tMap userSettingsMap = (Map) userSettings;\n\t\t\t\tObject registration = userSettingsMap.get(\"registration\");\n\t\t\t\tif (registration!= null) {\n\t\t\t\t\tif (registration instanceof Boolean) {\n\t\t\t\t\t\tBoolean registrationEnabled = (Boolean) registration;\n\t\t\t\t\t\tinfo.setRegistrationEnabled(registrationEnabled);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tObject emailVerification = userSettingsMap.get(\"emailVerification\");\n\t\t\t\tif (emailVerification!= null) {\n\t\t\t\t\tif (emailVerification instanceof Boolean) {\n\t\t\t\t\t\tBoolean emailVerificationEnabled = (Boolean) emailVerification;\n\t\t\t\t\t\tinfo.setEmailVerificationEnabled(emailVerificationEnabled);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 27.743578927714424}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart()\tThreadGroup tg = new ThreadGroup(\"restart\");\n\ttg.setDaemon(false);\n\tThread t = new Thread(tg, new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tThread.currentThread().setContextClassLoader(\n\t\t\t\t\t\tThread.currentThread().getContextClassLoader());\n\t\t\t\trestartImpl();\n\t\t\t} catch (Throwable t) {\n\t\t\t\tt.printStackTrace();\n\t\t\t}\n\t\t}\n\t});\n\tt.start();\n\treturn \"restarting...\";\n}", "CodeBleu_score": 42.88498090002007}, {"code": "public Object restart()\tThreadGroup restartGroup = new ThreadGroup(\"restart\");\n\tThread restartThread = new Thread(restartGroup, () -> {\n\t\tThread.currentThread().setContextClassLoader(getClass().getClassLoader());\n\t\trestart();\n\t});\n\trestartThread.setDaemon(false);\n\trestartThread.start();\n\treturn \"restarting\";\n}", "CodeBleu_score": 44.66548753613471}, {"code": "public Object restart()\tThreadGroup restartGroup = new ThreadGroup(\"Restart\");\n\tThread restartThread = new Thread(restartGroup, new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tThread.currentThread().setContextClassLoader(getClass().getClassLoader());\n\t\t\t\tThread.currentThread().setDaemon(false);\n\t\t\t\tClass<?> mainClass = Class.forName(mainClassName);\n\t\t\t\tmainClass.getMethod(\"main\", String[].class).invoke(null, (Object) args);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t});\n\trestartThread.start();\n\treturn \"Restarting application...\";\n}", "CodeBleu_score": 40.772103428322346}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer) configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n }\n", "CodeBleu_score": 82.75711222017128}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer) configurer.defaultCodecs().jackson2JsonDecoder(objectMapper);\n configurer.defaultCodecs().jackson2JsonEncoder(objectMapper);\n }\n}\n", "CodeBleu_score": 46.747933111321295}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer) configurer.defaultCodecs().jackson2JsonDecoder(objectMapper);\n configurer.defaultCodecs().jackson2JsonEncoder(objectMapper);\n }\n", "CodeBleu_score": 46.58413333007781}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection()\treturn RouterFunctions.route(GET(\"/console/**\").and(accept(MediaType.TEXT_HTML).and(not(upgradeToWebSocket()))).and(path(\"/console/assets/**\").negate()),\n\t\t\t(request) -> ServerResponse.temporaryRedirect(URI.create(\"/console/index.html\")).build());\n}", "CodeBleu_score": 24.4287917935887}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection()\treturn RouterFunctions.route(\n\t\t\tRequestPredicates.GET(\"/console/**\")\n\t\t\t\t\t.and(RequestPredicates.path(\"/console/assets/**\").negate())\n\t\t\t\t\t.and(RequestPredicates.accept(MediaType.TEXT_HTML))\n\t\t\t\t\t.and(RequestPredicates.header(\"Upgrade\").negate()),\n\t\t\trequest -> ServerResponse.temporaryRedirect(URI.create(\"/console/index.html\")).build());\n}", "CodeBleu_score": 26.26166024393616}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection()\treturn RouterFunctions.route(RequestPredicates.GET(\"/console/**\")\n\t\t\t.and(RequestPredicates.path(\"/console/assets/**\").negate())\n\t\t\t.and(RequestPredicates.accept(MediaType.TEXT_HTML))\n\t\t\t.and(RequestPredicates.header(HttpHeaders.CONNECTION, \"Upgrade\").negate()),\n\t\t\t(request) -> ServerResponse.ok().syncBody(new ClassPathResource(\"static/index.html\")));\n}", "CodeBleu_score": 26.334817365847087}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect()\treturn RouterFunctions.route(\n\t\tRequestPredicates.GET(\"/uc/**\").and(RequestPredicates.path(\"/uc/assets/**\").negate()).and(RequestPredicates.accept(MediaType.TEXT_HTML)).and(RequestPredicates.header(\"Upgrade\", \"websocket\").negate()),\n\t\trequest -> {\n\t\t\tString path = request.path().substring(3);\n\t\t\tif (path.equals(\"\")) {\n\t\t\t\tpath = \"index.html\";\n\t\t\t}\n\t\t\treturn ServerResponse.ok().contentType(MediaType.TEXT_HTML).syncBody(new ClassPathResource(ucLocation + path));\n\t\t}\n\t);\n}", "CodeBleu_score": 30.965439628971797}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect()\treturn RouterFunctions.route(\n\t\tRequestPredicates.GET(\"/uc/**\").and(\n\t\t\tRequestPredicates.path(\"/uc/assets/**\").negate()).and(\n\t\t\tRequestPredicates.accept(MediaType.TEXT_HTML)).and(\n\t\t\tRequestPredicates.header(HttpHeaders.CONNECTION, \"keep-alive\")).negate(),\n\t\trequest -> {\n\t\t\tString path = request.uri().getPath();\n\t\t\tString newPath = path.replaceFirst(\"/uc\", \"\");\n\t\t\tif (newPath.isEmpty()) {\n\t\t\t\tnewPath = \"/\";\n\t\t\t}\n\t\t\treturn ServerResponse.temporaryRedirect(URI.create(newPath)).build();\n\t\t});\n}", "CodeBleu_score": 32.32360054434709}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect()\treturn RouterFunctions.route(RequestPredicates.GET(\"/uc/**\").and(RequestPredicates.accept(MediaType.TEXT_HTML)).and(RequestPredicates.path(\"/uc/assets/**\").negate()), (ServerRequest request) -> ServerResponse.temporaryRedirect(URI.create(\"/uc/index.html\")).build());\n}", "CodeBleu_score": 23.9762572708733}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository\t// Create a new reactive session repository using a concurrent hash map\n\tReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository = new ReactiveIndexedSessionRepository<>(new ConcurrentHashMap<>());\n\n\t// Configure the session timeout based on the session configuration\n\treactiveSessionRepository.setDefaultMaxInactiveInterval(Duration.ofSeconds(sessionConfig.getMaxInactiveInterval()));\n\n\t// Return the configured reactive session repository\n\treturn reactiveSessionRepository;\n}", "CodeBleu_score": 30.88280051515484}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository\tdef sessionConfig = sessionConfig()\n\tdef serverConfig = serverConfig()\n\tdef sessionRepository = new ConcurrentHashMapReactiveSessionRepository(new MapSessionRepository(new ConcurrentHashMap<>()))\n\tsessionRepository.setDefaultMaxInactiveInterval(Duration.ofSeconds(sessionConfig.timeout))\n\treturn sessionRepository\n}", "CodeBleu_score": 31.369249159217528}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository\tdef sessionRepository = new ReactiveMapSessionRepository(new ConcurrentHashMap())\n\tsessionRepository.setDefaultMaxInactiveInterval(Duration.ofSeconds(serverConfig.session.timeout))\n\tsessionRepository.setFindByIndexNameAndIndexValueMaxResults(1000)\n\tsessionRepository\n}\n", "CodeBleu_score": 21.257517532367327}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties)\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService)\n\tuserDetailsService.setEnableTwoFactorAuthentication(haloProperties.security.enableTwoFactorAuthentication)\n\treturn userDetailsService\n}\n", "CodeBleu_score": 32.92902764196984}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties)\tDefaultUserDetailService defaultUserDetailService = new DefaultUserDetailService()\n\tdefaultUserDetailService.userService = userService\n\tdefaultUserDetailService.roleService = roleService\n\tdefaultUserDetailService.enableTwoFactorAuthentication = haloProperties.security.twoFactorAuthentication.enabled\n\treturn defaultUserDetailService\n}\n", "CodeBleu_score": 27.39805369312159}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties)\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService()\n\tuserDetailsService.setUserService(userService)\n\tuserDetailsService.setRoleService(roleService)\n\tuserDetailsService.setTwoFactorAuthenticationEnabled(haloProperties.security.twoFactorAuthentication.enabled)\n\treturn userDetailsService\n}\n", "CodeBleu_score": 30.84880653876268}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner()\tComment.CommentOwner owner = new Comment.CommentOwner();\n\towner.setKind(\"email\");\n\towner.setEmail(getEmail()!= null? getEmail() : \"\");\n\towner.setDisplayName(getDisplayName());\n\towner.setAvatar(new Comment.CommentOwner.CommentOwnerAvatar());\n\towner.setWebsite(new Comment.CommentOwner.CommentOwnerWebsite());\n\treturn owner;\n}", "CodeBleu_score": 26.958016867660955}, {"code": "public Comment.CommentOwner toCommentOwner()\tComment.CommentOwner owner = new Comment.CommentOwner();\n\towner.setKind(\"email\");\n\towner.setDisplayName(displayName);\n\towner.setEmail(email == null? \"\" : email);\n\towner.setAvatarUrl(avatarUrl);\n\towner.setWebsite(website);\n\treturn owner;\n}", "CodeBleu_score": 26.11627652353275}, {"code": "public Comment.CommentOwner toCommentOwner()\tComment.CommentOwner owner = new Comment.CommentOwner();\n\towner.setKind(\"email\");\n\towner.setDisplayName(displayName);\n\towner.setEmail(email);\n\towner.setAvatar(new Comment.CommentOwner.CommentOwnerAvatar());\n\towner.setWebsite(new Comment.CommentOwner.CommentOwnerWebsite());\n\treturn owner;\n}", "CodeBleu_score": 29.39219685357758}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner)\tif (commentOwner.kind == \"email\") {\n\t\tUser user = fetchUserByEmail(post.owner.email);\n\t\treturn user.name == commentOwner.name;\n\t} else {\n\t\treturn post.owner.name == commentOwner.name;\n\t}\n}\n", "CodeBleu_score": 15.885549670043014}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner)\tif (commentOwner.kind == \"email\") {\n\t\tUser user = getUser(post.owner);\n\t\treturn user.email == commentOwner.name;\n\t} else {\n\t\treturn post.owner == commentOwner.name;\n\t}\n}\n", "CodeBleu_score": 13.686238695182857}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner)\tif (commentOwner.kind == \"email\") {\n\t\tUser user = fetchUserByPostOwner(post);\n\t\treturn user.email == commentOwner.name;\n\t} else {\n\t\treturn post.owner == commentOwner.name;\n\t}\n}\n", "CodeBleu_score": 13.719254314373122}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions()\tListOptions listOptions = new ListOptions();\n\tlistOptions.setFields(this.toFieldQuery());\n\tif (keyword!= null &&!keyword.isEmpty()) {\n\t\tlistOptions.addCondition(new Condition(Field.NAME, Operator.CONTAINS, keyword));\n\t}\n\tif (ownerName!= null &&!ownerName.isEmpty()) {\n\t\tlistOptions.addCondition(new Condition(Field.OWNER_NAME, Operator.EQUALS, ownerName));\n\t}\n\treturn listOptions;\n}", "CodeBleu_score": 13.723925429489725}, {"code": "public ListOptions toListOptions()\tListOptions options = new ListOptions();\n\toptions.setFieldSelector(fieldSelector);\n\tif (keyword!= null) {\n\t\toptions.addCondition(new FieldCondition(\"name\", FieldCondition.Operator.LIKE, \"%\" + keyword + \"%\"));\n\t}\n\tif (ownerName!= null) {\n\t\toptions.addCondition(new FieldCondition(\"owner.name\", FieldCondition.Operator.EQUALS, ownerName));\n\t}\n\treturn options;\n}", "CodeBleu_score": 14.83194558584918}, {"code": "public ListOptions toListOptions()\tListOptions options = new ListOptions();\n\toptions.setFields(this.getFields());\n\toptions.setConditions(this.getConditions());\n\treturn options;\n}\n", "CodeBleu_score": 5.693622632067904}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName)\treturn Mono.justOrEmpty(commentName)\n\t\t.flatMap(name -> commentCounter.get(name))\n\t\t.map(upvoteCount -> new CommentStats(commentName, upvoteCount));\n}", "CodeBleu_score": 25.273908490521023}, {"code": "Mono<CommentStats> fetchStats(String commentName)\treturn Mono.justOrEmpty(commentName)\n\t\t\t.flatMap(name -> redisOperations.opsForValue().get(name))\n\t\t\t.map(counter -> new CommentStats(commentName, counter.intValue()));\n}", "CodeBleu_score": 31.764927230859108}, {"code": "Mono<CommentStats> fetchStats(String commentName)\treturn Mono.justOrEmpty(commentName)\n\t\t.flatMap(name -> Mono.from(redisTemplate.opsForHash().get(COMMENT_STATS_KEY, name)))\n\t\t.map(upvotes -> new CommentStats(commentName, (Long) upvotes));\n}", "CodeBleu_score": 31.386745371016616}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity)\tSubscriber subscriber = createSubscriber(identity);\n\tif (subscriber == NULL) {\n\t\treturn;\n\t}\n\tInterestReason reason = createInterestReason(REPLY_NOTIFICATION,\n\t\t\tcreateCondition(EQUALS, OWNER, identity.name));\n\tif (reason == NULL) {\n\t\treturn;\n\t}\n\tif (subscribe(subscriber, reason) == SUBSCRIBE_SUCCESS) {\n\t\tblockUntilSubscribed(subscriber);\n\t}\n\tdestroySubscriber(subscriber);\n\tdestroyInterestReason(reason);\n}\n", "CodeBleu_score": 42.97368733648466}, {"code": "void subscribeReply(UserIdentity identity)\tSubscriber subscriber = createSubscriber(identity);\n\tif (subscriber == NULL) {\n\t\tprintf(\"Failed to create subscriber\\n\");\n\t\treturn;\n\t}\n\n\tInterestReason reason = createInterestReason(REPLY_REASON_TYPE, REPLY_REASON_CONDITION);\n\tif (reason == NULL) {\n\t\tprintf(\"Failed to create interest reason\\n\");\n\t\treturn;\n\t}\n\n\tif (subscribe(subscriber, reason)!= SUBSCRIBE_SUCCESS) {\n\t\tprintf(\"Failed to subscribe\\n\");\n\t\treturn;\n\t}\n\n\tprintf(\"Subscribed to reply notifications\\n\");\n}\n", "CodeBleu_score": 37.6878786308909}, {"code": "void subscribeReply(UserIdentity identity)\tSubscriber subscriber = subscriber_create(identity);\n\tif (subscriber == NULL) {\n\t\tprintf(\"Failed to create subscriber\\n\");\n\t\treturn;\n\t}\n\n\tInterestReason reason = interest_reason_create(\"someone replied to you\", \"replied_owner\", \"==\", identity.name);\n\tif (reason == NULL) {\n\t\tprintf(\"Failed to create interest reason\\n\");\n\t\treturn;\n\t}\n\n\tSubscription subscription = subscription_create(subscriber, reason);\n\tif (subscription == NULL) {\n\t\tprintf(\"Failed to create subscription\\n\");\n\t\treturn;\n\t}\n\n\tint status = subscription_subscribe(subscription);\n\tif (status!= 0) {\n\t\tprintf(\"Failed to subscribe to notification center\\n\");\n\t\treturn;\n\t}\n\n\tprintf(\"Subscribed to reply notifications\\n\");\n}\n", "CodeBleu_score": 33.62221637331377}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment)\treturn client.update(Comment.class)\n\t\t\t.matching(Query.query(Criteria.where(\"id\").is(comment.getId())))\n\t\t\t.with(update -> update.set(\"approved\", true).set(\"approvedDate\", new Date()))\n\t\t\t.one()\n\t\t\t.retryWhen(Retry.backoff(3, Duration.ofMillis(100))\n\t\t\t\t\t.filter(OptimisticLockingFailureException.class::isInstance))\n\t\t\t.flatMap(result -> {\n\t\t\t\tif (result.wasAcknowledged()) {\n\t\t\t\t\treturn Mono.just(comment);\n\t\t\t\t}\n\t\t\t\treturn Mono.error(new RuntimeException(\"Failed to approve comment\"));\n\t\t\t});\n}", "CodeBleu_score": 25.37743133711222}, {"code": "private Mono<Comment> approveComment(Comment comment)\treturn client.update(comment, update -> update.set(Comment::getApproved, true).set(Comment::getApprovedDate, Instant.now()))\n\t\t\t.onErrorResume(OptimisticLockingFailureException.class, e -> approveComment(comment));\n}", "CodeBleu_score": 22.901760923192008}, {"code": "private Mono<Comment> approveComment(Comment comment)\treturn client.update(comment)\n\t\t.onFailure(OptimisticLockingFailureException.class, e -> {\n\t\t\t// Retry the update operation with the specified update function\n\t\t\treturn approveComment(comment.withApproved(true).withApprovedDate(Instant.now()));\n\t\t})\n\t\t.map(updatedComment -> {\n\t\t\t// Update the comment with the approved status and approved date\n\t\t\tcomment.setApproved(true);\n\t\t\tcomment.setApprovedDate(Instant.now());\n\t\t\treturn comment;\n\t\t});\n}", "CodeBleu_score": 30.223445034602303}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction\tif ($action instanceof MountableAction) {\n\t\t$action->mount($this);\n\t}\n\n\tif ($this instanceof HasRecord && $action instanceof HasRecord) {\n\t\t$action->setRecord($this->getRecord());\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 58.06829491753229}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction\tif ($action instanceof MountableAction) {\n\t\t$action->mount($this);\n\t}\n\n\tif ($this instanceof HasRecord && $action instanceof HasRecord) {\n\t\t$action->setRecord($this->getRecord());\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 58.06829491753229}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction\tif ($action instanceof MountableAction) {\n\t\t$action->mount($this);\n\t}\n\n\tif ($this instanceof HasRecord && $action instanceof HasRecord) {\n\t\t$action->setRecord($this->getRecord());\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 58.06829491753229}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static\t$redirectUrl = $this->getSuccessRedirectUrl();\n\tif (!empty($redirectUrl)) {\n\t\t$this->redirect($redirectUrl);\n\t}\n\treturn $this;\n}\n", "CodeBleu_score": 46.86645912560993}, {"code": "<?\npublic function dispatchSuccessRedirect(): static\tif ($this->getSuccessRedirect()) {\n\t\t$this->redirect($this->getSuccessRedirect());\n\t}\n\n\treturn $this;\n}\n", "CodeBleu_score": 26.72884861856512}, {"code": "<?\npublic function dispatchSuccessRedirect(): static\tif (! empty( $this->successRedirect ) ) {\n\t\t$this->redirect( $this->successRedirect );\n\t}\n\n\treturn $this;\n}\n", "CodeBleu_score": 28.89657528922002}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void\tif (is_null($record) ||!method_exists($record, 'tags')) {\n\t\treturn;\n\t}\n\n\t$tagModel = $record->tags()->getModel();\n\t$tagNames = array_map('trim', explode(',', $state['tags']));\n\t$tags = $tagModel->whereIn('name', $tagNames)->get();\n\n\t$newTags = collect($tagNames)->diff($tags->pluck('name'))->map(function ($tagName) use ($tagModel) {\n\t\treturn $tagModel->create(['name' => $tagName]);\n\t});\n\n\t$tags = $tags->merge($newTags);\n\n\t$record->tags()->sync($tags->pluck('id')->toArray());\n}", "CodeBleu_score": 43.220211388935724}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void\tif ($record === null) {\n\t\treturn;\n\t}\n\n\tif (!method_exists($record, 'tags')) {\n\t\treturn;\n\t}\n\n\t$tagModelClass = $record->tags()->getRelated()->getMorphClass();\n\t$tagNames = array_map('trim', explode(',', $state['tags']));\n\t$tags = $tagModelClass::findOrCreate($tagNames);\n\n\t$record->tags()->sync($tags->pluck('id'));\n}\n", "CodeBleu_score": 30.823332210370708}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void\tif (!$record ||!$record->hasTags()) {\n\t\treturn;\n\t}\n\n\t$tagModel = $record->tags();\n\n\tif (is_string($tagModel)) {\n\t\t$tagModel = new $tagModel;\n\t}\n\n\t$tags = $this->processTagNames($tagModel, $state['tags']);\n\n\t$record->tags()->sync($tags->pluck('id')->toArray());\n}", "CodeBleu_score": 22.30889717253778}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error \tspacePath, repoName, err := dissectRepoPath(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\tscope := authz.Scope{Type: authz.SpaceResourceType, Name: spacePath}\n\tresource := authz.Resource{Type: authz.PipelineResourceType, Name: pipelineIdentifier}\n\terr = authorizer.Check(ctx, session, scope, resource, permission)\n\tif err!= nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n", "CodeBleu_score": 54.03158121396328}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error \tspacePath, repoName, err := dissectRepoPath(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\tscope := authz.Scope{\n\t\tType: authz.ScopeTypePipeline,\n\t\tName: pipelineIdentifier,\n\t}\n\tresource := authz.Resource{\n\t\tType: authz.ResourceTypeRepository,\n\t\tName: repoName,\n\t}\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err!= nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n", "CodeBleu_score": 57.2182636836454}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error \tscope, resource, err := dissectRepoPath(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\treturn Check(ctx, authorizer, session, scope, resource, pipelineIdentifier, permission)\n}\n", "CodeBleu_score": 34.62409274916384}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error\tif space == nil {\n\t\treturn errors.New(\"space is required\")\n\t}\n\n\tif permission == 0 {\n\t\treturn errors.New(\"permission is required\")\n\t}\n\n\tspacePath := space.Path\n\tif spacePath == \"\" {\n\t\treturn errors.New(\"space path is required\")\n\t}\n\n\tspacePathParts := strings.Split(spacePath, \"/\")\n\tif len(spacePathParts) < 2 {\n\t\treturn errors.New(\"space path is invalid\")\n\t}\n\n\tparentSpacePath := strings.Join(spacePathParts[:len(spacePathParts)-1], \"/\")\n\tparentSpaceName := spacePathParts[len(spacePathParts)-1]\n\n\tscope := authz.NewScope(authz.ScopeSpace, parentSpacePath)\n\tresource := authz.NewResource(authz.ResourceSpace, parentSpaceName)\n\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}\n", "CodeBleu_score": 48.63393069593528}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error\tspacePath := space.Path\n\tspaceParentPath := path.Dir(spacePath)\n\tspaceName := path.Base(spacePath)\n\n\tspaceParentScope := authz.Scope{\n\t\tType: authz.ScopeTypeSpace,\n\t\tName: spaceParentPath,\n\t}\n\tspaceScope := authz.Scope{\n\t\tType: authz.ScopeTypeSpace,\n\t\tName: spacePath,\n\t}\n\tspaceResource := authz.Resource{\n\t\tType: authz.ResourceTypeSpace,\n\t\tName: spaceName,\n\t}\n\n\treturn Check(ctx, authorizer, session, spaceParentScope, spaceScope, spaceResource, permission)\n}\n", "CodeBleu_score": 49.86985645861054}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error\tparentSpace, name, err := splitSpacePath(space.Path)\n\tif err!= nil {\n\t\treturn err\n\t}\n\tscope := authz.NewScope(authz.SpaceResource, authz.SpaceScope, parentSpace.ID, name)\n\tresource := authz.NewResource(authz.SpaceResource, space.ID)\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}\n", "CodeBleu_score": 52.27209694224112}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error)\tif len(source) == 0 {\n\t\tb, err := json.Marshal(data)\n\t\tif err!= nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tsource = b\n\t}\n\n\tvar sanitized json.RawMessage\n\tif err := json.Unmarshal(source, &sanitized); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tsanitized, err := sjson.SetBytes(sanitized, \"\", data)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\tsanitized = bytes.TrimSuffix(sanitized, []byte(\"\\n\"))\n\n\treturn sanitized, nil\n}", "CodeBleu_score": 45.0090348395469}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error)\tif len(source) == 0 {\n\t\tb, err := json.Marshal(data)\n\t\tif err!= nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tsource = b\n\t}\n\n\tvar v any\n\tif err := json.Unmarshal(source, &v); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tb, err := json.Marshal(v)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// remove trailing newline\n\tif len(b) > 0 && b[len(b)-1] == '\\n' {\n\t\tb = b[:len(b)-1]\n\t}\n\n\treturn b, nil\n}\n", "CodeBleu_score": 44.36501557853411}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error)\tif len(source) == 0 {\n\t\t// If the source is empty, marshal the data to JSON\n\t\tsanitized, err := json.Marshal(data)\n\t\tif err!= nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn sanitized, nil\n\t}\n\t// Decode the source JSON, disallowing unknown fields\n\tvar decoded interface{}\n\tif err := json.Unmarshal(source, &decoded); err!= nil {\n\t\treturn nil, err\n\t}\n\t// Encode the data to ensure it conforms to the required format\n\tsanitized, err := json.Marshal(data)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\t// Remove any trailing newline from the result\n\tsanitized = bytes.TrimSuffix(sanitized, []byte(\"\\n\"))\n\treturn sanitized, nil\n}\n", "CodeBleu_score": 43.79478956692866}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error)\trepo, err := c.getRepo(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\tif!session.HasPermission(repo, reqPermission) {\n\t\treturn nil, auth.ErrNoPermission\n\t}\n\treturn repo, nil\n}\n", "CodeBleu_score": 26.046433850603062}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error)\t// Validate repository reference.\n\trepo, err := c.validateRepoRef(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Check access.\n\tif err = c.checkRepoAccess(ctx, session, repo, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}\n", "CodeBleu_score": 39.02998563349086}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error)\trepo, err := c.getRepo(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif!session.HasRepoPermission(repo, reqPermission) {\n\t\treturn nil, errcode.ErrUnauthorized.Wrap(fmt.Errorf(\"unauthorized access to repository\"))\n\t}\n\n\treturn repo, nil\n}\n", "CodeBleu_score": 32.515598334027274}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error\tsanitizers := map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty:  nil,\n\t\tenum.CheckPayloadKindRaw:    SanitizeCheckPayload,\n\t\tenum.CheckPayloadKindMarkdown: SanitizeCheckPayload,\n\t\tenum.CheckPayloadKindPipeline: SanitizeCheckPayload,\n\t}\n\treturn sanitizers\n}\n", "CodeBleu_score": 26.88306020124277}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty:   nil,\n\t\tenum.CheckPayloadKindRaw:     sanitizeRawPayload,\n\t\tenum.CheckPayloadKindMarkdown: sanitizeMarkdownPayload,\n\t\tenum.CheckPayloadKindPipeline: sanitizePipelinePayload,\n\t}\n}\n", "CodeBleu_score": 25.381415890224783}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindRaw: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn SanitizeMarkdown(in.Payload.Raw)\n\t\t},\n\t\tenum.CheckPayloadKindMarkdown: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn SanitizeMarkdown(in.Payload.Markdown)\n\t\t},\n\t\tenum.CheckPayloadKindPipeline: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn SanitizePipeline(in.Payload.Pipeline)\n\t\t},\n\t}\n}\n", "CodeBleu_score": 27.24214788074326}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\tlocal state = self.state\n\tstate.on_render = on_render\n\tif not state.attached then\n\t\tstate.attached = true\n\t\tstate.renderer:attach_buffer(self)\n\tend\n\treturn self", "CodeBleu_score": 73.89120302620012}, {"code": "function Buffer:attach_to_renderer(on_render)\tself.state.on_render = on_render\n\tif not self.state.renderer then\n\t\tself.state.renderer = self.state.screen:add_buffer(self)\n\t\tself.state.renderer:set_size(self.state.size.x, self.state.size.y)\n\tend\n\treturn self", "CodeBleu_score": 51.934832054366396}, {"code": "function Buffer:attach_to_renderer(on_render)\tself.state.on_render = on_render\n\tif not self.state.attached then\n\t\tself:attach_to_screen()\n\tend\n\treturn self", "CodeBleu_score": 40.87905717686663}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\tif not self:isValid() then\n\t\treturn\n\tend\n\tif not callback then\n\t\treturn\n\tend\n\tlocal filename = self:getFilename()\n\tif filename == \"\" then\n\t\treturn\n\tend\n\tlocal watcher = self.watcher\n\tif not watcher then\n\t\twatcher = fs.newWatcher()\n\t\tself.watcher = watcher\n\tend\n\twatcher:start(filename, function(event)\n\t\tif event == \"change\" then\n\t\t\tcallback(self)\n\t\tend\n\tend)\n\twatcher:setCallback(function(err)\n\t\tif err then\n\t\t\tlog.error(err)\n\t\tend\n\tend)", "CodeBleu_score": 44.646869394635914}, {"code": "function Buffer:watch(callback)\tif not self:valid() then return end\n\tif not callback then return end\n\tself.watcher = hs.pathwatcher.new(self:path(), callback):start()", "CodeBleu_score": 23.615331214645213}, {"code": "function Buffer:watch(callback)\tif not self:isValid() then return end\n\tif not callback then return end\n\tif self.watcher then self.watcher:close() end\n\tself.watcher = fs.watch(self.filename, function(event, filename)\n\t\tif event == \"change\" then\n\t\t\tcallback(self)\n\t\tend\n\tend)\n\tself.watcher:start()", "CodeBleu_score": 39.12531650711427}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\tif self._hex then return self._hex end\n\tlocal spec = self.spec\n\tlocal attr = spec.foreground and 'foreground' or 'background'\n\tlocal highlight = vim.api.nvim_get_hl_by_name(spec[attr], true)\n\tif not highlight then return end\n\tlocal hex = highlight.foreground and highlight.foreground or highlight.background\n\tif not hex then return end\n\tself._hex = string.format('#%06x', hex)\n\treturn self._hex", "CodeBleu_score": 56.577310573088994}, {"code": "function Color:to_hex()\tif self.hex then return self.hex end\n\n\tlocal spec = self.spec\n\tlocal attr = self.is_fg and 'foreground' or 'background'\n\tlocal hl = api.nvim_get_hl_by_name(attr, true)\n\tlocal color = hl[spec]\n\n\tif color then\n\t\tself.hex = Color.rgb_to_hex(color)\n\t\treturn self.hex\n\tend\n\n\treturn nil", "CodeBleu_score": 56.2597229074794}, {"code": "function Color:to_hex()\tif self.hex then\n\t\treturn self.hex\n\tend\n\tlocal spec = vim.api.nvim_get_hl_by_name(self.name, true)\n\tlocal attribute = self.is_fg and \"foreground\" or \"background\"\n\tlocal color = spec[attribute]\n\tif color == nil then\n\t\treturn nil\n\tend\n\tlocal hex = \"#\"\n\tfor i = 1, 3 do\n\t\tlocal c = color % 256\n\t\tcolor = math.floor(color / 256)\n\t\thex = string.format(\"%02x\", c).. hex\n\tend\n\tself.hex = hex\n\treturn hex", "CodeBleu_score": 51.20512258187835}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\tlocal lines = buffer:get_lines()\n\tfor line_index, line in ipairs(lines) do\n\t\tlocal line_start_pos = buffer:position_from_line(line_index - 1)\n\t\tfor match in line:gmatch(pattern) do\n\t\t\tlocal match_start_pos = buffer:position_from_line(line_index - 1) + line:find(match) - 1\n\t\t\tlocal match_end_pos = match_start_pos + #match - 1\n\t\t\tbuffer:add_highlight(line_index - 1, match_start_pos, match_end_pos, hl)\n\t\tend\n\tend\n\treturn self", "CodeBleu_score": 45.61330696247453}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\tlocal lines = buffer:get_lines(0, -1, false)\n\tfor _, line in ipairs(lines) do\n\t\tfor match in line:gmatch(pattern) do\n\t\t\tbuffer:add_highlight(0, match, match:len(), hl)\n\t\tend\n\tend\n\treturn self", "CodeBleu_score": 28.452300642067545}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\tlocal ns = self:get_namespace(buffer)\n\tlocal line_count = buffer:line_count()\n\tfor line = 0, line_count - 1 do\n\t\tlocal line_text = buffer:get_line_text(line)\n\t\tlocal start_index, end_index = line_text:find(pattern)\n\t\twhile start_index do\n\t\t\tbuffer:add_highlight_range(line, start_index - 1, line, end_index, hl)\n\t\t\tstart_index, end_index = line_text:find(pattern, end_index + 1)\n\t\tend\n\tend\n\treturn ns", "CodeBleu_score": 47.03649678911254}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\tlocal id = buffer.. \":\".. row.. \":\".. col\n\tlocal opts = {\n\t\tvirt_text = { { text, hl } },\n\t\tvirt_text_pos = pos,\n\t\tpriority = priority\n\t}\n\tvim.api.nvim_buf_set_extmark(buffer, Namespace.ns_id, row, col, opts)\n\treturn id", "CodeBleu_score": 57.514757076682834}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\tlocal id = string.format(\"%s:%s:%s:%s\", buffer, row, col, pos)\n\tlocal extmark = vim.api.nvim_buf_set_extmark(buffer, Namespace.namespace, row, col, {\n\t\tvirt_text = { { text, hl } },\n\t\tvirt_text_pos = pos,\n\t\tvirt_text_priority = priority,\n\t})\n\tNamespace.virtual_text_map[id] = extmark\n\treturn id", "CodeBleu_score": 57.10099066525232}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\tlocal id = tostring(row).. \":\".. tostring(col)\n\tlocal extmark_id = vim.api.nvim_buf_set_extmark(buffer, Namespace.virtual_text_ns, row, col, {\n\t\tvirt_text = {{text, hl}},\n\t\tvirt_text_pos = pos,\n\t\tpriority = priority,\n\t})\n\tNamespace.virtual_text_map[id] = extmark_id\n\treturn id", "CodeBleu_score": 51.92475652699004}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\tlocal line = \"\"\n\tfor i = 1, #output do\n\t\tlocal char = output:sub(i, i)\n\t\tif char == \"\\n\" then\n\t\t\tcallback(line)\n\t\t\tline = \"\"\n\t\telse\n\t\t\tline = line.. char\n\t\tend\n\tend\n\tcallback(line)", "CodeBleu_score": 40.59189484347575}, {"code": "function Spawn:parse_result(output, callback)\tlocal line = \"\"\n\tfor i = 1, string.len(output) do\n\t\tlocal char = string.sub(output, i, i)\n\t\tif char == \"\\n\" then\n\t\t\tcallback(line)\n\t\t\tline = \"\"\n\t\telse\n\t\t\tline = line.. char\n\t\tend\n\tend\n\tif line ~= \"\" then\n\t\tcallback(line)\n\tend", "CodeBleu_score": 40.67205379494075}, {"code": "function Spawn:parse_result(output, callback)\tlocal line = \"\"\n\tfor c in output:gmatch\".\" do\n\t\tif c == \"\\n\" then\n\t\t\tcallback(line)\n\t\t\tline = \"\"\n\t\telse\n\t\t\tline = line.. c\n\t\tend\n\tend\n\tif line ~= \"\" then\n\t\tcallback(line)\n\tend", "CodeBleu_score": 24.53748177110342}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\tif not self.watches[path] then\n\t\tlocal watcher = self.loop:new_fs_event_watcher(handler)\n\t\twatcher:start(path, {recursive = true})\n\t\tself.watches[path] = watcher\n\tend\n\treturn self.watches[path]", "CodeBleu_score": 37.81298172138216}, {"code": "function Watcher:watch_file(path, handler)\tlocal watcher = Watcher.get_watcher(path)\n\tif watcher then\n\t\treturn watcher\n\tend\n\n\tlocal loop = vim.loop\n\tlocal watcher = loop.new_fs_event()\n\twatcher:start(path, {}, handler)\n\tWatcher.watchers[path] = watcher\n\treturn watcher", "CodeBleu_score": 38.839349503696695}, {"code": "function Watcher:watch_file(path, handler)\tlocal watcher = self.watchers[path]\n\tif watcher then\n\t\treturn watcher\n\tend\n\n\twatcher = self.loop:new_fs_event(path, {\n\t\trecursive = true,\n\t\ton_change = handler,\n\t})\n\n\twatcher:start()\n\tself.watchers[path] = watcher\n\treturn watcher", "CodeBleu_score": 43.09252515212221}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\tlocal buffer = vim.api.nvim_get_current_buf()\n\tlocal lines = vim.api.nvim_buf_get_lines(buffer, 0, -1, false)\n\tlocal hunks, err = self.git:live_hunks(lines)\n\tif err then return nil, err end\n\tlocal signs = {}\n\tlocal priority = 0\n\tfor _, hunk in ipairs(hunks) do\n\t\tfor _, line in ipairs(hunk.lines) do\n\t\t\tlocal sign = {\n\t\t\t\tid = line.id,\n\t\t\t\tname = 'GitSigns'..line.type:sub(1,1):upper()..line.type:sub(2),\n\t\t\t\tpriority = priority,\n\t\t\t\tline = line.line,\n\t\t\t\tbuffer = buffer,\n\t\t\t}\n\t\t\ttable.insert(signs, sign)\n\t\tend\n\t\tpriority = priority + 1\n\tend\n\tself.signs = signs\n\tself.git.signs = signs\n\tvim.fn.sign_define('GitSignsAdd', {text = '+', texthl = 'GitSignsAdd'})\n\tvim.fn.sign_define('GitSignsChange', {text = '~', texthl = 'GitSignsChange'})\n\tvim.fn.sign_define('GitSignsDelete', {text = '-', texthl = 'GitSignsDelete'})\n\tvim.fn.sign_define('GitSignsUntracked', {text = '?', texthl = 'GitSignsUntracked'})\n\tvim.fn.sign_define('GitSignsChangeDelete', {text = '~-', texthl = 'GitSignsChangeDelete'})\n\tvim.fn.sign_place(0, 'GitSigns', 'GitSigns', buffer, {lnum = 1, priority = priority})\n\treturn hunks", "CodeBleu_score": 45.243272989254}, {"code": "function GitBuffer:live_hunks()\tlocal buffer = self.buffer\n\tlocal signs = buffer.signs\n\n\tlocal git = self.git\n\tlocal lines = buffer.lines\n\tlocal hunks, err = git.live_hunks(lines)\n\tif err then return err end\n\n\tsigns.clear{group = 'gitsigns_hunk'}\n\tfor _, hunk in ipairs(hunks) do\n\t\tlocal lnum = hunk.start\n\t\tlocal hunk_type = hunk.type\n\t\tlocal sign_type = hunk_type == 'add' and 'GitSignsAdd' or hunk_type == 'del' and 'GitSignsDelete' or 'GitSignsChange'\n\t\tsigns.place(lnum, 'gitsigns_hunk', sign_type, {priority = 10})\n\t\tfor i = 1, hunk.lines do\n\t\t\tlnum = lnum + 1\n\t\t\tsigns.place(lnum, 'gitsigns_hunk', hunk_type, {priority = 10})\n\t\tend\n\tend\n\n\treturn hunks", "CodeBleu_score": 40.77014655210192}, {"code": "function GitBuffer:live_hunks()\tlocal buf = self.buf\n\tlocal lines = vim.api.nvim_buf_get_lines(buf, 0, -1, false)\n\tlocal hunks = self.git:live_hunks(lines)\n\tif not hunks then\n\t\treturn hunks\n\tend\n\n\tlocal signs = {}\n\tfor _, hunk in ipairs(hunks) do\n\t\tfor _, line in ipairs(hunk.lines) do\n\t\t\tlocal sign_id = self:sign_id(line.index)\n\t\t\tlocal sign_name = self:sign_name(line.type)\n\t\t\tlocal sign_priority = self:sign_priority(line.type)\n\t\t\tsigns[sign_id] = {\n\t\t\t\tname = sign_name,\n\t\t\t\tpriority = sign_priority\n\t\t\t}\n\t\tend\n\tend\n\tvim.fn.sign_define(self.sign_group, {\n\t\ttexthl = self.sign_group,\n\t\ttext = self.sign_group,\n\t\tnumhl = self.sign_group\n\t})\n\tvim.fn.sign_set(self.sign_group, signs)\n\treturn hunks", "CodeBleu_score": 46.895838383018265}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\tlocal tmp_file = os.tmpname()\n\tlocal f = io.open(tmp_file, \"w\")\n\tif not f then\n\t\treturn nil, \"Error creating temporary file\"\n\tend\n\tf:write(patch)\n\tf:close()\n\tlocal result, err = self:stage_hunk(tmp_file)\n\tos.remove(tmp_file)\n\treturn result, err", "CodeBleu_score": 45.076191398656164}, {"code": "function GitObject:stage_hunk_from_patch(patch)\tlocal temp_file = os.tmpname()\n\tlocal file = io.open(temp_file, \"w\")\n\tif not file then\n\t\treturn nil, \"Could not create temporary file\"\n\tend\n\tfile:write(patch)\n\tfile:close()\n\tlocal _, err = self:stage_hunk(temp_file)\n\tos.remove(temp_file)\n\treturn _, err", "CodeBleu_score": 45.29313180211517}, {"code": "function GitObject:stage_hunk_from_patch(patch)\tlocal tmp_file = os.tmpname()\n\tlocal file, err = io.open(tmp_file, \"w\")\n\tif not file then\n\t\treturn nil, err\n\tend\n\tfile:write(patch)\n\tfile:close()\n\tlocal result, err = self:stage_hunk(tmp_file)\n\tos.remove(tmp_file)\n\treturn result, err", "CodeBleu_score": 46.57761907636897}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier)\tOAuthRequest request = new OAuthRequest(Verb.POST, accessTokenUrl);\n\trequest.addBodyParameter(OAuthConstants.CLIENT_ID, clientId);\n\trequest.addBodyParameter(OAuthConstants.CLIENT_SECRET, clientSecret);\n\trequest.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n\trequest.addBodyParameter(OAuthConstants.REDIRECT_URI, callback);\n\trequest.addBodyParameter(OAuthConstants.GRANT_TYPE, OAuthConstants.AUTHORIZATION_CODE);\n\tResponse response = request.send();\n\treturn accessTokenExtractor.extract(response.getBody());\n}", "CodeBleu_score": 47.79823745936264}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier)\tOAuthRequest request = new OAuthRequest(Verb.POST, service.getAccessTokenEndpoint());\n\trequest.addBodyParameter(OAuthConstants.CLIENT_ID, service.getClientId());\n\trequest.addBodyParameter(OAuthConstants.CLIENT_SECRET, service.getClientSecret());\n\trequest.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n\trequest.addBodyParameter(OAuthConstants.REDIRECT_URI, service.getCallback());\n\trequest.addBodyParameter(OAuthConstants.GRANT_TYPE, OAuthConstants.AUTHORIZATION_CODE);\n\trequest.addHeader(OAuthConstants.ACCEPT, OAuthConstants.APPLICATION_JSON);\n\tResponse response = request.send();\n\treturn service.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 53.06272391331663}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier)\tOAuthRequest request = new OAuthRequest(Verb.POST, accessTokenEndpoint);\n\tservice.signRequest(accessTokenRequestToken, request);\n\trequest.addBodyParameter(OAuthConstants.CLIENT_ID, clientId);\n\trequest.addBodyParameter(OAuthConstants.CLIENT_SECRET, clientSecret);\n\trequest.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n\trequest.addBodyParameter(OAuthConstants.REDIRECT_URI, redirectUri);\n\tResponse response = request.send();\n\treturn service.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 54.041023844453015}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host)\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\tcredsProvider.setCredentials(new AuthScope(host), new UsernamePasswordCredentials(username, password));\n\tcontext.setCredentialsProvider(credsProvider);\n\tcontext.setAuthCache(new BasicAuthCache());\n\tcontext.getAuthCache().put(host, new BasicScheme());\n\tlog.debug(\"Added host {} to auth cache\", host);\n}", "CodeBleu_score": 50.31158566849068}, {"code": "public void configureContext(HttpClientContext context, HttpHost host)\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\tcredsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()),\n\t\t\tnew UsernamePasswordCredentials(\"admin\", \"\"));\n\tcontext.setCredentialsProvider(credsProvider);\n\tcontext.setAuthCache(new BasicAuthCache());\n\tBasicScheme basicAuth = new BasicScheme();\n\tcontext.getAuthCache().put(host, basicAuth);\n\tlog.info(\"Added host {} to authentication cache\", host.getHostName());\n}", "CodeBleu_score": 45.98936286208119}, {"code": "public void configureContext(HttpClientContext context, HttpHost host)\tCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n\tcredentialsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), new UsernamePasswordCredentials(username, password));\n\n\tAuthCache authCache = new BasicAuthCache();\n\tauthCache.put(host, new BasicScheme());\n\n\tcontext.setCredentialsProvider(credentialsProvider);\n\tcontext.setAuthCache(authCache);\n\tlog.info(\"Added host {} to auth cache\", host);\n}", "CodeBleu_score": 72.25104601149012}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size)\tJenkins jenkins = Jenkins.get();\n\tAvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n\tif (cache == null) {\n\t\tthrow new IllegalStateException(\"No AvatarCache found\");\n\t}\n\tString key = cache.generateKey(source);\n\tcache.seed(source);\n\ttry {\n\t\treturn jenkins.getRootUrl() + \"avatars/\" + URLEncoder.encode(key, \"UTF-8\") + \"/\" + size;\n\t} catch (UnsupportedEncodingException e) {\n\t\tthrow new IllegalStateException(\"UTF-8 encoding is not supported\", e);\n\t}\n}\n", "CodeBleu_score": 46.24814404991374}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size)\tJenkins jenkins = Jenkins.get();\n\tAvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n\tif (cache == null) {\n\t\tthrow new IllegalStateException(\"No AvatarCache extension found\");\n\t}\n\tString key = cache.seed(source);\n\tString encodedKey;\n\ttry {\n\t\tencodedKey = URLEncoder.encode(key, \"UTF-8\");\n\t} catch (UnsupportedEncodingException e) {\n\t\tthrow new IllegalStateException(\"UTF-8 encoding is unsupported\", e);\n\t}\n\treturn jenkins.getRootUrl() + \"avatar/\" + encodedKey + \"/\" + size;\n}\n", "CodeBleu_score": 49.25000034549779}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size)\tJenkins instance = Jenkins.getInstance();\n\tAvatarCache cache = instance.getExtensionList(AvatarCache.class).get(0);\n\tif (cache == null) {\n\t\tthrow new IllegalStateException(\"No AvatarCache extension found\");\n\t}\n\tString key = cache.seed(source);\n\ttry {\n\t\treturn instance.getRootUrl() + \"avatar/\" + URLEncoder.encode(key, \"UTF-8\") + \"/\" + size;\n\t} catch (UnsupportedEncodingException e) {\n\t\tthrow new IllegalStateException(\"UTF-8 encoding is unsupported\", e);\n\t}\n}", "CodeBleu_score": 46.27658934948713}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified)\tthis.source = source;\n\tthis.image = image;\n\tthis.lastModified = lastModified;\n\tif (this.lastModified < 0)\n\t\tthis.lastModified = System.currentTimeMillis();\n\tif (image.getWidth() > 128 || image.getHeight() > 128)\n\t\tthis.image = ImageUtils.scaleImage(image, 128, 128);\n}\n", "CodeBleu_score": 46.48952627244849}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified)\tthis.source = source;\n\tthis.image = image;\n\tthis.lastModified = lastModified;\n\tthis.width = image.getWidth();\n\tthis.height = image.getHeight();\n\tif (this.width > 128 || this.height > 128) {\n\t\tthis.image = scale(image, 128, 128);\n\t\tthis.width = 128;\n\t\tthis.height = 128;\n\t}\n\tif (this.lastModified < 0) {\n\t\tthis.lastModified = System.currentTimeMillis();\n\t}\n}\n", "CodeBleu_score": 43.490909954174384}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified)\tthis.source = source;\n\tthis.image = image;\n\tif (image.getWidth() > 128 || image.getHeight() > 128) {\n\t\tthis.image = ImageUtils.resizeImage(image, 128, 128);\n\t}\n\tif (lastModified < 0) {\n\t\tlastModified = System.currentTimeMillis();\n\t}\n\tthis.lastModified = lastModified;\n}\n", "CodeBleu_score": 51.95505716736649}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending()\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tcacheEntry = future.get();\n\t\t\tif (cacheEntry!= null) {\n\t\t\t\timage = cacheEntry.getImage();\n\t\t\t\tlastModified = cacheEntry.getLastModified();\n\t\t\t}\n\t\t\tfuture = null;\n\t\t} catch (InterruptedException e) {\n\t\t\tfuture = null;\n\t\t} catch (ExecutionException e) {\n\t\t\tfuture = null;\n\t\t}\n\t}\n\treturn future!= null;\n}", "CodeBleu_score": 45.772645230391895}, {"code": "private synchronized boolean pending()\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tentry = future.get();\n\t\t\tfuture = null;\n\t\t\tentry.update(image, lastModified);\n\t\t} catch (InterruptedException | ExecutionException e) {\n\t\t\tfuture = null;\n\t\t}\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 36.920877426886236}, {"code": "private synchronized boolean pending()\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tentry = future.get();\n\t\t\tif (entry!= null) {\n\t\t\t\tentry.setLastModified(lastModified);\n\t\t\t\tentry.setImage(image);\n\t\t\t}\n\t\t\tfuture = null;\n\t\t} catch (Exception e) {\n\t\t\tfuture = null;\n\t\t}\n\t}\n\treturn true;\n}", "CodeBleu_score": 37.28077150524787}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException\trsp.setContentType(\"image/png\");\n\trsp.setHeader(\"Cache-Control\", \"must-revalidate,no-cache,no-store\");\n\trsp.setHeader(\"Pragma\", \"no-cache\");\n\trsp.setHeader(\"Expires\", \"0\");\n\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\ttry {\n\t\twriteGraph(baos, node);\n\t\trsp.setContentLength(baos.size());\n\t\trsp.getOutputStream().write(baos.toByteArray());\n\t} finally {\n\t\tbaos.close();\n\t}\n}\n", "CodeBleu_score": 36.882054542633504}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException\tif (req.checkIfModified(image.lastModified(), rsp)) {\n\t\treturn;\n\t}\n\trsp.setHeader(\"Cache-Control\", \"must-revalidate,no-cache,no-store\");\n\trsp.setContentType(\"image/png\");\n\tByteArrayOutputStream os = new ByteArrayOutputStream();\n\timage.flush(os);\n\trsp.getOutputStream().write(os.toByteArray());\n}", "CodeBleu_score": 30.254994839870886}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException\trsp.setHeader(\"Cache-Control\", \"must-revalidate,no-cache,no-store\");\n\trsp.setContentType(\"image/png\");\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\tboolean flush = req.getParameter(\"flush\")!= null;\n\tif (flush) {\n\t\t// if the flush parameter is present, then the image will be re-rendered\n\t\t// from scratch.\n\t\t// this is useful for debugging.\n\t\t// TODO: should we add a timestamp to the image to make it easier to\n\t\t// distinguish\n\t\t// between the cached and the re-rendered version?\n\t\timage = null;\n\t}\n\tif (image == null) {\n\t\t// if the image has not been generated yet, do so now\n\t\timage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n\t\tGraphics2D g = (Graphics2D) image.getGraphics();\n\t\tg.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n\t\tdraw(g, width, height, node);\n\t\tg.dispose();\n\t}\n\tImageIO.write(image, \"png\", baos);\n\trsp.getOutputStream().write(baos.toByteArray());\n}", "CodeBleu_score": 39.39163866859347}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator)\tthis.enableCache = enableCache;\n\tthis.teamCacheDuration = teamCacheDuration;\n\tthis.repositoriesCacheDuration = repositoriesCacheDuration;\n\tthis.owner = owner;\n\tthis.projectKey = projectKey;\n\tthis.repositoryName = repositoryName;\n\tthis.authenticator = authenticator;\n\tif (enableCache) {\n\t    this.teamCache = new Cache<String, Team>(teamCacheDuration);\n\t    this.repositoriesCache = new Cache<String, List<Repository>>(repositoriesCacheDuration);\n\t}\n\tif (authenticator!= null) {\n\t    this.authenticator.configure(this);\n\t}\n\tthis.configureClientProxy();\n\tthis.httpClient = HttpClientBuilder.create()\n\t\t.setKeepAliveStrategy(new DefaultConnectionKeepAliveStrategy())\n\t\t.setConnectionManager(new PoolingHttpClientConnectionManager())\n\t\t.setRetryHandler(new DefaultHttpRequestRetryHandler(0, false))\n\t\t.build();\n\tthis.httpContext = HttpClientContext.create();\n}", "CodeBleu_score": 41.83858318556579}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator)\tthis.enableCache = enableCache;\n\tthis.teamCacheDuration = teamCacheDuration;\n\tthis.repositoriesCacheDuration = repositoriesCacheDuration;\n\tthis.owner = owner;\n\tthis.projectKey = projectKey;\n\tthis.repositoryName = repositoryName;\n\tthis.authenticator = authenticator;\n\n\tif (enableCache) {\n\t\t// Create a cache for team and repositories\n\t\tteamCache = new Cache<String, Team>(teamCacheDuration);\n\t\trepositoriesCache = new Cache<String, List<Repository>>(repositoriesCacheDuration);\n\t}\n\n\t// Create a keep-alive strategy\n\tKeepAliveStrategy keepAliveStrategy = new DefaultKeepAliveStrategy();\n\n\t// Create a connection manager with a keep-alive strategy\n\tBasicHttpClientConnectionManager connectionManager = new BasicHttpClientConnectionManager(keepAliveStrategy);\n\n\t// Create a retry handler with a maximum number of retries\n\tHttpRequestRetryHandler retryHandler = new DefaultHttpRequestRetryHandler(3, true, new ArrayList<Class<? extends IOException>>());\n\n\t// Create a request config with a connection timeout and socket timeout\n\tRequestConfig requestConfig = RequestConfig.custom()\n\t\t\t.setConnectTimeout(10000)\n\t\t\t.setSocketTimeout(10000)\n\t\t\t.build();\n\n\t// Create an HTTP client with a connection manager, keep-alive strategy, and retry handler\n\thttpClient = HttpClients.custom()\n\t\t\t.setConnectionManager(connectionManager)\n\t\t\t.setKeepAliveStrategy(keepAliveStrategy)\n\t\t\t.setRetryHandler(retryHandler)\n\t\t\t.setDefaultRequestConfig(requestConfig)\n\t\t\t.build();\n\n\t// Configure the HTTP client and context for authentication\n\tif (authenticator!= null) {\n\t\tauthenticator.configure(httpClient, httpContext);\n\t}\n\n\t// Set client proxy parameters\n\tif (System.getProperty(\"http.proxyHost\")!= null) {\n\t\tHttpHost proxy = new HttpHost(System.getProperty(\"http.proxyHost\"),\n\t\t\t\tInteger.parseInt(System.getProperty(\"http.proxyPort\")));\n\t\tRequestConfig proxyConfig = RequestConfig.custom()\n\t\t\t\t.setProxy(proxy)\n\t\t\t\t.build();\n\t\thttpClient = HttpClients.custom()\n\t\t\t\t.setDefaultRequestConfig(proxyConfig)\n\t\t\t\t.build();\n\t}\n}", "CodeBleu_score": 40.05318097918347}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator)\tthis.enableCache = enableCache;\n\tthis.teamCacheDuration = teamCacheDuration;\n\tthis.repositoriesCacheDuration = repositoriesCacheDuration;\n\tthis.owner = owner;\n\tthis.projectKey = projectKey;\n\tthis.repositoryName = repositoryName;\n\tthis.authenticator = authenticator;\n\tthis.httpClient = buildHttpClient();\n\tthis.context = buildContext();\n}", "CodeBleu_score": 23.45104185042412}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest)\tString sourceBranchName = pullRequest.getFromRef().getDisplayId()\n\tString destinationBranchName = pullRequest.getToRef().getDisplayId()\n\n\tBranch sourceBranch = Branch.findByName(sourceBranchName)\n\tif (sourceBranch) {\n\t\tsourceBranch.setCommitClosure(new CommitClosure(sourceBranch.getRawNode()))\n\t}\n\n\tBranch destinationBranch = Branch.findByName(destinationBranchName)\n\tif (destinationBranch) {\n\t\tdestinationBranch.setCommitClosure(new CommitClosure(destinationBranch.getRawNode()))\n\t}\n}\n", "CodeBleu_score": 43.101755166618446}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest)\tdef sourceBranch = pullRequest.source.branch\n\tdef destinationBranch = pullRequest.destination.branch\n\tdef sourceCommit = sourceBranch.rawNode\n\tdef destinationCommit = destinationBranch.rawNode\n\n\tif (sourceCommit) {\n\t\tsourceBranch.commitClosure = new CommitClosure(sourceCommit)\n\t}\n\n\tif (destinationCommit) {\n\t\tdestinationBranch.commitClosure = new CommitClosure(destinationCommit)\n\t}\n}\n", "CodeBleu_score": 16.618650366374315}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest)\tdef sourceBranch = pullRequest.source.branch\n\tdef sourceCommit = sourceBranch.rawNode\n\tdef destinationBranch = pullRequest.destination.branch\n\tdef destinationCommit = destinationBranch.rawNode\n\n\tif (sourceCommit!= null) {\n\t\tsourceCommit.setCommitClosure(new CommitClosure(sourceCommit, pullRequest.id))\n\t}\n\tif (destinationCommit!= null) {\n\t\tdestinationCommit.setCommitClosure(new CommitClosure(destinationCommit, pullRequest.id))\n\t}\n}\n", "CodeBleu_score": 25.9271309169821}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build)JenkinsLocationConfiguration locationConfig = JenkinsLocationConfiguration.get()\n\tif (locationConfig == null || locationConfig.getUrl() == null) {\n\t\tthrow new IllegalStateException(\"Jenkins location configuration is null or URL is null\")\n\t}\n\treturn DisplayURLProvider.get().getRoot()\n}\n", "CodeBleu_score": 53.5832881275365}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build)JenkinsLocationConfiguration jenkinsLocationConfiguration = JenkinsLocationConfiguration.get()\n\tString rootURL = jenkinsLocationConfiguration.getUrl()\n\tif (rootURL == null) {\n\t\tthrow new IllegalStateException(\"Jenkins root URL is null\")\n\t}\n\treturn DisplayURLProvider.get().getRootDisplayURL(build)\n}\n", "CodeBleu_score": 61.89222863489747}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build)JenkinsLocationConfiguration jenkinsLocationConfiguration = JenkinsLocationConfiguration.get();\n\tString rootURL = jenkinsLocationConfiguration.getUrl();\n\tif (jenkinsLocationConfiguration == null || rootURL == null) {\n\t\tthrow new IllegalStateException(\"Jenkins Location Configuration is null\");\n\t}\n\treturn DisplayURLProvider.get().getRootDisplayURL();\n}\n", "CodeBleu_score": 50.92521964408305}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) \tURI uri = URI.create(url)\n\tif (uri.getScheme() == null || uri.getHost() == null) {\n\t\tthrow new IllegalStateException(\"Invalid URL: \" + url)\n\t}\n\tif (uri.getHost().equals(\"localhost\") || uri.getHost().equals(\"unconfigured-jenkins-location\")) {\n\t\tthrow new IllegalStateException(\"Invalid URL: \" + url)\n\t}\n\tif (bitbucket instanceof BitbucketServerApi && uri.getHost().contains(\".\")) {\n\t\tthrow new IllegalStateException(\"Invalid URL: \" + url)\n\t}\n\treturn url\n}\n", "CodeBleu_score": 43.63036438640982}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) \ttry {\n\t\tURI uri = new URI(url);\n\t\tif (uri.getHost() == null) {\n\t\t\tthrow new IllegalStateException(\"Jenkins URL is malformed\");\n\t\t}\n\t\tif (uri.getHost().equalsIgnoreCase(\"localhost\")) {\n\t\t\tthrow new IllegalStateException(\"Jenkins URL cannot be 'localhost'\");\n\t\t}\n\t\tif (uri.getHost().equalsIgnoreCase(\"unconfigured-jenkins-location\")) {\n\t\t\tthrow new IllegalStateException(\"Jenkins URL cannot be 'unconfigured-jenkins-location'\");\n\t\t}\n\t\tif (bitbucket instanceof BitbucketServerApi &&!uri.getHost().contains(\".\")) {\n\t\t\tthrow new IllegalStateException(\"Jenkins URL must be fully qualified\");\n\t\t}\n\t\treturn url;\n\t} catch (URISyntaxException e) {\n\t\tthrow new IllegalStateException(\"Jenkins URL is malformed\", e);\n\t}\n}\n", "CodeBleu_score": 56.58251011360872}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) \tif (url == null) {\n\t\tthrow new IllegalStateException(\"Jenkins URL must be configured\");\n\t}\n\ttry {\n\t\tURI uri = new URI(url);\n\t\tif (uri.getHost() == null || uri.getHost().equals(\"localhost\") || uri.getHost().equals(\"unconfigured-jenkins-location\")) {\n\t\t\tthrow new IllegalStateException(\"Jenkins URL must be fully qualified\");\n\t\t}\n\t\tif (bitbucket.isCloud() &&!uri.getHost().contains(\".\")) {\n\t\t\tthrow new IllegalStateException(\"Jenkins URL must be fully qualified\");\n\t\t}\n\t} catch (URISyntaxException e) {\n\t\tthrow new IllegalStateException(\"Jenkins URL is malformed\", e);\n\t}\n\treturn url;\n}\n", "CodeBleu_score": 52.66346369046553}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedExceptionBitbucketBuildStatusNotificationContext context = new BitbucketBuildStatusNotificationContext(source, build, listener);\n\tif (context.isNotificationsDisabled()) {\n\t\tlistener.getLogger().println(\"Notifications are disabled for this build.\");\n\t\treturn;\n\t}\n\tSCMRevision revision = build.getAction(SCMRevisionAction.class).getRevision();\n\tString revisionHash = revision.getHash();\n\tboolean isPR = revision instanceof PullRequestSCMRevision;\n\tString buildKey = isPR? \"PR\" : \"branch\";\n\tBitbucketClient client = context.getBitbucketClient();\n\tBuildStatusNotification notification = new BuildStatusNotification(\n\t\t\tcontext.getBuildKey(buildKey),\n\t\t\tcontext.getBuildName(),\n\t\t\tcontext.getBuildUrl(),\n\t\t\tcontext.getBuildResult(),\n\t\t\tcontext.getBuildDescription(),\n\t\t\trevisionHash\n\t);\n\tlistener.getLogger().println(\"Sending \" + (isPR? \"PR\" : \"branch\") + \" build status notification.\");\n\tclient.sendBuildStatusNotification(notification);\n}", "CodeBleu_score": 32.44601784355534}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedExceptionBitbucketBuildStatusNotificationContext context = new BitbucketBuildStatusNotificationContext(source, build, listener);\n\tif (context.isNotificationsDisabled()) {\n\t\treturn;\n\t}\n\n\tSCMRevision revision = build.getAction(SCMRevisionAction.class).getRevision();\n\tString revisionHash = revision.getHash().substring(0, 7);\n\tboolean isBranch = revision.getBranches().size() == 1 && revision.getBranches().get(0).getName().startsWith(\"refs/heads/\");\n\tString buildKey = isBranch? revision.getBranches().get(0).getName() : revisionHash;\n\n\tlistener.getLogger().println(\"Notifying Bitbucket for build \" + build.getNumber() + \" (\" + revisionHash + \") of \" + source.getRepoOwner() + \"/\" + source.getRepository() + \"#\" + buildKey);\n\n\tBitbucketClient client = new BitbucketClient(source.getCredentialsId(), source.getServerUrl(), listener);\n\tBuildStatusNotification notification = new BuildStatusNotification(source.getRepoOwner(), source.getRepository(), buildKey, revisionHash, build.getNumber(), build.getResult(), build.getAbsoluteUrl(), context.getCommitStatus());\n\tclient.sendBuildStatusNotification(notification);\n}", "CodeBleu_score": 39.633077479139885}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedExceptionBitbucketBuildStatusNotification.DescriptorImpl descriptor = Jenkins.get().getDescriptorByType(BitbucketBuildStatusNotification.DescriptorImpl.class);\n\tif (descriptor.isDisabled()) {\n\t\tlistener.getLogger().println(\"Bitbucket build status notifications are disabled\");\n\t\treturn;\n\t}\n\n\tBitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none())\n\t\t\t.withTraits(source.getTraits());\n\tSCMRevision revision = build.getAction(SCMRevisionAction.class).getRevision();\n\tString revisionHash = null;\n\tif (revision instanceof BitbucketSCMRevision) {\n\t\trevisionHash = ((BitbucketSCMRevision) revision).getHash();\n\t} else {\n\t\tlistener.getLogger().println(\"Unable to determine revision hash\");\n\t\treturn;\n\t}\n\n\tString buildKey = null;\n\tif (revision instanceof BitbucketSCMRevision) {\n\t\tBitbucketSCMRevision bitbucketRevision = (BitbucketSCMRevision) revision;\n\t\tString revisionType = bitbucketRevision.getRevisionType();\n\t\tif (revisionType.equals(\"branch\")) {\n\t\t\tbuildKey = bitbucketRevision.getBranch();\n\t\t} else if (revisionType.equals(\"pull-request\")) {\n\t\t\tbuildKey = bitbucketRevision.getPullRequestNumber();\n\t\t} else {\n\t\t\tlistener.getLogger().println(\"Unsupported revision type: \" + revisionType);\n\t\t\treturn;\n\t\t}\n\t} else {\n\t\tlistener.getLogger().println(\"Unable to determine build key\");\n\t\treturn;\n\t}\n\n\tBitbucketClient bitbucketClient = context.withClient(build, listener);\n\tif (bitbucketClient == null) {\n\t\tlistener.getLogger().println(\"Unable to create Bitbucket client\");\n\t\treturn;\n\t}\n\n\tBitbucketBuildStatusNotification notification = new BitbucketBuildStatusNotification(\n\t\t\tsource.getRepoOwner(),\n\t\t\tsource.getRepository(),\n\t\t\tbuildKey,\n\t\t\trevisionHash,\n\t\t\tbuild.getDisplayName(),\n\t\t\tbuild.getUrl(),\n\t\t\tbuild.getResult()\n\t);\n\n\tlistener.getLogger().println(\"Sending Bitbucket build status notification for \" + revision.getHash());\n\tbitbucketClient.sendBuildStatusNotification(notification);\n}", "CodeBleu_score": 42.826945701726885}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR)    String jobName = build.getParent().getFullName();", "CodeBleu_score": 20.12740943786953}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR)    if (shareBuildKeyBetweenBranchAndPR) {", "CodeBleu_score": 11.88614802578933}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR)    String jobName = build.getParent().getFullName();", "CodeBleu_score": 20.12740943786953}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException\tif (serverUrl == null) {\n\t\tif (StringUtils.isNotBlank(serverName)) {\n\t\t\tserverUrl = BitbucketServerConfiguration.get().getBaseUrl(serverName);\n\t\t}\n\t\tif (serverUrl == null) {\n\t\t\tLOGGER.log(Level.WARNING, \"Unable to resolve server URL for {0}\", this);\n\t\t}\n\t}\n\tif (traits == null) {\n\t\ttraits = new BitbucketSCMNavigatorRequest.Traits();\n\t}\n\treturn this;\n}", "CodeBleu_score": 21.89163680584489}, {"code": "private Object readResolve() throws ObjectStreamException\tif (this.serverUrl == null) {\n\t\tthis.serverUrl = BitbucketSCMNavigatorRequest.DEFAULT_BITBUCKET_URL;\n\t\tLOGGER.warning(\"serverUrl is null, using default value \" + this.serverUrl);\n\t}\n\tif (this.traits == null) {\n\t\tthis.traits = new BitbucketSCMNavigatorTrait[] { new BitbucketSCMNavigatorTrait.BitbucketSCMNavigatorContextFilterTrait(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null", "CodeBleu_score": 9.930287941506213}, {"code": "private Object readResolve() throws ObjectStreamException\tif (serverUrl == null) {\n\t\tserverUrl = BitbucketEndpointConfiguration.get().getBaseUrl();\n\t\tLOGGER.warning(\"serverUrl not set for \" + this + \" falling back to \" + serverUrl);\n\t}\n\tif (traits == null) {\n\t\ttraits = new BitbucketSCMNavigatorRequest.Traits();\n\t\ttraits.setPullRequestFilter(new BitbucketPullRequestFilter());\n\t}\n\treturn this;\n}", "CodeBleu_score": 14.223787399319859}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch)\tBitbucketRepository repository = getRepository(name);\n\tif (repository == null) {\n\t\treturn;\n\t}\n\tif (isMatch) {\n\t\tlog.info(\"Proposing repository {} for match\", name);\n\t\trepository.setProposed(true);\n\t\tproposed++;\n\t} else {\n\t\tlog.info(\"Ignoring repository {} for match\", name);\n\t\trepository.setProposed(false);\n\t}\n}", "CodeBleu_score": 35.69957569458545}, {"code": "public void record(@NonNull String name, boolean isMatch)\tBitbucketRepository repository = repositoryService.findByName(name);\n\tif (repository == null) {\n\t\treturn;\n\t}\n\tif (isMatch) {\n\t\tlog.info(\"Proposing repository {} for import\", repository.getName());\n\t\tcount++;\n\t} else {\n\t\tlog.info(\"Ignoring repository {} for import\", repository.getName());\n\t}\n}", "CodeBleu_score": 50.52864280651468}, {"code": "public void record(@NonNull String name, boolean isMatch)\tBitbucketRepository repository = getRepository(name);\n\tif (repository!= null) {\n\t\tif (isMatch) {\n\t\t\tlogger.info(\"Proposing repository: {}\", repository);\n\t\t\tcount++;\n\t\t} else {\n\t\t\tlogger.info(\"Ignoring repository: {}\", repository);\n\t\t}\n\t}\n}", "CodeBleu_score": 38.99358169417832}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedExceptionString remote = scm.getRemote();\n\tString branch = rev.getBranch();\n\tString hash = rev.getHash();\n\tList<RefSpec> refSpecs = new ArrayList<>();\n\tif (branch.contains(\"refs/heads/\") &&!git.revParse(hash).startsWith(hash)) {\n\t    listener.getLogger().println(\"Fetching \" + hash + \" from \" + remote);\n\t    refSpecs.add(new RefSpec(\"+\"+hash+\":refs/remotes/origin/\"+branch));\n\t}\n\tif (!refSpecs.isEmpty()) {\n\t    git.fetchFrom(remote, refSpecs, null, listener);\n\t}\n\treturn rev;\n}", "CodeBleu_score": 32.211695271024645}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedExceptionlistener.getLogger().println(\"Decorating revision to build\")\n    String remote = scm.getRemote();\n    String branch = scm.getBranch();\n    String cloneLink = scm.getCloneLink();\n    String hash = rev.getHash();\n    String refSpec = null;\n    String ref = null;\n\n    // If the revision is a branch with a hash, we need to create a refspec for it\n    if (branch.contains(hash)) {\n        listener.getLogger().println(\"Branch contains hash: \" + branch);\n        refSpec = \"+\" + hash + \":\" + \"refs/remotes/origin/\" + branch;\n        ref = \"refs/remotes/origin/\" + branch;\n    }\n\n    // If there is a refspec, we need to fetch the missing commits\n    if (refSpec!= null) {\n        listener.getLogger().println(\"Creating refspec: \" + refSpec);\n        git.fetch(remote, refSpec, null, null);\n    }\n\n    // If the revision is a branch with a hash, we need to create a new revision with the ref\n    if (ref!= null) {\n        listener.getLogger().println(\"Creating revision with ref: \" + ref);\n        rev = new Revision(scm.getBranches(), ref, hash);\n    }\n\n    return rev;\n}\n", "CodeBleu_score": 38.22666574061592}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedExceptionif (rev == null) {\n\t\treturn null;\n\t}\n\tif (marked == null) {\n\t\tmarked = new BranchSCMHead(null, null, null);\n\t}\n\tString ref = rev.getHead();\n\tif (ref == null) {\n\t\treturn null;\n\t}\n\tif (ref.contains(\"refs/heads/\") || ref.contains(\"refs/tags/\")) {\n\t\treturn rev;\n\t}\n\tString remote = scm.getRemote();\n\tif (remote == null) {\n\t\treturn null;\n\t}\n\tString remoteName = \"origin\";\n\tString remoteUrl = remote;\n\tString branchName = ref;\n\tString branchRef = \"refs/heads/\" + ref;\n\tList<RefSpec> refSpecs = new ArrayList<>();\n\tboolean isTag = ref.contains(\"refs/tags/\");\n\tif (isTag) {\n\t\tbranchName = ref.substring(\"refs/tags/\".length());\n\t\tbranchRef = \"refs/tags/\" + branchName;\n\t}\n\tString refSpec = branchRef + \":\" + branchRef;\n\trefSpecs.add(new RefSpec(refSpec));\n\tlistener.getLogger().println(\"Fetching missing commits for branch \" + branchName + \" from \" + remoteUrl);\n\tgit.fetch(remoteName, refSpecs, null, null);\n\treturn new BranchSCMHead(branchName, null, isTag? SCMHeadCategory.Tag : SCMHeadCategory.Branch);\n}\n", "CodeBleu_score": 36.903260972806414}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks()\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n\tfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n\t\tresult.put(entry.getKey(), entry.getValue().get(0));\n\t}\n\treturn result;\n}", "CodeBleu_score": 63.91570578734822}, {"code": "public Map<String, BitbucketHref> getLinks()\tMap<String, BitbucketHref> result = null;\n\tif (links!= null) {\n\t\tresult = new HashMap<String, BitbucketHref>();\n\t\tfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n\t\t\tresult.put(entry.getKey(), entry.getValue().get(0));\n\t\t}\n\t}\n\treturn result;\n}", "CodeBleu_score": 58.024269080565404}, {"code": "public Map<String, BitbucketHref> getLinks()\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> map = new HashMap<String, BitbucketHref>();\n\tfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n\t\tmap.put(entry.getKey(), entry.getValue().get(0));\n\t}\n\treturn map;\n}", "CodeBleu_score": 57.830100373373824}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[])\tconst selectedResources = resourceStates.filter(resource => resource.resourceUri);\n\tif (selectedResources.length === 0) {\n\t\treturn;\n\t}\n\n\tconst resourceUris = selectedResources.map(resource => resource.resourceUri);\n\tconst repositories = this.sourceControl.repositories.filter(repository => resourceUris.some(uri => repository.contains(uri)));\n\tfor (const repository of repositories) {\n\t\tconst filePaths = resourceUris.filter(uri => repository.contains(uri)).map(uri => uri.fsPath);\n\t\ttry {\n\t\t\tawait repository.add(filePaths);\n\t\t} catch (error) {\n\t\t\tthis.log.error(error);\n\t\t\tvscode.window.showErrorMessage(`Failed to add files to repository \"${repository.rootUri.fsPath}\"`);\n\t\t}\n\t}\n}", "CodeBleu_score": 48.9304521681458}, {"code": "public async execute(...resourceStates: SourceControlResourceState[])\tif (resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\tconst resourcesByRepository = groupBy(resourceStates, resource => resource.resourceUri.scheme);\n\n\tfor (const [repositoryScheme, resources] of resourcesByRepository) {\n\t\tconst repository = this.repositories.get(repositoryScheme);\n\t\tif (!repository) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst filePaths = resources.map(resource => resource.resourceUri.fsPath);\n\n\t\ttry {\n\t\t\tawait repository.add(filePaths);\n\t\t} catch (error) {\n\t\t\tthis.logger.error(error);\n\t\t\tvscode.window.showErrorMessage(error.message);\n\t\t}\n\t}\n}", "CodeBleu_score": 49.65217361821161}, {"code": "public async execute(...resourceStates: SourceControlResourceState[])\tconst selectedResourceStates = resourceStates.length > 0? resourceStates : this.sourceControl.selected;\n\tif (selectedResourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\tconst resourcePaths = selectedResourceStates.map(resourceState => resourceState.resourceUri.fsPath);\n\tconst repositories = await this.getRepositories(resourcePaths);\n\tconst repositoryPaths = repositories.map(repository => repository.rootUri.fsPath);\n\n\tconst command = this.getCommand();\n\tconst addCommand = await this.getAddCommand(command);\n\tconst addArgs = await this.getAddArgs(addCommand, repositoryPaths);\n\n\tfor (const repository of repositories) {\n\t\tconst repositoryPath = repository.rootUri.fsPath;\n\t\tconst files = resourcePaths.filter(resourcePath => resourcePath.startsWith(repositoryPath));\n\t\tconst args = await this.getArgs(addArgs, files);\n\t\tconst result = await this.executeCommand(addCommand, args);\n\t\tif (result.error) {\n\t\t\tthis.log(result.error);\n\t\t\tthis.showErrorMessage(result.error);\n\t\t}\n\t}\n}\n", "CodeBleu_score": 39.55872886677858}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates\tif (this.resourceStates.length === 0 ||!Uri.isUri(this.resourceStates[0].resource)) {\n\t\tconst resource = await this.getSCMResource();\n\t\tthis.resourceStates = [resource];\n\t}\n\treturn this.resourceStates.filter(resource => Uri.isUri(resource.resource));\n}\n", "CodeBleu_score": 28.38150291261381}, {"code": "protected async getResourceStates\tif (this.resourceStates.length === 0 ||!(this.resourceStates[0].resource instanceof Uri)) {\n\t\tconst resource = await this.getSingleResource();\n\t\tif (resource) {\n\t\t\tthis.resourceStates = [new ResourceState(resource, SourceControlResourceState.None)];\n\t\t}\n\t}\n\treturn this.resourceStates.filter(resourceState => resourceState.resource instanceof Uri);\n}\n", "CodeBleu_score": 34.50348263760116}, {"code": "protected async getResourceStates\tif (this.resourceStates.length === 0 ||!Uri.isUri(this.resourceStates[0].resource)) {\n\t\tawait this.updateResourceStates();\n\t}\n\n\treturn this.resourceStates.filter(r => r instanceof Resource);\n}", "CodeBleu_score": 12.519270299029309}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>\tif (!uri) {\n\t\tconst activeEditor = window.activeTextEditor;\n\t\tif (activeEditor) {\n\t\t\turi = activeEditor.document.uri;\n\t\t}\n\t}\n\tif (uri && uri.scheme ==='svn') {\n\t\turi = Uri.file(uri.path);\n\t}\n\tconst scmManager = await this.getSCMManager(uri);\n\tif (scmManager) {\n\t\tconst repository = await scmManager.getRepository(uri);\n\t\tif (repository) {\n\t\t\treturn repository.rootUri;\n\t\t}\n\t}\n\treturn undefined;\n}\n", "CodeBleu_score": 31.866837736699004}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>\tif (!uri) {\n\t  const editor = window.activeTextEditor;\n\t  if (!editor) {\n\t\treturn undefined;\n\t  }\n\t  uri = editor.document.uri;\n\t}\n\tif (uri.scheme === \"svn\") {\n\t  uri = Uri.file(uri.path);\n\t}\n\tconst manager = await this.getManager(uri);\n\tif (!manager) {\n\t  return undefined;\n\t}\n\tconst repository = await manager.getRepository(uri);\n\tif (!repository) {\n\t  return undefined;\n\t}\n\tconst resource = await repository.getResourceFromPath(uri.fsPath);\n\treturn resource;\n  }\n}", "CodeBleu_score": 48.244765766319006}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>\tif (!uri) {\n\t\tconst editor = window.activeTextEditor;\n\t\tif (editor) {\n\t\t\turi = editor.document.uri;\n\t\t}\n\t}\n\tif (!uri) {\n\t\treturn;\n\t}\n\n\tif (uri.scheme ==='svn') {\n\t\turi = uri.with({ scheme: 'file' });\n\t}\n\n\tconst scm = await this.getSCM(uri);\n\tif (!scm) {\n\t\treturn;\n\t}\n\n\tconst repository = await scm.getRepository(uri);\n\tif (!repository) {\n\t\treturn;\n\t}\n\n\treturn repository.root;\n}\n", "CodeBleu_score": 31.530320241017527}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange)\tconst remoteRepo = await this.getRemoteRepo(element.path);\n\tconst remotePath = await this.getRemotePath(element.path);\n\tconst remoteRevision = await this.getRemoteRevision(element.path);\n\tconst localPath = await this.getLocalPath(element.path);\n\tconst localRevision = await this.getLocalRevision(element.path);\n\tconst diffCmd = this.getDiffCmd(remoteRepo, remotePath, remoteRevision, localPath, localRevision);\n\tthis.openCmd(diffCmd);\n}\n", "CodeBleu_score": 32.671745236765155}, {"code": " public async openDiffCmd(element: ISvnPathChange)\tconst remoteRepo = await this.getRemoteRepo(element);\n\tif (!remoteRepo) {\n\t\treturn;\n\t}\n\n\tconst oldPath = element.path;\n\tconst oldRevision = element.revision;\n\tconst newPath = element.newPath;\n\tconst newRevision = element.newRevision;\n\tconst isModified = element.type === SvnPathChangeType.Modified;\n\n\tlet url: string;\n\tif (isModified) {\n\t\turl = await this.getDiffUrl(remoteRepo, oldPath, oldRevision, newPath, newRevision);\n\t} else {\n\t\turl = await this.getRemoteUrl(remoteRepo, newPath, newRevision);\n\t}\n\n\tif (!url) {\n\t\treturn;\n\t}\n\n\tawait this.openUrl(url);\n}\n", "CodeBleu_score": 33.31462397364018}, {"code": " public async openDiffCmd(element: ISvnPathChange)\tconst remoteRepo = await this.getRemoteRepo(element);\n\tconst remoteFile = await this.getRemoteFile(element, remoteRepo);\n\tif (element.changeType === ChangeType.MODIFIED) {\n\t\tconst oldFile = await this.getRemoteFile(element, remoteRepo, element.oldRevision);\n\t\tthis.openDiff(oldFile, remoteFile);\n\t} else {\n\t\tthis.openDiff(remoteFile, remoteFile);\n\t}\n}\n", "CodeBleu_score": 37.380784624161365}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem)\tif (!clipboard.writeText) {\n\t\tvscode.window.showErrorMessage('Clipboard is not supported.');\n\t\treturn;\n\t}\n\n\tif (item.type === 'commit') {\n\t\tconst commit = item.commit;\n\t\tif (what ==='revision') {\n\t\t\tclipboard.writeText(commit.revision);\n\t\t} else if (what ==='message') {\n\t\t\tclipboard.writeText(commit.message);\n\t\t}\n\t}\n}\n", "CodeBleu_score": 32.864668969303644}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem)\tif (!clipboard.writeText) {\n\t\twindow.showErrorMessage('Clipboard not supported');\n\t\treturn;\n\t}\n\n\tif (item.type === LogItemType.Commit) {\n\t\tconst commit = item.commit;\n\t\tif (what ==='revision') {\n\t\t\tclipboard.writeText(commit.sha);\n\t\t} else if (what ==='message') {\n\t\t\tclipboard.writeText(commit.message);\n\t\t}\n\t}\n}\n", "CodeBleu_score": 35.456314164037366}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem)\tif (!clipboard.writeText) {\n\t\tvscode.window.showErrorMessage(\"Clipboard is not supported.\");\n\t\treturn;\n\t}\n\n\tif (item.type === LogItemType.Commit) {\n\t\tconst commit = item.commit;\n\t\tif (what === \"revision\") {\n\t\t\tclipboard.writeText(commit.revision);\n\t\t} else if (what === \"message\") {\n\t\t\tclipboard.writeText(commit.message);\n\t\t} else {\n\t\t\tclipboard.writeText(commit.message + \"\\n\" + commit.revision);\n\t\t}\n\t}\n}\n", "CodeBleu_score": 35.39055814131144}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException\t// Iterate through the factories to find the most suitable one\n\tGiteaConnectionFactory factory = null;\n\tfor (GiteaConnectionFactory f : factories) {\n\t\tif (f.canOpen(this)) {\n\t\t\tfactory = f;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// If no suitable factory is found, throw an IOException\n\tif (factory == null) {\n\t\tthrow new IOException(\"No suitable GiteaConnectionFactory found\");\n\t}\n\n\t// Open the connection using the factory\n\treturn factory.open(this);\n}", "CodeBleu_score": 22.016586627602646}, {"code": "public GiteaConnection open() throws IOException, InterruptedException\t// Iterate through the factories\n\tfor (GiteaConnectionFactory factory : factories) {\n\t\t// Check if the factory can open the connection\n\t\tif (factory.canOpen(url)) {\n\t\t\t// Open the connection using the factory\n\t\t\treturn factory.open(url);\n\t\t}\n\t}\n\t// If no suitable factory is found, throw an IOException\n\tthrow new IOException(\"No suitable factory found to open the connection.\");\n}", "CodeBleu_score": 8.28424281398858}, {"code": "public GiteaConnection open() throws IOException, InterruptedException\tfor (GiteaConnectionFactory factory : factories) {\n\t\tif (factory.canOpen(this)) {\n\t\t\treturn factory.open(this);\n\t\t}\n\t}\n\tthrow new IOException(\"No suitable GiteaConnectionFactory found\");\n}", "CodeBleu_score": 11.860430780045478}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader()\tif (jenkinsInstance()!= null) {\n\t\treturn new Gitea(jenkinsInstance().getPluginManager().uberClassLoader);\n\t}\n\treturn new Gitea(this.getClass().getClassLoader());\n}", "CodeBleu_score": 25.037954301926185}, {"code": "public Gitea jenkinsPluginClassLoader()\tif (Jenkins.getInstance()!= null) {\n\t\tthis.setClassLoader(Jenkins.getInstance().getPluginManager().uberClassLoader);\n\t} else {\n\t\tthis.setClassLoader(this.getClass().getClassLoader());\n\t}\n\treturn this;\n}", "CodeBleu_score": 29.57759600187866}, {"code": "public Gitea jenkinsPluginClassLoader()\tif (Jenkins.get()!= null) {\n\t\tthis.classLoader = Jenkins.get().pluginManager.uberClassLoader;\n\t} else {\n\t\tthis.classLoader = Gitea.class.getClassLoader();\n\t}\n\treturn this;\n}", "CodeBleu_score": 42.13356540243826}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) \tthis.displayName = Util.fixEmptyAndTrim(displayName);\n\tthis.serverUrl = Util.fixEmptyAndTrim(serverUrl);\n\tthis.manageHooks = manageHooks;\n\tthis.credentialsId = Util.fixEmptyAndTrim(credentialsId);\n\tthis.aliasUrl = Util.fixEmptyAndTrim(aliasUrl);\n\tthis.aliasUrl = this.aliasUrl == null? null : this.aliasUrl.trim();\n\tthis.aliasUrl = this.aliasUrl == null || this.aliasUrl.isEmpty()? null : this.aliasUrl;\n\tthis.aliasUrl = this.aliasUrl == null? null : this.aliasUrl.endsWith(\"/\")? this.aliasUrl : this.aliasUrl + \"/\";\n\tthis.displayName = this.displayName == null? getDisplayName() : this.displayName;\n}\n", "CodeBleu_score": 39.491983444270495}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) \tthis.displayName = StringUtils.defaultIfBlank(displayName, serverUrl);\n\tthis.serverUrl = normalizeUrl(serverUrl);\n\tthis.manageHooks = manageHooks;\n\tthis.credentialsId = credentialsId;\n\tthis.aliasUrl = StringUtils.defaultIfBlank(aliasUrl, serverUrl);\n}\n", "CodeBleu_score": 31.956578923167182}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) \tthis.displayName = StringUtils.defaultString(displayName);\n\tthis.serverUrl = normalize(serverUrl);\n\tthis.manageHooks = manageHooks;\n\tif (manageHooks) {\n\t\tthis.credentialsId = credentialsId;\n\t}\n\tthis.aliasUrl = StringUtils.trimToNull(aliasUrl);\n}\n", "CodeBleu_score": 34.37030543197193}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl)\tListBoxModel result = new ListBoxModel();\n\tif (serverUrl.isEmpty()) {\n\t\treturn result;\n\t}\n\tserverUrl = normalizeServerUrl(serverUrl);\n\tif (!isManageable(serverUrl)) {\n\t\treturn result;\n\t}\n\tList<GiteaAuth> auths = GiteaAuth.getAuthsByServerUrl(serverUrl);\n\tif (auths.isEmpty()) {\n\t\treturn result;\n\t}\n\tfor (GiteaAuth auth : auths) {\n\t\tresult.add(auth.getCredentialsId());\n\t}\n\treturn result;\n}", "CodeBleu_score": 37.61895336542771}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl)\tListBoxModel items = new ListBoxModel();\n\tif (serverUrl == null) {\n\t\treturn items;\n\t}\n\tserverUrl = serverUrl.trim();\n\tif (serverUrl.length() == 0) {\n\t\treturn items;\n\t}\n\tserverUrl = normalizeServerUrl(serverUrl);\n\tif (serverUrl == null) {\n\t\treturn items;\n\t}\n\n\t// check if the user has administrative permissions\n\tif (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n\t\treturn items;\n\t}\n\n\t// include matching credentials based on the server URL requirements and authentication tokens for GiteaAuth\n\tfor (Credentials credentials : CredentialsProvider.lookupCredentials(StandardUsernamePasswordCredentials.class, Jenkins.get(), ACL.SYSTEM, Collections.emptyList())) {\n\t\tif (credentials instanceof UsernamePasswordCredentials) {\n\t\t\tif (serverUrl.startsWith(\"https://\") || serverUrl.startsWith(\"http://\")) {\n\t\t\t\tif (credentials.getId().startsWith(\"gitea-\")) {\n\t\t\t\t\titems.add(credentials.getId());\n\t\t\t\t}\n\t\t\t} else if (serverUrl.startsWith(\"ssh://\")) {\n\t\t\t\tif (credentials.getId().startsWith(\"gitea-ssh-\")) {\n\t\t\t\t\titems.add(credentials.getId());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn items;\n}", "CodeBleu_score": 35.462323769789016}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl)\tList<StandardUsernamePasswordCredentials> credentials = new ArrayList<>();\n\tList<StandardUsernamePasswordCredentials> credentialsForServer = new ArrayList<>();\n\tListBoxModel result = new ListBoxModel();\n\tString normalizedServerUrl = normalizeServerUrl(serverUrl);\n\n\t// Check if the user has administrative permissions\n\tif (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n\t\treturn result;\n\t}\n\n\t// Get all credentials of type StandardUsernamePasswordCredentials\n\tCredentialsProvider.lookupCredentials(StandardUsernamePasswordCredentials.class, Jenkins.get(), ACL.SYSTEM, Collections.emptyList()).forEach(credential -> {\n\t\tif (credential instanceof StandardUsernamePasswordCredentials) {\n\t\t\tcredentials.add((StandardUsernamePasswordCredentials) credential);\n\t\t}\n\t});\n\n\t// Filter credentials based on server URL requirements and GiteaAuth tokens\n\tfor (StandardUsernamePasswordCredentials credential : credentials) {\n\t\tif (credential.getId().startsWith(\"gitea-token-\")) {\n\t\t\tString credentialServerUrl = credential.getId().substring(\"gitea-token-\".length());\n\t\t\tif (credentialServerUrl.equals(normalizedServerUrl)) {\n\t\t\t\tcredentialsForServer.add(credential);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Add matching credentials to the result list\n\tfor (StandardUsernamePasswordCredentials credential : credentialsForServer) {\n\t\tresult.add(credential.getId(), credential.getId());\n\t}\n\n\treturn result;\n}", "CodeBleu_score": 37.76060136857553}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl)\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\tURI normalizedUri = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), normalizePort(uri), uri.getPath(), uri.getQuery(), uri.getFragment());\n\t\treturn normalizedUri.toString().replaceAll(\"/$\", \"\");\n\t} catch (URISyntaxException e) {\n\t\tLOGGER.log(Level.WARNING, \"Invalid server URL: \" + serverUrl, e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 25.881560774539242}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl)\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\tString scheme = uri.getScheme().toLowerCase();\n\t\tString host = uri.getHost().toLowerCase();\n\t\tint port = uri.getPort();\n\t\tString path = uri.getPath();\n\t\tString query = uri.getQuery();\n\n\t\tif (port == -1) {\n\t\t\tif (\"http\".equals(scheme)) {\n\t\t\t\tport = 80;\n\t\t\t} else if (\"https\".equals(scheme)) {\n\t\t\t\tport = 443;\n\t\t\t}\n\t\t}\n\n\t\tStringBuilder sb = new StringBuilder();\n\t\tsb.append(scheme).append(\"://\").append(host);\n\t\tif (port!= -1) {\n\t\t\tsb.append(\":\").append(port);\n\t\t}\n\t\tsb.append(path);\n\t\tif (query!= null) {\n\t\t\tsb.append(\"?\").append(query);\n\t\t}\n\n\t\tserverUrl = sb.toString();\n\t} catch (URISyntaxException e) {\n\t\t// ignore\n\t}\n\n\tif (serverUrl.endsWith(\"/\")) {\n\t\tserverUrl = serverUrl.substring(0, serverUrl.length() - 1);\n\t}\n\n\treturn serverUrl;\n}", "CodeBleu_score": 43.30886994823494}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl)\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\tString scheme = uri.getScheme();\n\t\tString host = uri.getHost();\n\t\tint port = uri.getPort();\n\t\tif (port == -1) {\n\t\t\tif (\"http\".equals(scheme)) {\n\t\t\t\tport = 80;\n\t\t\t} else if (\"https\".equals(scheme)) {\n\t\t\t\tport = 443;\n\t\t\t}\n\t\t}\n\t\tString path = uri.getPath();\n\t\tif (path == null) {\n\t\t\tpath = \"\";\n\t\t}\n\t\tString query = uri.getQuery();\n\t\tif (query!= null) {\n\t\t\tquery = \"?\" + query;\n\t\t}\n\t\tString fragment = uri.getFragment();\n\t\tif (fragment!= null) {\n\t\t\tfragment = \"#\" + fragment;\n\t\t}\n\t\treturn scheme + \"://\" + host + \":\" + port + path + query + fragment;\n\t} catch (URISyntaxException e) {\n\t\t// ignore\n\t}\n\treturn serverUrl;\n}", "CodeBleu_score": 37.21262067802318}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems()\tListBoxModel items = new ListBoxModel();\n\tfor (GiteaServer server : GiteaServer.getServers()) {\n\t\tString displayName = server.getDisplayName();\n\t\tif (displayName == null || displayName.isEmpty()) {\n\t\t\titems.add(server.getUrl(), server.getUrl());\n\t\t} else {\n\t\t\titems.add(server.getDisplayName(), server.getUrl());\n\t\t}\n\t}\n\treturn items;\n}", "CodeBleu_score": 44.34563397788401}, {"code": "public ListBoxModel getServerItems()\tListBoxModel items = new ListBoxModel();\n\tfor (GiteaServer server : GiteaServer.all()) {\n\t\tString displayName = server.getDisplayName();\n\t\tif (displayName == null || displayName.isEmpty()) {\n\t\t\tdisplayName = server.getServerUrl();\n\t\t}\n\t\titems.add(displayName, server.getServerUrl());\n\t}\n\treturn items;\n}", "CodeBleu_score": 43.59672200809273}, {"code": "public ListBoxModel getServerItems()\tListBoxModel items = new ListBoxModel();\n\tfor (GiteaServer server : GiteaServer.all()) {\n\t\tString name = server.getDisplayName();\n\t\tif (name == null || name.isEmpty()) {\n\t\t\tname = server.getUrl();\n\t\t}\n\t\titems.add(name, server.getUrl());\n\t}\n\treturn items;\n}", "CodeBleu_score": 39.62619659045165}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers)\tif (servers == null) {\n\t\tservers = Collections.emptyList();\n\t}\n\tList<GiteaServer> newServers = new ArrayList<>(servers.size());\n\tfor (GiteaServer server : servers) {\n\t\tif (server == null || server.getUrl() == null) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (server.getUrl().trim().isEmpty()) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (newServers.contains(server)) {\n\t\t\tcontinue;\n\t\t}\n\t\tnewServers.add(server);\n\t}\n\tif (!newServers.equals(this.servers)) {\n\t\tthis.servers = newServers;\n\t\tsave();\n\t}\n}", "CodeBleu_score": 34.313322471977614}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers)\tif (servers == null) {\n\t\treturn;\n\t}\n\n\t// Check for admin permissions\n\tif (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n\t\tthrow new AccessDeniedException();\n\t}\n\n\t// Remove duplicates and empty URLs\n\tList<GiteaServer> newServers = new ArrayList<>();\n\tfor (GiteaServer server : servers) {\n\t\tif (server == null || server.getUrl() == null || server.getUrl().isEmpty()) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (newServers.stream().anyMatch(s -> s.getUrl().equals(server.getUrl()))) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tnewServers.add(server);\n\t}\n\n\t// Update the servers\n\tthis.servers = newServers;\n\n\t// Save the configuration\n\tsave();\n}", "CodeBleu_score": 32.970091554805414}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers)\tcheckAdmin();\n\tif (servers == null) {\n\t\tservers = Collections.emptyList();\n\t}\n\tservers = new ArrayList<>(servers);\n\tfor (Iterator<GiteaServer> it = servers.iterator(); it.hasNext();) {\n\t\tGiteaServer server = it.next();\n\t\tif (server == null || server.getUrl() == null || server.getUrl().trim().isEmpty()) {\n\t\t\tit.remove();\n\t\t}\n\t}\n\tthis.servers = servers;\n\tsave();\n}", "CodeBleu_score": 34.97052095729581}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl)\tif (serverUrl == null || serverUrl.isEmpty()) {\n\t\treturn false;\n\t}\n\tString url = normalizeServerUrl(serverUrl);\n\tif (url == null) {\n\t\treturn false;\n\t}\n\tboolean removed = false;\n\tfor (int i = 0; i < servers.size(); i++) {\n\t\tGiteaServer server = servers.get(i);\n\t\tif (url.equals(server.getUrl())) {\n\t\t\tservers.remove(i);\n\t\t\tremoved = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (removed) {\n\t\tupdateServerList();\n\t}\n\treturn removed;\n}", "CodeBleu_score": 32.36264778960457}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl)\tserverUrl = GiteaServer.normalizeServerUrl(serverUrl);\n\tif (serverUrl!= null) {\n\t\tfor (int i = 0; i < servers.size(); i++) {\n\t\t\tGiteaServer server = servers.get(i);\n\t\t\tif (serverUrl.equals(server.getServerUrl())) {\n\t\t\t\tservers.remove(i);\n\t\t\t\tupdateServerList();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 24.48267851400473}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl)\tif (serverUrl == null) {\n\t\treturn false;\n\t}\n\tserverUrl = normalizeServerUrl(serverUrl);\n\tfor (int i = 0; i < servers.size(); i++) {\n\t\tif (serverUrl.equals(servers.get(i))) {\n\t\t\tservers.remove(i);\n\t\t\tsave();\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 25.44792535047482}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation)\t// Scan for elements annotated with the specified annotation\n\tSet<? extends Element> annotatedElements = roundEnv.getElementsAnnotatedWith(annotation);\n\n\t// Iterate over each annotated element\n\tfor (Element element : annotatedElements) {\n\t\t// Check if the annotated element is a class or an interface\n\t\tif (element.getKind() == ElementKind.CLASS || element.getKind() == ElementKind.INTERFACE) {\n\t\t\t// Retrieve the annotation instance\n\t\t\tAnnotationMirror annotationMirror = element.getAnnotation(annotation);\n\n\t\t\t// Retrieve the annotation attributes\n\t\t\tMap<? extends ExecutableElement,? extends AnnotationValue> annotationAttributes = annotationMirror.getElementValues();\n\n\t\t\t// Retrieve the annotation attribute values\n\t\t\tString name = (String) annotationAttributes.get(elementUtils.getElementValuesWithDefaults(annotation).get(NAME_ATTRIBUTE)).getValue();\n\t\t\tString description = (String) annotationAttributes.get(elementUtils.getElementValuesWithDefaults(annotation).get(DESCRIPTION_ATTRIBUTE)).getValue();\n\t\t\tString type = element.asType().toString();\n\n\t\t\t// Create a new ConfigElement with the attributes and type\n\t\t\tDescriptorElement descriptorElement = new DescriptorElement(name, description, type);\n\n\t\t\t// Add the new ConfigElement to the set of descriptor elements\n\t\t\tdescriptorElements.add(descriptorElement);\n\t\t}\n\t}\n}", "CodeBleu_score": 44.9633333276919}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation)\t// Scan for elements annotated with the specified annotation\n\tfor (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n\t\t// Get the attributes from the annotation\n\t\tConfig configAnnotation = element.getAnnotation(Config.class);\n\t\tString key = configAnnotation.key();\n\t\tString defaultValue = configAnnotation.defaultValue();\n\t\tString description = configAnnotation.description();\n\n\t\t// Convert the element's type to a string\n\t\tString type = element.asType().toString();\n\n\t\t// Add a new ConfigElement with the attributes and type to the set of descriptor elements\n\t\tdescriptorElements.add(new DescriptorElement(key, type, defaultValue, description));\n\t}\n}", "CodeBleu_score": 39.56652361995703}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation)\tfor (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n\t\tString type = element.asType().toString();\n\t\tString name = element.getAnnotation(annotation).name();\n\t\tString defaultValue = element.getAnnotation(annotation).defaultValue();\n\t\tString description = element.getAnnotation(annotation).description();\n\t\tdescriptorElements.add(new DescriptorElement(type, name, defaultValue, description));\n\t}\n}", "CodeBleu_score": 40.81335329517366}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) \tfor (TypeElement annotation : annotations) {\n\t\tString annotationName = annotation.getQualifiedName().toString();\n\t\tString targetName = annotationClass.getName().replace(\"$\", \".\");\n\t\tif (annotationName.equals(targetName)) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 42.3359737809848}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) \tString annotationClassName = annotationClass.getName();\n\tfor (TypeElement annotation : annotations) {\n\t\tif (annotation.getQualifiedName().toString().replace('$', '.').equals(annotationClassName)) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 46.61534819062774}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) \tfor (TypeElement annotation : annotations) {\n\t\tString annotationName = annotation.getQualifiedName().toString();\n\t\tif (annotationName.replace('$', '.').equals(annotationClass.getName())) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}\n", "CodeBleu_score": 38.632072292369834}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 0,\n    }\n\n    if for_approval:\n        filters[\"status\"] = \"Open\"\n        filters[\"approver\"] = approver_id\n        filters[\"docstatus\"] = 1\n        filters[\"workflow_state\"] = (\"not in\", [\"Approved\", \"Rejected\"])\n    else:\n        filters[\"workflow_state\"] = \"Approved\"\n        filters[\"status\"] = (\"not in\", [\"Cancelled\", \"Rejected\"])\n\n    return filters\n\n", "CodeBleu_score": 29.009701323635984}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n    filters = {\n        \"docstatus\": 1,\n        \"status\": \"Open\",\n        \"employee\": employee,\n    }\n\n    if for_approval:\n        filters[\"approver\"] = approver_id\n        filters[\"workflow_state\"] = (\"not in\", [\"Approved\", \"Rejected\", \"Canceled\"])\n    else:\n        filters[\"workflow_state\"] = \"Approved\"\n        filters[\"docstatus\"] = 1\n        filters[\"status\"] = \"Open\"\n        filters[\"employee\"] = employee\n        filters[\"docstatus\"] = 1\n        filters[\"name\"] = (\"not in\", get_leave_application_names_canceled_by_employee(employee))\n\n    return filters\n\n", "CodeBleu_score": 28.471980917220563}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n    filters = {\"employee\": employee}\n\n    if approver_id:\n        filters[\"approver\"] = approver_id\n\n    if for_approval:\n        filters[\"status\"] = \"Pending Approval\"\n    else:\n        filters[\"status\"] = [\"Open\", \"Approved\", \"Rejected\"]\n\n    return filters\n\n", "CodeBleu_score": 21.993376262252912}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n    current_date = datetime.now().date()\n    leave_details = get_leave_details(employee, current_date)\n    leave_balance_map = {}\n    for leave_type, leave_details in leave_details.items():\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_details[\"allocated\"],\n            \"balance\": leave_details[\"balance\"],\n        }\n    return leave_balance_map\n", "CodeBleu_score": 46.149290189586075}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n    current_date = datetime.now().date()\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_details[leave_type][\"allocated\"],\n            \"balance\": leave_details[leave_type][\"allocated\"] - leave_details[leave_type][\"taken\"]\n        }\n    return leave_balance_map\n", "CodeBleu_score": 41.209375704305614}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n    leave_balance_map = {}\n    current_date = datetime.date.today()\n    leave_details = get_leave_details(employee)\n    for leave_type, leave_data in leave_details.items():\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_data[\"allocated\"],\n            \"balance\": leave_data[\"allocated\"] - leave_data[\"used\"]\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 40.13204682781062}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = Holiday.objects.filter(holiday_list=holiday_list).exclude(description__contains=\"Weekly Off\").order_by(\"date\")\n    for holiday in holidays:\n        holiday.description = strip_tags(holiday.description)\n    return holidays\n\n", "CodeBleu_score": 29.48248471962683}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = (\n        db.session.query(Holiday)\n       .filter(Holiday.holiday_list_id == holiday_list.id)\n       .filter(Holiday.holiday_type!= \"Weekly off\")\n       .order_by(Holiday.date)\n       .all()\n    )\n    for holiday in holidays:\n        holiday.description = strip_html(holiday.description)\n    return holidays\n\n", "CodeBleu_score": 35.747209430990985}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\n    holiday_list = get_holiday_list(employee)\n    if holiday_list:\n        holidays = Holiday.query.filter(\n            Holiday.holiday_list_id == holiday_list.id,\n            Holiday.holiday_type!= \"Weekly Off\",\n        ).order_by(Holiday.date).all()\n        for holiday in holidays:\n            holiday.description = strip_tags(holiday.description)\n        return holidays\n    return []\n", "CodeBleu_score": 29.29422211076602}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n    # Get the relevant settings\n    settings = get_settings()\n\n    # Check if the HR settings specify to send reminders and the frequency is set to \"Weekly\"\n    if settings[\"send_reminders\"] and settings[\"frequency\"] == \"Weekly\":\n        # Call the function to send the reminders\n        send_reminders()\n\n", "CodeBleu_score": 11.67476143445578}, {"code": "def send_reminders_in_advance_weekly()\n    if get_hr_settings().send_reminders and get_hr_settings().reminder_frequency == \"Weekly\":\n        send_reminders_in_advance()\n\n", "CodeBleu_score": 12.173886514185206}, {"code": "def send_reminders_in_advance_weekly()\n    # Retrieve the relevant settings\n    hr_settings = get_hr_settings()\n    send_reminders = hr_settings.get('send_reminders')\n    frequency = hr_settings.get('frequency')\n    # Check if reminders should be sent and the frequency is set to \"Weekly\"\n    if send_reminders and frequency == 'Weekly':\n        send_weekly_reminders()\n\n", "CodeBleu_score": 27.639704502250222}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n    self_appraisal_score = 0\n    for self_rating in self.self_ratings.all():\n        self_appraisal_score += (self_rating.rating * 5) * (self_rating.weightage / 100)\n    self_appraisal_score = round(self_appraisal_score, 2)\n    self.self_appraisal_score = self_appraisal_score\n    self.save()\n\n", "CodeBleu_score": 25.14441236877445}, {"code": "def calculate_self_appraisal_score(self)\n    self_appraisal_score = 0\n    for entry in self.self_ratings:\n        self_appraisal_score += (entry.rating * 5) * (entry.weightage / 100)\n    self.self_appraisal_score = round(self_appraisal_score, 2)\n\n", "CodeBleu_score": 31.17799077638631}, {"code": "def calculate_self_appraisal_score(self)\n    self_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self_appraisal_score += (self_rating.rating * 5) * (self_rating.weightage / 100)\n    self.self_appraisal_score = round(self_appraisal_score, 2)\n", "CodeBleu_score": 23.603775295320638}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n    appraisal_cycle = self.appraisal_cycle\n    if appraisal_cycle.calculate_final_score_formula:\n        formula = appraisal_cycle.calculate_final_score_formula\n        formula = formula.replace('self','self_score')\n        formula = formula.replace('total', 'total_score')\n        formula = formula.replace('feedback', 'feedback_score')\n        formula = formula.replace('average', 'average_score')\n        formula = formula.replace('self_score', str(self.self_score))\n        formula = formula.replace('total_score', str(self.total_score))\n        formula = formula.replace('feedback_score', str(self.feedback_score))\n        formula = formula.replace('average_score', str(self.average_score))\n        try:\n            final_score = eval(formula)\n        except:\n            final_score = (self.self_score + self.total_score + self.feedback_score) / 3\n    else:\n        final_score = (self.self_score + self.total_score + self.feedback_score) / 3\n    self.final_score = round(final_score, 2)\n    self.save()\n\n", "CodeBleu_score": 37.79041012099975}, {"code": "def calculate_final_score(self)\n    appraisal_cycle = self.get_appraisal_cycle()\n    if appraisal_cycle.calculate_final_score_with_formula:\n        formula = appraisal_cycle.final_score_formula\n        formula = formula.replace(\"total_score\", str(self.total_score))\n        formula = formula.replace(\"average_feedback_score\", str(self.average_feedback_score))\n        formula = formula.replace(\"self_appraisal_score\", str(self.self_appraisal_score))\n        try:\n            final_score = eval(formula)\n        except Exception as e:\n            raise Exception(\"Error evaluating final score formula: {}\".format(e))\n    else:\n        final_score = (self.total_score + self.average_feedback_score + self.self_appraisal_score) / 3\n    self.final_score = round(final_score, 2)", "CodeBleu_score": 35.20550342516492}, {"code": "def calculate_final_score(self)\n    appraisal_cycle = self.env['hr.appraisal.cycle'].browse(self.appraisal_cycle_id.id)\n    if appraisal_cycle.final_score_formula:\n        self.final_score = self.calculate_formula(appraisal_cycle.final_score_formula)\n    else:\n        self.final_score = (self.total_score + self.average_feedback_score + self.self_appraisal_score) / 3.0\n        self.final_score = round(self.final_score, 2)\n", "CodeBleu_score": 17.968437276443687}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n    if self.status!= \"On Leave\":\n        if self.date > fields.Date.today():\n            raise ValidationError(_(\"Attendance cannot be marked for future dates unless the employee is on leave.\"))\n    if self.date < self.employee_id.joining_date:\n        raise ValidationError(_(\"Attendance cannot be marked for a date earlier than the employee's joining date.\"))\n", "CodeBleu_score": 19.90171693549403}, {"code": "def validate_attendance_date(self)\n    if self.attendance_date > fields.Date.today():\n        if self.status == \"On Leave\":\n            leave_application = self.env[\"hr.leave\"].search([(\"employee_id\", \"=\", self.employee_id.id), (\"state\", \"=\", \"validate\"), (\"date_from\", \"<=\", self.attendance_date), (\"date_to\", \">=\", self.attendance_date)])\n            if not leave_application:\n                raise ValidationError(_(\"Attendance cannot be marked for future dates unless the employee is on leave and there is no leave application for that date.\"))\n        else:\n            raise ValidationError(_(\"Attendance cannot be marked for future dates unless the employee is on leave and there is no leave application for that date.\"))\n    if self.attendance_date < self.employee_id.joining_date:\n        raise ValidationError(_(\"Attendance date cannot be earlier than the employee's joining date.\"))\n", "CodeBleu_score": 36.64448447404416}, {"code": "def validate_attendance_date(self)\n    if self.attendance_date < self.employee.date_of_joining:\n        raise ValidationError(\n            _(\"Attendance date cannot be earlier than the employee's date of joining.\")\n        )\n    if self.attendance_date > datetime.date.today():\n        if self.status!= \"On Leave\":\n            raise ValidationError(\n                _(\"Attendance date cannot be in the future unless the status is 'On Leave'.\")\n            )\n        if not self.leave_application:\n            raise ValidationError(\n                _(\n                    \"Attendance date cannot be in the future unless the status is 'On Leave' and there is no leave application.\"\n                )\n            )\n\n", "CodeBleu_score": 25.43336963303331}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n    if self.employee_id and self.date:\n        existing_record = self.search([('employee_id', '=', self.employee_id.id), ('date', '=', self.date)])\n        if existing_record:\n            raise ValidationError(_('Attendance record already exists for employee %s on %s. Please check the existing record at: %s') % (self.employee_id.name, self.date, existing_record.id))\n", "CodeBleu_score": 32.945419390719934}, {"code": "def validate_duplicate_record(self)\n    if self.employee_id and self.date:\n        duplicate_records = self.search([('employee_id', '=', self.employee_id.id), ('date', '=', self.date)])\n        if len(duplicate_records) > 1:\n            raise ValidationError(\n                f\"Duplicate attendance record found for employee {self.employee_id.name} on {self.date}. Existing record: {duplicate_records[0].id}\")\n\n", "CodeBleu_score": 32.24878357203997}, {"code": "def validate_duplicate_record(self)\n    if self.search_count([('employee_id', '=', self.employee_id.id), ('date', '=', self.date)]) > 1:\n        raise ValidationError(_('Attendance record already exists for employee %s on date %s. Please check the existing attendance record at %s.') % (self.employee_id.name, self.date, self.env['ir.config_parameter'].sudo().get_param('web.base.url') + '/web#id=' + str(self.id) + '&view_type=form&model=hr.attendance'))\n", "CodeBleu_score": 26.073794021272416}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n    try:\n        # Get all messages that were sent today\n        today = datetime.datetime.today()\n        today_str = today.strftime(\"%Y-%m-%d\")\n        messages = self.get_messages_sent_today(today_str)\n\n        # Get the email addresses of all users in the specified group\n        group_id = self.get_group_id(self.group_name)\n        group_members = self.get_group_members(group_id)\n        group_emails = [member[\"email\"] for member in group_members]\n\n        # Send an email with the summary using a template\n        template_path = os.path.join(os.path.dirname(__file__), \"summary_template.html\")\n        with open(template_path, \"r\") as template_file:\n            template_content = template_file.read()\n        template = Template(template_content)\n        context = {\n            \"messages\": messages,\n            \"today_str\": today_str\n        }\n        html_content = template.render(context)\n        subject = f\"Daily Summary for {today_str}\"\n        self.send_email(subject, html_content, group_emails)\n\n        # Update the status of all messages to \"Sent\"\n        self.update_message_status(messages, \"Sent\")\n\n        print(\"Summary sent successfully.\")\n    except Exception as e:\n        print(f\"Error sending summary: {e}\")\n", "CodeBleu_score": 33.210070763046}, {"code": "def send_summary(self)\n    # Get all messages from the specified group\n    messages = self.get_messages(self.group_id)\n\n    # Get the email addresses of all users in the specified group\n    group_emails = self.get_group_emails(self.group_id)\n\n    # Send an email with the summary using a template\n    self.send_template_email(group_emails, \"Daily Summary\", \"daily_summary.html\", {\n        \"messages\": messages\n    })\n\n    # Update the status to \"Sent\"\n    self.update_status(self.group_id, \"Sent\")\n", "CodeBleu_score": 24.833739863072253}, {"code": "def send_summary(self)\n    # Retrieve message details\n    message_details = self.get_message_details()\n    # Get email addresses of users in the specified group\n    email_addresses = self.get_email_addresses()\n    # Send email with summary\n    self.send_email(email_addresses, message_details)\n    # Update status to \"Sent\"\n    self.update_status(\"Sent\")\n", "CodeBleu_score": 14.00590974500529}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n    if self.id:\n        if self.job_applicant_id:\n            duplicate_interview = Interview.objects.filter(\n                job_applicant_id=self.job_applicant_id,\n                interview_round=self.interview_round,\n            ).exclude(id=self.id).first()\n            if duplicate_interview:\n                raise ValidationError(\n                    _(\n                        \"This job applicant has already been interviewed for this round. \"\n                        f\"Please see <a href='{reverse('admin:interview_change', args=(duplicate_interview.id,))}'>this interview</a>.\"\n                    )\n                )\n        if self.job_applicant_email:\n            duplicate_interview = Interview.objects.filter(\n                job_applicant_email=self.job_applicant_email,\n                interview_round=self.interview_round,\n            ).exclude(id=self.id).first()\n            if duplicate_interview:\n                raise ValidationError(\n                    _(\n                        \"This email has already been interviewed for this round. \"\n                        f\"Please see <a href='{reverse('admin:interview_change', args=(duplicate_interview.id,))}'>this interview</a>.\"\n                    )\n                )\n\n", "CodeBleu_score": 35.81795511592983}, {"code": "def validate_duplicate_interview(self)\n    if self.id:\n        duplicate_interview = Interview.objects.filter(\n            job_applicant=self.job_applicant,\n            round=self.round,\n            id__ne=self.id\n        )\n    else:\n        duplicate_interview = Interview.objects.filter(\n            job_applicant=self.job_applicant,\n            round=self.round\n        )\n    if duplicate_interview.exists():\n        raise ValidationError(\n            'Job Applicant already has an interview for this round. Please check the existing interview record for %(job_applicant)s.',\n            params={\n                'job_applicant': self.job_applicant.get_full_name(),\n            },\n        )\n\n", "CodeBleu_score": 39.19083155707238}, {"code": "def validate_duplicate_interview(self)\n    if self.applicant_id and self.interview_round_id:\n        interview = Interview.query.filter_by(applicant_id=self.applicant_id, interview_round_id=self.interview_round_id).first()\n        if interview:\n            raise ValidationError(f'Duplicate interview record for job applicant {self.applicant.name} in interview round {self.interview_round.name}. Existing interview record: {interview}')\n", "CodeBleu_score": 32.59781855496251}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n    total_rating = 0\n    count = 0\n    for assessment in self.skill_assessments:\n        if assessment.rating:\n            total_rating += assessment.rating\n            count += 1\n    self.average_rating = total_rating / count if count else 0\n\n", "CodeBleu_score": 29.850383828712395}, {"code": "def calculate_average_rating(self)\n    total_rating = 0\n    count = 0\n    for assessment in self.assessments:\n        if assessment.rating:\n            total_rating += assessment.rating\n            count += 1\n    if count == 0:\n        self.average_rating = 0\n    else:\n        self.average_rating = total_rating / count", "CodeBleu_score": 26.947208897116848}, {"code": "def calculate_average_rating(self)\n    total_rating = 0\n    number_of_assessments = 0\n    for assessment in self.skill_assessments:\n        if assessment.rating!= None:\n            total_rating += assessment.rating\n            number_of_assessments += 1\n    if number_of_assessments > 0:\n        self.average_rating = total_rating / number_of_assessments\n    else:\n        self.average_rating = 0", "CodeBleu_score": 24.86287027155679}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n    interview = Interview(interview_round=doc[\"interview_round\"], designation=doc[\"designation\"])\n    if \"interviewers\" in doc:\n        interview.interviewers = doc[\"interviewers\"]\n    return interview\n", "CodeBleu_score": 24.99851102428578}, {"code": "def create_interview(doc):\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = Interview(\n        round=doc[\"round\"],\n        designation=doc[\"designation\"],\n        interviewers=doc.get(\"interviewers\", []),\n    )\n    return interview\n\n", "CodeBleu_score": 40.017767317140084}, {"code": "def create_interview(doc):\n    interview = Interview.new(doc)\n    interview.round = doc['round']\n    interview.designation = doc['designation']\n    interview.interviewers = doc['interviewers'] if 'interviewers' in doc else []\n    return interview\n", "CodeBleu_score": 31.96090908163363}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\n    job_offers = []\n    for job_offer in self.job_offers:\n        if job_offer.designation == self.designation and job_offer.company == self.company and job_offer.status == 1 and job_offer.created_at >= from_date and job_offer.created_at <= to_date:\n            job_offers.append(job_offer.name)\n    return job_offers\n", "CodeBleu_score": 33.557596339580556}, {"code": "def get_job_offer(self, from_date, to_date)\n    return self.job_offers.filter(\n        Q(created_on__gte=from_date) & Q(created_on__lte=to_date) & Q(document_status=1)\n    )\n\n", "CodeBleu_score": 28.618625548080722}, {"code": "def get_job_offer(self, from_date, to_date)\n    job_offers = []\n    for job_offer in self.job_offers:\n        if job_offer.designation == self.designation and job_offer.company == self.company and job_offer.document_status == 1:\n            if from_date <= job_offer.created_date <= to_date:\n                job_offers.append(job_offer.name)\n    return job_offers\n", "CodeBleu_score": 33.75984234875903}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n    if company:\n        total_offers = frappe.db.count(\"Job Opening\", filters={\"docstatus\": 1, \"company\": company})\n        accepted_offers = frappe.db.count(\"Job Opening\", filters={\"docstatus\": 1, \"company\": company, \"status\": \"Accepted\"})\n    elif department:\n        total_offers = frappe.db.count(\"Job Opening\", filters={\"docstatus\": 1, \"department\": department})\n        accepted_offers = frappe.db.count(\"Job Opening\", filters={\"docstatus\": 1, \"department\": department, \"status\": \"Accepted\"})\n    else:\n        total_offers = frappe.db.count(\"Job Opening\", filters={\"docstatus\": 1})\n        accepted_offers = frappe.db.count(\"Job Opening\", filters={\"docstatus\": 1, \"status\": \"Accepted\"})\n\n    if total_offers > 0:\n        acceptance_rate = accepted_offers / total_offers * 100\n    else:\n        acceptance_rate = 0\n\n    return acceptance_rate, \"Percent\"\n", "CodeBleu_score": 31.70618038406372}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n    if not company and not department:\n        total_job_offers = frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus=1\"\"\", as_dict=True)\n        accepted_job_offers = frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus=1 AND status=\"Accepted\" \"\"\", as_dict=True)\n        return accepted_job_offers[0]['COUNT(*)'] / total_job_offers[0]['COUNT(*)']\n    elif company and not department:\n        total_job_offers = frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus=1 AND company=%s\"\"\", (company), as_dict=True)\n        accepted_job_offers = frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus=1 AND company=%s AND status=\"Accepted\" \"\"\", (company), as_dict=True)\n        return accepted_job_offers[0]['COUNT(*)'] / total_job_offers[0]['COUNT(*)']\n    elif department and not company:\n        total_job_offers = frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus=1 AND department=%s\"\"\", (department), as_dict=True)\n        accepted_job_offers = frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus=1 AND department=%s AND status=\"Accepted\" \"\"\", (department), as_dict=True)\n        return accepted_job_offers[0]['COUNT(*)'] / total_job_offers[0]['COUNT(*)']\n    else:\n        total_job_offers = frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus=1 AND company=%s AND department=%s\"\"\", (company, department), as_dict=True)\n        accepted_job_offers = frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus=1 AND company=%s AND department=%s AND status=\"Accepted\" \"\"\", (company, department), as_dict=True)\n        return accepted_job_offers[0]['COUNT(*)'] / total_job_offers[0]['COUNT(*)']\n\n", "CodeBleu_score": 23.222401058103774}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n    total_job_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1, \"company\": company, \"department\": department})\n    accepted_job_offers = frappe.db.count(\"Job Offer\", filters={\"status\": \"Accepted\", \"company\": company, \"department\": department})\n    if total_job_offers > 0:\n        return (accepted_job_offers / total_job_offers) * 100\n    else:\n        return 0\n", "CodeBleu_score": 34.115740342975606}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto)\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess()) {\n\t\treturn ResponseEntity.badRequest().body(result);\n\t}\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 65.65549254800897}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto)\tfinal Result result = employerService.register(employerForRegisterDto);\n\tif (!result.isSuccess()) {\n\t\treturn ResponseEntity.badRequest().body(result);\n\t}\n\treturn ResponseEntity.ok(result);\n}\n", "CodeBleu_score": 65.65549254800897}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto)\tResult result = employerService.register(employerForRegisterDto);\n\tif (!result.isSuccess()) {\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\t}\n\treturn new ResponseEntity<>(result, HttpStatus.OK);\n}\n", "CodeBleu_score": 70.25516682942775}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) \tfinal CompanyStaff companyStaff = companyStaffRepository.findById(companyStaffForUpdateDto.getId())\n\t\t\t.orElseThrow(() -> new NotFoundException(\"Company staff not found\"));\n\n\tif (!passwordEncoder.matches(companyStaffForUpdateDto.getOldPassword(), companyStaff.getPassword())) {\n\t\treturn Result.failure(\"Invalid password\");\n\t}\n\n\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\n\tcompanyStaffRepository.save(companyStaff);\n\n\treturn Result.success();\n}", "CodeBleu_score": 41.22048106909624}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) \t// Retrieve the staff record by ID\n\tfinal Optional<CompanyStaff> staffOptional = companyStaffRepository.findById(companyStaffForUpdateDto.getId());\n\tif (!staffOptional.isPresent()) {\n\t\treturn Result.failure(String.format(\"Staff with ID %d not found\", companyStaffForUpdateDto.getId()));\n\t}\n\n\t// Check business rules\n\tfinal CompanyStaff staff = staffOptional.get();\n\tif (!staff.getPassword().equals(companyStaffForUpdateDto.getPassword())) {\n\t\treturn Result.failure(\"Invalid password\");\n\t}\n\n\t// Update the staff's first and last names\n\tstaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tstaff.setLastName(companyStaffForUpdateDto.getLastName());\n\n\t// Save the changes\n\tcompanyStaffRepository.save(staff);\n\n\t// Return success result indicating the staff was updated\n\treturn Result.success();\n}", "CodeBleu_score": 42.607247535768735}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) \treturn new Result(() -> {\n\t\tfinal CompanyStaff companyStaff = companyStaffRepository.findById(companyStaffForUpdateDto.getId())\n\t\t\t\t.orElseThrow(()->new NotFoundException(\"Staff not found\"));\n\t\tif(!companyStaff.getPassword().equals(companyStaffForUpdateDto.getPassword())){\n\t\t\treturn Result.failure(\"Invalid password\");\n\t\t}\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tcompanyStaffRepository.save(companyStaff);\n\t\treturn Result.success(\"Staff updated successfully\");\n\t});\n}", "CodeBleu_score": 44.718492572487335}]}
